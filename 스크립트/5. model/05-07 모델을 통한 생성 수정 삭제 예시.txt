안녕하세요. 이번 시간에는 모델을 통한 생성, 수정, 삭제 예시 코드를 살펴보겠습니다.
먼저, 새로운 장고 앱으로 블로그 앱을 생성하시고요.
Settings에 Installed Apps List에 블로그 앱을 등록해 주세요.
그래야만 앱 디렉토리 내 모델 스파이에 모델 클래스를 장고가 인지하고, 마이그레이션 명령을
통해 데이터베이스 테이블을 생성할 수 있습니다.
블로그 밑에 모델 스파이 경로에 포스트 모델을 정의해주세요.
슬라이드 하단에 안내된 페이지에서 소스 코드를 복사하실 수 있습니다.
제목 필드로서 Title 필드, 내용 필드로서 Content 필드를 정의하고, 포스팅의
상태를 저장하는 Status 필드로 정의합니다.
Status 필드는 Choices 인자를 통해 선택지를 지정했습니다.
Choices 속성은 모든 모델 필드의 지원합니다.
문자열 모델 필드에서 입력 선택지를 제공할 때에는 TextChoices 클래스를 통해
선택지를 제공하시면 코디셋 작성 시에 입력 값 오류를 제거하고 가독성 높은 코드를 작성하실
수 있습니다.
모델의 TextChoices 클래스를 상속받은 Status 클래스를 정의하고 상수, 값,
레이블 포맷으로 선택지를 다수 정의합니다.
코디셋 작성이나 디폴트 값 지정 시에는 정의하신 상수를 사용하시며 데이터베이스 코디에는 값
부분이 자동으로 사용됩니다.
유저에게 HTML 웹페이지에서 선택지가 보여질 때에는 레이블 부분으로 자동으로 처리되고요.
장고 기본에서 모델의 TextChoices 외에 모델의 IntegerChoices도
지원됩니다.
포스팅의 생성 시각과 수정 시각을 저장하기 위해서 데이트 타임 필드에
AutoNowAddOptionTrue 그리고 Auto_now=True를 지정하여
필드를 추가합니다.
PostModel 인스턴스에서 Status 속성으로 접근하시면 값으로써 대문자 D나 대문자
P 값이 조회됩니다.
Label 조회를 위해서는 .get__fieldname__display 함수를 호출하시면
반환값으로 레이블 문자열이 반환됩니다.
PostModel 클래스 정의가 끝난 후에 python manage.py
makemigrations 블로그 명령과 PythonManagePy MigrateBlog
명령으로 블로그 앱에 PostModel에 대한 마이그레이션 파일을 생성하고 데이터베이스에
적용하시면 blog__postdatabase 테이블이 생성됩니다.
python manage.py startapp 블로그 명령으로 새로운 장고 앱 블로그를 생성하시고요.
settings의 인스톨 앱 리스트에다가 블로그 앱 이름도 추가해 줍니다.
이어서 블로그 앱의 models.py 경로에다가 이 소스 코드를 복사해서 이렇게 적용을 해
주시고요 python manage.py makemigrations 블로그 명령으로 블로그
앱에 0001.initial.py라는 마이그레이션 파일을 생성을 해 주시고요
해당 마이그레이션 파일을 열어보시면은 Operations List에
CreateModel이라는 오퍼레이션이 있습니다
이 오퍼레이션이 수행이 되면은 현재 Settings의 Databases에 설정되어 있는
데이터베이스에 해당 데이터베이스 테이블이 생성이 됩니다
python manage.py migrate 블로그 명령을 수행해 보시면 이렇게 해당 마이그레이션이
Apply 즉, 적용이 되었고요
현재 프로젝트 settings에서 바라보고 있는 데이터베이스에서 새로 고침해 보시면 테이블이 있고
마우스 우클릭하시고 모디파이 테이블 창을 띄워 보시면 해당 테이블에 대해서 컬럼 내역과 키
정보와 외래키 정보, 인덱스 내역, 세부 테이블 내역을 확인하실 수 있고요 우리가 만든
포스트 모델 내역대로 테이블이 생성이 되었습니다 생성 예시입니다.
수행되는 SQL 확인을 위해 python manage.py shell_plus --print-sql 명령으로 장고
셸을 구동하신 후에 제가 설명드리는 코드를 하나하나 실습을 진행해 주시고, 출력되는
SQL도 꼭 같이 확인을 해주세요.
첫 번째 생성 예시로서 모델 클래스 생성자를 통한 인스턴스 생성입니다.
새로운 모델 인스턴스를 생성할 때, 생성자로 각 필드의 값을 지정할 수 있으며, 생성된
모델 인스턴스의 속성을 통해서도 값을 지정할 수 있습니다.
save 함수를 호출하여 데이터베이스에 저장합니다.
PostgreSQL 기준으로 아래에 인서트 쿼리가 발생됩니다.
두 번째 예시로써 모델 매니저의 create 함수를 통한 인스턴스 생성입니다.
create 함수를 호출하는 즉시 데이터베이스로의 저장을 시도하고, 저장된 모델 인스턴스를
반환 받으실 수 있습니다.
create 함수 내부 구현에서는 키워드 인자로 전달된 값으로 위 첫 번째 방법과 동일하게
모델 인스턴스를 생성한 후에 save 함수를 호출하여 저장합니다.
세 번째 예시로써 다수의 인스턴스를 생성하고 각각 save 함수를 호출하여 개별적으로 저장하는
예시입니다. 인스턴스의 개수만큼 insert query가 발생되기 때문에 네트워크 오버헤드
및 데이터베이스 부하가 크게 증가할 수 있습니다.
네 번째 예시로써 아직 저장하지 않은 모델 인스턴스들의 리스트를 만들고 bulk
create 함수를 통해 일괄 저장하는 예시입니다.
일괄 저장 후에 저장된 인스턴스 리스트를 반환합니다.
대량의 데이터를 저장할 때 유용합니다.
함수 호출 시에 배치 사이즈 인자로 지정된 크기만큼 인서트 쿼리를 모아서 실행하기 때문에
네트워크 지형과 데이터베이스 부하를 크게 줄일 수 있습니다.
하지만 모델에 save 함수를 호출하지 않기 때문에 만약 save 함수에 비즈니스 로직을
구현하셨고 호출이 꼭 필요한 경우에는 개별 저장이 더 적합할 수 있습니다 직접 SQL
쿼리를 실행한 생성입니다 장고에서 관리하는 데이터베이스 연결을 얻어서 SQL 쿼리를 직접
작성하여 실행하실 수 있습니다
우리가 직접 커넥션을 관리할 필요가 없고 장고에서 커넥션을 관리해주기 때문에 편리합니다
데이터베이스 종류에 상관없이 커넥션과 커서를 얻는 방법은 동일하며 수행할 SQL 쿼리를
데이터베이스에 따라 다르게 지정합니다
하지만 이 방식은 모델의 혜택을 누릴 수 없습니다.
SQL을 직접 작성하고 실행하는 방식은 강력하지만 오류 발생 가능성이 높고 유지 보수가
어려울 수 있습니다.
이 방법은 특별한 경우에만 사용하고 가능하면 장고 모델을 활용하기를 권장합니다.
수정 예시입니다.
첫 번째 예시로서 개별 인스턴스를 조회하고 필드 값을 변경한 후에 저장합니다.
세이브 함수를 호출하는 시점에 데이터베이스로 업데이트 쿼리가 수행됩니다.
장고에서는 모든 필드를 업데이트함으로써 인스턴스의 상태가 데이터베이스에 정확하게 반영되어,
일관성 있는 데이터 상태를 유지할 수 있습니다.
모델의 여러 기능들을 100% 활용할 수 있고요.
업데이티드 앱 필드의 AUTO NOW TRUE 옵션은 세이브 함수 내에서 처리됩니다.
본 예시는 세이브 함수를 통한 저장이기에 업데이티드 앱 필드에는 현재 시각이 자동으로
지정됩니다. 세이브 함수의 업데이트 필드 인자로 업데이트할 필드만 지정하실 수도 있습니다.
두 번째 예시로서 코디셋을 순회하며 개별 모델 인스턴스 필드 값을 변경하고 개별 저장하는
방법입니다. 매 인스턴스마다 save 함수를 통해서 저장하기에 첫 번째 예시의 특성을
그대로 가집니다.
대신 많은 수의 개별 모델 인스턴스에 대해 각각 업데이트 코디가 수행되므로 네트워크 지연
및 데이터베이스 부하가 크게 증가할 수 있습니다.
세 번째 예시로써, 코디셋을 순회하며 개별 인스턴스 필드 값을 변경하고 저장 시에는
Bulk Underbar Update를 통해 일괄 저장하는 예시입니다.
함께 저장하는 모델 인스턴스들의 업데이트하는 필드가 같을 경우에 사용할 수 있습니다.
개별 저장보다 나은 성능을 가지지만 모델에 save 함수를 호출하지 않습니다.
save 함수에 비즈니스 로직을 구현하여 함수 호출이 필요한 경우에는 개별 저장이 더
적합할 수 있습니다.
네 번째 예시로서 데이터베이스에서 문자열 조합 및 일괄 업데이트하는 예시입니다.
concat 함수는 SQL 쿼리에서 concat 함수를 생성합니다.
데이터베이스 레벨에서 업데이트를 수행하기에 가장 빠른 성능을 가집니다.
하지만 모델 레벨에 추가적인 로직이나 유효성 검사를 전혀 적용할 수 없습니다.
대량의 블로그 포스트 제목을 일괄적으로 변경하거나 특정 조건에 따라 여러 레코드의 상태를
업데이트하는 등의 경우에 적합합니다.
삭제 예시입니다.
첫 번째 예시는 개별 인스턴스를 조회하고 삭제합니다.
두 번째 예시는 지정 조건으로 조회한 후에 코디셋을 순회하며 개별 삭제합니다.
이 방법은 개별 인스턴스마다 별도 딜리트 코디로 삭제를 하므로 대량의 데이터를 삭제하는
데에는 비효율적일 수 있습니다.
세 번째 예시는 조회 없이 단일 Delete Query로 삭제합니다.
대량의 데이터를 삭제할 때 효율적입니다.



이번 시간에는 Django 모델을 사용한 생성, 수정, 삭제 작업을 다루며 각 방법에 대한 예시를 살펴보았습니다. 다음은 각 작업에 대한 핵심 개념과 코드 예시를 정리한 내용입니다.

1. 모델 생성
모델 정의 (Post 모델)
모델 정의:
Title, Content, Status, Created At, Updated At 필드를 포함한 Post 모델을 정의합니다.
Status 필드는 Choices 속성을 사용해 선택지를 제공하고, TextChoices 클래스를 통해 상수와 레이블을 설정합니다.

from django.db import models

class Post(models.Model):
    class Status(models.TextChoices):
        DRAFT = 'D', 'Draft'
        PUBLISHED = 'P', 'Published'

    title = models.CharField(max_length=200)
    content = models.TextField()
    status = models.CharField(
        max_length=1,
        choices=Status.choices,
        default=Status.DRAFT
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

마이그레이션 생성 및 적용:
python manage.py makemigrations blog 명령어로 마이그레이션 파일을 생성하고,
python manage.py migrate blog 명령어로 데이터베이스에 적용합니다.

python manage.py makemigrations blog
python manage.py migrate blog

SQL 쿼리:
마이그레이션 후 데이터베이스 테이블이 생성되며, PostgreSQL과 같은 데이터베이스에서 CREATE TABLE SQL이 실행됩니다.


2. 생성 예시
모델 인스턴스 생성 후 저장:
save() 메서드를 사용하여 새로운 인스턴스를 생성하고 저장합니다. 이때, INSERT SQL 쿼리가 실행됩니다.

post = Post(title='New Post', content='This is a new post.', status=Post.Status.PUBLISHED)
post.save()  # SQL: INSERT INTO blog_post (title, content, status, created_at, updated_at) VALUES (...)

모델 매니저 create() 함수 사용:
create() 메서드를 사용하면 인스턴스가 생성되자마자 바로 저장됩니다.

post = Post.objects.create(title='New Post', content='This is a new post.', status=Post.Status.PUBLISHED)

다수의 인스턴스 생성:
여러 인스턴스를 각각 save() 메서드로 저장하면, 각 인스턴스에 대해 별도의 INSERT 쿼리가 실행됩니다.

posts = [Post(title='Post 1', content='Content 1'), Post(title='Post 2', content='Content 2')]
for post in posts:
    post.save()  # 여러 번 INSERT 쿼리 실행

일괄 저장 (Bulk Create):
bulk_create()를 사용하면 여러 인스턴스를 한 번에 데이터베이스에 저장할 수 있습니다. 네트워크 오버헤드를 줄이고 성능을 향상시킬 수 있습니다.

posts = [Post(title='Post 1', content='Content 1'), Post(title='Post 2', content='Content 2')]
Post.objects.bulk_create(posts)  # 한 번에 INSERT 쿼리 실행

직접 SQL 쿼리 실행:
Django에서 데이터베이스 커넥션을 통해 직접 SQL 쿼리를 실행할 수 있습니다. 그러나 모델의 기능을 사용하지 않으므로 유지보수에 어려움이 있을 수 있습니다.

from django.db import connection

with connection.cursor() as cursor:
    cursor.execute("INSERT INTO blog_post (title, content) VALUES (%s, %s)", ['New Post', 'Content'])


3. 수정 예시
개별 인스턴스 수정:
save() 메서드를 호출하여 필드 값을 변경하고 저장합니다. 이때 UPDATE SQL 쿼리가 실행됩니다.

post = Post.objects.get(id=1)
post.title = 'Updated Post'
post.save()  # SQL: UPDATE blog_post SET title='Updated Post', ... WHERE id=1

다수의 인스턴스 수정 (개별 저장):
여러 인스턴스를 순회하며 각 인스턴스의 필드를 변경한 후 저장합니다. 각 save() 호출 시마다 UPDATE 쿼리가 발생합니다.

posts = Post.objects.all()
for post in posts:
    post.status = Post.Status.PUBLISHED
    post.save()  # 개별 UPDATE 쿼리 실행

일괄 수정 (Bulk Update):
bulk_update()를 사용하면 여러 인스턴스를 한 번에 업데이트할 수 있습니다. 이때 UPDATE 쿼리가 한 번만 실행됩니다.

posts = Post.objects.all()
for post in posts:
    post.status = Post.Status.PUBLISHED
Post.objects.bulk_update(posts, ['status'])  # 한 번에 UPDATE 쿼리 실행

데이터베이스 레벨에서 일괄 수정 (SQL 직접 실행):
F() 객체와 update() 메서드를 사용하여 데이터베이스에서 직접 업데이트 작업을 수행할 수 있습니다.

from django.db.models import F
Post.objects.filter(status=Post.Status.DRAFT).update(status=F('status'))


4. 삭제 예시
개별 인스턴스 삭제:
delete() 메서드를 사용하여 개별 인스턴스를 삭제할 수 있습니다. DELETE SQL 쿼리가 실행됩니다.

post = Post.objects.get(id=1)
post.delete()  # SQL: DELETE FROM blog_post WHERE id=1
다수의 인스턴스 삭제 (개별 삭제):
여러 인스턴스를 순회하며 삭제합니다. 이때 각 삭제마다 DELETE 쿼리가 실행됩니다.

posts = Post.objects.all()
for post in posts:
    post.delete()  # 개별 DELETE 쿼리 실행

조건에 맞는 인스턴스 일괄 삭제:
조건에 맞는 여러 인스턴스를 한 번에 삭제하려면 delete() 메서드를 사용합니다. 이때 DELETE SQL 쿼리가 한 번만 실행됩니다.

Post.objects.filter(status=Post.Status.DRAFT).delete()  # 한 번에 DELETE 쿼리 실행

정리
생성: save()와 create() 메서드를 사용하여 모델 인스턴스를 생성하고 저장합니다. 대량 생성 시 bulk_create()를 사용하여 성능을 최적화할 수 있습니다.
수정: 개별 인스턴스 수정 시 save()를 호출하여 업데이트하고, 대량 수정 시 bulk_update()를 사용하면 효율적으로 처리할 수 있습니다.
삭제: delete()를 사용하여 개별 인스턴스를 삭제하고, 조건에 맞는 대량 삭제는 filter()와 delete()를 조합하여 수행할 수 있습니다.
각 방법은 상황에 맞게 선택하여 사용하면 되며, 대량의 데이터를 처리할 때는 bulk_create, bulk_update, **delete()**와 같은 대량 처리 방법을 활용하는 것이 성능에 유리합니다.