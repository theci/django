안녕하세요. 이번 시간에는 장고 쉘에 대해서 살펴보겠습니다.
장고 쉘은 Python manage.py 쉘 명령으로 구동합니다.
장고 환경이 로딩된 상태로 쉘이 구동된다는 것 외에는 일반 파이썬 쉘과 동일합니다.
파이썬 쉘이 기본 파이썬 쉘 외에도 IPython이나 비파이썬 쉘이 있습니다.
장고 쉘 구동시에 IPython이나 bpython이 설치되어 있으면 해당 쉘이 우선순위를 가집니다.
아이파이썬 쉘은 색상 지원, 자동완성, 히스토리 관리, 커스터마이징 지원 등의 편리한
기능이 많기에 IPython을 꼭 설치해서 쓰고 있습니다.
PIP 인스톨 아이파이썬 명령 후에 다시 장고 쉘을 구동해보세요.
마지막 슬라이드에서 다루는 Django Extensions 라이브러리의 쉘 플러스 명령이 정말 좋습니다.
제가 매일 사용하는 쉘입니다.
장고 프로젝트를 구동하기 위해서는 Django settings 모듈 환경 변수의 설정이 중요합니다.
이 환경 변수는 장고 프로젝트에서 사용할 설정 파일의 위치를 지정하며, 장고 프로젝트는 장고의 기본 설정인 global_settings.py와 지정된 설정 파일을 결합하여
프로젝트의 설정으로써 사용합니다.
외부에서 Django settings 모듈 환경 변수가 지정되면 해당 환경 변수 값을 사용하기 위해 장고 setting.py 모듈 환경 변수 값을 강제로 설정하지 않습니다.
os.inviron은 파이썬 프로세스의 환경 변수들을 관리하는 언더바 인바이런트 클래스의 인스턴스로서 사전과 유사한 인터페이스를 제공합니다.
setDefault 메서드는 지정된 키에 해당하는 환경 변수가 없을 때 사용할 기본값을 설정합니다. 
즉, Django settings 모듈 환경면수가 미리 설정되어 있지 않다면 mysite.settings가 기본값으로 사용됩니다.
사용할 장고 프로젝트가 파이썬 실행 경로가 아닌 타 위치에 있다면 시스템 패스 리스트에 장고 프로젝트 루트 경로를 추가합니다.
그러면 현재 경로에서 타 경로에 장고 프로젝트를 임포트 할 수 있습니다.
팁으로써, 윈도우에서의 경로 구분자는 역슬래시지만, 파이썬 코드 내에서 문자열로 경로를 지정할 때에는 슬래시를 처리하더라도 되게 잘 처리가 됩니다.
이렇게 환경 변수를 설정한 후, 장고점 셋업 함수를 호출하면 장고 프로젝트의 설정이 완료됩니다. 
이 과정을 통해 프로젝트의 데이터베이스, 모델, 캐시, 템플릿, 스태틱 파일 등 모든 리소스에 접근할 수 있게 되며 장고 프로젝트가 구동될 준비가 끝난 것입니다.
수동으로 장고 환경을 로딩하는 방법은 주피터 노트북이나 커스텀 파이썬 스크립트에서 장고 모델, 캐시 등의 장고 구성 요소를 사용할 때 유용한 방법이니 꼭 기억해 두세요.
장고 Extensions 라이브러리는 다양한 장고 편의 기능을 제공해 주는데요. 
그 중에 장고 쉘 플러스 명령에서 Print SQL 옵션을 사용하시면, Shell 사용 중에 발생하는 SQL과 수행 시각, 접속한 데이터베이스를 자동으로 화면에 출력해 줍니다.
같은 쿼리셋을 쓰더라도 데이터베이스마다 수행되는 SQL이 다르거든요.
각 쿼리셋 코드가 어떤 SQL로 수행되는지 손쉽게 살펴볼 수 있기에 쿼리셋을 이해하는데 큰 도움이 됩니다.
다음 에피소드에서 프로젝트에 적용해 보겠습니다.