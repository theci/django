안녕하세요. 이번 시간에는 Django Extensions 라이브러리에 대해서 살펴보겠습니다.
먼저 설치 방법은요.
아이파이썬과 함께 Django-extensions 라이브러리를 설치하시고요.
mysite프로젝트의 settings.py에 Installed Apps에다가 Django Underbar Extensions라는 Django 앱 이름을 추가해 주시면 설치는 끝납니다.
먼저 requirements.txt 파일을 여신 다음, Django Extensions 라이브러리 이름을 추가하시고, 현재 최신 버전이 3.2.3 버전이네요.
설치를 해 주겠습니다.
그리고 Settings 파일에서 Django Extensions 이름을 추가해 주시면 설치가 끝납니다.
Django Extensions 라이브러리를 통해 지원되는 장고 관리 명령 중에서 필수 명령을 몇 개 살펴보겠습니다. 
그 중에 여기 노란색으로 표시한 이 세 개 명령 위주로 살펴보겠고요.
show__urls라는 명령은 프로젝트의 모든 URL 패턴을 출력하는 기능입니다.
프로젝트에 정의된 모든 URL 경로와 연결된 뷰 목록을 테이블 혹은 JSON 등 원하는 포맷으로 출력을 하실 수 있겠고요.
전체 URL 경로를 한눈에 파악할 수 있기 때문에 어떤 주소의 요청이 어떤 뷰를 통해 처리되는지, 라우팅 문제가 발생했을 때 이를 손쉽게 해결하고 프로젝트 구조를 이해하는 데에
도움이 됩니다.
그리고 shell_plus라는 명령은 Print SQL이라는 옵션이 제공되는데요.
이를 활용하면 장고 쉘에서 수행된 SQL내역이 자동으로 출력이 됩니다.
QuerySet을 통해 수행된 SQL뿐만 아니라 직접 작성한 로우 SQL 코디에 대한 실행내역 및 수행시간, 실행된 데이터베이스 이름까지 내역을 볼 수 있습니다.
장고 쿼리셋을 활용해서 데이터베이스에 대한 조회를 수행했을 때, 언제 데이터베이스 조회가 발생하는지, 
그리고 실행되는 SQL 코디가 무엇인지 즉시 확인할 수 있기 때문에, 이는 데이터베이스 작업에 대한 이해와 최적화에 큰 도움을 줍니다.
이어서 printSettings 명령입니다.
print_settings 명령은 현재 프로젝트에 적용된 최종 세팅스 내역을 출력합니다.
Django는 Django 기본의 settings.py와 현재 프로젝트의 설정을 서로 결합하여 프로젝트에 적용하기 때문에 
프로젝트에 적용된 최종 설정을 확인하려면 직접 값을 출력할 수밖에 없었습니다. 
이 명령을 활용하면 최종 설정 내역을 한눈에 살펴볼 수 있어서 설정 파악이 훨씬 용이합니다 
특히 배포 시에 환경 변수를 통한 설정 설정이 올바르게 설정되었는지 확인할 때 유용합니다



Django Extensions 라이브러리

설치 방법:
라이브러리 설치: Django Extensions 라이브러리를 설치하려면 requirements.txt 파일에 라이브러리 이름을 추가하고, 최신 버전인 3.2.3을 설치합니다.
설정: 설치 후 settings.py 파일의 INSTALLED_APPS에 'django_extensions'를 추가하여 설정을 완료합니다.

주요 명령어:
show_urls:
프로젝트에 정의된 모든 URL 패턴과 연결된 뷰 목록을 출력합니다.
출력 형식은 테이블, JSON 등으로 지정할 수 있습니다.
전체 URL 경로와 라우팅 구조를 한눈에 파악할 수 있어, 라우팅 문제 해결과 프로젝트 구조 이해에 유용합니다.

shell_plus:
Django 쉘을 확장한 명령어로, Print SQL 옵션을 제공하여 쿼리셋을 실행할 때 수행된 SQL 쿼리 내역을 출력합니다.
직접 작성한 로우 SQL 코드도 포함하여, 실행된 SQL 및 그에 대한 수행 시간, 사용된 데이터베이스 이름 등을 확인할 수 있습니다.
데이터베이스 작업에 대한 이해를 돕고 최적화 작업에 유용합니다.

print_settings:
프로젝트에 적용된 최종 설정 내역을 출력합니다.
Django의 기본 settings.py와 프로젝트 설정이 결합되어 적용되므로, 최종 적용된 설정을 확인하는 것이 중요합니다.
배포 시 환경 변수가 제대로 설정되었는지 확인할 때 유용합니다.

결론: Django Extensions는 프로젝트의 URL, 데이터베이스 쿼리, 설정 등을 확인하고 관리할 수 있는 유용한 명령어들을 제공하여 개발 및 디버깅을 더 효율적으로 만들어 줍니다.