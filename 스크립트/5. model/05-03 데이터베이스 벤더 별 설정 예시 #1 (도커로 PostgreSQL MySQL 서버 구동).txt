안녕하세요. 이번 시간에는 데이터베이스 벤더 별 설정 예시입니다.
SQLite는 파이썬이 설치되어 있으면 바로 사용할 수 있는 아주 강력한 파일 기반의 데이터베이스입니다.
복잡한 설정이나 별도의 서버 구축이 필요 없고요.
간편하게 서버 프로세스에 통합되는 라이브러리 형태로 제공됩니다.
하나의 파일 형태로 데이터가 저장이 되기 때문에 간단한 복사와 붙여넣기도 데이터 백업과 이전이 가능해 매우 편리합니다.
동시에 여러 작업을 처리하는 능력에는 한계가 있지만, 이를 개선하기 위한 다양한 옵션도 지원합니다. 
파일 기반의 데이터베이스이기 때문에 여러 컴퓨터 간 데이터 공유는 어려운 점이 있습니다. 
이런 단점을 극복하기 위해 라이트스트림과 라이트FS와 같은 프로젝트가 개발되어 데이터베이스의 실시간 복제와 지속적인 백업을 가능하게 합니다.
비록 SQLite의 동시성 처리 능력이 MySQL이나 PostgreSQL과 같은 서버 기반의 데이터베이스 시스템과는 비교되지 않지만, 
데이터베이스 관리가 필요 없다는 장점과 소규모 웹서비스에 적합한 성능을 제공합니다.
SQLite 데이터베이스를 사용하려면, 장고 Settings에 Databases 설정에서 엔진 설정으로는 장고 DB Backends에 SQLite3를 지정하고, 
Name 설정으로 SQLite 데이터베이스 파일의 절대 경로를 지정합니다.
만약 새로운 경로가 지정이 되면, 테이블이 하나도 없는 빈 데이터베이스가 생성됨에 유의해주세요.
파이썬 기본에 SQLite3 드라이버가 포함되어 있어, 추가 라이브러리 설치가 필요 없습니다. 
다양한 데이터베이스가 있으며, 팀이 효과적으로 관리할 수 있는 데이터베이스를 선택하는 것이 중요합니다.
장고는 MySQL, MariaDB, PostgreSQL, Oracle 데이터베이스를 기본 지원하고, 
SQL 서버는 3rd party 라이브러리를 통해 사용이 가능합니다.
이 강의에서 다루는 내용은 SQLite를 포함한 모든 지원되는 데이터베이스에 적용됩니다.
프리스타일 SQL을 사용하여 진행하지만 SQLite를 그대로 사용해도 전혀 문제가 없습니다. 
실습 코드는 데이터베이스에 상관없이 동일합니다.
데이터베이스 설치에는 여러 가지 방법이 있습니다.
각 운영체제에 맞는 배포판을 공식 웹사이트에서 다운로드하여 설치하실 수도 있고요.
혹은 도커를 사용하실 수도 있습니다.
도커를 활용하면 명령 한 줄로 다양한 소프트웨어 환경을 쉽게 구축할 수 있습니다.
본 강의에서는 도커 설치 과정은 다루지 않으니, 도커 데스크탑에 공식 문서를 참조하여 도커를 먼저 설치해 주세요.
도커가 준비되면 도커 런 명령을 사용해서 개별 컨테이너를 생성하고 실행하실 수 있으며, 도커 컴포즈를 활용하면 여러 컨테이너를 동시에 관리하며 실행하는 것이 가능합니다.
도커를 다 설치하셨다면, 도커 PS 명령을 실행하실 수 있겠고요.
오류 없이 수행이 되면, 이와 같은 출력이 나옵니다.
현재 머신에서 구동 중인 컨테이너 목록을 확인하실 수 있겠고요.
슬라이드 하단에 안내해 드린 링크를 클릭하시면, 이 페이지가 뜨고요.
이 첫 번째 명령을 수행하면, 여러분들이 도커로 현재 로컬에 PostgreSQL 데이터베이스 컨테이너를 하나 띄우시는 겁니다.
사용하는 도커 이미지는 PostgreSQL고요.
컨테이너 이름은 PostgreSQL이며, PostgreSQL 서버의 기본 포트 번호는 5432입니다.
이 PostgreSQL 컨테이너는 5432 포트로 요청을 받아서 컨테이너 안에 PostgreSQL 서버에 5432 포트로 트래픽을 전달하도록 "-p" 옵션을 지정하고요.
환경 변수를 통해 PostgreSQL 유저명과 PostgreSQL 암호, 그리고 PostgreSQL 데이터베이스 명을 지정하여 Postgres 컨테이너를 생성, 구동합니다.
MySQL 서버의 기본 포트 번호는 3306번 포트이며, MySQL 컨테이너도 마찬가지로 구동하되, 
MySQL 루트 암호와 MySQL 데이터베이스 명, MySQL 유저명, MySQL 암호를 지정하여 MySQL 컨테이너를 생성, 구동합니다.
이 명령을 하나씩 구동해 보겠습니다
새로운 컨테이너를 만들 때 해당 이름의 이미지가 현재 로컬에 없기 때문에 해당 이미지를 현재 다운을 받고 있겠고요 
이미지 다운로드가 끝난 후에 컨테이너가 생성이 됩니다
이번에는 MySQL 컨테이너를 생성해 보겠습니다.
명령을... 복사해서
실행해 주시고요.
이 이름에 도커 컨테이너 이미지가 없을 경우 이렇게 다운로드 후에 컨테이너가 생성이 되고,
이미지가 있을 경우에는 이미지 다운로드 과정 없이 즉시 컨테이너가 생성이 됩니다.
MySQL 컨테이너까지 생성이 되었고요.
docker ps 명령을 내려보시면 이렇게 MySQL 컨테이너도 생성이 되었음을 확인하실 수 있습니다. 
현재 구동 중인 컨테이너를 정지시키려면 도커 STOP 명령을 통해서 삭제를 하실 수 있습니다.
그런데 정지 없이 삭제하시려면 삭제할 때 "-f" 강제 옵션을 지정하시면 정지 없이 삭제하실 수 있습니다. 
도커 PS 명령으로 현재 구동 중인 컨테이너 목록을 확인하실 수 있겠고요.
도커 PS-A 옵션을 통해서 현재 정지 상태인 도커 컨테이너 목록까지도 확인하실 수 있습니다. 
ps-a 옵션에서도 출력되는 컨테이너 목록이 하나도 없죠
모든 컨테이너가 다 삭제된 상황입니다
이번에는 docker-compose를 활용해서 PostgreSQL 서버와 MySQL 서버를 하나의 명령으로 두 개의 데이터베이스 서버를 띄워보겠습니다
먼저 docker-compose.yaml 파일을 생성을 해주겠습니다
말장구 04의 루트 경로에다가 생성을 하겠고요.
이 내용을 그대로 복사를 해주겠습니다.
자, 현재 경로에 many.py가 있고, docker-compose.yaml 파일도 있죠? 
여기에서 docker-compose up-d 옵션을 줘서 실행을 해주세요.
현재 이 이름의 도커 이미지가 이미 현재 머신에 다운로드가 된 상황이고 
mysql:latest 이미지도 이미 다운로드가 된 상황이기 때문에 이미지 다운로드 없이 즉시 컨테이너가 생성이 되었음을 확인하실 수 있고요
그리고 docker-compose ps 명령을 통해서 mysql 서버가 현재 구동 중이고,
postgres 서버가 현재 구동 중임을 확인하실 수 있습니다
이 서비스들을 모두 한 번에 중지시키려면 docker-compose down 명령을 실행하시면 이렇게 한 번에 서비스가 정지되고 삭제까지 되었음을 확인하실 수 있고요.
docker ps 명령 해보시면 목록이 없고, "-a" 옵션으로도 목록이 없음을 확인하실 수 있습니다.
docker-conforce-up-d 명령을 다시 실행하셔가지고요.
mysql 서버와 PostgreSQL 서버를 다시 생성 및 구동을 해주시고요.
파이참에 있는 데이터베이스 클라이언트 기능을 활용해서 PostgreSQL 서버와 MySQL 서버에 접속을 한번 해보겠습니다
데이터베이스 탭에서 플러스 하시고 데이터 소스에서요 포스쿠엑스 SQL이 있을 거고요 
전 한번 선택했었기 때문에 위에 나오네요
현재 개발 머신에서 PostgreSQL 서버와 마이 스퀘어 서버가 돌고 있으니까 서버의 호스트는 로컬 호스트가 될 것이고요 Postgres 서버가 5432번 포트로 현재 구동 중이잖아요
그래서 이 포트 번호를 여기에 써 주시고 그리고 유저명은 myuser고요 암호는 mypw, 데이터베이스 명은 mydb입니다.
이렇게 하시고, 파이참에서 PostgreSQL SQL 드라이버가 설치 안 되어 있으시면 설치해 주시고, 
연결을 확인해 보시면 연결 확인이 되고, 어플라이에 OK 하시면 이렇게 Postgres SQL 서버에 접속이 이렇게 되었습니다.
그리고 플러스 눌러서 데이터 소스에서 이번에는 MySQL 선택하시고요.
마이 스케일의 경우에는 3306번 포트죠.
3306번 포트고, 유저명은 mysql-user, 암호는 mysql-pw, 그리고 데이터베이스는 mysql-db 이렇게 하시고, 연결 확인.
연결 확인되었고, 어플라이의 OK 하시면은 이렇게 MySQL 서버까지 파이참을 통해서 접속을 해봤습니다.
앞서서 데이터베이스 생성은 했으니까 이제 장고 프로젝트에서 MySQL 서버와 PostgreSQL SQL 서버에 접속을 할 수 있도록 프로젝트 세팅스를 수정을 해 보겠습니다
MySQL과 MariaDB는 장고에서는 같은 라이브러리를 사용을 해서 접속을 합니다
MySQL과 MariaDB는 국내에서 가장 대중적인 관계형 데이터베이스이죠
파이썬에서 접속을 할 때에 파이마이SQL이라는 드라이버와 MySQL 클라이언트라는 드라이버를 사용하시게 되는데요.
이 중에 파이마이SQL은 파이썬 코드만으로 작성된 드라이버이기 때문에 설치가 쉽고요.
윈도우에서도 손쉽게 사용하실 수 있구요.
마이SQL 클라이언트 라이브러리의 경우에는 시 확장이기 때문에 윈도우에서 설치가 어려울 수 있습니다. 
파이 마이 SQL을 설치하시고, 아래 세팅스를 적용해서 마이SQL 서버에 접속하고, 장고 마이그레이션 기능을 통해 필요한 테이블들도 자동 생성하겠습니다.

- MySQL
자, 이어서 MySQL 관련해서 필요한 라이브러리를 설치를 해 보겠습니다
pymySQL과 그리고 크립토그래피 파이마이 SQL은 최신 버전이 1.1.0이네요
Cryptography 같은 경우에는 41.0.7이네요
41.0.7을 설치를 해 주겠습니다
Settings 파일을 여신 다음에 databases 설정에서 현재 databases 설정은 SQLite 3에 대한 데이터베이스 설정이죠 주석 처리하고요 이 코드를 복사해서
이렇게 붙여넣기 하겠습니다
MySQL 서버에 접속을 할 것이고 MySQL 서버의 호스트명은 localhost 포트는 3306번 데이터베이스명, 유저명, 암호를 맞게 넣어 주시면요.
파이썬 매니시파이 Show Migrations 명령을 한번 내려보시면요.
이렇게 모든 마이그레이션 내역이 체크가 안 돼 있죠.
미적용 상태이고요.
장고 Extensions 라이브러리가 설치가 되어 있기 때문에 print Settings라고 보시면 모든 세팅스 내역을 보실 수 있는데 여기에서 데이터베이스 목록
에도 MySQL과 우리가 설정한 계정 정보가 잘 들어가 있죠.
그러면 현재 장고 프로젝트에 MySQL 관련해서 MySQL 계정 정보가 잘 입력이 된 상황입니다. 
그러면 파이썬 매니스파이 마이그레이트 명령을 내려보시면 이제 지정된 MySQL 서버에 데이터베이스 테이블이 생성이 되고요.
파이참에 MySQL 서버에 대해서 연결을 만들어 둔 부분이 있는데 여기를 새로 고침하여 보시면 이렇게 현재 장고 프로젝트의 내역대로 데이터베이스 테이블이 생성이 된 것을 확인을
하실 수 있습니다.
MySQL 계정 정보가 틀렸거나 방화벽 네트워크 설정 등의 이슈로 MySQL 서버가 접속을 할 수 없을 때에는 Run Server 명령에서부터 이와 같이 Operational
Error 예외가 발생합니다.
이 예외가 발생한다면 Settings의 Databases 설정을 꼭 차근차근 확인해주세요
그리고 필수 라이브러리로서 장고 MySQL 라이브러리를 꼭 설치를 해서 사용을 해보세요
장고 기본에서 미처 지원해주지 못한 MySQL의 고급 기능을 django-mysql를 통해서 지원받으실 수 있습니다

- Oracle
오라클 데이터베이스입니다
오라클 데이터베이스는 성능도 좋고 강력하지만 비싼 라이센스 가격이 단점입니다.
오라클 데이터베이스는 실습 없이 연동 방법만 설명하겠습니다.
Oracle DB 라이브러리를 설치하시고 아래 settings 설정을 통해 장고 모델에서 오라클 데이터베이스와 연동하실 수 있습니다.
예전에는 CX Oracle 라이브러리였는데요.
2022년에 Oracle DB 라이브러리로 변경되었으며 오라클에서 직접 관리하는 라이브러리입니다.
장고 기본에서는 CX Oracle 라이브러리와의 연동을 지원하는데요.
Oracle DB 라이브러리를 임포트하여 CX_Oracle 라이브러리 형태로 시스템 모듈에 등록하는 구조로 사용하시게 됩니다.


데이터베이스 벤더 별 설정 예시
1. SQLite
장점:

별도의 서버 구축이 필요 없으며, 파이썬이 설치되어 있으면 바로 사용할 수 있는 파일 기반 데이터베이스입니다.
데이터는 파일로 저장되며, 파일 복사와 붙여넣기로 쉽게 백업 및 이전이 가능합니다.
소규모 웹 서비스에 적합하고, 서버 관리가 필요 없는 장점이 있습니다.
단점:

동시성 처리에 한계가 있어, 고용량의 트래픽을 처리하기 어렵습니다.
여러 컴퓨터 간 데이터 공유가 어렵습니다. 이를 해결하기 위해 라이트스트림과 라이트FS와 같은 실시간 복제 및 백업 도구가 존재합니다.
설정:

settings.py에서 데이터베이스 설정:
python
코드 복사
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
SQLite3는 파이썬 기본에 포함되어 있어 추가 라이브러리 설치가 필요 없습니다.
2. Docker를 통한 데이터베이스 컨테이너 생성
PostgreSQL과 MySQL 컨테이너를 Docker를 사용하여 설정할 수 있습니다.

PostgreSQL: 기본 포트 5432, 환경 변수로 유저명, 암호, 데이터베이스 이름 설정.
MySQL: 기본 포트 3306, 환경 변수로 유저명, 암호, 데이터베이스 이름 설정.
Docker 명령어:

bash
코드 복사
docker run --name postgresql -e POSTGRES_USER=myuser -e POSTGRES_PASSWORD=mypw -e POSTGRES_DB=mydb -p 5432:5432 -d postgres
docker run --name mysql -e MYSQL_ROOT_PASSWORD=mysql-pw -e MYSQL_DATABASE=mysql-db -e MYSQL_USER=mysql-user -e MYSQL_PASSWORD=mysql-pw -p 3306:3306 -d mysql
docker-compose를 사용하여 여러 데이터베이스를 동시에 관리할 수 있습니다. docker-compose.yml 파일을 통해 PostgreSQL과 MySQL 서버를 동시에 띄울 수 있습니다.

3. MySQL 설정
라이브러리 설치:

PyMySQL 또는 MySQL Client를 설치하여 MySQL 서버에 접속합니다.
pip install pymysql로 설치합니다.
Django settings.py에서 MySQL 설정:

python
코드 복사
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysql-db',
        'USER': 'mysql-user',
        'PASSWORD': 'mysql-pw',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}
마이그레이션:

MySQL에 테이블을 생성하려면 python manage.py migrate 명령을 사용합니다.
오류 처리:

MySQL 서버 연결 실패 시 OperationalError가 발생할 수 있습니다. 이 경우 settings.py에서 설정을 재검토하고, 필요한 라이브러리가 설치되었는지 확인해야 합니다.
4. Oracle 데이터베이스
장점: 성능이 뛰어나고, 강력한 기능을 제공합니다.

단점: 고가의 라이센스가 필요한 상용 데이터베이스입니다.

설정:

Oracle DB는 2022년부터 Oracle DB 라이브러리를 사용하며, cx_Oracle 라이브러리를 통해 Django와 연동할 수 있습니다.
Oracle 데이터베이스 연결을 위해 django.db.backends.oracle 엔진을 설정합니다.
설정 예시:

python
코드 복사
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'oracle_db',
        'USER': 'oracle_user',
        'PASSWORD': 'oracle_pw',
        'HOST': 'localhost',
        'PORT': '1521',
    }
}
결론:
SQLite는 소규모 프로젝트에 적합하고, 설정이 간단하지만 동시성에 한계가 있습니다.
MySQL과 PostgreSQL은 Docker 컨테이너를 통해 쉽게 설정할 수 있으며, 더 복잡한 요구사항을 처리할 수 있습니다.
Oracle은 고급 기능과 성능을 제공하지만, 높은 라이센스 비용이 단점입니다.
각 데이터베이스는 장고에서 설정하는 방법이 다르므로 프로젝트에 맞는 데이터베이스를 선택하여 적용할 수 있습니다.



