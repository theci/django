자 이번에는 PostgreSQL 시퀄 데이터베이스와 한번 연결을 해보겠습니다
국내에서 인기가 점점 높아지고 있는 관계형 데이터베이스이고요 뛰어난 확장성이 강점입니다
장고 기본에서 포스크립 시퀄만의 다양한 고급 기능들을 지원을 해주고 있습니다
PostgreSQL 데이터베이스와 연결을 하기 위해서는 psycopg2라는 라이브러리 설치가 필요한데요.
pip install psycopg2라고 하시면 맥과 리눅스에서는 소스코드 다운로드 및 빌드 설치를 시도합니다.
그래서 관련 라이벌리와 빌드 툴이 없으면 빌드 오류가 발생하고요.
윈도우에서는 whl이라는 바이너리 포맷에 패키지로 설치가 되고요.
그리고 pip install psycopg2-binary라는 명령으로도 설치를 하실 수 있는데, 이때에는 윈도우 맥 리눅스 모드에서 WHL 패키지로 설치가 시도됩니다.
그러니 윈도우 사용자분들은 둘 중에 아무거나 설치하셔도 되겠고요.
맥이나 리눅스 사용자분들은 psycopg2 Binary로 라이벌리를 설치하시고 진행을 해주세요. 
psycopg2-binary 라이브러리를 설치하겠습니다.
최신 버전이 2.9.9네요.
그리고 MySQL 라이브러리는 이렇게 주석 처리를 해주겠습니다.
Settings 파일 내에서 이제 Databases 설정에서 MySQL 부분은 다 주석처리하겠고요.
PostgreSQL 코드를 그대로 복사해서 이렇게 붙여넣겠습니다.
앞서 MySQL과의 연결에서 했던 것처럼 show migrations 명령으로 연결 확인을 한번 해봤죠
그러니까 잘 동작하고 있습니다
잘 동작하고 있고 그리고 migrate 명령을 내려보시면 이제 현재 우리가 바라보는 Postgres SQL 서버에다가 데이터베이스 테이블을 방금 생성한 것이고요
MyDB 밑에 public을 펼치시고요 테이블의 11이 안 보이시면은 새로고침 한번 해주시고, 이렇게 열어주시면은 테이블이 다 생성이 되어 있습니다.
그리고 이제 Creator Superuser 명령으로 슈퍼 유저 데이터베이스를 이렇게 생성을 해주겠고요. 
Node Melon Songs 명령을 통해서 이렇게 송 데이터들도 다 넣어주겠습니다.
그러면 하트랙의 송 테이블 내역에 데이터들이 잘 들어 있음을 확인하실 수 있습니다
핫트랙 송 테이블을 보시면 데이터가 다 있는 것 같은데 슬러그 컬럼에만 데이터가 없습니다
그 이유가 뭐냐면 하투에게 3번 마이그레이션 파일을 통해서 슬러그 필드의 값이 없는 행만 조회를 해서 슬러그 필드의 값을 채워놓고 bulk 업데이트를 하는데 이 마이그레이션이 수행되는 시점에서는 이 테이블에 데이터가 하나도 없었어요
그래서 이 3번 마이그레이션은 수행되었음에도 영향을 끼친 데이터가 하나도 없었던 겁니다
그래서 3번 수행되고 나서 라는 명령을 통해서 데이터가 들어갔기 때문에 슬러그 컬럼에 데이터가 없는 겁니다
그럼 현재 상황에서 어떻게 하면 좋겠냐면 Load Melon Songs를 통해서 송 인스턴스가 만들어질 때에 슬러그 필드에도 값을 다 채워주는 게 맞습니다
그러면 송의 FromDig을 통해서 송 모델 클래스 인스턴스를 만들잖아요 
이때 모든 필드 값이 채워지는데 이 인스턴스가 있고 인스턴스를 생성하고 반환합니다 생성된 인스턴스에 slug 파일을 호출해 주시면 slug 필드의 값이 채워진 상황에서 리턴을
하고요. bulk create를 통해서 데이터가 생성이 되겠죠.
핫트랙송 데이터베이스 테이블을 다 지우고 나서 다시 load melonsongs 명령을 내려보겠습니다.
데이터베이스 테이블 삭제를 위해서 파이참의 데이터베이스 클라이언트 기능을 활용을 해서 직접 SQL 쿼리를 보내셔도 되겠고요 
우리는 장고를 학습하고 있기 때문에 장고를 통해서 한번 삭제를 해 보겠습니다
파이썬 manage.py, shellplus, printsql 다음에 song이라는 모델 클래스가 shellplus에서는 자동으로 이렇게 임포트가 됩니다
그리고 song.object.all 카운트하시면 파이썬 매니지 파일 로드멜론 송수 명령을 내려보시면 데이터베이스 오류가 발생합니다.
분명 SQLite로 우리가 roadmelon_songs라는 명령을 수행할 때는 이런 오류가 발생 안 했죠
SQLite3 데이터베이스를 사용했을 때와 같은 데이터를 밀어넣고 있는데,
PostgreSQL 혹은 MySQL 데이터베이스를 사용할 때는 이런 데이터베이스 오류가 발생하고 있는 거죠
SQLite 데이터베이스는 MySQL이나 PostgreSQL 데이터베이스에 비해서 유연하게 동작하는 측면이 있습니다
데이터가 컬럼에 지정된 크기보다 좀 크게 와도 그대로 수용을 해서 저장을 해주거든요
실 서비스에서 사용할 데이터베이스의 종류와 개발 단계에서 사용하는 데이터베이스의 종류를 서로 맞춰주면 좋은 이유가 여기에 있습니다
만약 우리가 개발 단계에서 PostgreSQL을 안 쓰고 SQLite3만 계속 썼다면 실 서비스에 배포할 때 이런 오류를 만났겠죠
혹은 운영 중에 만났을 겁니다
그래서 실 서비스와 같은 DB를 쓰면 개발 단계에서 데이터베이스 관련 오류를 빨리 만나실 수 있게 됩니다.
Song 모델 클래스에 Slug 필드가 있는데 이 코드를 보시면은 default max length, 즉 최대의 길이가 50자죠.
두 가지 선택을 하실 수 있습니다.
이 Slug 필드의 최대의 길이를 늘리든지 혹은 슬러시 파일을 할 때에 50자 이상이 되면 50자 이후 부분은 그냥 제거하든지.
어떤 선택지를 골라야 될까요?
일단은 이 오류를 발생시키는 데이터의 길이를 먼저 아는 것이 필요할 듯 합니다.
그래서 슬러시 파일을 한 후에 인스턴스의 슬러그 필드의 길이가 50보다 크다면 그냥 임의로 ValueError를 한번 발생시켜 보겠습니다.
명령을 다시 실행해 보시면 이렇게 ValueError가 발생하고 해당 길이가 85가 있네요.
SlugField에서 MaxLength를 100까지 주고요.
모델 필드를 변경했으니까 추가 마이그레이션 수행이 필요하고요.
Slugify에서 해당 SlugField의 값이 100글자를 넘을 수 있습니다.
이렇게 100글자까지만 잘라서 저장을 해볼 수 있겠습니다.
이 max-length 값이 차후에 변경될 수도 있는데 만약 변경이 되면 이 설정 값도 같이 바꿔줘야 되는데 같이 변경되어야 함을 우리가 알아보기 좀 힘들죠.
그래서 뭘 해보실 수 있냐면
self. 메타 속성이 있어요
메타에서 getField라는 메서드를 호출하셔서 현재 모델 클래스에 slug 모델 필드 설정을 가져오실 수 있고 여기에 maxLength 값을 가져오실 수 있습니다
가져오시면 slug 필드에 대한 maxLength고 100 대신에 이렇게 지정하시면 slug 필드의 maxLength가 바뀌면 그 바뀐 설정에 따라서 잘라서 저장을 하게
되겠죠 모델 필드 내역이 바뀌었으니까 Make Migrations 앱 이름을 실행하시면
해당 변경 내역을 반영할 마이그레이션 파일이 생성이 되고요.
Migrate 명령으로 이렇게 반영도 해줍니다.
Load Melon Songs 명령을 실행하시면 이렇게 모든 노래가 잘 로딩 되었음을 확인하실 수 있고 데이터베이스 테이블도 열어보시면 이렇게 슬러그 컬럼에 데이터가 잘 들어
있음을 확인하실 수 있습니다.
아마 이 필드가 문제의 필드였나 봅니다.

