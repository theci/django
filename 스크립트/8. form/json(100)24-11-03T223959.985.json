파일을 입력받아 유효성 검사 및 파일 변환을 지원하는 폼필드는 총 2개입니다.
파일 필드의 폼필드는 모든 파일 입력에 기반이 되는 폼필드입니다.
모든 포맷에 파일을 입력받을 수 있으며, 파일명이 비어있진 않은지, 내용이 비어있진 않은지
기본 검사하고요.
MaxLength 인자가 지정되면 파일명에 대해서 최대 길이를 확인합니다.
Default Widget으로는 Clearable File Input Widget을
사용합니다. 관련 모델 필드로는 FileField, models.Field가 있습니다.
ImageField, FormField는 FileField 클래스를 상속받았으며 이미지
파일 여부를 추가로 검사합니다.
관련 모델 필드로는 ImageField, models.Field가 있습니다.
Django에서는 파이썬의 기본 파일 객체로 랩핑한 파일 클래스를 지원하며 파일 클래스를 확장한
업로드 파일 클래스와 인메모리 업로드 파일 클래스 등이 있습니다
뷰에서 리퀘스트 객체의 파일즈 속성의 파일 객체는 파일 크기가 2.5MB 이하에서는
메모리에 저장해서 전달하는 인메모리 업로드 파일 인스턴스이며 2.5MB 초과되는 파일은
임시 파일에 저장해서 전달하는 임시 업로드 파일 인스턴스를 통해 처리됩니다 파이
클래스에서는 Name 속성 및 다양한 경우의 수를 고려한 파이 크기를 반환하는 Size
속성과 파이를 지정 단위로 읽어내는 Chunks 메서드, Enter, Exit 메서드를
지원하는 Context 매니저이기에 With절에서도 사용할 수 있습니다.
forms.ChoiceField, FormField는 한 개의 선택을 받을 수 있으며,
forms.MultipleChoiceField, FormField는 여러 선택을 받을 수 있습니다.
포스팅의 상태 등의 선택지 입력을 받기에 적합합니다.
기본 유효성 검사를 Choices 목록의 포함 여부를 검사하구요.
choices 인자로는 고정 선택지 용도로 값 레이블 튜플의 리스트를 지정하며, 동적
선택지 용도로 인자 없는 함수도 지원합니다.
인자 없는 함수는 choices 인자가 사용될 때마다 호출되어 그 반환값이 사용되어집니다
동적 선택지의 예로써 오늘을 기준으로 7일의 선택지를 제공할 수 있습니다
choices 인자에서 value는 내부적으로 문자열로 변환되어 사용됩니다
따라서 혼란을 방지하기 위해 값들은 미리 문자열로 변환해서 지정하는 것이 좋습니다.
기본 위젯으로 SELECT가 사용되고요.
Multiple Choice Field에서는 Multiple 속성이 추가됩니다.
Typed Choice Field 폼필드는 Choice Field 기반에서 Chorus
인자를 지원하여 값 변환 시에 Chorus 함수를 통해 변환된 값을 제공합니다.
Chorus 함수는 인자를 1개 받는 함수여야 합니다.
ChoiceField 폼필드에서는 문자열 타입으로 값을 제공합니다.
ChoiceIs 인자가 지정된 모든 모델 필드에서는 TypedChoiceField 폼필드를
사용하여 모델 필드 유형에 맞는 값으로 변환된 값을 사용합니다.
데모 폼 클래스에서 ChoiceField 필드인 StatusField와 EndAt1 필드는
입력 값 그대로 문자열로 변환이 되었고요.
TypedChoiceField 필드인 EndAt2 필드는 코어스 함수에 지정한 함수로
변환이 되어 데이트 인스턴스로 변환이 되었습니다.
ModelChoiceField 폼필드는 ChoiceField 폼필드 기반에서 코디셋 인자로
코디셋을 지정하면 ChoiceIs 선택지는 기본 키와 모델 인스턴스 구성으로 자동
생성됩니다.
LimitChoicesToInja를 통해 조회 조건을 추가하실 수도 있습니다.
데이터베이스 레코드를 선택지로 사용할 때 유용하고요.
예시 코드는 공통 코드 테이블에서 IsActiveColumn이 참인 항목들만 선택지로
사용하는 거죠.
디폴트 유효성 검사는 지정 코디셋에서 PK 존재 유무를 확인하고요.
변환된 값은 지정 PK의 모델 인스턴스를 제공합니다.
그런데 레이블은 모델 인스턴스의 문자열 변환 값으로 고정됩니다.
하나의 모델 인스턴스를 여러 선택지에서 사용할 수도 있는데, 상황에 맞춰 레이블을 커스텀
할 수 있으면 유용합니다.
이를 위해 패치 모델 str 함수를 구현해 봤습니다.
함수 호출 시에 새로운 proxy model 클래스를 만들고, str 메서드를 재정의한
proxy model 클래스를 반환합니다.
패치 모델 str 함수의 첫 번째 인자로 커스텀할 모델 클래스를 지정하고 두 번째 인자로
str 메서드로 사용할 함수를 넘겨주면 반환 값으로 새로운 proxy 모델 클래스가
반환됩니다. 그 모델 클래스를 통해 코디셋을 생성하시면 됩니다.
모델 choices 필드 폰필드에서는 위젯 렌더링 시에 모든 레코드를 조회해서
choices 목록을 구성하므로 지정 코디셋의 레코드 수가 많은 경우 과도한 데이터베이스
조회로 인해 페이지 응답 속도가 현저히 느려지며 클라이언트에게 방대한 응답 데이터가 전송될
수 있습니다. 가급적 작은 데이터 범위로 지정하시길 권장드립니다.
큰 데이터 범위로 지정하셔야 할 경우, 위젯을 변경하여 목록 조회를 지연시키고 사용자의
검색 입력에 따라 항목을 조회하여 목록을 동적으로 생성하는 위젯으로 변경해 보실 수도
있습니다.
Django Auto-Conflict 라이트 라이브러리를 추천드립니다.
JSON 필드 폼필드는 캐릭터 필드 기반으로서 복잡한 데이터 구조나 계층 구조를 가진 설정
값을 입력 받기에 적합합니다.
디폴트 유효성 검사에서는 JSON 역측렬화 수행 여부만을 검사하고 JSON 역측렬화를
수행한 파이썬 객체를 제공합니다.
디폴트 위젯은 텍스트에 여리어 있기에 유저가 JSON 포맷으로 값을 입력해야 하는데요.
Django JSON Form 라이브러리를 사용하시면 스키마 인자로 입력 룰을 지정하여
값을 입력 받으실 수 있어 편리합니다.
Django JSON Form 라이브러리는 React로 개발된 Django 위젯입니다.
UUID 필드 폼필드는 캐릭터 필드 기반으로서 UUID 포맷의 문자열을 입력 받습니다.
UUID 값은 UUID 필드 모델 필드에서 코드를 통해 자동 생성하여 값을 사용할 뿐,
유저로부터 UUID 값을 직접 입력 받는 경우는 드뭅니다.