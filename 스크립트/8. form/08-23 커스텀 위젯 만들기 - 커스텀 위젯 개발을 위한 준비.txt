안녕하세요 이번 시간에는 다양한 커스텀 위젯을 하나하나 만들어 보겠습니다
먼저 커스텀 위젯 개발을 위한 준비 과정입니다 장고 템플릿 파일은 Settings에 디버그
설정이 참인 개발 모드에서만 개발 서버를 재시작하지 않더라도 매 템플릿 렌더링 시마다
템플릿 파일을 매번 읽어드립니다
그래서 템플릿 파일을 수정하고 나서 페이지 새로고침으로 변경된 위젯을 즉시 확인하실 수
있습니다 그런데 장고 위젯 렌더링에 사용되는 템플릿 엔진은 Settings의 템플릿
설정이 아닌 별도의 템플릿 설정을 갖습니다
캐싱 설정은 이렇게 폼 렌더러인 장고 Templates 클래스에 하드코딩 되어
있고요 CachedProperty
장식자를 통해 템플릿 파일이 캐싱되어 장고 서버가 재시작되지 않는 한 변경된 템플릿
파일을 다시 읽어드리지 않습니다
그러니 장고 서버를 재시작하지 않는 한 위젯 템플릿 파일의 변경내역을 페이지
새로고침만으로 즉시 확인할 수 없습니다
커스텀 장고 템플릿 클래스를 만들어 디버그 참인 상황에서만 위젯 템플릿 파일을 캐싱하지
않도록 엔진 속성을 재정의했습니다
그리고 이 폼 렌더러가 사용될 수 있도록 My Site Settings 내에서 폼 렌더러
설정을 변경합니다
장고 기본 폼 렌더러의 장고 템플릿 소스 코드를 살펴보면요 엔진 빅스윙
클래스를 상속받고 있고 엔진 속성이 CachedProperty 장식자를 통해 캐싱 처리되고
있습니다 이 엔진 속성을 캐시된 속성 장식자를 사용하지 않고 Property
장식자로 캐싱하지 않는 속성으로 처리하려 합니다
Core 폴더 밑에 Forms 폴더 밑에 Renderers.py 파일 경로로 소스 코드를
복사해주세요. 기본 폼 렌더러인 Django Templates 클래스 상속받고,
Settings에 디버그 설정이 참일 때에만 엔진 속성을 재정의하고, Property
장식자를 적용했습니다.
방금 정의한 폼 렌더러 활성화하기 위해 Settings 설정에 Debug 설정이 참일
때에만 폼 렌더러 설정을 변경하도록 했습니다.
위젯 개발 시에 기본 위젯 템플릿을 재정의할 목적으로 Django 폼의 Widgets
디렉토리에 위젯 템플릿 파일을 사용하게 되는데요.
해당 경로가 Django 프로젝트가 인식할 수 있는 경로에 있지 않아서 PyCharm과
같은 IDE에서 해당 템플릿 파일의 경로를 찾지 못해 그 파일을 PyCharm에서 찾지
못하는 상황이 발생합니다.
장고 기본 위젯용 템플릿 파일은 장고 폼의 템플릿 경로에 있고요 장고 프로젝트의 기본
템플릿 로더에서는 이 경로가 설정이 없기 때문에 파이참에서 이 템플릿 파일들의 존재를
모르고 있습니다
기본 템플릿 로더에서는 settings의 인스톨드 앱 리스트에 등록된 앱들의 템플릿 경로와 settings의
템플릿 설정의 DIRS 설정에 등록된 디액토리 경로만 자동으로 인지합니다
Django Forms 템플릿 경로 등록을 위해 settings에 INSTALLED
Apps List에 Django Forms를 등록해 주세요
django.forms는 Django 앱은 아니고요 템플릿 경로만 등록하기 위함입니다
그럼 뒤에 실습에서 PyCharm이 기본 템플릿 위젯 파일을 찾음을 확인하실 수 있습니다
뒤에서 만들 위젯의 템플릿 파일을 먼저 하나 생성해 주겠습니다.
core-templates에 core-forms-widgets 경로에
preview-clearable-file.html 파일이고요.
Django 기본에 clearable-file-input-html 템플릿 파일을
인클로드합니다.
그러면 파이참에서도 이 파일을 찾을 수 없다고 이렇게 경고가 뜹니다.
Settings 내의 INSTALLED_APPS 리스트에 django.forms를
추가하시면 Django Forms Templates Directory 경로를
Django에서도 템플릿 경로로 인지하고 파이참에서도 인지하여 이렇게 물결 경고가 사라짐을
확인하실 수 있습니다.
커스텀 위젯을 개발하기에 앞서 SSR(서버 측 렌더링)과 CSR(클라이언트 측 렌더링)을
구별하실 줄 아셔야 합니다
장고 템플릿에서 개발하시다 보면 장고 템플릿 코드와 자바스크립트 코드가 이렇게 뒤섞여
있는데요 템플릿 엔진의 관점에서는 장고 템플릿 코드를 제외한 모든 코드는 단순 문자열로
취급됩니다 이 부분이 장고에 의한 SSR, 서버 측 렌더링이고요 장고 템플릿 코드를 통해
이러한 문자열이 만들어지고요 이 문자열을 웹브라우저가 응답으로서 받고 나서야 그제서야
HTML과 CSS, JavaScript 코드가 웹브라우저 단에서 코드로서 동작하게 됩니다
브라우저에 의해 CSR, 클라이언트 측 렌더링이 동작하는 거죠