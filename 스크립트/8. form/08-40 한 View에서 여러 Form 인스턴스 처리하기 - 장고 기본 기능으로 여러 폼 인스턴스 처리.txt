안녕하세요. 이번 시간에는 하나의 뷰에서 여러 폼 인스턴스를 처리하는 방법에 대해서
살펴보겠습니다.
여러 폼 인스턴스를 처리하는 예시입니다.
회원 가입 시에 유저 모델과 프로필 모델, 두 개 모델 필드 내역대로 입력받고 저장받고
싶습니다. 모델이 두 개니까 모델 폼을 사용하려면 모델 폼을 두 개 만들어야 할 텐데요.
Django의 기본 클래스 기반 뷰는 하나의 뷰에서 하나의 폼 처리만을 지원합니다.
이로 인해 여러 관련 모델에 대한 필드를 하나의 폼 클래스로 합치려는 생각을 할 수
있습니다. 그러나 이런 방식은 몇 가지 문제를 야기할 수 있습니다.
첫째, 단일 폼 클래스에 다양한 목적의 필드를 끼워 넣는 것은 폼의 목적과 책임을 모호하게
만듭니다. 유저 모델과 프로필 모델을 함께 처리해야 할 경우 각 모델에 대한 개별 폼을
생성하는 것이 더욱 명확하고 관리하기 쉽습니다.
둘째, 폼 유효성 검사와 저장 로직이 복잡해집니다
각 모델에 대한 유효성 검사와 저장 로직을 분리하여 각각의 폼에서 처리하는 것이 더욱
적합합니다 이를
통해 코드의 가독성과 유지 보수성이 향상됩니다.
셋째, 나중에 한 모델에 대한 요구 사항이 변경될 경우 하나의 폼 클래스로 통합된 폼에서는
이러한 변경 사항을 추적하기 어렵습니다.
별도의 폼 클래스를 사용하면 각 모델의 변경 사항을 독립적으로 관리할 수 있어 유연성이
증가합니다. 하나의 함수 기반 뷰에서 이렇게 여러 개의 폼 인스턴스를 만들어서 여러 폼에
대한 입력을 한 번에 받아서 처리하실 수 있습니다
각 폼의 필드명이 겹칠 수 있으니 prefix 인자를 지정하여 HTML 입력 요소에서
name 인자가 겹치지 않도록 합니다 포스트 요청을 처리할 때에도 프리픽스 인자를 지정하여
지정 프리픽스의 데이터만 해당 폼에서 처리하고요.
각 폼 인스턴스 별로 유효성 검사를 수행하고 폼 데이터를 저장토록 구현할 수 있습니다.
본 에피소드에서 사용할 폼, 뷰, 템플릿 기본 구성입니다.
메모, 모델 클래스는 메시지 필드와 상대 필드, 그리고 생성 일시 필드를 가집니다.
메모 폼, 폼 클래스는 모델 폼이 아닌 일반 폼으로 구현했습니다
폼 기반으로 먼저 다루고 뒤에서 모델 폼 기반으로 다뤄보겠습니다
메모 폼, 폼 클래스를 활용하는 메모 뉴 뷰를 폼뷰 클래스 기반 뷰를 통해서 이렇게 구현할
수 있겠죠 메모 폼.html 템플릿에서는 as table 메서드를 사용하는 기본적인 폼
템플릿을 구현했고요.
본 에피소드에서 Django 메시지 프레임워크를 사용할 것이기에 메시지가 있으면 노출하는
코드도 추가해 주겠습니다.
블로그의 폼 스파이 경로에 모델 폼 클래스 코드를 복사하고요.
블로그의 모델 스파이 경로에 메모 모델 클래스 코드를 복사합니다.
FormView 클래스 기반 뷰를 활용한 메모 New 뷰를 생성하겠고요.
블로그의 템플릿에 블로그의 메모 Form.html 경로에 템플릿 파일을 생성하고 코드를
복사해 줍니다.
블로그의 URL Spy 경로에 메모 New 뷰에 대한 URL 패턴도 추가해 줍니다.
메모 모델을 추가했으니 마이그레이션 과정도 수행해 주고요.
개발 서버 구동 확인하시고 웹브라우저로 로컬호스트 8000, 블로그 메모 NEW 주소로
페이지를 열어보시면 이렇게 입력 폼이 뜨죠
필드 값을 채워놓고 폼 제출하시면 메모 New 뷰에서 Success URL 설정이 되어
있지 않아 오류가 발생하네요
폼 요청 처리 후에 다시 메모 NEW 페이지가 뜨도록 Success URL 설정도 지정해
줍니다