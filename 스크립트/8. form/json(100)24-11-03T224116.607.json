바닐라 JS 데이터 픽업 라이브러리에서는 다양한 옵션을 지원합니다.
위젯을 적용할 때마다 다른 옵션이 필요할 수 있겠죠.
자바스크립트도 라이브러리이지만 위젯 인스턴스를 생성하는 파이썬 레벨에서 옵션 지원이
필요합니다. 파이썬 코드로 설정 클래스를 작성하고 타입을 지정했고요.
그럼 파이참 등에서 자동 완성 지원을 받을 수 있으니 편리합니다.
데이터 클래스는 파이썬 3.7부터 지원되고요.
생성자를 직접 정의하지 않아도 손쉽게 데이터 클래스를 정의할 수 있습니다.
바닐라 JS 데이트 피커에서는 많은 옵션을 지원하지만, 그 중에 몇 가지 옵션만 추가해
봤습니다. 각 옵션명은 바닐라 JS 데이트 피커 옵션명을 그대로 활용했고요.
ToDict 메서드를 통해서 JSON 직렬화가 가능한 포맷으로 변환합니다.
Tutoring 메서드는 Widget 클래스의 GetContext 메서드에서 템플릿 컨텍스트
데이터를 준비할 때 호출되도록 했습니다.
DateDisabled 옵션은 날짜 선택을 비활성화할 날짜 목록을 list로 지정받습니다.
인자 없는 함수로 지원하여 매 Widget 인스턴스 생성 시 마다 인자를 동적으로 구성할
수 있습니다.
format 옵션은 날짜 포맷이고요.
오늘 버튼 옵션은 오늘 버튼 활성화 여부이며, 오늘 하이라이트 옵션은 오늘
날짜 하이라이트 여부입니다.
DatePickerInput 인스턴스를 생성할 때 DatePickerOptions 인자로
DatePickerOptions 인스턴스를 생성하여 옵션을 지정합니다.
MinDate, MaxDate 인자는 함수로 지정하여 그 값이 고정되지 않고 매
Widget 인스턴스가 생성될 때마다 값을 계산하여 반환하도록 했습니다.
최소 날짜는 위젯이 보여지는 오늘 날짜이며, 최대 날짜는 위젯이 보여지는 오늘 날짜로부터
7일 후입니다.
DatePickerInput 위젯 클래스의 GetContext 메서드를 통해
DatePickerOptions 이름으로 달력 옵션을 Python 클래스로 지정받고,
템플릿에서 JSONScript 템플릿 필터를 통해 JSON 문자열로 변환하고,
자바스크립트에서 JSON 문자열이 저장된 스크립트 요소를 조회하고, 텍스트 컨텍스트
속성으로 JSON 문자열을 읽어내어 JavaScript 객체로 변환하고 옵션을 적용합니다.
Vanilla.js DatePicker에서는 다양한 옵션을 지원합니다.
이렇게 투데이 버튼 옵션, 투데이 하이라이트 옵션을 확인하실 수 있죠.
DatePickerInput 위젯 클래스에서 생성자를 재정의하고요.
부모인 DateInput 클래스의 생성자를 보니 Attribute 인자와 Format
인자를 받네요.
동일하게 인자를 받아서 전달하고요.
추가로 TodayButton 인자와 TodayHighlight 인자를 추가해 봅시다.
이렇게 받은 인자를 템플릿 단으로 전달을 해줘야 하거든요.
그러니 GetContact 메서드를 재정의해서 DatePickerOptions 이름의
사전으로 전달을 해줍니다.
템플릿에서는 DatePickerOptions 이름의 사전을 JSON Script 템플릿
필터를 통해서 JSON 문자열로 변환을 하고요.
해당 Script 요소를 조회해서 해당 요소를 출력해 보면 이렇게 Script 요소로
출력이 되죠.
JavaScript 객체로 변환을 해서 옵션 적용을 해 볼 수 있습니다.
투데이 버튼 옵션과 투데이 하이라이트 옵션 외에도 다양한 옵션을 지원하기 위해서 데이터
피크 옵션 클래스를 정의해 봅시다.
파이썬 클래스에서는 생성자로 받은 값을 인스턴스 변수에 저장하기 위해서 코드를 이렇게
작성합니다. 이를 파이썬 3.7부터 지원하는 데이터 클래스를 활용하면 생성자 없이도 타입
지정과 함께 코드를 보다 간결하게 작성하실 수 있습니다.
데이터 피커 인풋 클래스 생성자에서도 데이터 픽커 옵션 인스턴스를 인자로 받도록
변경합니다. 인자로 데이터 피커 옵션스 인자를 지정받지 못했다면 default 옵션으로
동작하도록 데이터 피커 옵션스 인스턴스를 default 인자로 생성해서 사용하도록
하겠습니다. 데이터 피커 옵션스 인스턴스 변수는 데이터 클래스니까 데이터 클래스의
async 메서드를 통해 사전으로 변환하실 수 있습니다.
그런데 우리가 이렇게 값 외의 함수 타입도 지원을 하려고 하는데요.
데이터 클래스의 async 메서드에서는 함수는 함수 호출 없이 함수 그대로 반환하고요.
JSON 변환 시에 함수에 대한 변환 룰이 없기 때문에 JSON 직렬화에 실패하게 됩니다.
그래서 toDict 메서드를 구현하고 값이 함수일 경우 함수를 호출하여 그 반환 값을
값으로 활용하도록 했습니다.
그럼 잘 동작하고요.
DatePickerOptions 인스턴스 내역대로 사전 객체가 만들어지고 JSON 문자열이
만들어지고 다시 JavaScript 객체로 변환된 내역을 이렇게 확인하실 수 있습니다.
프로필 폼 클래스에서 DatePickerInput 위젯 지정 시에 직접 인스턴스를 생성하여
옵션을 지정해 봅시다.
아, 오타가 있었네요.
데이터 부분을 Date로 고칠게요.
이렇게 자동완성 지원을 받아가며 옵션을 추가합니다.
MinDate 인자로 오늘 날짜로 지정해 보고요.
아, MinDate 인자를 엉뚱한 곳에 지정했었네요.
DatePickerOptions 생성자로 지정해야죠.
그럼 지정한 대로 오늘 날짜로 민데이트가 확인이 됩니다.
그런데 이는 장고 서버가 구동된 날짜로 고정이 되고요.
Django 서버가 일주일 동안 서버 재시작 없이 떠 있었다면, 유저에게는 일주일 전
날짜가 MinDate 옵션으로 지정되게 됩니다.
함수로 지정해서 매 Widget 인스턴스 생성시마다 MinDate를 매번 새롭게
계산하도록 합시다.
생성한 Options 객체를 Date Picker 인자로 전달하여 옵션을 적용합니다.
Verse Date 필드를 클릭해서 달력을 띄워보면 지정한 옵션으로 잘 동작하고요.
Max Date 옵션은 하루 뒤로 지정해봅시다.
그럼 이렇게 오늘과 내일로만 선택이 제한될 겁니다.
이렇게 7일 후로도 변경해보고요.
Dates Disabled 옵션으로 2일 뒤 날짜를 지정해 보면 이렇게 지정 날짜는 선택할
수 없도록 비활성화 되었음을 확인하실 수 있습니다.