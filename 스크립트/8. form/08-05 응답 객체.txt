안녕하세요. 이번 시간에는 응답 객체에 대해서 살펴보겠습니다.
장고의 뷰에서는 요청을 처리한 후 http response 객체를 사용하여 응답 데이터를 반환합니다. 
이때 응답 데이터는 문자열이나 바이트 타입일 수 있으며, HTML 문자열,
이미지, 엑셀, PDF, 음악, 비디오 파일 등 다양한 포맷의 데이터를 응답할 수 있습니다. 
http response 클래스를 통해 응답 데이터를 감싸고 컨텐츠 타입 인자를 사용하여 데이터의 컨텐츠 타입을 지정합니다.
이렇게 지정된 컨텐츠 타입은 웹브라우저가 응답 빠른 파일의 포맷을 인식하는데 사용됩니다.
shockers.py 파일에는 http response 응답 객체 생성을 도와주는 두 개의 shortcut 함수가 있습니다.
render 함수는 지정 경로의 템플릿을 문자열로 렌더링한 후에 http response
객체로 랩핑해서 반환합니다.
뷰에서 템플릿을 통한 응답 생성 시에는 render 함수를 쓰시면 편리하고요.
템플릿을 통해 HTTP 리스판스 객체가 아닌 문자열 생성이 필요하실 때에는 render 함수 구현처럼 renderToString을 사용하시면 됩니다.
redirect 함수는 redirect 응답 객체를 생성하는데요.
permanent 인자에 따라 다른 HTTP 리스판스 클래스를 사용합니다.
Permanent 값이 참이라면 영구 이동으로서 상태 코드 301 응답을 하고요.
새 도메인으로 서비스를 이전했을 때 유용합니다.
거짓이라면 일시적인 이동으로서 상태 코드 302 응답을 합니다.
유지보수 중인 페이지를 임시로 다른 페이지로 안내하거나 로그인이나 로그아웃 시에 다른 페이지로 이동을 시킬 때 유용합니다.
뷰 반환 시에 흔히 하는 실수를 살펴보겠습니다.
뷰는 반드시 http response 객체를 반환해야 합니다.
뷰 반환 직후에 미들웨어에서 뷰 반환 값을 받아서 후 처리를 하는데요.
이때 그 반환 값이 http response type 입을 가정하고 동작하기 때문입니다.
뷰 함수에서 문자열을 반환하면 웹브라우저를 통한 요청에서 attributeError 오류가 발생합니다. 
문자열 객체에 get 속성이 없다고 하네요.
이런 오류에서는 뷰 응답에서 문자열을 반환하신 상황이신 거고요.
미들웨어에서 반환 값이 http response type인 것으로 가정하고 get 메서드를 호출했는데 문자열 타입이어서 이 오류가 발생했습니다.
이렇게 HTTP 리스펀스 객체로 랩핑해서 반환하셔야 합니다.
그리고 정말 많이 실수하는 부분인데요.
이 코드를 슬쩍 봐서는 어디가 문제인지 잘 보이지 않습니다.
어디가 문제인지 보이시나요?
웹브라우저로 접속해 보시면 이번에는 tuple 객체에 get 속성이 없다고 하네요.
뷰 응답에서 tuple을 반환한 상황입니다.
랜더함수 반환값을 그대로 반환한 것 같은데, 아닙니다.
튜플이에요. 코드를 잘 보시면 랜더함수의 소관로가 닫히고 나서 두 번째 값으로 빈 사전이 있습니다. 
그러니 반환값으로 튜플에 첫 번째 값으로 랜더함수의 반환값, 두 번째 값으로 빈 사전인 거예요.
이제 코드에서 보이시나요?
그리고 이 코드도 튜플을 반환합니다.
렌더 함수의 소관로가 닫히고 나서 콤마가 하나 있죠?
파이썬에서는 콤마만으로 튜플을 정의할 수 있습니다.
이 반환값은 값이 한계인 튜플입니다.
반드시 이렇게 하나의 HTTP 응답 객체를 반환하셔야 합니다.
앞서 말씀드렸다시피 뷰에서 HTTP 리스펀스 타입이 아닌 다른 타입의 값을 반환하면 middleware 단에서 이런 오류가 발생합니다.
에러 화면에서 Exception Location 항목을 보시면 에러 발생 지점을 확인하실 수 있습니다. 
장고 밑에 Middleware 밑에 ClickJacking.py 파일의 27번째 줄인데요.
Project Settings 파일의 Middleware 설정을 보시면 마지막 Middleware가 Clickjacking입니다.
미들웨어 리스트에 지정된 마지막 미들웨어가 뷰 반환 직후에 처음으로 호출됩니다.
미들웨어는 뷰 함수를 여러 겹으로 감싸고 있습니다.
요청을 받으면 HTTP 리퀘스트 객체가 먼저 만들어지고 뷰 함수를 호출하기 전에 미들웨어들이 settings.middleware_list에 정의된 순서대로 호출됩니다.
이때 HTTP 리퀘스트 객체가 각 미들웨어에게 전달되고 미들웨어에서 HTTP 리퀘스트 객체에 필요한 속성을 추가하고요.
요청을 미들웨어가 중간에서 중단시킬 수도 있습니다.
마지막 미들웨어까지 호출되고 나서 뷰가 호출되고요.
뷰에서 반환되면 이번에는 미들웨어에 등록된 역순으로 미들웨어가 호출되면서 응답 객체를 후처리하게 됩니다.
clickdocking.py 파일에서 response.get 코드가 있죠
응답 객체에서 응답 헤더를 읽는 코드네요
뷰에서 문자를 반환한 경우 이런 이유로 오류가 발생했던 것입니다.
HTTP response 클래스에서는 파일처럼 다양한 쓰기 메서드를 지원합니다.
write, writable, write lines, tell 메서드이고요.
응답 데이터를 HTTP response로 랩핑하려면 응답 데이터를 미리 다 준비해두고 한 번에 랩핑하실 수 있고요.
HTTP response에서는 write 메서드를 통해 응답 데이터를 추가할 수 있습니다.
그래서 이렇게 응답 데이터를 생성하면서 응답 객체에 추가하실 수 있어요.
write 메서드가 있기에 print 함수의 file 인자로 응답 객체를 지정하시면 응답 객체로 지정 문자열이 출력됩니다.
print 함수 end 인자의 default 값은 계획 문자인데요.
end 인자로 빈 문자열을 지정하시면 위의 예시와 동일한 응답 데이터를 가지게 됩니다.
Pillow 라이브러리을 통해 동적으로 이미지를 생성하고 응답하려 할 때 이미지를 파일이나 다른 메모리 파일 객체에 저장하지 않아도 HTTP 리스펀서에서 write 메서드를
지원하니까 파일 객체 쓰기로 동작하는 Pillow 이미지의 save 메서드에 응답 객체를 지정해서 한 번의 응답 데이터로 이미지 파일 데이터를 추가하실 수 있습니다.
HTTP 요청에 요청 헤더가 지원되듯이, HTTP 응답에도 응답 헤더가 지원됩니다.
HTTP 리스펀스에서는 사전에 키 밸류를 설정하듯이 응답 헤더를 설정하실 수 있습니다.
커스텀 응답 헤더 예로써 첨부 파일임을 브라우저에게 알려서 브라우저가 다운로드로 처리하도록 컨텐트 디스포지션 헤더를 설정하실 수 있고요.
HTMX와 같은 JavaScript 라이브러리에서 커스텀 헤더를 통해 동작을 제어할 때 사용하기도 합니다.