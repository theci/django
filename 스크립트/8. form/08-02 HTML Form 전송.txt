폼 전송입니다.
HTML 웹페이지에서는 폼 태그를 통해 별도의 자바스크립트 개발 없이도 지정 주소로
입력받은 데이터를 전송할 수 있습니다.
폼 태그의 action 속성에서는 데이터를 전송할 대상 URL을 지정하며 속성을 생략하면
빈 문자열로 동작하고요.
현재 웹페이지 URL을 가리키게 됩니다.
메소드 속성에서는 데이터 전송 방식을 지정합니다.
갭 방식과 포스트 방식만을 지원하며, 디폴트로 갭 방식입니다.
갭 방식은 주로 검색 등의 데이터 요청, 데이터 조회 요청에서 사용하고요.
포스트 방식은 데이터 추가, 수정, 삭제 등의 파괴적인 요청에서 사용합니다.
갭 방식을 사용하면 폼을 통해 입력받은 데이터가 URL 뒤에 query 문자의 형태로
붙여서 전송됩니다.
url 뒤에 붙여서 전송되기에 데이터 크기에 2000자 정도의 제한이 있습니다.
현대적인 브라우저는 8000자 정도까지도 지원하지만 큰 데이터를 전송하기에는 무리가 있죠.
포스트 방식에서는 http 패킷의 요청 본문 body에 데이터를 포함하여 전송합니다.
갭 방식에서는 스펙 상으로 요청 body에 데이터를 포함시키는 것이 가능합니다만 갭
방식에서는 대개의 body를 사용하지 않습니다.
ENC 타입 속성에서는 데이터 인코딩 방식을 지정합니다.
이중에 텍스트 플레임 방식은 사용되지 않으며, 두 개의 인코딩 방식이 주로 사용됩니다.
url-encoded 인코딩은 디폴트 인코딩으로써 url-encoded 인코딩이 사용되며,
데이터의 키 값을 url-encoding하여 전송합니다.
일반적인 텍스트 데이터 전송에 적합하며 파일 전송 시에 이 인코딩을 사용하면 웹브라우저가
파일 내용은 전송하지 않고 파일명만 전송합니다.
두 번째, 멀티파트 폼 데이터 인코딩은 텍스트 데이터와 파일을 함께 전송할 수 있습니다.
파일 업로드 시에는 PDE 인코딩 방식을 사용해야만 웹브라우저가 서버로 파일 전송을
시도하게 됩니다.
폼 수정, HTML 폼을 비교해 봅시다.
왼쪽에 HTML 생성 폼을 먼저 살펴볼게요.
action 속성으로 생성 요청을 처리해 줄 주소를 지정하고요.
현재 페이지가 생성 요청을 처리해 주는 주소라면 action 속성을 생략할 수도 있습니다.
데이터 생성을 요청할 것이기에 method 속성은 post를 지정합니다.
HTML 태그와 속성명은 대소문자를 가리지 않기에 대소문자를 섞어 쓰셔도 되지만 모두
소문자로 통일하겠습니다.
메소드 속성을 소문자로 쓰셔도 HTTP 패킷에서는 항상 대문자로 전송됩니다.
ENC 타입 속성은 전송 인코딩을 지정하는데요.
form 태그 내부의 input type file 위젯은 유저로부터 파일을 선택받아 파일을
전송합니다. 파일 전송이 필요하니까 ENC 타입에는 필이 multi-part form
데이터를 지정해야만 브라우저가 파일 전송을 합니다.
각 위젯에는 Name 속성이 있는데요.
Name 속성은 각 값에 대한 식별자입니다.
브라우저는 각 Name과 입력 값으로 이루어진 데이터를 ENC 타입에 지정한 인코딩
방법으로 인코딩하고, 메소드에 지정한 방식으로 액션에 지정한 주소로 데이터 전송을
시도합니다. 오른쪽의 수정 폼을 살펴봅시다.
수정 폼은 생성 폼의 골격을 그대로 사용하되, 각 입력 위젯에 초기 값을 지정한다는 것과
수정 요청을 받는 다른 주소를 지정한다는 것이 다릅니다.
저는 1000번 포스팅에 대한 수정 요청을 받는 주소로 slush post slush
back slush edit slush 페이지를 구현했으니 해당 주소를 지정할 것이고요.
인프 타입 텍스트 위젯에서는 밸류 속성으로 초기 값을 지정할 수 있지만 인프 타입 파일
위젯에서는 밸류 속성을 지원하지 않습니다.
현재 저장된 파일을 보려면 이렇게 별도 이미지 태그로 보여주도록 구성합니다 포스팅 수정
시에도 입력된 파일을 삭제하고 싶을 수 있으니 별도 체크박스를 체크하면 포스팅에서 파일만
삭제하도록 구성할 수 있습니다
검색 요청을 장고 뷰에서 받아서 장고 뷰에서 요청 인자를 확인해 보겠습니다
블로그 앱의 인덱스 위에 템플릿 파일에서 템플릿 상단에 검색창을 추가하겠고요.
검색어 위젯의 네임 속성은 Query입니다.
서버로 Query 이름으로 입력받은 검색어가 전달될 것입니다.
검색 요청은 다른 주소인 //blog//search//로 전달하겠습니다.
브라우저가 지정 주소로 요청을 전달하는 과정에서 웹페이지 전환이 발생하고요.
브라우저는 해당 주소로부터 응답을 기다리며 모델식의 아이콘이 보여질 것입니다.
응답을 받으면 현재 웹페이지를 모두 지우고 응답 내용으로 다시 그립니다.
폼 요청을 처리하는 웹브라우저의 기본 동작입니다.
그럼 해당 요청을 처리하는 뷰가 있어야 할 것이고요.
현재 get 요청으로 요청을 전달했죠.
get 요청으로 전달된 데이터는 장고에서는 request. 대문자 get 속성으로 참조하실
수 있습니다.
request. 대문자 get 속성은 파이썬 기본 사전 타입을 확장한 quadratic
타입이고요. 각 값들의 사전처럼 get 메소드로 조회하실 수 있습니다.
검색어는 쿼리 이름으로 전달되었으니 쿼리 이름으로 검색어 문자를 조회하고 지금은 별도 조회
과정 없이 검색어만 응답으로 보여주겠습니다.
템플릿에서 전달받은 검색어가 있다면 검색어를 보여주고 없다면 검색어가 없다고 메시지를
보여줍니다
Request.대문자Cat 속성 외에도 장고 뷰에서는 Request.POST 속성을
통해 포스트 요청에서의 파일을 제외한 모든 요청 인자를 참조하실 수 있고요
Request.FILES 속성을 통해서 포스트 요청에서의 파일 데이터 요청 인자를
모두 참조하실 수 있습니다 슬라이드에서의 인덱스 뷰 역할로 블로그 앱에서는 포스트 리스트
뷰가 있네요.
포스트 리스트 뷰에 구현을 해 보겠습니다.
postlist.html 템플릿을 열고요.
페이지 상단에 검색 HTML 코드를 붙여넣기 합니다.
그리고 매 페이지를 새로 고침하면 이렇게 검색창이 뜨죠.
Pico CSS 스타일이 적용된 모습입니다.
검색어를 입력하고 검색 버튼을 누르면 폼 태그 액션 속성에 지정한 주소로 요청이
전송되고요. 페이지 전환이 일어납니다.
Search View를 아직 구현하지 않았기에 404 Page Not Found 오류가
발생해야 하는데, 404 Page Not Found 오류가 발생하지만 오류 메시지가
Query에 매칭되는 포스트가 없다는 오류네요.
이는 slug url 패턴을 처리하는 postDetailView에서 이 slug 값으로
post 조회를 했는데 없으니 404 오류를 낸 것입니다.
searchView를 구현합니다.
postSearch 이름에 view 함수를 하나 만들고 url 패턴도 하나 등록합니다.
웹페이지를 새로고침하면 이렇게 postSearchView에서는 http response
객체를 반환하지 않았다는 오류가 뜨죠.
postSearch 함수에서 아무것도 리턴하지 않아 none을 리턴한 것으로 처리되었기
때문이고요. 포스트 서치 뷰가 정상 호출되고 있습니다.
슬라이드처럼 함수 이름을 search로 바꿔줄게요.
검색 요청 시에 주소에서 끝에 ?query는 양식이라는 문자열이 있죠.
이 문자열을 QueryString이라고 부르고요.
이 QueryString을 파싱한 값들을 QueryParameter라고 부릅니다.
request. 대문자 겟 속성을 통해 Query 이름에 QueryParameter 하나를
조회하고요. 이 값은 항상 문자열 타입입니다.
쿼리 이름에 쿼리 파라메타가 없다면 빈 문자열을 반환토록 하고 조회된 문자열에서 좌우
공백이 있을 수도 있으니 strip 문자열 함수를 호출해서 좌우 공백도 제거합니다.
이제 블로그 밑에 search.html 템플릿을 통해 검색 결과 응답을 만들어 보죠.
컨택트 데이터로 검색어 하나를 전달하고요.
느낌표 하나 입력하고 탭 누르면 파이참이나 VSCode에서 기본 HTML을 만들어 줍니다.
Query 값 하나만 출력해 보면 이렇게 검색어 하나만 출력되고요.
예시 템플릿 코드도 하나 복사해서 적용하면 이렇게 검색어도 보여지고, request.
대문자캣 속성 내역도 확인이 됩니다.
이번에는 검색 요청을 PostListView로 전달해 보겠습니다.
postlist.html 템플릿에서 form 태그에 액션 속성 값을 비우면 현재 웹페이지
주소로 요청을 전달합니다.
포스트 리스트 뷰에서 쿼리 이름에 쿼리 파라메타를 하나 조회하고 검색어가 있다면 포스트
모델 쿼리셋에 타이틀 필드에 검색어 포함 여부 조건을 추가합니다
그럼 데이터베이스를 통한 조회가 되고요 템플릿에 검색어로 전달해 줍니다
웹페이지 새로고침하시고 검색을 입력하시면 그 검색어에 포스팅이 조회되고요 검색 박스에
검색어가 보이도록 검색 위젯의 value 속성으로 검색어를 지정해 주시면 검색어가 표현이
됩니다 포스트 목록에서 댓글 목록은 제거하고요 향후 포스트 내용에서 댓글 내용을 노출하는
것이 적절할 것입니다 포스트 리스트 뷰에서 에 대한 즉시 로딩 코드도 제거해 줍니다
쉬운 요리 태그 검색도 지원해 보겠습니다
태그 검색 쿼리셋은 태그 언더바셋 관계를 활용해서 포스팅의 태그 중에 하나라도 코디
문자율과 매칭이 되는 조건을 추가합니다
그럼 지정 태그로 검색이 되고요 제목과 태그에서 검색하려면 OR 조건 지정이 필요하니 Q
객체를 활용하겠습니다
제목과 태그 조건에 각각 큐 객체를 적용하고요 OR 조건을 지정합니다
그럼 제목과 태그에서 모두 검색이 잘 동작합니다