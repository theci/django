이번에는 모델 폼의 save method 호출 시에 커밋 인자 거짓 지정 예시를
살펴보겠습니다. 폼 필드를 통해서 입력받은 값을 저장하는 것 외에 추가 필드를 지정하고
저장하기 위해 데이터베이스 저장을 지연시킬 목적으로 사용합니다.
포스트 모델에 유저의 IP를 저장하는 IP 필드를 추가했습니다.
Null True 설정이 없기 때문에 필수 필드입니다.
모델 폼을 사용하는 뷰 코드에서는 다른 코드 변경 없이 저장을 시도하면 이와 같이
Integrate Error 예외가 발생합니다.
IP 필드는 Null을 허용하지 않는 필수 필드인데 IP 필드에 대한 값 할당 없이 인서트
코리가 수행되어 Not Null Constraint Failed 오류가 데이터베이스에서
발생한 것입니다.
오류가 나는 지점은 form.SaveMethod를 호출했을 때 내부에서
Instant.SaveMethod가 호출되는 지점입니다.
PostForm, ModelForm 클래스에 IP 필드를 추가하면 유저로부터 IP 값을
입력받는 상황이 될 텐데요.
IP 필드는 절대 유저로부터 입력받아서는 안 되는 필드입니다.
절대 PostForm, ModelForm 필드로 IP 필드를 추가하지 마세요.
Form에서는 유저로부터 입력받을 필드만을 지정하는 것입니다.
명심해 주세요.
IP 필드는 포스트폼을 통해서 입력을 받지 않기에 뷰에서 IP를 할당해 줘야 합니다.
위 오류가 발생하는 지점이 instance.SaveMethod가 호출되는 지점이니 뷰에서
IP 값을 할당해 주기 전에는 instance.SaveMethod가 호출되지 않도록 그
호출을 지연시켜 줘야 합니다.
form.SaveMethod 호출 시에 commit 거짓 인자를 지정하면 인스턴스에
SaveMethod 호출을 하지 않고 그 모델 인스턴스만 반환하죠.
그 인스턴스를 받아서 IP 필드의 값을 지정하고 나서야 모델 인스턴스에
SaveMethod를 호출하여 데이터베이스에 저장하면 됩니다.
협력창의 Client IP는 request.meta 속성의 remote-addr 키를
통해서 조회할 수 있습니다.
웹로그 앱에 퍼스트 모델의 IP 모델 필드를 추가합니다.
필수 필드이죠.
Make Migrations 웹로그 명령으로 모델 변경 내역에 대한 마이그레이션 파일을
생성하시면 방금 추가한 IP 모델 필드에 대해서 일회성 디폴트 값 지정을 위해 1번을
선택하겠습니다.
값으로서 문자열 127.0.0.1을 입력하겠고요.
migrate-weblog 명령으로 데이터베이스에 적용도 해줍니다.
웹 로그의 new 주소에서 새로운 포스팅을 생성해보면, IP 필드 값이 지정되지 않아
Integrate Error 예외가 발생하고 있습니다.
스크롤드 내려보시면 instance.save 호출 시점에 오류가 발생한 것으로 확인이
됩니다.
PostNewViewCode에서 form.save 호출 시에 commit 거짓을 지정하여
내부에서 instance.save 메서드 호출을 지연시키고 반환 값으로 받은 모델
인스턴스에 대해 IP 값을 할당한 후에 인스턴스의 save 메서드를 직접 호출하여
데이터베이스에 저장합니다.
페이지를 새로 고침하시면 오류 없이 잘 저장이 됩니다.
포스트 모델에 Many-to-Many 관계로 태그셋 모델 필드를 추가했습니다.
모델 폼을 통해서 태그셋 입력을 받기 위해 모델 폼 필드에 태그셋을 추가했고요.
뷰코드는 종전과 동일하게 수행해 봅니다.
새로운 포스팅을 생성할 때 관련 태그들도 지정해서 저장을 하면 저장이 잘 된듯 하지만,
수정 페이지에 들어가면 앞서 지정한 태그들이 저장되어 있지 않습니다.
모델 폼의 save method 구현에 그 이유가 있습니다.
모델 폼의 save method에서는 many-to-many 필드에 대한 저장도 자동으로
처리해 주고 있는데요.
커밋 인자가 참인 경우에만 모델 인스턴스 저장 후에 many-to-many 관계를 자동으로
저장하고요. 커밋 인자가 거짓일 경우에는 모델 인스턴스를 저장하지 않았기 매니투매니 관계를
저장할 수 없게 됩니다.
매니투매니 관계를 저장할 수 있도록 saveM2M 메서드가 제공됩니다.
그러니 모델 폼에서 매니투매니 필드 관계가 있다면 뷰에서 모델 인스턴스의 save() 메서드
호출 뒤에 꼭 폼 인스턴스의 saveM2M 메서드를 호출하여 매니투매니 관계에 대한
저장까지 마무리해 주셔야 합니다.
웹로그 앱의 Post 모델에 블로그 앱의 태그 모델과 매니투맨이 관계를 맺어보겠습니다.
블로그 앱 Post 모델의 태그 셋 모델 필드를 복사해서 웹로그 앱의 Post 모델에
붙여넣고요. 다른 앱 모델에 대한 관계이니 모델명 앞에 앱 이름을 추가합니다.
블로그 앱의 Post 모델에 추가된 필드이니 RelatedName과
related_code_name 인자에서도 블로그 언더바 대신에 웹로그 언더바 로
변경하겠습니다.
커스텀 관계 모델 설정은 제거하고요.
many-to-many 필드의 기본 관계 모델을 사용하겠습니다.
그럼 새로운 관계 모델이 생성되고, 새로운 관계 테이블도 생성됩니다.
makemigrations 웹 로그 명령으로 마이그레이션 파일을 생성하고, migrate
웹 로그 명령으로 데이터베이스에 적용합니다.
유저로부터 태그 선택 입력을 받기 위해 PostForm, modelform의 태그 set
필드를 추가합니다.
페이지를 새로 고침하시면 태그 Set 입력 위젯이 보여집니다.
Make Many-to-Many Fields, Model Fields의 기본 위젯에서는 새로운
태그를 추가할 수는 없고요.
기존 태그 중에 선택만 할 수 있습니다.
윈도우에서는 Ctrl 키를 누른 상태에서 여러 항목을 선택하실 수 있고요.
맥에서는 Command 키를 누른 상태에서 선택하실 수 있습니다.
제목, 내용, 태그를 입력하고 저장하시고 나서 어드민을 통해 포스팅 내역을 보시면 태그
내역이 저장되어 있지 않습니다.
PostNewView에서 모델 인스턴스 저장 후에 form.SaveM2M 메서드를 호출하여
many-to-many 관계를 저장해 줍니다.
그리고 다시 포스팅을 생성해 보시면 입력한 태그까지 잘 저장이 되어 있습니다.
태그가 아직 없는 3번 포스팅에 태그도 지정해서 저장해 보시면 태그까지 잘 저장이
되는데요. 포스트 에디트 뷰에서는 커밋 인자가 참 지정이기에 폼 인스턴스 내부에서 메서드가
저장까지 수행되었던 것입니다.
마지막으로 요청 데이터와 정제 데이터를 꼭 구별해 주세요.
요청 데이터인 request의 post 속성과 request의 files 속성은 폼
인스턴스의 입력 값으로 볼 수 있고요.
정제된 데이터인 폼 인스턴스의 cleaned_data 사전은 폼 인스턴스에서의 출력 값으로
볼 수 있습니다.
폼 내에 클린 메서드를 통해서 값이 변환될 수 있어요.
캐릭터 필드 폼 필드에서는 자동으로 문자일의 좌우 화이트 스페이스를 제거해주기에 타입
필드 값이 바뀌게 되고요.
컨텐츠 필드의 HTML 태그도 클린 언더바 컨텐츠 메서드를 통해 제거될 수 있습니다.
그러니 request의 post 속성, request의 files 속성은 form 클래스의
인스턴스를 생성할 때에만 사용해 주시고 그 외엔 cleaned_data
사전을 참조하는 식으로 요청 데이터와 정제 데이터를 구별해서 사용해 주세요.