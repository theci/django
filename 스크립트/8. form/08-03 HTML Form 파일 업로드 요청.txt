이번에는 파일 업로드 요청을 장고 뷰에서 받아보겠습니다.
폼태그에 인풋 타입 파일 위젯을 하나 추가합니다.
이미지 파일만 업로드하도록 제한이 걸린 상황은 아닙니다.
생성 요청이기에 포스트 방식으로 요청을 보낼 것이고요.
게다가 파일 업로드는 포스트 방식에서만 가능합니다.
장고 뷰에서는 포스트 요청을 받을 때 CSRF 토큰을 체크하고 그 토큰이 유효하지 않다면 그 포스트 요청을 거부하는 보안 기능이 장고 기본에 활성화되어 있습니다
그래서 장고 뷰로 보내는 모든 포스트 요청에서는 CSRF 토큰을 항상 포함시켜 보내야 하는데요
폼태그에서는 CSRF 언더바 토큰 템플릿 태그만 써주시면 CSRF 토큰 발급이 자동으로 처리되고요 
요청을 받을 때에는 장고 기본에서 CSRF 토큰의 유효성 검사를 알아서 처리해주니 특별히 신경 쓰실 부분은 없습니다 
아래 스크린샷에서처럼 요청 웹페이지의 HTML을 보면 CSRF 미들웨어 토큰이라는 랜덤 값이 있습니다. 
이 부분이 자동 발급된 CSRF 토큰입니다.
요청을 받은 post-underbar-new 뷰를 구현해 보겠습니다.
post 요청으로 전송되기에 파일을 제외한 요청 데이터는 request. 대문자 post 속성을 통해 참조하실 수 있습니다.
파일 데이터는 request.files 속성으로 참조합니다.
클라이언트에서부터 전달된 데이터는 잘못 입력되었을 수도 있고, 변조될 수도 있기에 절대 신뢰해서는 안 됩니다.
은행 서비스에서 장고가 1만원뿐인 계좌에서 1만원 출금 요청을 받았는데, UI에서는 1만원까지만 출금할 수 있도록 제한이 걸려 있다고 가정해 보겠습니다.
UI만 믿고 요청받은 금액을 그대로 출금 처리한다면 큰 문제가 됩니다.
유저가 악의적인 목적으로 UI를 고치거나 네트워크 전송을 가로채 전송해서 1만원 요청을 100만원 요청으로 변조해서 서버로 요청을 보낼 수도 있습니다.
UI단에서의 값에 대한 유효성 검사는 사용자에게 값에 대한 오류 피드백을 빨리 주기 위한 선택적인 기능일 뿐이고요.
서버단에서 해당 값에 대한 유효성 검사는 안전한 서비스를 위한 필수적으로 구현되어야 하는 기능입니다.
UI에서 유효성 검사를 한다고 서버 단에서 검사하는 것을 이중 검사로 생각하시고 불필요한 검사라고 생각하셔서는 절대 안 됩니다.
PostCreateView에서 유효성 검사 로직을 직접 구현했는데요.
메시지 필드는 필수 필드이고 최대 길이 10글자를 넘을 수 없음을 확인하고 에러 메시지 사전에 에러 메시지를 남기고요.
포토 필드에 대해서도 필수 필드이고 파일명만 보고 jpg 파일 여부인지 확인하는 과정을 추가했습니다.
파일명만 보고 JPG 파일인지 확인하는 것은 유저가 다른 포맷의 파일을 파일명만 JPG로 변경해서 업로드할 수도 있기에 완벽한 JPG 파일 여부를 확인하는 방법은 아닙니다.
완벽하게 검사하고자 한다면 파일 내용까지 읽어서 이미지 파일 포맷인지 검사해야 합니다.
만약 엑셀 파일인지 여부를 검사하고 싶다면 엑셀 라이브러리를 통해 해당 파일을 열어보고, 열어서 내부 엑셀 메타 정보를 조회할 수 있으면 엑셀 파일인 것이죠.
서버에서의 유효성 검사는 필수이지만 이렇게 직접 유효성 검사 체계를 만들고 검사하는 방법은 코드 가속성 및 유지 보수성이 낮습니다.

Django에서는 Django Form을 통해서 체계적인 유효성 검사 방법을 제공해 주고 있고요.
Django REST Framework 라이브러리에서는 Serializer를 통해 웹 API를 위한 체계적인 유효성 검사 방법을 제공해 줍니다.
장고를 통한 웹 API 개발에서는 요즘 장고 닌자 라이브러리가 조금씩 인기를 얻고 있고요.
장고 닌자만의 유효성 검사 방법도 있습니다.
파일을 지정해서 전송해 봅니다.
그런데 파일을 전송했음에도 포토필드는 필수입니다.
라는 에러 메세지가 보여집니다.
이유가 무엇일까요?
그 이유는 폼태그에서 ENC 타입 속성으로 멀티파트 폼 데이터를 지정하지 않았기 때문에 브라우저 단에서 파일 전송 자체를 하지 않았습니다.
웹브라우저는 파일명만 전송했어요.
웹브라우저 응답 화면에서 request.post 항목 끝에 보시면 포토 이름으로 파일명이 있죠. 
파일 내용 없이 파일명만 전송된 것입니다.
제공해 드린 포스팅 생성 폼 소스 코드를 복사해서 postlist.html 템플릿에 적용합니다. 
페이지 소스 보기를 하시면 인풋 타입 히든인 CSR 애플 미들웨어 토큰이 있습니다. 
인풋 타입 히든은 웹페이지에는 보여지지 않지만 폼 요청 시에 전달할 값을 지정할 목적으로 사용합니다.
인풋 타입 텍스트만큼 자주 사용됩니다.
페이지를 새로 고침하시면 CSRF 토큰 값이 자동으로 변경됨을 확인하실 수 있구요
템플릿 코드에서 CSRF 언더바 토큰 템플릿 태그를 제거하시고 웹페이지를 새로 고침하시고 다시 제목만 입력하시고 전송을 해보시면 이번에는 포비든 403 화면이 뜹니다
CSRF 검증에 실패했다고 하네요
장고 서버로 포스트 요청 시에 CSRF 토큰 값을 전달하지 않았으니 장고 미들웨어에서 요청을 거부한 것입니다
해당 주소의 장고 뷰는 호출조차 되지 않았습니다
CSRF 보안 기능을 위해 우리는 포스트 요청 시에 폼 태그 내에 CSRF 언더바 토큰 템플릿 태그만 추가해 주시면 장고의 CSRF 보안 기능을 누리실 수 있고요
나머진 신경 쓰실 필요가 없습니다
다시 csrf token 템플릿 태그를 추가해 주세요.
post underbar new 를 구현합니다.
url 패턴을 추가해 주시고요.
post underbar new view 코드로 복사해서 적용해 주세요.
errors 사전도 유효성 검사의 일부분이니 사전 선언을 아래로 옮기겠습니다.
장고 form을 활용한 유효성 검사에서는 이러한 에러 사전 객체 선언조차 필요 없습니다.
템플릿에는 입력받은 메시지 값, 포토 값과 에러 내역을 전달하겠습니다.
Post underbar new HTML 템플릿을 생성하시고요.
제공해 드린 소스 코드를 복사해서 적용합니다.
페이지를 새로고침하면 포스트 요청이 다시 전달되고 이렇게 응답을 받습니다.
포토필드가 필수필드라는 오류 메시지가 있네요.
생성 폼에서 사진을 하나 입력하고 다시 전송을 하면 사진을 입력했음에도 포토필드가 필수라는 에러 메시지가 있습니다.
request.post 항목에는 포토 이름의 문자일이 있네요.
제가 방금 전송한 파일의 파일명입니다.
파일 내용이 전송되지 않고 파일명만 전송되었어요.
폼 태그의 ENCTYPE 속성에 멀티파트 폼데이터를 지정하지 않아서 브라우저가 파일 전송을 하지 않고 파일명만 전송한 상황입니다
그럼 폼 태그의 ENCTYPE 속성으로 멀티파트 폼데이터를 지정하고 웹페이지를 새로 고침해서 ENC 타입이 포함된 요청 페이지를 다시 열어주시고요
이미지 파일만 지정해서 전송하시면 이제 포토필드에 대한 오류 메시지는 없어졌습니다
request.files 항목에도 보시면 포토필드에 in-memory uploaded file 타입으로 이미지가 잘 업로드되었습니다
메세지도 입력해서 전송하시면 모든 유효성 검사를 잘 통과했습니다
속성 지정하시고, 페이지 새로고침하시고, 다시 사진까지 전송하시면 이번에는 request.files 항목에 내역이 있습니다 
장고 서버로 파일 전송까지 잘 된 겁니다
장고 서버에서는 이 파일에 대한 유연성 검사도 하시고 직접 파일 스토리지에 저장하시거나 모델의 이미지 필드를 통해 저장을 하실 수 있습니다.