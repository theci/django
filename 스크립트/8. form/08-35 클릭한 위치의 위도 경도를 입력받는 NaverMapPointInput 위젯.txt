사용자가 직접 위도와 경도를 입력하는 방식은 오류 발생 가능성이 높고 사용성이 낮습니다.
게다가 입력한 위치에 대한 정확한 위치 확인도 어렵죠.
사용자 경험을 개선하기 위해 네이버 클라우드 플랫폼, 이아 NCP 지도를 사용하여 위치를 선택하면 자동으로 위도와 경도가 입력되는 NaverMapPointInput 위젯을 만들어 보겠습니다.
이 예시에서는 NCP 지도를 사용하지만 구글 등의 다른 지도 API로도 유사한 위젯을 구현할 수 있습니다.
NCP 지도 API는 유료 서비스이며, 웹 다이나믹, 맵 API는 월 1,000만 호출까지 무료로 제공됩니다.
서비스 사용을 위해서는 NCP 지도 API 공식 웹사이트를 통해 서비스를 등록하고, API 키를 발급받아야 합니다.
API 키는 NCP 클라이언트 아이디라는 쿼리 파라미터로 JavaScript 라이브러리 호출 시에 지정되어야 하고요.
발급된 API 키는 도메인 화이트 리스트를 통해 보호되어 허용된 도메인에서만 API 호출이 가능합니다. 
무료 제공 범위는 변경될 수 있으니 사용 전 공식 사이트에서 최신 정보를 확인해 주세요.
텍스트 인풋 위젯을 상속받아 NaverMapPointInput 위젯을 개발합니다.
지도의 기본 줌 레벨, 축적 UI 컨트롤, 확대, 축소, UI 컨트롤 등에 대한 옵션을
생성자를 통해 지원하고요 개 컨텍스트 메서드를 통해 이러한 옵션을 파이썬 사전으로 템플릿에
전달하며 템플릿에서는 이를 JSON으로 직렬화하여 자바스크립트에서 사용할 수 있도록 합니다
커스텀 템플릿에서는 지도 옵션을 JSON으로 직렬화하고 텍스트 인풋 위젯의 기본 템플릿을
포함시켜 위도와 경도를 입력받을 수 있는 입력 필드를 제공합니다
또한 지도를 표시할 div 요소를 추가하고 자바스크립트를 사용하여 NCP 지도 API를
호출, 지도를 렌더링합니다.
사용자가 지도상의 특정 위치를 클릭하면 해당 위치의 위도와 경도를 입력 필드에 자동으로
반영합니다.
업데이트 맵 함수를 통해 사용자가 선택한 위치에 따라 지도의 중심자표를 업데이트하고 마커
아이콘을 사용하여 선택된 위치를 지도상에 표시합니다.
이 방법을 통해 사용자는 입력한 위치를 즉시 확인할 수 있으며, 입력 과정에서의 사용자
경험을 크게 개선할 수 있습니다.
앞서 생성한 Naver Cloud Platform의 Client ID 값을 Django 프로젝트의
Settings 설정에 반영하겠습니다.
새로운 Settings 설정으로 Naver Map Point Widget Client ID 값을 생성할
텐데요. 같은 이름의 환경 변수로부터 로딩하여 설정하도록 하겠습니다.
환경 변수를 지정하는 방법은 다양한데요.
.env 파일을 통해서 환경 변수를 등록하고, 장고 단에서 로딩하도록 해보겠습니다.
말장고 공사 프로젝트 루트 경로에 .env 파일을 생성하시고요.
띄어쓰기 없이 등호를 쓰고 값을 씁니다.
앞서 생성한 Client ID 값을 붙여넣기 해주세요.
등호 앞뒤로 띄어쓰기를 쓰시면 .env 포맷에 맞지 않아 환경 변수로써 로딩이 되지 않으니
주의해주세요.
화면에 보이는 이 클라이언트 아이디는 현재 삭제된 값이니 사용하지 마시고 여러분의 키를
사용해 주세요.
그리고 절대 .env 파일은 버전 관리 대상에 넣지 마세요.
미리 .env 패턴을 추가하셔서 실수로라도 버전 관리에 넣지 않도록 해주세요.
Django에서 .env 파일을 로딩하고 값을 변환하기 위해서 django-environ
라이브러리를 사용하시면 편리합니다.
requirements.txt 파일에 django-environ 라이브러리를 명시하고요.
최신 버전이 0.11.2 버전이네요.
설치해 주시고요.
Settings.py 파일 상단에 Django Inviron을 통한 .env 파일 로딩
코드를 추가해 줍니다.
예상된 위치에 .env 파일 경로를 먼저 계산하고요.
그 파일이 있을 때에만 파일을 UTF-8 인코딩으로 엽니다.
django-environ 라이브러리에 env 클래스를 임포트하고 인스턴스를 생성한 후에 .env
파일에 파일 객체를 전달해주면 해당 파일을 로딩합니다.
오버라이트 인자를 참으로 지정하면
.env 파일에 명시된 환경면수명과 동일한 이름의 환경면수가 이미 있더라도 로딩하여
덮어쓰기로 동작합니다.
네이버 맵 포인트 위젯 클라이언트 아이디 환경변수는 별도 변환이 필요 없는 단순
문자열이기에 env.str 함수를 통해 환경면수를 조회하여 할당합니다.
이때 지정 이름에 환경 변수가 없을 경우 개발 서버가 재시작되는 과정에서
Improperly Configured 예외가 발생하여 장고 서버가 중단되는데요.
이때에는 생성하신 .env 파일의 경로를 확인해 주시고, 저장 여부도 다시 확인하신 후에
서버를 다시 실행시켜 주세요.
장고 셀을 구동하여 네이버 맵 포인트 위젯 클라이언트 아이디 값을 확인해 봅시다.
EMV 패스 경로부터 확인하시고 네이버 맵 포인트 위젯 클라이언트 아이디 값도 정상적으로
지정이 되어 있는지 확인해 봅니다.
프로필 모델에 Location Point 필드를 추가하여 유저의 위도 경도를 입력 받도록
하겠습니다. 풀필폼 모델
폼에도 필드를 추가하면 이렇게 폼필드가 뜨지만 단순 텍스트 인풋 위젯이기에 유저는 위도
경로를 일일이 타이핑 쳐서 입력해야만 합니다
이제 커스텀 위젯을 만들어 보겠습니다
텍스트 인풋 클래스를 상속받은 네이버 맵 포인트 인풋 클래스를 정의하고요 커스텀 템플릿
경로도 지정해 줍니다
지도 JavaScript 라이브러리에 대한 의존성이 있죠.
미디어의 JS 리스트에 Naver Cloud Platform 지도 JavaScript 라이브러리 경로를 추가합니다.
경로 끝에는 세팅스에 네이버 맵 포인트 위젯 클라이언트 아이디 문자열로 추가해줍니다.
이 클라이언트 아이디를 지정하지 않으시면 해당 JavaScript 라이브러리가 로딩
되더라도 지도 화면에서, 네이버 지도 OpenAPI 인증이 실패했습니다.
라는 화면을 보시게 될 겁니다.
네이버 맵 포인트 HTML 템플릿에서는 텍스트 인풋 위젯의 템플릿 경로를 복사해서
include 해 주고요.
여기에 HTML과 JavaScript 코드를 덧붙여 위젯을 구현하겠습니다.
프로필 폼에서 LocationPointField의 위젯을 NaverMapPointInput
위젯으로 변경해줍니다.
프로필 수정 폼을 새로 고치지 마시고 페이지 소스 보기를 해보시면, 페이지 상단에 이렇게
Maps.js에 대한 스크립트 태그가 Client ID와 함께 추가되어 있음을 확인하실 수
있습니다. 위젯의 미디어 설정이 템플릿의 form.media 속성 렌더링을 통해서 추가된
태그이죠. NaverMapPoint.html 템플릿에서 기본 인풋 요소 다음에 지도를 그린
div 태그를 하나 추가하고요.
이어서 자바스크립트 코드를 쓰겠습니다.
지도 요소와 인풋 요소를 조회하고요.
뒤에서 지도에 대한 커스텀 옵션 JSON 요소도 추가할 텐데 그 요소에 대한 조회는 뒤에서
하겠습니다. 지도 요소의 기본 스타일은 가로 100%, 세로 400 픽셀로 지정했습니다.
naver.maps.map API를 통해 지도 객체를 생성합니다.
다양한 지도 옵션들이 지원되지만 축적 컨트롤 및 확대 축적 컨트롤을 표시하고 기본 줌
레벨은 10으로 지정했습니다.
웹페이지를 새로고침하면 이렇게 지도가 표시됩니다.
혹시 지도가 표시되지 않는다면 브라우저 개발자 도구의 탭에서 자바스크립트 오류를 확인해
주세요. 유저가 지도를 클릭하면 클릭한 위치의 위도, 경도를 알 수 있습니다.
지도 객체의 클릭 이벤트에 대한 이벤트 리스너들 등록합니다 클릭 이벤트가 발생하면 세 번째
인자로 지정한 함수가 호출이 되고요 인자의 이벤트 객체에서 쿠드 속성을 통해 클릭한 좌표의
위경도를 알 수 있습니다
페이지 새로고침하고 지도를 클릭해보면 AddEventListener가 함수가 아니라고
하네요. 오타가 있나 봅니다.
아, addEventListener가 아니라 네이버 지도 API에서는
AddListener였네요. 수정 저장하시고 웹페이지 새로고침하시고 지도를 클릭해보시면
이렇게 클릭한 위치의 위경도가 브라우저 콘솔 창을 통해 출력됨을 확인하실 수 있습니다.
이 위경도 좌표를 문자열로 포맷을 맞춰 인풋 요소에 반영을 해주겠습니다.
그럼 지도를 클릭한 좌표에 맞춰 인풋 요소의 문자열이 변경됨을 확인하실 수 있습니다.
임의로 한 지역을 클릭하고 프로필을 저장해 보겠습니다.
저장 후에 인풋 요소에는 값이 채워져 있는데 지도는 종정과 동일합니다.
입력된 위경도에 맞춰 지도의 중심 좌표를 변경하고 마커를 보여주는 업데이트 맵 함수를
구현할 텐데요.
인풋 요소의 값의 변경이 있다면 updateMap 함수를 호출하여 해당 위치로 지도 중심
좌표를 이동하고 마커 위치로 변경하도록 하겠습니다.
updateMap 함수 인자로 지도 중심 좌표 변경 여부를 인자로 받겠습니다.
인풋 요소의 문자를 내서 콤마를 구분자로 해서 위도 경도 문자를 분리하고요.
지도 API의 위경도 클래스인 LatLng을 통해 위경도 객체를 생성합니다.
레트랭 인스턴스에서는 인자의 위경도 값이 유효하지 않은 경우 해당 값이 0이 되거든요.
그래서 위경도 값이 0 초과 여부 확인으로 위경도 값의 유효성을 확인하겠습니다.
위경도 값이 유효할 때 지도의 중심 좌표를 변경하고요.
마커의 좌표도 변경합니다.
마커는 한 개만 생성해서 좌표만 변경할 것이기에 마커 변수 값이 null일 때에만 마커
객체를 생성하고요.
마커 위치를 변경해 줍니다.
위경도 값이 유효하지 않을 때에는 지도에서 마커를 제거하고 인풋 요소의 값도 빈 문자열로
초기화합니다.
페이지가 처음 그려졌을 때 지도 중심 좌표 유동 및 마커 표현을 위해 updateMap
함수를 호출해 줍니다.
웹 페이지를 새로 고침해 보면 인풋 요소에 입력된 위경도 위치로 마커가 표시되는데 지도의
오른쪽 부분이 안 보여지고 중심 좌표는 맞지 않습니다.
그리고 지도를 클릭해 보면 클릭한 위치로 마커 위치가 변경이 안 되네요.
지도 객체에 대한 ClickEventListener에서 UpdateMap 함수 툴이 빠져
있습니다. 추가해 주시면 이렇게 클릭한 위치로 마커가 이동합니다.
이제 위젯을 통해 지도에 대한 기본 옵션을 적용해 주겠습니다.
NaverMapPointInput 클래스의 생성자로 Zoom, ScaleControl,
ZoomControl 인자를 추가하고요.
객 컨텍스트 메서드를 재정리하여 NavMapOptions 이름으로 사전 객체를 전달합니다.
사전의 키는 지도 API의 Map 옵션에 맞게 지정했습니다.
NavMapPoint.html 템플릿에서 지도 옵션을 JSON 문자열로 렌더링합니다.
Options 요소를 조회하고 JavaScript 객체로 변환한 뒤에 지도 옵션 객체에
반영해 줍니다. 웹 페이지를 새로 고침하면 JSON.path 함수의 인자로 전달한 문자엘이
JSON 문자엘이 아니라는 오류가 발생했습니다.
Options DOM 요소를 출력해 보니 Options DOM이 엉뚱한 요소를 가리키고
있었네요.
Option 요소의 위치를 처음으로 이동시켜 줍니다.
이제 정상 동작하네요.
지도의 오름적 부분이 안 보여지는 것은 지도가 그려지는 div 요소의 가로 크기를 네이버
지도 API에서 제대로 인지를 못해서 발생하는 이슈입니다.
div 요소의 가로 크기를 고정해 주면 이렇게 div 요소 크기에 맞게 지도가 보여집니다.
인풋 요소에는 읽기 전용 옵션과 자동완성 끄기 옵션을 적용하여 유저가 지도를 통해서만
비경도를 입력하도록 합니다.
어? 그런데 웹페이지가 뜨지 않네요.
개발 서버 창을 열어보니 서버가 죽어있습니다.
논 값에 대해서 아이템 할당을 수행했다는 오류가 발생해서 타이베러 예외로 인해 서버가
죽어있네요.
어트리뷰트 값이 사전이 아니라 디폴트 값인 논인 상황이었군요.
어트리뷰트 값이 non인 경우에는 빈 사전으로 변환하는 코드를 추가해 줍니다.
웹페이지를 새로고침하면 읽기 전용 옵션과 자동완성 끄기 옵션도 잘 적용이 되어 있습니다.