포스팅 수정 페이지를 구현해 보겠습니다.
앞선 포스팅 생성에서의 뷰 처리와 비교해서 지정 기본키의 레코드를 데이터베이스에서 조회하는
것을 제외하고는 폼 처리와 프로세스는 거의 유사합니다.
수정 대상이 될 레코드를 조회할 수 있어야 하니 URL을 통해 수정 대상의 PK 기본키나
슬러그 값을 전달받습니다.
다른 조회 값이나 쿼리 파라미터를 통해 값을 전달받을 수도 있습니다.
하지만 장고의 클래스 기반 뷰에서는 url-captured value를 통한 조회로
구현되어 있으니 url-captured value를 통해 pk 기본 키를 전달받는
시나리오로 진행하겠습니다.
유저가 1번 포스팅 수정을 위해 블로그 1 에디트 주소로 방문하면 GET 요청이 블로그
pk 에디트와 연결된 뷰로 전달이 될 것이고요.
그 뷰에서는 지정 PK도 레코드를 조회하고 레코드가 없다면 404 응답을 하고 레코드를
조회했다면 입력 서식 HTML을 작성할 때 조회한 레코드 값들로 초기 값을 채워서 HTML
폼 응답을 합니다.
그럼 유저가 입력 서식에 값을 채우고 제출을 할 것이고요.
뷰에서는 입력 값에 대한 유효성 검사를 하고 그에 대한 응답을 합니다.
포스팅 수정을 구현한 PostEditView에서는 지정 PK의 레코드를 먼저 조회하고
Form Class Instance 생성 시에 초기 값을 지정합니다.
Form 클래스를 상속받은 PostForm에서는 키워드인자 Initial 사전으로 초기값을
지정합니다.
Initial은 사전 타입인데요.
모델 인스턴스를 사전으로 변환하기 위해 ModelToDig 함수를 활용하시면 편리합니다.
Initial 지정 후에는 포스팅 생성에서의 뷰 코드와 거의 동일합니다.
유효성 검사에 통과하면 앞서 조회한 모델 인스턴스의 필드 값들을 변경하고 데이터베이스에
저장합니다. 모델 폼을 사용한 post-edit 뷰에서는 post-form 인스턴스에서
키워드 인자 인스턴스를 받기에 이니셜 사전 변환 없이 모델 인스턴스를 바로 지정할 수
있습니다. 그리고 유효성 검사에 통과했을 경우 폼 인스턴스의 save 메서드만 호출해주면
데이터베이스의 수정 저장까지 완료됩니다.
생성 저장에서도 폼 인스턴스의 세이브 호출이었죠.
수정 저장에서도 동일합니다.
GET 요청과 FORCE 요청에 대한 모델 폼 클래스 인스턴스 생성 시에 PDE 둘 다의
인스턴스 인자를 지정해 주세요.
만약 GET 요청 시에만 인스턴스 인자를 지정하고 FORCE 요청 시에는 인스턴스 인자를
지정하지 않는다면 입력 폼을 보여줄 때에는 수정 폼으로 보여지지만 저장할 때에는 새로운
레코드로 데이터베이스에 저장이 될 것입니다.
포스트 뉴 뷰 코드를 복사해서 포스트 에디트 뷰 코드를 구현해 보겠습니다.
거의 동일한 코드로 동작함을 보여드리기 위함입니다.
복사한 함수의 함수명을 포스트 에디트로 수정하시고요.
인자로 조회할 대상의 PK를 받겠습니다.
이 PK는 뉴 아래 패턴 정의 시에 PK 이름으로 받는 뉴 아래 캡쳐드 밸류의 이름입니다.
PK 필드에 대해 PK 값으로 레코드를 조회하여 모델 인스턴스를 생성합니다.
GET 요청과 POST 요청을 처리하는 각 모델 폼 생성자의 인스턴스 인자를 지정하고요.
유효성 검사에 통과하면 폼 인스턴스의 save 메서드를 호출하여 수정 저장합니다.
그럼 모델 폼을 통한 포스트 에디트 뷰 구현은 끝이고요.
웹로그의 urlspy 파일에 pkedit URL 패턴으로 요청을 받을 수 있는 URL
패턴도 추가합니다.
저는 데이터베이스에 저장된 포스팅이 3번, 4번, 5번이네요.
웹로그의 3.edit 주소로 3번 포스팅에 대한 수정 페이지를 띄워보겠습니다.
수정 페이지에서 3번 포스팅 내역이 수정 포맷 그대로 보이네요.
제목을 수정하고 제출하면 오류 없이 잘 수정이 됩니다.
기존에 업로드된 파일과 같은 파일명으로 파일을 다시 지정해서 업로드해 보겠습니다.
업로드된 파일명의 뒷부분에 더미 문자일이 붙어 있습니다.
장고의 파일 필드, 이미지 필드, 모델 필드에서는 파일을 저장할 때 덮어쓰기를 하지
않습니다.
저장하려는 파일 경로에 파일이 이미 존재할 경우 파일명에 더미 문자를 붙여 파일명이 겹치지
않게 저장합니다.
앞선 폼 클래스의 save 메서드 구현에서는 posting 생성만 지원을 했었습니다.
폼 클래스이지만 모델 폼처럼 인스턴스 인자를 받도록 하고 수정까지 구현을 해보겠습니다.
먼저 메타 클래스가 폼 클래스에는 없었지만 모델 폼에 맞춰 추가하고 모델 속성을
추가합니다. 생성자에서 인스턴스 인자가 있다면 modelToDig 함수를 통해
initial 키워드 인자를 추가하고 멤버 변수로 인스턴스를 저장하고요.
인스턴스 인자가 없다면 새로운 모델 인스턴스를 생성해서 멤버 변수의 인스턴스로 저장합니다.
save method 호출 시에는 instance 멤버 변수의 field 값을 할당하고
commit 인자에 따라 instance의 save method를 호출하고
instance를 반환합니다.
그럼 뷰에서는 모델 폼 코드를 사용했을 때와 폼 코드를 사용했을 때가 같은 코드가 되죠.
모델 폼을 활용하면 모델에 대한 높은 의존으로 빠르게 구현하실 수 있고요.
모델이 변경되면 관련 모델 폼에도 관련 변경이 자동으로 반영됩니다.
그렇게 쓰시다가 모델에 대한 의존성을 낮추고자 하실 경우 이렇게 폼 기반으로 구현하셔서
모델에 대한 의존을 낮추시고 유연하게 구현하실 수 있습니다.