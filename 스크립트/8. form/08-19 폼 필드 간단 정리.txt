안녕하세요. 이번 시간에는 폼 필드에 대해서 간략히 살펴보겠습니다.
유저로부터 이름, 전화번호, 사진, 이력서를 제공받는 패트원 폼을 구성하려 합니다.
폼 클래스를 상속받은 패트원 폼 클래스를 정의하고요.
이름은 한 줄 입력 필드로 받을 것이기에 캐릭터 필드, 폼 필드를 사용하고 필수로
설정합니다.
전화번호도 한 줄 입력 필드로 받아도 되지만, 전화번호 패턴을 검사하기 위해서 정규식
필드, 폼필드를 사용해서 정규 표현식 패턴으로 유효성 검사를 수행하도록 합니다.
모든 문자를 폼필드에서 지원하는 최소 길이와 최대 길이 인자로 지정하고, 옵션 필드로
설정합니다. 사진은 이미지 파일로 받아야 하니 ImageField, FormField를
사용하고 OptionField로 설정하고요.
이력서는 PDF 파일만 받으려고 합니다.
FileField, FormField를 사용하면 어떤 파일이든 다 허용하거든요.
유저에게 파일을 입력받을 때 InputType 파일 요소의 Accept 속성으로
application/pdf를 설정하면 입력 위젯의 파일 선택 대화 상자에서 PDF 파일만
보여집니다. 유저가 브라우저 개발자 로그로 Accept 속성을 제거하면 어떤 파일이든 폼을
통해 업로드할 수는 있거든요
서버 측에서도 업로드된 파일이 PDF 파일인지 검사가 필요하겠죠
재사용성을 높이기 위해 PDF 필드를 만들어서 입력 위젯의 파일 선택 대화 상자에서
PDF 파일만 보여지도록 인풋 요소의 Accept 속성에 application/pdf 값을
지정하고요 WidgetAttributes 메서드를 재정의해서 적용했습니다
서버로 전송된 파일 내용이 PDF 파일인지 검사하기 위해 validate_pdf_file
함수를 Default 유효성 검사로 등록했습니다
validate_pdf_file 함수에서는 파일 확장자부터 검사하고요 통과하면 파일의 컨텐츠
타입을 검사하고 통과하면 파일의 매직 넘버 4바이트만 읽어서 PDF 파일임을 최종적으로
확인합니다 패트론 폼 클래스의 인스턴스를 만들고 HTML 메서드를 호출하여 테이블 태그에서
사용할 수 있는 HTML 문자열을 렌더링했습니다.
각 요소는 인풋 태그로 렌더링 되었고요.
필수로 지정한 필드에는 require 속성이 추가되어 브라우저 단에서 유효성 검사가 수행될
때 값의 입력 여부를 검사해 줍니다.
전화번호 필드의 최소 최대 길이 설정이 인풋 태그 속성에도 반영이 되어 브라우저 유효성
검사 및 서버 단의 유효성 검사에도 사용됩니다.
브라우저의 유효성 검사는 폼 제출 시에 브라우저에 의해 자동으로 수행되며, 브라우저의
유효성 검사에 걸리면 서버로 요청을 전송하지 않습니다.
그리고 브라우저마다 다른 스타일을 가지고요.
해당 폼에서의 브라우저의 유효성 검사를 끄시려면 태그에 속성을 추가해 주세요.
사진 필드는 Image Field, Form Field를 지정했기에 Accept 속성으로
Image Star가 지정되어 파일 선택 대화 상자에서 이미지만 선택할 수 있도록
제한됩니다. 물론 서버 단에서도 이미지 파일 여부를 검사하기 때문에 안전합니다.
이력서 필드는 PDFField, Custom Form Field에서 Accept 속성으로
application/pdf를 지정했기에 Input 태그에도 그대로 적용이 되었습니다.
각 폼필드에 대한 유효성 검사 및 각 변환은 직접 클립 메서드를 호출하여 동작을 테스트해
보실 수 있습니다.
실제 개발에서 이렇게 개별 폼필드 단위로 유효성 검사를 수행하지는 않고요.
IsValid 메서드를 호출하여 일괄적으로 유효성 검사를 수행합니다.
각 폼필드에는 기본 위젯들이 지정되어 있고요.
그 위젯을 통해 이렇게 입력 필드 HTML 문자열을 렌더링을 테스트해 보실 수 있습니다.
위젯 렌더링도 실제 개발에서 이렇게 개별 폼필드 단위로 수행하지는 않습니다.
그리고 앞서 PDF 필드에서 위젯 Attribute 메서드를 재정의해서 위젯 속성을
추가했었는데요.
이러한 위젯 속성들은 위젯의 렌더 메서드 호출 시에 세 번째 인자로 전달되어 사용됩니다.
인풋 타입 파일 요소에 캡처 속성이 있으면 사용자가 파일 선택 시에 카메라 캡처 장치를
사용할 수 있게 됩니다
멀티플 속성이 있으면 사용자가 파일 선택 시에 한 번에 다수의 파일을 선택할 수 있게
됩니다 그럼 같은 네임으로 다수의 파일이 전송이 될 텐데요 서버 단에서도 같은 네임으로
다수의 파일 전송을 처리할 수 있도록 뷰나 폼 구성이 필요합니다
폼필드 공통인자는 다음과 같습니다.
Label 인자는 Label명을 지정하고요.
생략하면 필드명이 사용됩니다.
HelpText 인자는 입력 도움말이고요.
위젯과 함께 보여줄 텍스트입니다.
Initial 인자는 HTML 입력 요소의 디폴트로 채워지는 값입니다.
생성 폼에서는 대개 비워주며, 수정 폼에서는 수정 항목의 값으로 채워주고요.
폼 클래스를 상속받은 폼 클래스에서는 Initial 사전으로 초기 값을 지정하면 각 폼
필드에 자동으로 Initial 값이 지정되며, 모델 폼 클래스에서는 Instance 인자로
관련 모델 인스턴스를 지정하면 Initial 값이 자동으로 지정됩니다.
required 인자는 필수 필드 여부이고요.
브라우저에서 유효성 검사를 수행할 때 입력된 값이 있는지 검사하고, 서버 딴 유효성 검사
시에도 입력된 값이 있는지 검사합니다.
disabled 인자는 비활성화 여부입니다.
비활성화된 요소는 사용자가 편집할 수 없으며, 해당 필드 값을 서버로 값을 전달하지
않습니다. 혹시 유저가 브라우저 개발자 도구로 필드의 disabled 속성을 제거하고 값을
수정하여 전송하더라도 서버의 폼에서는 disabled 필드 값은 무시하고 initial
속성으로 지정된 값을 활용합니다.
위젯 인자는 HTML 렌더링에 사용할 widget 클래스 혹은 widget 클래스의
인스턴스를 지정합니다.
폰필드별로 디폴트 위젯이 지정되어 있는데요.
위젯을 변경할 목적으로 사용합니다.
위젯 변경은 사용자 편의성을 개선할 목적으로 UI를 변경하는 것일 뿐, 서버의 유효성
검사나 전송되는 값이 변경되는 것은 아닙니다.
Validators 인자에는 해당 필드에 대한 서버 쪽 유효성 검사 함수를 지정합니다.
빈 입력 폼에서 유효성 검사에 실패할 값들로 값을 채워놓고 서버로 전송하면 이렇게 에러
응답을 받게 됩니다.
기본 CSS 스타일이 없어서 에러가 어떤 필드에 대한 에러인지 알아보기 어렵네요.
이렇게 폼 태그에 CSS를 추가해서 폼 스타일링을 계산해 봅시다.
각 필드마다 테두리도 검은색으로 그려주시고요.
에러 리스트에 대해서는 빨간색 글씨로 표현하겠습니다.
실습에서는 프로필 수정 폼으로 살펴보겠습니다.
프로필 모델에서 address 모델 필드는 blank 참 설정으로 인해 폼 필드에서는 옵션
필드로 취급됩니다.
address 필드를 빈 문자열로 넣어도 유효성 검사에 걸리지 않죠.
모델에서는 옵션 필드이지만, 모델 폼 필드에서는 필수 필드로 처리할 수도 있습니다.
프로필 클래스의 생성자를 재정의하고요.
부모의 생성자를 호추하여 모델 폼 필드들을 모두 생성합니다.
부모 생성자 호출 직후에 fields, 멤버 변수를 통해 생성된 폼 필드 내역을 사전으로
조회하실 수 있는데요.
address 폼필드의 required 속성 값을 참으로 변경하여 profile 폼에서는
필수 필드로 사용하실 수 있습니다.
모델 폼 클래스 생성자 재정인은 폼필드의 다양한 속성들을 동적으로 설정할 수 있는 강력한
방법입니다.
address 필드를 빈 문자열로 제출하면 유효성 검사에 걸리죠.
GitHub 제공해 드린 CSS를 적용해 보겠습니다.
프로필 폼, HTML 템플릿 상단에 CSS를 적용하겠고요 폼 태그에는 장고 폼 아이디도
지정했습니다 이 아이디에 맞게 CSS의 CSS 셀렉터도 변경하시고 페이지도 새로 고침하시면
스타일이 적용되었음을 확인하실 수 있습니다
웹브라우저에서 HTML 폼을 통해 값을 입력받고 서버로 전송하면 모든 필드의 값은
문자열로서 전송됩니다 서버로 전송된 값을 장고 폼을 통해 유효성 검사를 수행하고 유효성
검사에 통과한 값들을 cleaned_data 사전 값을 통해 제공받을 수
있고요 이 사전 값을 출력해서 내역을 확인해 보면 각 폼 필드에 맞게 값이 변환되어 있음을
확인하실 수 있습니다 불리한 필드 폼필드는 ON 문자열을 참 값으로 변환했고, 캐릭터 필드
폼필드에서는 좌우 공백을 제거했으며, 인테이저 필드 폼필드는 정수로 변환했고, URL 필드
폼필드는 캐릭터 필드 기반이기에 좌우 공백을 제거하고, 누락된 스킴도 HTTP로 자동
추가해줬습니다.
폼필드의 disabled 참 설정으로 비활성화시킨 폼필드에 대해서는 값이 전달되더라도,
Django 폼에서는 비활성화된 입력 값을 무시하고, 그 필드의 초기 값으로 값을 구성함을
확인하실 수 있습니다.
각 폼필드의 값 변화는 toPython 메서드에 의해서 이루어집니다.