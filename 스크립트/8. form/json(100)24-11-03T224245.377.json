폼 클래스와 쌍으로 모델 폼 클래스가 있듯이 폼셋 팩토리와 쌍으로 모델 폼셋 팩토리가
있습니다. 모델 폼셋 팩토리를 사용하면 유효성 검사에 통과한 값들에 대한 모델로의 생성,
수정, 삭제 로직을 보다 단결하게 구현하실 수 있게 됩니다.
메모 모델에 대한 모델 폼 클래스를 이렇게 정의하고요.
메모 폼 폼 클래스를 모델 폼 상속으로 변경하고요.
일일이 지정했던 폼 필드들을 제거하고 메타의 모델 속성 및 필드 속성을 지정하여 모델
폼으로 변경합니다.
모델 폼을 사용하니까 유효성 검사에 통과했을 때에는 이렇게 save method 호출만으로
모델 저장까지 마무리됩니다.
모델 폼셋 팩토리를 통해 여러 개의 동일한 모델 폼 인스턴스를 생성하거나 수정 혹은 삭제를
하실 수 있습니다.
모델 폼셋 팩토리 함수로 모델 폼셋 클래스를 동적으로 생성해서 요청을 처리합니다
모델 인자로 관련 모델 클래스를 지정하고 폼 인자로 관련 모델 폼 클래스를 지정하며
익스트라 인자로 추가 폼 개수를 지정합니다
모델 폼셋에서는 수정폼과 생성폼이 동시에 지원되는데요 모델 폼셋 클래스의 생성자에 쿼디셋
인자를 non으로 지정하면 모든 모델 레코드에 대한 수정폼이 기본으로 뜨고 extra
인자로 지정한 개수만큼 생성폼이 추가로 제공됩니다 수정폼 없이 생성폼만 노출하고자 하신다면
쿼디셋 인자로 빈 쿼디셋을 지정하시면 됩니다 유효성 검사를 통과하고 나서 폼셋의 save
메서드를 호출하면 반환 값으로 저장된 모델 인스턴스의 리스트가 제공됩니다.
메모 뉴 뷰에서 모델 폼 사용을 위해 폼셋 팩토리를 모델 폼셋 팩토리로 변경합니다.
모델 인자를 추가로 지정해 주면 팩토리 변경은 끝입니다.
모델 폼셋 팩토리는 모델 폼 기반이니 save 메서드를 지원합니다.
직접 저장을 구현했었던 코드들은 모두 제거하고요.
폼셋.save 호출만 남깁니다.
반환 값으로 저장된 모델 인스턴스들의 리스트를 반환합니다.
웹 페이지를 새로 고침하시면 기존 저장되어 있던 모든 메모들에 대해서 수정 폼이 뜨고요.
Extra 인자로 지정한 개수만큼 생성 폼이 뜹니다.
수정 폼에서 값 입력 후에 폼 제출을 하시면 수정으로 동작을 하고요.
생성 폼에서 값 입력 후에 폼 제출을 하시면 생성으로 동작을 합니다.
모델 폼셋 생성자에서는 수정 폼 대상을 지정하는 쿼리셋 인자를 추가로 받는데요.
값이 논이면 모든 레코드를 대상으로 수정 폼을 띄워주고요.
이렇게 빈 쿼리셋을 지정하시면 수정폼이 뜨지 않습니다.
쿼리셋 인자를 non으로 지정하고 extra 인자를 0으로 지정하시면 생성폼 없이 수정폼만
보여집니다. 현재의 메모 모델 인스턴스 저장에서는 메모 폼, 폼 클래스를 통해 필요한 값을
모두 제공받고 있는데요
만약 유저 필드나 IP 필드처럼 메모 모델 인스턴스 저장 전에 지정되어야 할 필드가 있다면
폼셋 내에 모델 인스턴스 저장을 지연시킬 필요가 있습니다
이때 폼처럼 폼셋에서도 save 메서드 호출 시에 commit 인자를 지원해 줍니다.
commit 인자를 지정하고 아직 저장되지 않은 모델 인스턴스 리스트를 반환받아서 수동으로
각 모델 인스턴스에 save 메서드를 호출하여 저장을 수행해 줍니다.
그리고 made-to-many 관계 저장을 위해서는 폼셋 메서드에 saveM2M 메서드를
호출하는 것도 잊지 마세요.
현재 저장된 메모가 없음에도 성공 메시지가 출력이 되네요.
저장된 모델 인스턴스 리스트에 값이 있을 때에만 성공 메시지를 보여주겠습니다.
formset.SaveMethod 호출 시에 모델 인스턴스 저장을 하지 않고 지연시키기
위해 commit 거짓 인자를 지정하고요.
반환받은 모델 인스턴스 리스트를 순회 돌며 추가로 지정할 필드가 있다면 지정해주고 모델
인스턴스를 저장합니다.
모든 모델 인스턴스를 저장한 후에 폼셋 인스턴스의 saveM2M 메서드 호출을 통해
매투매니 관계 저장도 잊지 마세요
웹페이지 새로고침하시고 메모들 수정, 생성해 보시면 정상적으로 잘 동작합니다
모델 폼셋 팩토리 함수에 canDelete 인자를 지정하여 삭제 지원을 활성화 시킬 수
있습니다. 그럼 매 폼마다 삭제 체크박스가 추가됩니다.
유효성 검사 후에 삭제를 수행할 때에도 폼셋 인스턴스의 save 메서드 호출만으로
생성, 수정, 그리고 삭제까지 모두 일괄 처리됩니다.
참 편리하죠?
삭제된 모델 인스턴스 리스트는 폼셋 인스턴스의 deleted object 속성을 통해
참조하실 수 있습니다.
삭제 지원을 위해 모델 폼셋 팩토리에 can_delete 참 인자를 지정합니다.
디폴트도 거짓이고요.
웹페이지 새로고침하시면 각 폼마다 삭제 버튼이 추가됩니다.
현재는 form.save() 메서드 호출 시에 commit 거짓 인자를 지정했기 때문에
삭제를 체크한 폼이 자동 삭제되지 않습니다.
다시 commit 참 인자로 변경하시고 삭제할 폼을 체크하고 폼 제출을 하시면 삭제로 잘
동작합니다. 삭제된 모델 인스턴스 리스트는 폼셋 인스턴스의 Deleted Objects
속성을 통해 참조하실 수 있습니다.
삭제된 모델 인스턴스가 있을 때 삭제 알림 메시지를 추가해 주겠습니다.
폼셋의 삭제 지원 옵션을 켜셨는데 폼셋 인스턴스의 save method 호출 시에
commit 거짓 인자를 지정하시면 폼셋 내부에서 처리해주는 모델 인스턴스에 대한 생성
수정 그리고 삭제까지 모두 직접 처리해 주셔야 합니다
폼셋의 save() 메서드의 반환 값으로 아직 저장되지 않은 모델 인스턴스 리스트를 반환
받고요. deletedObjects 속성으로 아직 삭제되지 않은 모델 인스턴스 리스트를
참조하실 수 있습니다.
아직 저장되지 않은 각 모델 인스턴스에 대해서 save 메서드를 호출하여 저장을 해주고요.
many2many 관계 저장을 위해서 폼셋 인스턴스의 save 함수도 잊지 않고 호출해
줍니다. 삭제되지 않은 모델 인스턴스 리스트에서 k 값만 뽑아서 코디셋의 delete
메서드를 통해 일괄 삭제토록 구현해 줍니다.
formset.save() 메서드 호출 시에 commit 거짓 인자를 지정하고 수동으로
삭제를 구현해 주겠습니다.
formset.DeletedObjectList의 모델 인스턴스들은 아직 삭제되지
않았습니다. 각 모델 인스턴스마다 delete 메서드를 호출하여 개별 삭제를 수행하실 수도
있겠고요.
pklist를 만들어서 코디셋을 통해 일괄 삭제로 구현해 보겠습니다.
삭제도 잘 동작하네요.