세션 스토리지나 쿠키 스토리지를 통해 각 단계의 데이터들이 이렇게 저장이 됩니다.
1단계를 통과하고 나면 세션에는 이렇게 다음 단계는 Step 키로 1이며 현재까지 저장된데이터는 데이터와 파일을 구분하여 Step 데이터 키로 각 단계의 데이터들이 저장되어 있습니다. 
모든 단계를 다 통과한 후에 돈 메서드가 호출되고 나서는 저장된 폼 내역이 이렇게 초기화됩니다.
앞에서는 각 단계의 단계명을 인덱스 방식으로 문자열로 0, 1, 2 이렇게 참조했었는데요
인덱스 방식의 참조는 코드가 조금만 복잡해져도 현재 인덱스가 어떤 단계인지 어떤 폼을 처리하는 것인지 헷갈립니다
폼리스트 속성에 각 단계명의 이름을 지정할 수 있습니다
이렇게 튜플 타입으로 단계명을 쓰고 폼 클래스를 지정하는 방식이고요
그럼 이제 단계명은 0, 1, 2 인덱스가 아니라 우리가 지정한 단계명으로 명확하게 어떤 폼을 지정하는지 인지할 수 있게 됩니다.
유저 프로필 위저드 뷰의 폼 리스트 설정에서 유저 프로필 폼에 대한 단계명을 프로필 폼으로 지정하고 유저 폼에 대한 단계명을 유저 폼으로 지정하겠습니다.
그럼 단계를 참조하는 코드에서는 이제 인덱스 방식의 문자열 0, 1, 2가 아니라 이렇게 지정된 단계명을 사용해야만 합니다.
소스파일 저장하시고요.
잘 동작합니다.
돈 메서드 도출 시에 FormDict 인자를 통해 키를 통해 각 폼 인스턴스를 참조하실 수 있습니다.
FormList 속성에서 각 단계의 단계명을 의미 있게 지정했기에 FormDict 인자의 키를 지정할 때에도 보다 명확한 코드로 폼 인스턴스를 참조할 수 있게 되었고요.
원하는 이미 순서대로 폼 저장을 수행하실 수 있습니다.
돈 메서드에서 formList 인자와 formDict 인자 값을 출력해 보겠습니다.
2단계까지 수행한 후에 개발 서버 로그를 확인해 보면 이렇게 formList는 리스트로 각 form 인스턴스들이 확인이 되고요.
form_dict은 사전으로 이렇게 각 단계명으로 form 인스턴스들이 확인됩니다.
그럼 formList, List를 순회를 돌며 form.save 메서드를 호출하실 수도 있고요.
폼 리스트의 인덱스로 각 폼 인스턴스를 참조하여 이미 순서로 폼점 세이브 메서드를 호출하실 수도 있고요.
form_dict 사전으로 각 단계명으로 폼 인스턴스를 참조하여 이미 순서로 폼점 세이브 메서드를 호출하실 수도 있습니다.
모델 폼의 save 메서드 호출이니 commit 거짓 인자를 지정하여 모델 인스턴스 저장을 지연시켜 추가적인 필드를 지정한 후에 저장을 수행하실 수 있습니다.
마법사 UI에서 유저 폼을 먼저 입력받고 프로필 폼을 입력받는데요.
유저 폼을 입력받을 때 체크박스를 제공하여 그 체크박스의 체크 여부에 따라 프로필 폼 생략 여부를 결정할 수 있습니다.
이를 위해 ConditionDict 속성을 설정하고요.
Key도는 단계명을 지정하고 값으로는 해당 단계의 생략 여부를 결정하는 함수를 지정합니다.
이 함수가 참을 반환하면 해당 단계를 수행하고 거짓을 반환하면 해당 단계를 생략합니다.
유저 폼 폼 클래스에는 프로필 수정 여부를 입력받는 부울 필드, 폼 필드를 추가합니다.
이 폼 필드를 체크하지 않아도 유효성 검사를 통과하도록 Required 인자를 지정하고요.
초기 값은 참으로 지정했습니다.
이 필드가 체크되면 프로필 폼 단계를 수행할 것이고요.
체크가 해제되면 프로필 폼 단계를 생략할 거예요.
프로필 폼 생략 여부를 결정짓는 checkIsProfilUpdate 함수는 현재 뷰 인스턴스를 위자르 인자로 받습니다
getCleanedDataForStep 메서드로 지정 단계의 cleanedUnderbarData 사전 값을 조회할 수 있어요
이 값이 non이면 지정 단계를 아직 수행하지 않은 것이고요
cleanedUnderbarData 사전에서 프로필 수정 여부 필드 값을 조회하여 반환합니다 
그럼 해당 필드를 체크했을 때에만 프로필 폼 입력을 받고요 체크하지 않으면 프로필 폼 입력 단계를 생략할 겁니다.
DOM 메서드에서는 프로필 폼 입력 단계가 생략되면 프로필 폼 인스턴스에 대한 저장을 수행하지 않도록 코드를 추가해 줍니다.
유저 폼을 먼저 입력받고 입력받은 유저 폼 내에서 체크박스 선택에 따라 프로필 폼 입력 여부를 결정할 것입니다.
그러니 유저 폼을 먼저 입력받도록 순서를 조정하고요.
각 단계명은 인덱스가 아니라 의미 있는 이름으로 지정했으니 폼 리스트 속성의 순서가 바뀌어도 Get Form Instance 내에서 참조하는 단계명을 수정할 필요는 없습니다.
UserForm 클래스에 IsProfileUpdate, BooleanFormField를 추가하고요.
UserProfileWizardView에 ConditionDict 사전 속성을 추가합니다.
Key로는 단계명을 지정하고, 값으로는 그 단계를 수행할지 여부를 결정하는 함수를 지정합니다. 
그 함수는 인자를 한 개 받고요.
인자는 현재의 WizardView, ViewInstance입니다.
이 함수에서 즉시 거짓을 반환해 보겠습니다
그러면 1단계인 유저 폼 단계에서 다음으로 넘어가면 2단계인 프로필 폼 단계가 수행되지 않고 즉시 done 메서드가 호출됩니다
2단계인 프로필 폼 단계가 수행되지 않았으니 폼딕 사전에서도 프로필 폼 키가 없는 상황입니다 
프로필 폼 단계는 옵션 상황이니 이렇게 키 체크를 하도록 변경해 주겠습니다
페이지 새로고침 하시면 2단계는 생략하고 1단계만 수행하여 저장이 되었습니다.
checkIsProfilUpdate 함수에서 WizardView 인스턴스에 getCleanedDataForStep 메서드를 호출하여 유저 폼 단계의 cleanedUnderbarData 사전을 줘야 합니다.
이 값이 논이라면 유저 폼 단계가 수행되지 않은 상황일 것이고요.
현재 구성으로는 그러한 상황은 발생하지 않겠지만 그 상황에서는 참을 반환하여 프로필 폼 단계를 수행해 주겠습니다.
cleaned-underbar-data 사전에서 isProfileUpdate 값을 조회하여 반환합니다. 
이제 해당 체크박스가 체크되면 프로필 폼 단계가 수행되고 체크가 해제되면 프로필 폼 단계가 생략됩니다.
장고 폼 툴즈 라이브러리에서는 폼셋도 지원하거든요
폼셋 지원을 위해서는 템플릿에 이렇게 폼셋 대응 코드만 넣어주시면 됩니다
위자드 뷰에서는 폼셋도 지원하고요 현재의 프로필 위자드.html 템플릿은 각 단계에서 폼만 대응하고 있고요 
이렇게 폼셋 대응 코드를 추가해 주세요