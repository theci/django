장고의 모델 폼을 활용해서 포스트 모델에 의존적인 포스트 폼 클래스를 선언할 수 있습니다 
메타 속성으로 의존할 모델명과 필드명만 나열하면 모델 폼에서 지정한 모델 필드들로부터 폼 필드 설정을 조회하여 자동으로 폼 필드를 구성해 줍니다
지정 모델 클래스로부터 자동으로 폼 클래스를 구성해 준다는 것을 제외하고는 일반적인 폼 클래스와 동작이 거의 같습니다 추가로 폼필드를 추가하실 수도 있어요
템플릿 코드도 동일하고요 포스트 요청을 받는 코드도 동일합니다
모델 폼에서는 save 메서드를 추가로 지원하고요 호출하면 내부에서 유효성 검사를 통해 정제된 값들을 모델 인스턴스를 생성하여 데이터베이스 저장까지 수행하고 생성된 모델
인스턴스를 반환합니다
앞선 슬라이드에서는 직접 모델 인스턴스를 생성하고 값 할당까지 일일이 구현했었는데 포스트 모델에 의존적인 모델 폼을 사용하니 이렇게 간결하게 모델 인스턴스 생성을 구현했습니다.
모델 폼은 단일 모델에 대한 폼 처리를 지원하고요.
모델과의 강한 의존성으로 모델의 변경이 모델 폼에 자동으로 반영됩니다.
이를 통해 생산성이 극적으로 향상됩니다.
장고 어드민에서 모델 등록만으로 입력 폼을 생성해 주는 것은 어드민에서 자동으로 모델 폼 클래스를 생성했기 때문입니다.
웹로그의 forms.py 파일에서 PostForm 클래스의 부모 클래스를 모델 폼으로 변경합니다. 
이제 모델 폼 클래스이니 메타 클래스도 필요한 모델 폼 설정을 적용하실 수 있고요. 
Post 모델에서 가져올 필드 이름을 리스트로 지정합니다.
타이틀, 컨텐츠, 스테이터스, 포토 모두 포스트 모델에 등록된 필드명입니다.
이렇게 모델 클래스에 필드 이름만 나열하시면 모델 폼에서 각 모델 필드에 폼필드 메서드를 호출하여 폼필드를 자동으로 생성해서 폼에 등록합니다.
PostNewView에서 수동으로 모델 인스턴스를 생성하던 코드는 모두 제거하시고요.
동일한 동작을 하는 모델 폼에서 지원하는 form.save 메서드를 호출해서 모델 인스턴스를 통한 저장을 수행하실 수 있습니다.
모델 폼의 save 메서드에서는 commit 인자 하나를 지원하고요.
default 값은 참입니다.
각 모델폼 인스턴스 내에서는 모델 인스턴스를 하나씩 관리하고 있습니다.
그 모델 인스턴스에는 클린드 언더바 데이터 사전에 모든 값이 필드 값으로 채워져 있고요.
커밋 인자가 참이면 모델 인스턴스의 save 메서드를 호출하고 모델 인스턴스를 반환하고요.
커밋 인자가 거짓이면 모델 인스턴스의 save 메서드를 호출하지 않고 모델 인스턴스를 반환합니다. 
포스팅 생성 폼에서 타이틀, 컨텐츠, 스테이터스, 포토, 필드 값을 채워 넣고 제출하시면 종전대로 저장이 될 것이고요.
어드밋 페이지를 통해서도 저장된 내역을 확인하실 수 있습니다.
폼 클래스에는 세이브 메서드가 없으니 오른쪽과 같이 구현하시면 뷰에서는 모델 폼, 폼
여부에 상관없이 일관된 코드를 사용하실 수 있습니다.
save 메서드에서는 단 한 개의 인자로서 커밋을 받습니다.
default 값은 참이고요.
모델 폼 인스턴스에서는 내부에서 모델 인스턴스를 하나 관리하고 있습니다.
세이브 호출 시에 그 모델 인스턴스의 필드 값을 채워 놓고요.
아직 데이터베이스에는 저장을 안 하고 메모리 상의 인스턴스만 변경한 상태이죠.
커밋 인자가 참이면 데이터베이스로의 저장을 위해서 모델 인스턴스의 save 메서드를 호출하고
커밋 인자가 거짓이면 모델 인스턴스의 save 메서드를 호출하지 않습니다.
그냥 모델 인스턴스를 반환하죠.
모델을 거짓으로 지정할 때에는 모델 인스턴스의 저장 시점을 뒤로 미루고 싶을 경우입니다.
모델 인스턴스를 저장하기 전에 아직 필수 값을 지정하지 못했거나, 저장되지 않은 모델
인스턴스들을 여럿 모아서 한 번에 저장하고 싶을 수도 있겠죠.
그럴 때 사용하는 인자입니다.
모델 내역대로 폼 입력을 받으실 경우, 모델 폼을 사용하시면 높은 의존성으로 빠르게
구현하실 수 있게 됩니다.
모델이 변경되면 모델 폼에도 자동 반영되니까요.
반드시 모델 폼을 써야만 상황에 따라 폼에서 모델에 대한 의존도를 낮추시려면 폼 클래스를
따로 정의하여 낮은 의존으로 유연하게 구현하실 수도 있습니다.
모델 폼은 단지 반복을 줄여주는 도구일 뿐입니다.
뷰에서는 입력 값을 처리할 폼 클래스만 지정할 뿐 그 외의 코드는 폼필드와 관련된 코드가
일절 없습니다.
포스트폼 폼 클래스만 다른 클래스로 변경하면 다른 형태의 입력 값을 처리하는 뷰로
변신합니다. 여러 생성 요청을 처리하는 뷰를 구현해 보시면 폼 클래스만 다른 반복된 뷰
코드를 보시게 될 테고, Django에서는 이러한 뷰 코드 반복을 줄여줄 수 있는
CreateView, 클래스 기반 뷰도 제공해 주고 있습니다.