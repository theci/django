기존 FormView 코드를 CreateView와 UpdateView를 통해 재구현해
보겠습니다.
FormView 구현에서 Form 클래스는 CleanedUnderbarData 사전까지만
생성해 줄 뿐, 모델 인스턴스에 대한 처리는 Form 클래스가 아닌 View를 통해서
처리되어야 합니다.
CreateView, UpdateView, Class 기반 뷰 구현에서는 모델 폼 클래스를
사용합니다. 모델 폼에서 save 메소드를 통해 모델 인스턴스에 대한 저장을 지원합니다.
CreateView를 활용한다면 모델 속성을 추가로 지정하고 폼 클래스 속성으로 모델 폼
클래스를 지정합니다.
CreateView의 FormValid 메서드 기본 구현에서는 Form.Save 메서드를
호출하여 생성된 모델 인스턴스를 저장하고 성공 주소로 이동 응답합니다.
그러니 기본 구현만으로 충분하고요.
FormValid 메서드는 재정의하지 않겠습니다.
템플릿 경로는 지정하지 않으면 부모 밑에 모델명 소문자 언더바 폼점 HTML 경로가
디폴트로 사용되고요.
현재 그 패턴에 맞춰 템플릿 파일을 생성해 뒀으니 템플릿 네임 속성도 지정하지 않아도
됩니다. 폼뷰를 활용한 수정 뷰 구현이 있고요.
모델 초기값 지정을 위해 getInitial 메서드를 재정했고, 관련 모델 인스턴스 조회
및 초기값 생성을 구현했습니다.
업데이트 뷰 구현에서는 getObject 메서드를 통해 url_kwargs
사전에서 pk 이름의 관련 모델 인스턴스 조회가 이루어지고요.
모델 폼에서는 이니셜 인자를 지원하지 않고 인스턴스 인자만 지원하고요.
인스턴스 인자를 지정하면 폼필드 초기 값이 자동으로 입력되죠.
업데이트 뷰에서는 get 요청과 force 요청을 처리하여 모델 폼 인스턴스를 생성할 때
인스턴스 인자를 자동으로 지정해줍니다.
그러니 url-captured-values에 tk 이름의 기본 키인자만 있다면 모델
인스턴스 조회 및 초기값 지정에 대해서는 우리가 신경 쓸 필요가 없습니다.
만약 다른 조회 조건을 사용한다면 lookupField 속성을 변경하거나 getObject
메서드를 재정의해야 합니다.
업데이트 뷰의 formValid 구현에서는 유효성 검사에 통과한 모델 폼 인스턴스의
save 메서드를 호출하고 성공 url로 이동하는 응답입니다.
기본 구현으로 충분하니 재정의하지 않겠습니다.
이처럼 각 클래스 기반 뷰의 설계에 맞게 사용하시면 설정에 가까운 코드로 간결하게 뷰
구현을 하실 수 있고요.
클래스로 구현되어 있기에 특정 메서드만 재정리해서 원하시는 대로 동작을 변경하거나 추가하실
수 있습니다.
Create View, Update View 동작 기회를 위해 Django Vanilla Views
Views 코드를 보시면 코드 읽기가 훨씬 수월합니다.
CreateView에서는 FormView 구현과 비교해서 FormValid 메서드 구현에서
Form.Save 메서드를 호출하는 부분이 추가되었고요.
Getsuccess_url 메서드에서는 success_url의 속성이 없을 경우 생성된 모델
인스턴스에 GetAbsoluteURL 메서드를 호출하여 이동할 주소를 획득하는 부분이
추가되었습니다.
그리고 FormView 클래스에서는 반드시 FormClass 클래스 변수를 지정했어야
했다면 CreateView 클래스에서는 form_class 설정을 지정하지 않아도 관련 모델
속성과 Fields 속성을 지정한다면 GetFormClass 메서드 내에서 자동으로 모델
FormClass를 생성합니다.
간결한 모델 폼 구현에서 사용하고요.
모델 폼 커스텀이 필요한 경우에는 폼 클래스 속성을 사용합니다.
업데이트 뷰에서는 CreateView 구현과 비교해서 초기 입력 폼 요청 시에 수정할 모델
폼 인스턴스를 하나 조회해서 모델 폼 인스턴스 생성 시에 전달하는 부분이 추가되었고요.
나머지 코드는 CreateView 코드와 동일합니다.
모델에 유저로부터 입력받지 말아야 할 필수 필드가 있는 상황을 클래스 기반뷰에서 처리하는
방법을 살펴보겠습니다
IP 필드의 예이고요 함수 기반 뷰와 클래스 기반뷰 모두 form 인스턴스의 save
메서드를 호출할 때 커밋 인자를 거짓으로 지정하고 필수 필드 값을 지정하시고 나서 모델
인스턴스의 save 메서드를 호출하는 방식으로 구현합니다 그런데
CreateView, UpdateView 구현해서 부모의 FormValid 메서드를
호출하실 경우 부모에서 FormInstance의 save 메서드 호출을 통해 모델
인스턴스에 대한 SaveMethod 호출이 이루어지거든요.
그러니 재정의한 FormValid 메서드에서는 모델 인스턴스의 save 메서드 호출을
하지 않으셔야 합니다.
부모에서 하니까요.
호출한다면 업데이트 코리가 두 번 전달이 됩니다.
클래스 기반 뷰를 상속받은 PostCreateView 구현을 CreateView 상속으로 변경해
보겠습니다 모델 속성을 지정하면 디폴트 템플릿 경로를 계산해서 사용할 수 있습니다
CreateView 구현에서 GetTemplateNames 메서드 구현을 보시면 템플릿
네임 속성이 지정되어 있다면 그 속성 값을 리스트로 반환하고요 없다면 모델 속성이 지정되어
있을 경우 템플릿 디폴트 경로를 계산해서 리스트로 반환하도록 구현되어 있습니다
템플릿 네임 속성과 모델 속성 둘 다 미지정이면 Improbably Configured
예외를 발생시킵니다.
크리에이트뷰의 FormValid 구현에서는 모델 폼 인스턴스의 save 메서드을
출시해 커밋 인자를 참으로 지정하여 관련 모델 인스턴스도 저장하고 many-to-many
관계도 저장하거든요.
그러니 post-createView의 form-valid 구현에서는 form.save
메서드를 호출 시에 commit 거짓 인자를 지정하여 아직 저장되지 않은 모델 폼
인스턴스를 받아 필수 필드인 IP 필드만 설정하고요.
부모의 form-valid 메서드를 호출하면 폼 인스턴스의 save 메서드 호출 시에
commit 인자를 참으로 지정해서 호출하여 모델 인스턴스로 저장하고 many-to-many
관계도 저장하고 성공 URL로 이동하는 응답 객체도 생성하게 됩니다.
포스팅 생성 테스트를 해보시면 생성이 잘 되고요.
many-to-many 필드인 태그도 잘 저장이 되었음을 확인하실 수 있습니다.
이번에는 폼뷰를 상속받은 PostUpdateView 구현을 UpdateView 상속으로
변경해 보겠습니다.
앞선 PostCreateView와 거의 동일한 설정을 가집니다.
모델 속성을 지정하고 모델 속성으로 계산될 템플릿 경로에 템플릿 파일이 있으므로 템플릿
네임 속성은 생략하겠습니다.
업데이트 뷰 클래스 기반 뷰에서는 form 생성자로 인스턴스 인자를 지정해 주기 때문에
getFormMethod 제정의 코드는 필요 없습니다.
그리고 기본 formValid 구현에서도 form 인스턴스의 save 메서드를 호출하고
성공 주소로 이동하는 응답이 있습니다.
그러니 formValid 메서드 제정의 코드도 필요 없습니다.
수정 동작을 확인해 보시면 잘 동작합니다.