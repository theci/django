로그인 유저의 프로필을 수정하는 뷰를 하나 만들어 보겠습니다.
Account 앱에는 아직 urls.py 파일이 없으니 생성하고요.
프로필 에디트 함술뷰를 만들고 로그인 이퀘이어를 장식자로 랩핑하여 로그인 상황을 보장받도록
했습니다. 폼 구현은 뒤에서 하고요.
간단히 템플릿 응답만 추가하고 url 패턴도 등록합니다.
마이 사이트의 URS 파이에서 Accounts URS에 대한 Include도 추가합니다.
로그인 상황에서 Accounts Profile Edit 주소에 접근하면 프로필 수정 폼
화면이 뜹니다.
만약 Accounts에 로그인 페이지로 이동하신다면 Admin 페이지를 통해 로그인을
해주세요. 로그인 기능은 뒤 챕터에서 다룰 거예요.
프로필 모델 내역대로 폼필드 입력을 받을 테니 모델 폼 클래스를 상속받은 프로필 폼
클래스를 정의합니다
프로필 모델의 모델 필드 중에서 어떤 필드를 유저로부터 입력받아야 할까요?
어떤 필드를 유저로부터 입력받지 않아야 할까요?
유저 필드와 포인트 필드는 유저가 변경할 수 없어야 할 것이고요
어드레스 필드와 포토 필드는 유저가 변경할 수 있어야 할 것입니다
프로필 폼의 필드 설정에 어드레스와 포토 필드명을 추가하겠습니다
프로필 에디트 뷰에서 폼을 처리하는 전형적인 뷰 코드를 작성하겠습니다.
유효성 검사에 통과하면 다시 프로필 편집 뷰로 이동을 시키겠습니다.
템플릿도 전형적인 폼 처리 코드로 작성합니다.
파일 업로드가 있기 때문에 ENC 타입 속성으로 멀티파트 폼 데이터로 지정해 주셔야
브라우저가 파일 업로드를 합니다.
현재의 프로필 에디트 뷰가 동작하면 address 필드와 photo 필드 값만으로 유효성
검사를 수행하고 새로운 프로필 레코드로 저장을 시도할 것입니다.
이때 저장을 시도하는 프로필 모델 인스턴스에서는 유저 필수 필드가 지정되어 있지 않으니
세이브를 호초하는 인서트 코디 수행 시점에 데이터베이스 오류가 발생할 것입니다
항상 새로운 프로필 레코드로 동작해서는 안 되겠죠
프로필 모델에서는 유저 모델과 1대1 관계를 정의했으니 로그인 유저가 프로필을 가지고
있다면 수정으로 동작해야 하고요 로그인 유저가 프로필을 가지고 있지 않다면 새로운 프로필
생성으로 동작해야 할 것입니다
모델 폼 생성자의 인스턴스 인자는 디폴트 값이 None입니다.
인스턴스 인자가 None이면 생성으로 동작한다는 거죠.
Django 뷰에서는 Request 요청 객체에서 User 속성으로 로그인 유저의 유저
모델 인스턴스가 제공됩니다.
그럼 request.user.profile 속성으로 그 로그인 유저의 프로필 인스턴스를
조회할 수 있고요.
그 로그인 유저에게 프로필이 없다면 DoesNotExist 예외가 발생합니다.
그럼 그 예외가 발생하면 인스턴스 변수를 non으로 생성할 수 있겠네요.
이렇게 생성한 인스턴스 변수를 각 모델 폼 생성자에 지정합니다.
로그인 유저에게 등록된 프로필이 있다면 수정으로 동작하고, 등록된 프로필이 없다면 생성으로
동작할 것입니다.
저장 시에는 필이 유저 필드의 값을 할당해야 하고요.
이제 Accounts 웹 프로필의 Edit 뷰에서 주소를 입력하고 제출하시면 포스트 요청이
전송되고 프로필이 잘 저장이 되고 있음을 확인하실 수 있습니다
이제 클래스 기반 뷰로 구현을 해 보겠습니다 수정 기능이니 Update 클래스 기반 뷰로
구현을 하겠고요 업데이트 뷰 구현 코드를 보시면 form 인스턴스 생성 시에 인스턴스
인자를 getObject 메서드의 반환 값으로 전달합니다.
수정할 대상 모델 인스턴스는 로그인 유저의 프로필 모델 인스턴스여야 하는데
urlCapturedValue의 pk 인자로 조회를 하는 것이 아니죠.
그 대상은 request.user.profile 속성이고 doesNotExist 예외가
발생할 수도 있습니다.
앞서 프로필 에디트 뷰에서 구현한 대로 인스턴스 변수를 생성한 코드를 getObject
메서드를 재정의해서 적용해줍니다.
그리고 formValid 메서드를 재정의하여 저장 시에 유저 필드 값을 지정한 뒤에
데이터베이스 저장이 이뤄지도록 하고요.
프로필 업데이트 후에 이동할 주소는 어카운츠 앱의 프로필 에디트로 지정합니다.
아! 폼 클래스 속성 지정이 빠졌네요.
추가해 줍니다.
앞선 프로필 에디트 함수 기반 뷰와 동일하게 동작을 하고요.
폼 태그에 누락된 ENC 타입 멀티파트 폼 데이터 속성도 추가해 줍니다.
이제 프로필 사진 파일 업로드도 잘 처리가 되네요.
클래스 기반 뷰에서는 로그인 리퀘어드 믹싱 클래스를 상속받아 뷰 호출 시에 로그인
상황임을 보장받을 수 있습니다.