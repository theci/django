이번에는 로그인 기능인데요.
항해사와 파일럿이 일지를 쓰고 요리사가 레시피를 기록하듯이 프로그램에서는 내부에서 일어나는
일들을 기록할 필요가 있습니다.
예를 들어 프로그램에서 발생하는 이벤트, 인사이트 데이터, 오류 동작들을 기록해야
하는데요. 이러한 기록 행위를 로깅이라고 부릅니다
그러한 기록들을 단순히 프린트함 호출만으로 출력한다면 기록을 그냥 흘려보낼 뿐이죠
요즘같이 데이터가 중요한 시대에 참으로 안타깝습니다
Django의 로깅 기능은 Python의 로깅 기능을 그대로 가져왔고요
로깅에서는 로그를 생성하는 코드와 로그를 처리하는 설정으로 나눌 수 있습니다
로그를 만드는 코드에서는 로그가 어디로 가는지 어떻게 처리되는지에 대해서는 전혀 신경 쓸
필요가 없습니다
로그를 처리하는 설정에 따라서 로그 포맷을 변경하거나 로깅 여부를 결정하거나 로그를 화면에
출력할 수도 있고요 파일에 기록할 수도 있고, 이메일로 보낼 수도 있고, 푸시나 문자로
보낼 수도 있습니다.
로그 생성과 처리는 엄격히 분리됩니다.
관심사의 분리인 거죠.
Django 로깅 디폴트 설정에서는 Django 라이브러리 내 모든 영역에 대해서 인포
레벨 이상의 로그에 대해서 콘솔 핸들러와 메일 어드민스 핸들러를 적용하고 있습니다
콘솔 핸들러는 인포레벨 이상의 로그에 대해서 settings.debug 설정이 참일 때만
동작하며 화면에 로그를 출력합니다
메일 어드민스 핸들러는 에러 로그에 대해서 settings.debug 설정이 거짓일 때만
동작하며 SMTP 설정이 되어 있을 때 settings.admins에 등록된 메일 주소로
오류 메일을 자동으로 보냅니다
이 코드는 Django 개발 서버의 코드입니다.
Django 개발 서버 내에서 하나의 요청이 처리되었을 때에 로그를 남기는데요.
인포 레벨로 로그를 남기고 있죠.
이 로고의 네임 스페이스는 Django.Server이고요.
그러면 로깅 설정에서 로고스에서 Django.Server의 설정을 받습니다.
이 설정은 인포 레벨의 로그에 대해서만 처리하도록 되어 있고요.
장고점 서버 핸들러를 통해서 처리하게 되어 있죠
핸들러스에서 장고점 서버 핸들러가 있고 이 핸들러도 인포 레벨 이상일 때만 처리하도록 되어
있습니다 그리고
로깅.스트림
핸들러를 통해서 화면에 출력하도록 되어 있는데요 출력 서식을 지정할 수 있는데 출력 서식도
장고점 서버죠
그러면 Formatters에 지정된 장고 서버를 보시면 출력 포맷이 대관로를 쓰고 서버
시간과 메시지를 출력하도록 되어 있습니다
그래서 장고 개발 서버에서 보시면 이와 같이 대관로 쓰고 서버 시간과 그리고 메시지가
출력되는 로그 포맷인 거죠
여러분들이 만약 이 로그 포맷을 변경하시려면은 Formatters에서
Django.Server 포맷을 바꾸시면은 이 로그 메세지로 바뀌는 것이고요
혹은 화면에 출력하는 것이 아니라 다른 핸들러의 처리가 필요하시면은 Logos에서
Handlers를 재정의해서 다른 핸들러로 변경해서 로그 처리를 변경을 하실 수 있게
됩니다 앞서서 mail-admins라는 핸들러가 있었죠
이 핸들러를 통해서 로그를 처리하게 되면 이 핸들러는 에러 레벨 이상의 로그에 대해서
처리하는데요 settings.debug라는 설정이 거짓일 때만 동작을 하고요 로그 처리는
admin_mail_handler를 통해서 처리하죠
어드밋 메일 핸들러의 코드를 보시면 로그 핸들러는 로그를 처리할 때 emit이라는 메서드가
호출되는데요 로그를 처리할 때 send__mail이라는 메서드를 호출하도록 되어 있고요
send_mail은 mail.mail__admins라는 함수를 호출하도록 되어 있습니다
mail-admins라는 함수는 settings.admins라는 설정이 없으면 즉시
반환하고요. 내부 코드에서 settings.admins에 등록된 유저들에게 메일을 보내도록
되어 있습니다. 이 admin 메일 핸들러를 쓰시려면 settings 설정에서
ADMINS라는 리스트에 관리자에 대한 이름과 메일 주소를 이렇게 등록을 하고요.
그리고 디버그 설정이 거짓, 즉 실서비스 상태라는 거고, 알로드 호스트 포트 번호를 제외한
서비스 주소가 지정이 되어 있고 SMTP 설정도 되어 있으면 서버 에러가 발생하잖아요.
발생하게 되면은 리민스에 등록된 메일로 이와 같은 에러 메일을 오류의 횟수만큼 수신하게
됩니다. 파일 스토리지 API는 단일 API로 로컬 파일 시스템 및 아마존 S3,
FTP상의 파일들을 일관된 API로 관리할 수 있도록 도와줍니다.
Django 기본에서는 파일 시스템 스토리지와 메모리 스토리지를 지원하며 Django
Storages 라이브러리를 통해 아마존 웹 서비스, 구글, Azure 스토리지, FTP,
SFTP 등의 스토리지를 추가로 지원합니다.
파일 스토리지 API에서는 파일 저장을 Storage.save() 메서드을 통해서
처리하는데요. 지정 스토리지에 존재하는 파일명으로 새로운 파일을 요청받을 경우 덮어쓰기를
하지 않고 파일명 뒤에 더미 문자를 붙여서 파일 덮어쓰기 없이 새로운 파일로 저장합니다.
이는 기본 동작이기에 혹시나 파일 덮어쓰기가 되지 않나 걱정할 필요가 없습니다.
Settings에서 Default Storage 설정을 보면요.
이렇게 Default Storage로 파일 시스템 스토리지가 지정되어 있습니다.
파일 저장을 시도하면 현재 로컬 파일 시스템에 저장이 된다는 것이고요.
추가로, 사전이니까 추가로, 스토리지 설정을 할 수 있습니다
이렇게 PrivateData 임의의 이름으로 S3나 혹은 FTP나 SFTP나 하나의
프로젝트에 여러 개의 스토리지 설정을 할 수 있어요
이렇게 설정을 하시면 스토리지가 있는데 이렇게 키 접근을 합니다
여기에 있는 키를 지정을 해서 지정 스토리지 설정이 적용된 스토리지 객체를 얻어오실 수
있고 이 스토리지를 통해서 어떤 스토리지 백엔드를 쓰는지에 상관없이 로컬 파일 시스템이든
아마존 S3든 FTP든 상관없이 똑같은 코드로 파일 저장을 시도할 수 있겠고요 파일을
열어서 읽을 수 있고 파일 크기, 파일 경로, 접근 URL, 파일 디액토리 삭제, 존재
유무 체크, 디액토리 내용, 접근 시각, 생성 시각, 수정 시각, 조회 등을 수행 하실 수
있습니다 그래서 스토리지스에서 private-data라는 스토리지,, 즉 S3 스토리지를 쓸
때는 키 지적만 하시면 똑같은 코드로 스토리지 API를 사용하실 수 있습니다
웹 애플리케이션에서는 폼 양식이나 다른 유형의 사용자 입력을 처리한 후에 사용자에게 일회성
알림 메시지를 보여주는 경우가 많습니다.
이를 플래시 메시지라고 하는데요.
Django에서는 메시지 프레임워크를 통해 이 기능을 제공하고 있습니다.
장고의 메시지 프레임워크를 사용하면 메시지를 쿠키나 세션에 임시로 저장하고, 후속 요청에서
메시지를 즉시 노출시킬 수 있습니다.
노출된 메시지는 자동으로 즉시 삭제가 됩니다.
post-new라는 이름의 뷰 함수를 정리했고요.
테스트 목적으로 messages에서 지원하는 모든 레벨에 대해서 메시지를 추가했습니다.
debug-info-success-warning-error고요. 이렇게 한 번에 총 5개의
메시지를 추가한 거죠
그러면 이제 Django 템플릿 단에서 messages라는 이름의 값을 이렇게 체크해서
보여줄 메시지가 있는지 먼저 확인을 할 수 있겠고요 값이 있다면은 메시지 쓰로부터 등록된
메시지를 하나씩 가져올 수 있습니다 가져온 메시지에서 .tags를 통해서 여기에 지정한
로그 레벨을 이렇게 확인하실 수 있겠고요 그리고 로그 메시지는 이렇게 출력을 하실 수
있습니다 현재 Bootstrap5 CSS를 적용했을 때 Bootstrap5의 alert,
alert-info, alert-success, alert-warning 그리고
alert-danger라는 스타일이 지원되고요 alert-danger라는 스타일은
BootStep이었습니다 그래서 if 조건을 넣어줘서 에러가 아닐 때에만 그 레벨을 그대로
쓰고 에러의 경우는 danger를 사용하기도 했죠
이 코드를 수행하면 이와 같이 메시지가 보여집니다
그런데 디버그는 보여지지 않죠
디버그가 보여지지 않는 이유는 Django 프로젝트의 기본 설정으로 Info 레벨 이상의
메시지만 처리하도록 설정이 되어 있기 때문입니다
정적으로 HTML로만 볼 수 있느냐?
그건 아니고요.
Django 템플릿 코드에서 JavaScript 코드를 생성하도록 이렇게 만드실 수
있어요. 그래서 위에 JavaScript function으로 showToast라는 함수를
정의했는데 제가 추가 JavaScript 라이브러리로 Vanilla Toast라는 걸
추가했습니다 이 vanilla toast의 라이브러리를 여기에서 호출하도록 했고요 그러면
보여줄 메시지가 있을 때 이 메시지를 순회 돌면서 showToast라는 함수가 호출되도록
JavaScript 코드 문자를 만들어주는 거예요
이 JavaScript 코드가 웹브라우저에게 도달이 되고 이와 같이 토스트 메세지도 보여줄
수 있습니다.




이번에는 Django에서 로깅, 파일 스토리지, 메시지 프레임워크 기능에 대해 다루었습니다. 아래는 각 항목에 대한 정리입니다.

1. 로깅 (Logging)
로깅은 프로그램에서 발생하는 이벤트, 데이터, 오류 등을 기록하는 과정으로, 디버깅이나 문제 해결 시 유용한 정보를 제공합니다.

로깅 설정은 Django에서 Python의 기본 로깅 기능을 사용합니다.
로깅의 핵심은 로그 생성 코드와 로그 처리 설정의 분리입니다. 즉, 로그가 어디로 가는지, 어떻게 처리될지는 로깅 설정에서 정의합니다.
로그를 파일, 이메일, 화면 출력 등 다양한 방식으로 처리할 수 있습니다.
Django의 기본 로깅 처리:
기본 설정에서는 info 레벨 이상의 로그는 콘솔로 출력되고, error 이상은 메일로 발송됩니다.
콘솔 핸들러: settings.DEBUG가 True일 때만 출력, 인포 레벨 이상에서 동작.
메일 핸들러: settings.DEBUG가 False일 때만 동작, ADMINS에 등록된 이메일로 오류 메일 전송.
로그 포맷:
로그 포맷은 formatters에서 설정할 수 있습니다. 기본적으로는 로그에 시간, 로그 메시지 등이 포함됩니다.
로그의 출력 포맷이나 처리 방식을 변경하려면, loggers와 handlers 설정을 재정의할 수 있습니다.
2. 파일 스토리지 (File Storage)
Django에서는 다양한 스토리지를 사용할 수 있으며, 이를 일관된 API로 처리할 수 있습니다.

기본적으로 로컬 파일 시스템과 메모리 스토리지를 지원하며, 추가적으로 S3, FTP, SFTP 등 다양한 외부 스토리지도 지원합니다 (django-storages 라이브러리).
파일 저장 방식:
Storage.save() 메서드를 사용하여 파일을 저장합니다.
같은 이름의 파일을 덮어쓰지 않고, 덧붙여서 새로운 파일로 저장합니다.
설정:
DEFAULT_FILE_STORAGE에서 기본 스토리지를 설정할 수 있습니다. 로컬 시스템 외에도 S3와 같은 클라우드 스토리지로 변경 가능합니다.
예시:
예를 들어, S3 스토리지를 사용하려면 django-storages 라이브러리를 설정하여, 로컬 파일 시스템 대신 S3를 사용할 수 있습니다.
3. 메시지 프레임워크 (Message Framework)
사용자에게 일회성 메시지를 표시할 수 있는 기능으로, 일반적으로 폼 제출 후 알림 메시지를 표시할 때 사용됩니다.

메시지 레벨: Django는 메시지의 중요도에 따라 레벨을 설정할 수 있습니다 (debug, info, success, warning, error).
메시지는 세션이나 쿠키에 임시로 저장되어, 후속 요청에서 즉시 표시됩니다. 표시 후에는 자동으로 삭제됩니다.
사용 방법:
messages 객체를 사용하여 메시지를 추가합니다.
템플릿에서 messages를 순회하여 메시지를 출력할 수 있습니다.
Bootstrap 스타일을 적용하여 다양한 메시지 레벨에 맞는 스타일을 지정할 수 있습니다.
예시:
예를 들어, 메시지 레벨에 따라 Bootstrap 알림 스타일을 적용하고, JavaScript 라이브러리인 Vanilla Toast를 이용하여 토스트 메시지로 화면에 표시할 수도 있습니다.
요약:
로깅: Django는 Python의 로깅 기능을 기반으로 로그를 기록합니다. 로그는 콘솔, 이메일 등으로 처리되며, 로깅 설정에서 처리 방식을 지정할 수 있습니다.
파일 스토리지: Django는 다양한 스토리지 옵션을 지원하며, 일관된 API를 통해 파일을 저장하고 관리할 수 있습니다. 기본적으로 로컬 파일 시스템을 사용하지만, 외부 스토리지도 설정 가능합니다.
메시지 프레임워크: 사용자가 메시지를 쉽게 전달받을 수 있도록 돕는 기능입니다. 메시지는 세션이나 쿠키에 임시 저장되어, 후속 요청에서 자동으로 노출됩니다.
이렇게 각각의 기능은 Django 프로젝트에서 중요한 역할을 하며, 사용자 경험과 관리 편의성을 높이는 데 도움을 줍니다.