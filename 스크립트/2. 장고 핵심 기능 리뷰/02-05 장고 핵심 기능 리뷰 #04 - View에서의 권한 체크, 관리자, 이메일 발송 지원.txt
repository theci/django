요청을 처리하는 뷰에서는 로그인 _ 리콰이어드 라는 장식자를 통해서 요청 유저의 인증 여부를 확인할 수 있구요 
permission_required라는 장식자를 통해서 요청 유저가 해당 권한을 가지고 있는지 여부를 확인할 수 있습니다
로그인 되지 않은 유저는 모든 권한이 없구요
지정 권한이 없다면 로그인 페이지로 강제 이동을 시키거나 권한 없음 응답을 줄 수 있습니다 장고 기본 앱 중에 Admin이 있습니다.
Admin 앱은 모델을 등록하는 것만으로 생성, 조회, 수정, 삭제 웹 인터페이스를 자동으로 제공합니다.
매우 편리하며 확장성이 좋습니다.
유저 모델 필드 중에 IsUnderbarStepField와 IsUnderbarSuperUserField가 있습니다.
admin 페이지는 is_staff 스태프 필드가 설정된 관리자 유저만 접속 가능하기 때문에 이전더바 스태프 필드가 설정되지 않은 유저가 접속하면 재인증을 요구하고요
이전더바 스태프 필드가 설정되어 있더라도 그 유저에게 할당된 권한만큼의 기능만 제공됩니다
예를 들어, 포스트 모델에 대한 체인지 권한이 없으면 포스트 수정 기능이 비활성화 되고요.
Is_superuser 플래그가 설정되면 별도의 권한 부여 없이도 모든 권한이 있는 것으로 처리됩니다.
포스트 모델이 이렇게 정의되어 있을 때 admin.site.register 장식자를 통해 모델을 등록하는 것만으로 화면과 같이 이렇게 추가, 조회, 수정, 삭제 화면이 제공됩니다
Admin은 모델별로 ModelAdmin을 한 개씩 등록하여 Admin 기능에 대한 커스터마이징을 지원합니다
ModelAdmin 클래스를 상속받은 클래스를 선언하고 admin.register 장식자를 적용합니다 
그러면 Admin에 등록이 되는 것이고요 그리고 ModelAdmin의 각 속성들을 재정의하는 방식으로 커스터마이징을 하실 수 있습니다
속성으로 검색을 지원할 필드 목록을 지정하면 이렇게 검색창이 뜨고요 속성으로 목록 조회 시에 노출할 필드 목록을 지정하면 여기에 지정한 필드 구성으로 목록이 뜹니다
그리고 List Underbar Filter 속성으로 필터로 사용할 필드 목록을 지정하면, 이와 같이 Status, Created at, Field, 저 필터 값이 자동으로 생성이 되고요. 
그리고 Actions 속성으로 지정 레코드에 대한 일괄 수행할 작업 목록을 지정합니다.
makeUnderbarPublished라는 이름을 지정했는데요 이름의 메서드가 여기 있고요
이 메서드에 대한 디스크립션을 추가했습니다
이 액션이 수행되는 데 필요한 권한도 지정을 했습니다
actions로 지정한 액션은 이와 같이 상단 콤보박스를 통해서 액션을 선택할 수 있겠고요
이 액션을 수행할 레코드를 클릭해서 선택한 다음에 액션을 선택하고 실행을 누르시면 이 액션이 수행이 되고 수행 결과 메세지가 유저에게 이렇게 노출이 됩니다
그리고 이 액션은 해당 퍼미션이 없는 유저에게는 노출되지 않습니다
이외에도 다양한 속성들이 지원이 되고요 기본 액션으로 삭제가 지원이 되고 액션을 수행하고 나서 노출되는 메세지는 Django의 메세지 프레임워크를 통해 처리가 되어 유저에게 노출됩니다.
Django에서는 이메일 발송에 대해서도 추상화 계층을 지원하고요, 다양한 메일 백엔드를 지원하며 다양한 서드파티 메일 백엔드도 있습니다.
Django SES라는 라이브러리를 통해서 아마존 심플 이메일 서비스를 세팅스 변경만으로 지원을 할 수 있어요.
그래서 Django에서 메일을 발송할 때에 Django 코어 메일의 SendMail 함수를 사용하는데요 
발송할 메일의 제목, 내용, 그리고 HTML 포맷의 내용도 지정할 수 있고요
그리고 발신자 이메일 주소, 그리고 수신자 이메일 주소를 여러 개 지정해서 호출하면 이메일 발송을 시도합니다 
그런데 어떤 이메일 서비스를 활용해서 발송할 것이냐인데요 
정식 서비스라면 아마존 SES와 같은 서비스를 쓰는 게 맞는데 테스트나 작은 서비스라면 네이버 메일 계정이나 구글 메일 계정을 사용하실 순 있어요
그런데 네이버 메일이나 구글 메일 같은 경우는 개인용 메일 서비스이기 때문에 해당 메일 서비스를 통해서 대량의 메일이나 스팸메일을 보내시게 되면 해당 계정이 차단당하실 수도 있습니다 
하루에 수십 통 보내는 정도까지는 괜찮았던 것 같은데 이것도 메일 서비스마다 다를 수 있습니다
네이버 환경설정 페이지에 가시면 이와 같은 내용을 확인하실 수 있는데요 SMTP가 Simple Mail Transfer Protocol이라고 해서 메일을 보내는 주소입니다
메일 발송 서버의 주소입니다
메일 발송하는 포트는 465고 보안 연결은 SSL 필요라고 하죠
이메일 포트로 이 465를 지정해 주는 것이고요 그리고 SSL 필요니까 여기는 True를 지정해 주는 것이고요
TLS는 SSL 반대 값으로 거짓을 지정해 줍니다
smtp.naver.com은 여기 지정해 주는 것이고 이메일 백엔드는 smtp 이대로 두면 되겠고요. 
만약 지메일을 쓰신다면 smtp.gmail.com일 것이고요.
지메일은 587 포트 tls를 쓰기 때문에 포트는 587 tls=True를 거시시 되겠고요. 
이메일 호스트 유저와 이메일 호스트 패스워드에는 네이버 메일 계정 아이디, 네이버 메일 계정의 암호를 입력하는데 지메일도 마찬가지입니다.
그런데 네이버에서 2단계 인증을 설정하셨다면 애플리케이션 비밀번호라는 걸 따로 생성을 해야 돼요 
이 링크를 통해서 확인하실 수 있는데 애플리케이션 비밀번호를 만들어서 여기에 적용을 해주면 되겠고요 
지메일의 경우도 아마 2단계 인증 설정하셨다면 별도로 비밀번호 만드는 게 있습니다 
그걸 만들어서 지정을 해줘야 됩니다
이렇게 SMTP 메일 설정이 이루어졌다면 python-manage.py-send-test-mail이라는 명령을 통해서 수신자 메일 주소를 주시면 이렇게 해당 메일 계정을 통해서 테스트 메일을 즉시 받으실 수 있어요
그런데 만약에 이러한 설정이 맞지 않는다면 메일 서버로부터 SMTP 발송 요청이 이와 같은 에러 메시지를 내면서 발송 거부 당하실 수 있습니다 
개발 서버에서 네이버 메일 계정으로 메일을 발송했었다면 실서비스 서버에서는 이 세팅스 변경만으로 아마존 심플 메일 서비스를 활용해서 똑같은 코드로 이메일을 보낼 수 있게 됩니다