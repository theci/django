우리가 웹에서 유저로부터 어떤 값을 입력 받으려면 이와 같이 입력 폼, 입력 서식을
만들어야 돼요 이런 서식을 만들려면 HTML 코드로 한 땀 한 땀 작성을 하고 작성된
HTML이 서버로 전송이 되면 그 값에 대해서 유효성 검사를 해야 됩니다
이 값이 만약에 최소 세 글자고 한 글만 입력이 돼야 되는데 한 글자밖에 없고 영어로만
입력이 되었다 그러면은 서버가 원하는 입력 값이 아니잖아요.
그런 검사를 다 해줘야 되거든요.
HTML 코드로 작성하고 입력 값에 대한 유효성 검사도 해야 되는데 그런 작업들을
Django Form이 알아서 HTML도 만들어주고 그리고 유효성 검사를 수행해주는 기반을
제공을 해줍니다.
PostModel이 있어요.
앞서서 정리했었고요.
나는 PostModel 기반에서 입력 값을 받겠다 라고 해서 모델 폼을 이렇게 정리하고
모델 클래스 정리하고 모든 필드라고 딱 지적만 해주면요.
이 폼 클래스의 인스턴스를 만든 다음에 as div 그래서 호출해주면 알아서 HTML이
만들어집니다.
입력된 값에 대해서 유효성 검사하는 것은 is__valid 함수 딱 호출해주면 알아서
유효성 검사 수행해져요.
아직 값을 넣지는 않았지만 아직 값이 없기 때문에 유효성 검사에 실패합니다.
그래서 에러 메시지도 자동으로 만들어줍니다.
title 필드는 필수 필드다.
영어로 보여지지만 장고는 이 메시지에 대해서 영어나 일본어나 중국어, 다양한 언어에
대해서도 번역을 제공해 주기 때문에 유저의 언어 설정에 맞춰서 에러 메시지도 볼 수
있겠고요 데이터를 지정해 주면 제목이 있고 내용도 있죠
그럼 유효성 검사에 통과하고 유효성 검사에 통과한 값들도 보겠고요 다음에 폼 원점
세이브라고만 해주면 알아서 데이터베이스에 저장까지 해줍니다.
아주 편하죠? 폼에 대한 HTML도 자동으로 생성 해주고, 입력 값에 대한 유효성 검사도
해주고, 그리고 입력 값에 대한 데이터베이스 저장까지 도와주는 아주 고마운 기능이 장고의
폼이 되겠습니다
모델 폼이 있고 폼이 있는데요
모델 폼은 장고 모델에 정의한 필드 내역대로 입력 값을 받고자 할 때에요 모델 클래스의
내역대로 입력 값을 받는 경우가 많아요
그럴 때는 모델 폼을 사용하시면 편리하고요 그냥 폼은 모델과 별개로 HTML 폼을 구성하고
입력 값에 대한 유효성 검사가 필요할 때 사용합니다.
폼과 모델 폼의 차이는 모델 폼은 .save라는 메서드를 지원하기 때문에 이 호출만으로
DB 저장을 지원해주고요.
폼은 대신에 .CleanedUnderbarData라는 사전을 지원해 줍니다.
값이 있잖아요.
요소 검수에 통과한 값이 있기 때문에 이 값을 활용해서 우리가 모델 코드를 통해서
데이터베이스에 저장을 할 수 있습니다.
이 HTML 모양이 좀 어글리하죠.
브라우저 기본 스타일인데요.
이 스타일링을 위해서 직접 HTML 코드를 한 땀 한 땀 하실 필요는 없고요.
우리가 이 폼과 연계되는 Django Bootstrap 5 라이브러리를 설치하시면 한 번에
이렇게 스타일링이 된 HTML을 만들어 내실 수 있고 혹은 Django Crispy Forms
Forms라는 라이브러리로 좀 더 커스텀된 필드로 활용하실 수 있어요.
이번에는 장고의 템플릿 기능입니다.
장고의 템플릿은 복잡한 문자열 조합 작업을 간소화할 수 있도록 도와줍니다.
주로 HTML을 생성하는데 사용되지만 다른 텍스트 기반 형식에서도 적용할 수 있어요.
예를 들어 푸시 메세지 같은 것들이에요.
데이터가 있습니다.
네임이란 이름의 문자열이고요.
플러스란 이름의 리스트고, 그 안에 사전이 다 들어있죠.
파이썬 기본 문법만으로 문자열을 조합한다면 이렇게 f-string으로 조합하고 이제
플러스를 순회에 돌면서 greeting1이라는 문자를 뒤에다가 계속 붙이는 형태로 조합할
수 있습니다 greeting1을 출력하면 이렇게 출력이 되죠
이번에는 템플릿 엔진을 활용합니다
이와 같이 장고 템플릿 문법으로 name이라는 변수 값을 출력하겠고, plus를 순회
돌리면서 이렇게 name과 price를 찍어주고요.
이렇게 순회 돌죠.
이 템플릿을 렌더링할 때 이 템플릿 내에서 참조할 값들을 name과 plus니까 이렇게
사전으로 넘겨줍니다.
그리고 나서 그리팅2에다가 저장하면 이 값의 타입은 문자열이고요.
앞서 만든 방식이 좀 더 심플해 보일 수도 있겠지만 이 조합안은 문자열이 복잡해지잖아요.
복잡해지면 이 코드는 관리가 안 돼요.
템플릿을 활용하는 것이 좋습니다.
파이썬 코드 내에서 템플릿을 정의하니까 조금 코드를 알아보기 힘들어요
문법 강조도 안 되고요 그래서 별도 파일에다가 제가 이 템플릿만 저장합니다
greeting.txt라고 저장을 했다면 renderToString이라는 함수를 쓰고
사용할 템플릿 파일의 경로를 쓰고요 그리고 이 템플릿에서 참조할 값들을 사전으로 넘기면은
그리팅 3는 문자열 타입이고 출력하면 똑같습니다.





Django 폼 및 템플릿 기능 정리
이번에는 Django의 폼(Form) 및 템플릿(Template) 기능에 대해 다룬 내용을 정리합니다.

1. Django 폼 (Forms)
폼의 개념
입력 폼: 사용자가 데이터를 입력할 수 있도록 HTML 폼을 생성해야 합니다. 예를 들어, 제목과 내용을 입력받는 폼을 만든다고 가정합니다.
유효성 검사: 입력된 값이 서버의 요구사항을 충족하는지 검증해야 합니다. 예를 들어, 제목은 최소 3글자 이상이어야 하고, 내용은 특정 형식이어야 합니다.
Django 폼의 역할
HTML 폼 자동 생성: Django의 폼 클래스는 HTML 폼을 자동으로 생성합니다.
유효성 검사: is_valid() 메서드를 호출하면, 입력값에 대해 유효성 검사를 자동으로 수행하고, 검증 실패 시 에러 메시지도 자동으로 생성됩니다.
데이터베이스 저장: 유효성 검사를 통과한 데이터는 .save() 메서드로 데이터베이스에 저장할 수 있습니다.
모델 폼 (ModelForm)
모델 폼은 Django 모델을 기반으로 자동으로 폼을 생성합니다.
모델에 정의된 필드를 기반으로 HTML 폼이 생성되고, 해당 폼에서 받은 데이터를 모델에 맞춰 유효성 검사를 자동으로 진행합니다.
.save() 메서드를 사용해 데이터베이스에 저장할 수 있습니다.
일반 폼 (Form)
일반 폼은 모델과 별개로 HTML 폼을 정의하고, 입력 값에 대한 유효성 검사를 필요로 할 때 사용합니다.
.cleaned_data 속성을 통해 유효성 검사를 통과한 데이터를 반환하고, 이를 사용해 데이터베이스에 저장할 수 있습니다.
폼 사용 예시
python
코드 복사
class PostForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = ['title', 'content']
        
# 폼 인스턴스 생성
form = PostForm(request.POST)

# 유효성 검사
if form.is_valid():
    form.save()  # 데이터베이스에 저장
else:
    print(form.errors)  # 에러 메시지 출력
스타일링
기본 HTML 폼은 브라우저의 기본 스타일로 표시되므로, 디자인을 개선하기 위해서는 Bootstrap 5나 Django Crispy Forms와 같은 라이브러리를 사용할 수 있습니다.
Django Crispy Forms는 폼 필드에 대해 커스텀 스타일을 쉽게 적용할 수 있게 도와주는 라이브러리입니다.
2. Django 템플릿 (Templates)
템플릿 엔진의 역할
Django의 템플릿 엔진은 복잡한 문자열을 조합하고 출력하는 작업을 간소화할 수 있게 도와줍니다. 주로 HTML을 생성하는 데 사용되지만, 텍스트 기반 형식에서도 활용 가능합니다.
예를 들어, 푸시 메시지나 이메일을 생성할 때도 템플릿을 사용할 수 있습니다.
템플릿 문법
Django 템플릿 문법은 다음과 같은 기능을 제공합니다:

변수 출력: 템플릿 내에서 {{ variable_name }} 형태로 변수 값을 출력할 수 있습니다.
조건문: {% if condition %}...{% endif %}를 사용하여 조건에 따른 출력을 할 수 있습니다.
반복문: {% for item in list %}...{% endfor %}를 사용하여 리스트나 사전 등을 순회하면서 출력할 수 있습니다.
템플릿 사용 예시
python
코드 복사
from django.template import Context
from django.template.loader import render_to_string

context = {
    'name': 'John Doe',
    'plus': [{'name': 'Product 1', 'price': 100}, {'name': 'Product 2', 'price': 200}]
}

# 템플릿 정의
template = "{% for item in plus %}{{ item.name }} costs {{ item.price }}{% endfor %}"

# 템플릿 렌더링
rendered = render_to_string(template, context)
템플릿 파일 사용
템플릿은 별도 파일에 저장하여 관리할 수 있습니다. render_to_string()을 사용하여 파이썬 코드에서 템플릿을 렌더링할 수 있습니다.
템플릿에서 참조할 값은 사전 형식으로 넘겨줍니다.
python
코드 복사
# 템플릿 파일(greeting.txt) 예시
{{ name }}
{% for item in plus %}
  {{ item.name }}: {{ item.price }}
{% endfor %}

# 템플릿 렌더링
rendered = render_to_string('greeting.txt', context)
f-string vs 템플릿
f-string을 사용한 문자열 조합도 가능합니다. 그러나 문자열이 복잡해지면 템플릿을 사용하는 것이 코드의 가독성과 관리 측면에서 유리합니다.
예시:
python
코드 복사
greeting = f"Hello, {name}! Your products are {', '.join([f'{item['name']} - {item['price']}' for item in plus])}"
템플릿의 장점
가독성: Django 템플릿 엔진은 복잡한 문자열 조합을 간결하게 해주고, 코드의 가독성을 높여줍니다.
템플릿 파일 분리: HTML을 Python 코드에서 분리할 수 있어 코드 관리가 용이해집니다.
요약
Django 폼은 사용자의 입력값을 쉽게 처리하고 유효성 검사, HTML 폼 생성, 데이터베이스 저장까지 자동으로 도와주는 기능입니다. ModelForm을 사용하면 모델을 기반으로 폼을 생성하고, .save()로 데이터베이스에 저장할 수 있습니다. 일반 폼은 모델과 관계없이 사용자의 입력값을 처리할 때 유용합니다.

Django 템플릿은 복잡한 문자열을 효율적으로 생성할 수 있도록 도와주는 기능으로, 변수 출력, 조건문, 반복문 등을 사용할 수 있습니다. 템플릿을 사용하면 코드가 간결하고 유지보수하기 쉬워집니다. 템플릿은 파일로 관리하여 사용하고, render_to_string을 사용해 렌더링합니다.

Django의 폼과 템플릿 기능은 웹 애플리케이션을 빠르고 효율적으로 개발하는 데 중요한 역할을 합니다.