수정 API 테스트에서는 작성자가 아닌 유저의 요청은 403 응답 상태 코드와 함께
거부되어야 하고요 작성자 요청이며 필요한 값이 모두 지정된 요청에서는 200 응답 상태
코드와 함께 수정된 레코드 내역을 응답 받아야만 합니다
요청의 제목과 응답의 제목이 일치하는지 검사합니다
작성자가 아닌 유저가 수정 요청을 보내면 거부하는지 테스트 코드를 작성해 보겠습니다
이미 유저의 인증 요청을 보내기 위해 API Client with New User
Basic Host Picture를 인자로 지정하고요 이미 유저의 새 포스팅을 생성하기
위해 New Post Picture도 인자로 지정합니다 포스팅의 작성자와 현재 수정 요청을
보내는 유저는 서로 다른 유저입니다 방금 생성한 포스팅에 대한 수정 URL을 만들고 수정
요청을 보내면 403 forbidden 응답을 받으며 수정 요청이 거부됩니다 이번에는
작성자가 수전 요청을 보내면 요청이 성공하는지 테스트 코드를 작성해 보겠습니다 포스팅
작성자와 수전 요청을 보내는 유저를 일치시키기 위해 픽스처를 사용하지 않고 테스트 함수
내에서 유저를 생성하고 생성된 유저로 포스팅을 생성하겠습니다
베이직 인증 헤더에는 암호 지정도 필요하기에 암호를 먼저 생성하여 생성된 암호로 유저를
생성하고요 베이직 인증 헤더 생성 시에도 사용합니다 수정 요청을 패치 요청으로 보내겠고요.
푼 요청에서는 해당 시리얼라이저의 모든 필드를 다 지정해야만 수정 요청이 수락되는 반면
패치 요청에서는 수정할 필드만 지정할 수 있습니다.
타이틀 필드만 Faker 라이브러리를 통해 랜덤 생성해서 수정 요청을 보내고요.
응답 상태 코드가 200으로써 정상 처리되어야 하고요.
요청의 제목과 응답의 제목이 같은지 검사합니다.
파이테스트 테스트를 수행해 보시면 테스트가 통과합니다.
삭제 API 테스트에서는 두 개의 테스트를 수행해 볼 텐데요
이 두 개의 테스트가 삭제 API 테스트로서 하나의 그룹입니다
이때 클래스를 활용해서 여러 테스트 함수를 하나의 그룹으로 묶을 수 있고요 그룹 단위로
실행할 수 있어서 편리합니다 삭제 API 테스트에서는 작성자가 아닌 유저의 요청은 403
응답 상태 코드와 함께 거부되어야 하고요.
작성자의 요청이며 필요한 값이 모두 지정된 요청에서는 204 응답 상태 코드를 받고요.
응답 바디는 없습니다.
데이터베이스에서 삭제되었기에 삭제된 기본 키도 조회하면 object does not
exist 예외가 발생해야만 합니다.
수정 API 테스트와 구현할 삭제 API 테스트는 구조가 거의 비슷합니다
그래서 수정 API 테스트 코드를 복사해서 구현해 보겠습니다 복사한 코드에서 설명에서
수정을 삭제로 수정하고요 함수명에서 Update를 Delete로 수정합니다
URL 리버스 이름도 Edit를 Delete로 수정하고요 요청 메서드로 패치를
Delete로 수정해 줍니다
삭제 성공하면 데이터베이스에 해당 기본 키의 레코드가 없으니 이렇게 조회하면 Object
Does Not Exist 예외가 반드시 발생해야만 합니다
테스트를 수행해 보시면 테스트가 실패했는데요 403 forbidden 응답을 기대했는데
405 method not allowed 응답을 받았네요
첫 번째 테스트에서 요청 메서드를 미처 delete로 못 바꿨습니다
delete로 변경하시고 다시 테스트를 수행해 보시면 모든 테스트를 통과했습니다
작성자가 아닌 유저가 삭제 요청을 보내면 삭제 요청이 거부됨을 확인했고요 작성자가 삭제
요청하면 삭제가 되고 데이터베이스에서도 제거됨을 확인했습니다
이 두 개의 삭제 테스트를 하나의 그룹으로 묶어 보겠습니다
한 클래스 안에 인스턴스 메서드로 각 테스트 함수를 배치하시면 됩니다
인스턴스 메서드이기에 인자로 셀프를 넣어 주셔야 합니다
그룹의 설명도 추가하고요 다시 전체 테스트를 수행해 보시면 삭제 테스트만 이렇게 그룹으로
수행됨을 확인하실 수 있고요 그룹만 지정해서 테스트를 수행하실 수도 있습니다