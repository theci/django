안녕하세요. 이번 시간에는 Django REST Framework API 실습에서 사용할
기본 모델을 구성하고요.
커스텀 관리 명령을 통해 샘플 데이터를 대량으로 생성해 보겠습니다.

1.
MyPROJ 프로젝트에 새로운 블로그 앱을 생성하고요.
블로그 앱의 포스트 모델과 코멘트 모델을 정의하겠습니다.
포스트 모델에는 유저 모델에 대한 외래키로써 author 작성자 필드가 있고요.
title 필드와 content 필드, 그리고 created at, updated at, 생성일시, 수정일시 필드를 추가했습니다.
포스트 모델에 대한 코디셀에서 default 정렬은 기본 키에 대한 역순 정렬로 지정했습니다.
코멘트 모델은 포스트 모델과 1대 N 관계로 정의했고요.
메세지 필드와 생성일시, 수정일시 필드를 추가했습니다.


MyPROJ 프로젝트에 블로그 앱을 생성하고요.
settings의 Installed Apps 리스트에도 등록합니다.
블로그의 URL.py 파일도 새로 생성하고요.
빈 URL Patterns 리스트도 생성해 줍니다.
마이 사이트의 urls.py 파일에도 블로그 슬러시 prefix와 함께 include도 수행해줍니다. 
미리 제공해 드린 소스 코드를 복사해서 블로그의 model-spy 경로에 붙여넣습니다. 
이 소스 코드에서는 get_user_model 함수를 통해 프로젝트에 활성화된 UserModel 클래스를 조회했지만 현재 프로젝트의 Account 앱에
UserModel이 있고 블로그 앱은 라이브러리로 사용될 것이 아니기에 직접 UserModel을 임포트하시는 방법도 좋습니다.
마이그레이션 파일 생성하고요.
마이그레이트 명령으로 데이터베이스에 적용도 해줍니다.
그리고 어드민에도 포스트 모델과 코멘트 모델을 등록해 줍니다.


커스텀 관리 명령을 만들어서 10명의 유저, 100개의 포스팅, 10000개의 댓글을 생성해 보겠습니다 
슬라이드에는 주요 코드이고요 슬라이드 아래에 전체 코드가 있습니다 입력 데이터를 일일이 지정할 수 없기에 페이커, 파이썬 라이브러리를 활용해서 가짜 데이터를
생성해서 저장하겠습니다
이름, 주소, 날짜, 시간, 회사명, 신용카드 번호, 이메일, 주소, 직업, 전화번호,
문장, 문단 등의 다양한 타입을 지원합니다
Sentence를 통해 지정 개수 단어의 한 문장을 생성하실 수 있고요.
VariableNBWords 인자를 참으로 지정하면, 지정한 개수 근처에서 무작위 개수의
단어로 문장을 생성합니다.
Paragraph는 여러 문장을 생성합니다.
미리 제공해드린 페이지에서 create-fake-post.py 파일을 블로그의
management의 commands 폴더 아래에 복사합니다.
가짜 데이터를 생성해주는 Faker 라이브러리와 for 반복문의 진행률을 시각적으로 확인할
수 있도록 도와주는 TQDM 라이버리를 설치합니다.
python manage.py create-fake-post 명령을 실행해 보시면 이렇게
진행률이 표시되며 여러 유저와 포스팅, 댓글들이 생성되고 있습니다.
소스 코드를 살펴보겠습니다.
ko, kr, en로 faker 인스턴스를 생성합니다.
한글로 가짜 데이터가 있는 타입의 경우 한글로 생성해 줍니다.
총 10개의 유저 레코드를 생성했습니다.
이때 Faker 인스턴스를 통해 이메일 주소를 랜덤하게 생성하고요.
이메일 주소의 골뱅이 앞부분을 유저명과 암호로 사용했습니다.
API 테스트할 때 인증을 위해 유저명과 암호가 필요하거든요.
손쉬운 지정을 위해 유저명과 암호를 같게 지정했습니다.
총 100개의 포스팅 레코드를 생성했습니다 포스팅 작성 유저는 유저 리스트에서 랜덤하게
하나 고르고요
100글자 이내로 타이틀을 생성했습니다
그리고 총 만 개의 댓글 레코드를 생성했습니다



이번 시간에는 Django REST Framework API 실습에서 사용할 기본 모델을 구성하고, 커스텀 관리 명령을 통해 샘플 데이터를 대량으로 생성하는 방법을 설명했습니다. 아래는 전체 과정을 간략하게 정리한 내용입니다.

1. 블로그 앱 생성 및 모델 정의
블로그 앱 생성

MyPROJ 프로젝트에 새로운 블로그 앱을 생성합니다.
settings.py 파일의 INSTALLED_APPS에 블로그 앱을 등록합니다.
포스트 모델(Post) 정의

포스트(Post) 모델에 필드를 추가합니다:
author : 유저(User) 모델에 대한 외래키.
title, content: 제목과 내용 필드.
created_at, updated_at: 생성일시, 수정일시 필드.
디폴트 정렬은 기본 키에 대한 역순(-id) 정렬로 지정합니다.
코멘트 모델(Comment) 정의

코멘트(Comment) 모델은 포스트(Post) 모델과 1:N 관계를 가집니다.
message: 댓글 내용 필드.
created_at, updated_at: 생성일시, 수정일시 필드.
마이그레이션

모델 정의 후, 마이그레이션 파일을 생성하고 데이터베이스에 적용합니다.
python manage.py makemigrations
python manage.py migrate
관리자 등록

관리자 화면에서 포스트와 코멘트 모델을 관리할 수 있도록 admin.py 파일에 등록합니다.
2. 커스텀 관리 명령으로 샘플 데이터 생성
커스텀 관리 명령 만들기

management/commands 폴더 내에 create-fake-post.py 파일을 생성하여 샘플 데이터를 생성할 수 있는 커스텀 명령을 만듭니다.
샘플 데이터는 Faker 라이브러리를 사용하여 가짜 데이터를 생성합니다.
Faker 라이브러리 설치

Faker는 가짜 이름, 주소, 이메일 등 다양한 타입의 데이터를 생성할 수 있는 라이브러리입니다.
또한 TQDM 라이브러리를 사용하여 진행 상황을 시각적으로 확인할 수 있도록 합니다.
설치 명령:
bash
코드 복사
pip install faker tqdm
샘플 데이터 생성

커스텀 명령 python manage.py create-fake-post를 실행하여 10명의 유저, 100개의 포스팅, 10,000개의 댓글을 생성합니다.
유저 데이터 생성

Faker를 통해 10명의 유저를 랜덤으로 생성합니다. 이메일 주소는 유저명과 비밀번호로 동일하게 설정하여 API 테스트에 사용할 수 있도록 합니다.
포스팅 데이터 생성

포스트 제목은 랜덤으로 100글자 이내로 생성하고, 각 포스트는 랜덤으로 생성된 유저가 작성합니다.
댓글 데이터 생성

100개의 포스트에 대해 각각 100개의 댓글을 생성하여, 총 10,000개의 댓글을 생성합니다.
3. 실행 과정
명령 실행: python manage.py create-fake-post 명령어를 실행하면, 위에서 설정한대로 유저, 포스팅, 댓글 데이터가 생성됩니다. 이 과정에서 TQDM 라이브러리를 통해 진행 상황을 실시간으로 확인할 수 있습니다.

Faker 설정:

한글 데이터를 생성하려면 faker.Faker('ko_KR')를 사용하고, 영어 데이터를 원하면 'en_US'와 같이 설정할 수 있습니다.
포스팅과 댓글 생성:

각 포스팅에 대해 랜덤으로 유저를 할당하고, 댓글은 랜덤한 내용으로 생성하여 포스트와 연결합니다.


요약
Django 프로젝트에서 블로그 앱을 생성하고, 포스트와 코멘트 모델을 정의하여 관계를 설정합니다.
Faker와 TQDM을 사용하여 가짜 데이터를 생성하고, 커스텀 관리 명령을 통해 대량의 데이터를 손쉽게 생성합니다.
이 방법은 실습 환경이나 API 테스트에서 가짜 데이터를 빠르게 만들 수 있어 매우 유용합니다.