안녕하세요. 이번 시간에는 Django REST 프레임워크의 렌더러에 대해서
살펴보겠습니다.
렌더러는 시리얼라이저를 통해 변환된 파이썬 기본 데이터 타입의 응답 데이터를 특정 포맷으로
변환하는 역할을 합니다.
Django REST 프레임워크 기본에서는 JSON 포맷의 문자열로 변환하는 JSON
렌더러와 JSON 포맷의 문자열을 HTML 템플릿으로 변환하는 Browsable API
렌더러를 지원합니다.
우리가 Django REST 프레임워크를 통해 매 API 뷰를 구현할 때마다 어떤 포맷에
응답을 지원할 것인지를 고민할 필요가 없습니다
단지 파이썬 기본 데이터 타입의 데이터를 Django REST 프레임워크의 response
클래스로 랩핑하여 리턴만 하면 됩니다
그러면 요청된 포맷에 맞춰 API 뷰 클래스 내부 구현해서 사용할 렌더러를 자동으로
결정하고 변환을 수행하고 클라이언트에 응답합니다
렌더러 결정 시에는 먼저 요청 URL의 포맷 인자를 확인하여 사용 가능한 렌더러 목록을
필터링합니다.
이렇게 걸려진 렌더러 중에서 요청의 컨텐트 타입 헤더와 매칭하여 최종적으로 응답에 사용할
렌더러를 결정합니다.
웹 브라우저를 통한 API 요청이기에 브라우저블 API 렌더러로 변환된 상황이고요.
포맷 인자를 JSON으로 지정해 주시면 JSON 렌더러로 변환됩니다.
지원하지 않는 포맷을 지정하면 이렇게 404 응답을 합니다.
Browsable API 렌더러를 사용하시면 HTML 응답을 하기에 Django 디버그
툴바를 사용할 수 있어서 개발할 때 편리합니다.
두 개의 커스텀 렌더러를 직접 구현해 보겠습니다.
렌더러 클래스는 BaseRenderer 클래스를 상속받고 렌더 메서드를 재정의하여 변환된
데이터를 반환해 줍니다.
미디어 타입 속성은 클라이언트로의 응답에서 컨텐츠 타입 응답 헤더에 사용할 미디어
타입입니다 각 파일 포맷에 맞는 컨텐츠 타입 헤더로 응답해야만 브라우저가 해당 포맷에 맞게
관련 프로그램을 연결해 줍니다
포맷 속성을 렌더러와 연결할 포맷 명이고요 렌더 스타일 속성에는 변환된 데이터가 텍스트
포맷인지 바이너리 포맷인지 지정합니다
xlx 엑셀 파일로 변환하는 pandas xlx 렌더러 클래스에서는 pandas 라이브러리를
통해 엑셀 파일 변환을 했습니다.
pandas 라이브러리가 좀 무거운 라이버리이긴 하지만 짧은 코드로 간결하게 엑셀 파일을
생성할 수 있게 예시에 사용했습니다.
OpenPyXL 라이브러리를 직접 활용해서 변환하셔도 좋습니다.
워드 클라우드 렌더러는 워드 클라우드 라이브러리를 활용하여 워드 클라우드 이미지를 생성하고
반환합니다. 워드 클라우드 라이버리는 PNG와 같은 비트맵 이미지 포맷 뿐만 아니라 SVG
벡터 이미지 포맷으로도 출력할 수 있습니다.
이 렌더러에서는 SVG 벡터 포맷을 사용하여 이미지를 생성했습니다.
텍스트가 포함된 비트맵 이미지의 경우 이미지 크기를 줄이거나 늘릴 때 텍스트 영역에서
이미지 손실이 두드러지게 보일 수 있습니다
하지만 벡터 이미지를 사용하면 이미지 크기를 줄이거나 늘려도 텍스트의 선명도가 유지되어
깨끗한 이미지를 얻을 수 있습니다
워드 클라우드 렌더러에서는 SVG 벡터 이미지 포맷으로 고품질의 워드 클라우드 이미지를
생성하여 반하도록 했습니다
코어 폴더 아래에 렌더러스 파이 파일을 생성하고 제공해 드린 코드를 복사하겠습니다
라이브홀리는 판다스, OpenPyXL, 워드 클라우드를 최신 버전으로 설치합니다
렌더러 설정은 프로젝트 전역으로 할 수도 있고요 각 API 뷰 마다 개별적으로 설정할 수도
있습니다 프로젝트 전역 설정을 사용하면 프로젝트 전체에 걸쳐 일관된 응답 형식을 유지할 수
있기에 프로젝트 전역 설정을 추천드립니다
프로젝트 전역 설정은 프로젝트의 Settings 파일의 REST_
Framework 설정에 Default _ Renderer Classes 키를
통해 이루어집니다.
이 키에는 지원할 렌더러들의 경로를 list 형태로 지정합니다.
Django REST Framework 폴더의 Settings 파일을 보시면 각종 Django REST
Framework Default 설정들을 확인하실 수 있습니다.
이 중에 Renderer Class의 Default 설정을 복사합니다.
프로젝트 Settings에서 복사한 Renderer Class 설정을 붙여넣고 판다스
XLS 렌더러와 워드 클라우드 렌더러를 추가하여 프로젝트 전역에서 총 4개의 렌더러를
활성화했습니다.
웹브라우저를 통해 기본 API 응답을 확인하고요.
JSON 렌더러 동작도 확인해서 데이터의 구조를 파악해 둡니다.
SVG 포맷으로 요청하시면 이렇게 워드 클라우드 렌더러를 통해 SVG 포맷에 워드 클라우드
이미지 응답을 받게 됩니다.
Factor Image니까 이미지를 확대해도 글자가 깨끗하게 잘 보입니다.
엑셀 엑스 포맷으로 요청하시면 이렇게 엑셀 파일로 다운받게 됩니다.
그런데 다운받은 엑셀 파일을 보시면 author 컬럼 부분의 데이터가 중첩되어 있어서 한
컬럼의 사전 포맷으로 저장되어 있습니다.
이를 author 컬럼의 각 필드 값들을 나눠 응답하도록 해 보겠습니다.
중첩된 사전의 데이터가 있을 때에는 pandas의 jsonNormalize 함수를 통해
데이터 프레임을 생성해 보세요.
그러면 중첩된 데이터를 평평하게 만들어 줍니다.
다시 엑셀 파일을 요청해서 열어보면 이렇게 author 필드의 각 값들이 각 컬럼에 나눠
저장되어 있음을 확인하실 수 있습니다
워드 클라우드의 경우 실제 데이터보다 컬럼명들이 더 크게 보여지고 있는데요
각 데이터마다 컬럼명이 반복되어서 그렇습니다
워드 클라우드 생성 시에 컬럼명이나 숫자 데이터는 제외하고 전달해 주면 보다 의미 있는
워드 클라우드를 생성하실 수 있습니다
판다스의 데이터 프레임을 활용하겠고요.
컬럼명도 출력해 봅니다.
id 컬럼과 author.id 컬럼은 숫자로만 구성되어 있으니 제외시키겠고요.
좀 더 일반화시켜 컬럼명이 .id로 끝나는 컬럼을 제외시키겠습니다.
그럼 해당 컬럼이 제외된 데이터 프레임을 확인하실 수 있습니다.
컬럼명은 제외하고 데이터만 필요하니깐요.
값들만 1차원 배열로 평탄화시키고요.
공백을 구분자로 해서 하나의 문자열로 합칩니다.
이렇게 합쳐진 문자열로 보다 의미 있는 워드 클라우드를 만들었습니다.