안녕하세요. 이번 시간에는 Django 내에서 JSON API 요청을 처리하는 Vue를
개발하기 쉽도록 도와주는 django-rest-framework 라이브러리에 대해서
소개하는 시간입니다.
같은 데이터, 같은 UI의 애플리케이션을 다양한 기술로 만들 수 있는데요.
하나의 JSON API를 여러 UI 애플리케이션에서 어떻게 활용하는지를 간단한 코드와
스크린샷으로 살펴보겠습니다.
HTML 페이지 응답이 있습니다.
웹브라우저는 서버로부터 받은 HTML 응답을 그대로 화면에 렌더링합니다.
이는 웹브라우저의 가장 기본적인 동작이며 가장 빠른 방식입니다.
이 페이지를 보기 위해서는 서버로 딱 한 번의 요청을 보내고 봤습니다.
물론 각 이미지 파일에 대한 요청은 이미지별로 각각 이루어집니다.
HTML 코드에는 노래 목록이 있고 Tailwind CSS로 스타일링을 했습니다.
이번에는 방식을 바꿔 클라이언트 사이드 렌더링 방식으로 자바스크립트를 활용해서 노래 목록을
구성해 볼 수 있습니다.
이 페이지를 보기 위해 서버로 총 2회의 요청을 보내고 받아서 화면이 그려집니다
첫 번째 요청에서는 데이터 없이 HTML, JavaScript 코드만 받고요 두 번째
요청은 JavaScript 코드 내에 Fetch API 호출을 통해 이뤄집니다
노래 목록 데이터는 JSON API를 통해서 받아옵니다 서버단에서는 이 JSON 데이터를
파일이나 캐시에 미리 저장하고 저장된 데이터로 응답을 할 수도 있겠고요.
요청이 들어올 때마다 데이터베이스에서 조회해서 JSON 포맷으로 직렬화하여 응답을 해 줄
수도 있겠습니다.
백엔드 개발과 프론트엔드 개발이 따로 이루어지고, 백엔드와 프론트엔드가 서로 다른 기술
스택과 개발 환경을 사용하므로 개발 환경이 다소 복잡해질 수도 있습니다.
하지만 프론트엔드와 백엔드가 분리되어 각각의 영역에서 트렌디하고 최적화된 기술 스택을
사용할 수 있습니다.
하지만 트렌디하고 최적화된 기술 스택을 사용하는 것이 보다 낮은 비용으로 최적화된 결과물을
만들어내는 것은 아님에 유의해주세요.
브라우저에는 CORS 정책이 있습니다
웹 애플리케이션의 보안을 위해 도입된 정책으로서 한 도메인의 웹 페이지에서 다른 도메인의
리소스에 접근할 때 웹 브라우저에서 제안을 둡니다
요청을 받는 도메인에서 요청을 허용할 도메인 목록 화이트 리스트를 관리합니다
Django에서는 django-cors-headers을 통해 CORS 설정을 할 수
있습니다 예를 들어 pyhub.kr 사이트에서는 로컬호스트 페이지로부터의 HTTP 요청은
허용하고 있지만 다른 주소의 웹페이지로부터의 요청은 허용하지 않습니다.
본 실습에서는 웹페이지를 로컬호스트 주소로 띄워 주셔야만 pyhub.kr 도메인에 JSON
API 호출을 웹브라우저가 허용해 줍니다.
각 HTML 파일을 로컬호스트 주소로 띄우시기 위한 세 가지 방법이 있습니다.
일단 각 실습 파일을 미리 HTML 파일로 저장하고요.
첫 번째 방법으로서 정적 서버를 띄우신 후에 정적 서버를 통해 HTML 파일을 서빙하실 수
있습니다. 파이썬 3의 기본 모듈로 HTTP 서버가 있으니 원하는 포트 번호로 정적 서버를
여실 수 있겠고요 NGINX 웹서버로도 정적 서빙을 하실 수도 있습니다
두 번째 방법으로 비주얼 스튜디오 코드의 라이브 서버 확장을 활용하실 수 있습니다 파일을
여신 후에 라이브 서버에 open with live server 명령을 선택하시면
웹브라우저가 열리면서 해당 페이지가 뜹니다
페이지 자동 새로고침 기능이 있기에 HTML 파일이 변경되면 웹페이지가 자동으로
새로고침됩니다. 세 번째 방법으로 PyCharm에서 해당 파일을 에디터로 여신 후에 메뉴의 메뉴로
원하는 브라우저로 파일을 여실 수 있고요.
페이지 자동 새로고침 기능이 있기에 HTML 파일이 변경되면 웹페이지가 자동으로 새로고침
됩니다. CSR 방식의 코드를 실습해 보겠습니다.
슬라이드 하단에서 전체 소스 코드를 확인하실 수 있습니다.
이연 더바 바닐라 tailwind.html 파일을 복사해서 MyPROJ 프로젝트에서 HTML
폴더를 생성하고 CSR.html 파일로 저장하겠습니다.
PyCharm을 통해서 웹서버를 구동해서 열어보겠습니다.
csr.html 파일을 여신 상황에서 마우스 우클릭하시고 오프닝 메뉴의 브라우저 메뉴
선택하시고요.
크롬을 선택해 주세요.
그럼 이처럼 파이참 내부에서 웹서버가 구동되고요.
웹브라우저가 자동으로 뜨면서 csr.html 파일이 브라우저를 통해 보여집니다.
자바스크립트를 통해 pyhub.kr 사이트에 JSON API를 요청하고 받은 응답으로
이렇게 목록을 보여주고 있습니다.
페이지 소스보기에 보시면 csr.html 코드 외에도 파이참에서 추가한 웹소켓 코드도
보여지네요 웹소켓 기술을 통해 관련 HTML 파일이 수정되면 페이지를 자동 새로고침
해줍니다 이번에는 Visual Studio Code를 통해서 열어보겠습니다.
라이브 서버 확장을 설치해 주세요.
그리고 HTML 폴더에 csr.html 파일을 여신 후에 명령 팔레트에서 live
server open with live server 명령을 실행해 주세요.
그럼 이처럼 비주얼 스튜디오 코드 내부에서 웹 서버가 구동되고요.
자동으로 웹 브라우저가 뜨면서 csr.html 파일이 브라우저를 통해 보여집니다.
이번에는 파이썬 3의 http.server, 정적 서버를 활용해 보겠습니다.
myproj 프로젝트 경로에서 python3 -m http.server 명령을 사용하겠고요.
"--help", 옵션을 붙여 실행해 보시면 "-d", "-," 디렉토리 인자로 서빙할
디렉토리 경로를 지정할 수 있네요.
python3 -m http.server 8080-d html 명령을 실행하시면 8080
포트로 html 디렉토리를 서빙합니다.
이때 웹브라우저가 자동으로 실행되진 않고요.
직접 웹브라우저로 localhost의 8080 페이지에 접속해 주세요.
그럼 이렇게 html 폴더 내에 파일 목록이 보여지고요.
csr.html 파일을 클릭하시면 이렇게 csr.html 파일이 보여집니다.
정적 웹서버를 통해 HTML 파일을 연 것일 뿐, HTML 파일 수정에 대한 자동
새로고침은 지원되지 않습니다.
서버로 데이터를 요청해서 가져오는 것은 같지만, 클라이언트 단에서 UI를 그릴 때
React.js 라이브러리를 활용해 보실 수도 있습니다.
React 외에도 Vue나 Svelte 등의 프론트엔드 UI 라이브러리를 사용하실
수도 있습니다. 이 역시 클라이언트 사이드 렌더링 방식처럼 총 2번의 요청을 서버로 보내고
받아서 화면을 그립니다 웹 프론트엔드에서 자바스크립트를 통해 서버에 데이터를 요청할 때에는
패치 API를 사용합니다
API 서버와 세션 인증을 사용하신다면 패치 API 호출만으로 세션 쿠키가 자동으로
전송되므로 자바스크립트 딴에서는 인증을 위해 별도의 추가 코드가 필요 없습니다
인증에 대해서는 이후 영상에서 다루겠습니다.
이전 실습 코드에 이어 그 아래에 3__reacttailwind.html 파일을 복사해서
html 폴더 아래에 react.html 파일로 저장하겠습니다.
이전 실습과 동일한 방법으로 로컬 호스트 주소로 HTML 문서를 띄워봅니다
앞선 csr.html 파일과 동일한 화면인데요 같은 JSON API를 사용하고 리액트
기술로 UI를 만들었다는 부분만 다릅니다
안드로이드나 iOS 스마트폰에서 앱을 통해 UI를 그릴 수도 있습니다
앱 UI에서 사용할 노래 목록 데이터는 물론 JSON API를 통해서 받아옵니다
앱 개발을 위해서는 안드로이드 폰에서는 자바나 코틀린으로 앱을 만드실 수도 있고, iOS
폰에서는 Objective-C나 Swift 언어로 앱을 만드실 수 있는데요.
이처럼 React Native 기술로 앱을 만드실 수도 있습니다.
웹브라우저를 통한 요청이 아니기에 앞서 살펴본 CORS 보안 정책이 적용되지 않습니다.
CORS는 웹브라우저만의 정책이니까요.
요즘 안드로이드나 iOS 스마트폰에서 구글에서 개발한 Flutter 플레임워크로도 앱을 많이
개발합니다. 이때 개발 언어는 다트입니다.
플루터 내에서도 이렇게 JSON API를 호출하여 UI를 그릴 수 있습니다.
앱에서 모든 UI를 네이티브 기술로 구현할 필요는 없습니다.
네이티브 UI 기술을 사용하면 그만큼 개발 공수가 많이 듭니다.
UI 반응성이 중요한 부분은 네이티브 UI 기술로 구현하고요.
그 외의 부분은 웹 뷰를 사용하여 앱 내에 웹 브라우저를 추가하고 웹 기술로 UI를 그려낼
수도 있습니다. 웹 기술이 나날이 발전하고 있거든요.
그러니 적절히 잘 개발하면 사용자는 웹 UI에 대한 불편함 없이 사용할 수 있습니다.
국내에서는 토스 앱에서도 많은 부분이 웹뷰를 통해 서비스되고 있습니다.
앱에서 웹뷰로 서비스하면, 서버에서 업데이트하면 앱에 즉시 반영이 된다는 장점이 있습니다.
반면 앱 UI는 앱 업데이트를 구글과 애플에 제출하고 검수를 받아야 하며, 사용자가 직접
앱을 업데이트해야 변경사항이 적용됩니다.
장고 기본 기능으로도 이처럼 JSON 직렬화 및 계산된 필드를 추가하여 JSON 응답을
하실 수 있습니다.
포스팅의 제목 길이를 계산해서 title-length 키로 응답합니다.
그러나 이 방식에서는 뷰 함수와 직렬화 로직이 섞여 있어 직렬화 로직을 변경할 때마다 뷰
함수의 코드를 찾아서 수정해야 하는 단점이 있습니다.
관심사의 분리 원칙에 맞춰 데이터 변환 로직은 뷰에서 빼서 별도의 클래스나 함수로 분리하는
것이 바람직합니다.
이러한 관심사의 분리를 Django REST Framework 이하 DRF를
통해 해결하실 수 있습니다.
시리얼라이저를 통해 코디셋과 모델 인스턴스와 같은 복잡한 데이터를 JSON이나 엑셀 파일
등의 다양한 포맷으로 쉽게 변환할 수 있도록 파이썬 기본 데이터 유형으로의 변환을
지원합니다. 하나의 시리얼라이저로 데이터 변환 로직을 구현하시게 되면 여러 뷰에서 같은
데이터 변환 로직을 손쉽게 재사용할 수 있고요
데이터 변환 로직 변경이 필요한 경우 시리얼라이저 클래스만 수정하면 되기에 유지 보수성이
향상됩니다 계산된 필드도 시리얼라이저에서 이처럼 손쉽게 추가하실 수 있습니다
Django REST Framework 라이브러리를 프로젝트에 설치해 봅시다.
Django REST Framework 라이브러리는 2024년 4월 기준으로 최신 버전,
3.15.1 버전입니다.
이 라이브러리는 버전업이 되더라도 기능상에 큰 변화가 있지는 않기에 대개 최신 버전을
설치하셔도 강의 내용을 실습하시는 데에는 무리가 없으실 것입니다.
Django REST Framework Framework에서는 JSON 응답을 Django REST Framework
Framework 템플릿을 통해 HTML 웹페이지로 응답을 해주는 기능이 있습니다
이 웹페이지에서 로그인 버튼이 제공되고요 이때 Django REST Framework 스타일에
로그인을 할 수 있도록 URL 패턴도 제공됩니다
여기에서는 단순히 Django 기본 앱 Auth 앱의 로그인 뷰, 로그아웃 뷰를 활용만
하고 템플릿만 변경해서 개발 편의성을 높여주고 있습니다.
현재 Django 프로젝트에서 로그인 구현이 아직 없다면 이렇게 Django REST
Framework 구현을 활용하시면 로그인 템플릿 구현 없이도 즉시 로그인 기능을 활용하실
수 있습니다.
Django REST Framework 공식 문서의 설치 문서를 열어봤습니다.
Django REST Framework 이름의 라이브러리를 설치합니다.
본 강의에서는 Markdown 라이브러리와 Django Filter 라이브러리의 기능들은
사용하지 않기에 설치하지 않으셔도 무방합니다.
Requirements Common.txt 파일에 Django REST Framework
라이브러리 의존성을 추가하고요.
PIP 인스톨 명령으로 설치도 해줍니다.
세팅스의 Installed Apps List에 REST Framework
에비넘도 추가해줍니다.
프로젝트의 로그인 기능이 이미 구현되어 있지만, Django REST Framework
웹페이지 상단에 로그인, 로그업 링크를 추가하려면, 프로젝트의 UADS 파일에 REST
Underbar Framework.UADS를 인클로드 해줍니다.
잉클로드 하지 않는다면 장고 REST 프레임워크 웹페이지 상단에 로그인, 로그아웃 링크는
생성되지 않습니다.
장고 REST 프레임워크 공식 문서 아래에 장고 REST 프레임워크에 대한 커스텀 설정 예시가
있습니다. settings에 rest__framework 이름의 사전을 정의하여 장골 레스트
프레임워크 설정을 재정의합니다.
각 장골 레스트 프레임워크 API에 대한 디폴트 권한은 모든 요청을 허용하는 Allow
Any입니다. 이 설정들은 뒤에서 다루도록 하겠습니다.


1. 클라이언트 사이드 렌더링 (CSR) 개념
CSR 방식: 서버에서 HTML 파일만 제공하고, 클라이언트는 JavaScript를 통해 동적으로 데이터를 요청하여 UI를 그립니다.
서버-클라이언트 간 데이터 처리: 서버는 JSON 포맷으로 데이터를 제공하고, 클라이언트는 이를 받아서 화면을 그립니다. 예를 들어, 노래 목록 데이터를 Fetch API로 요청해 받아옵니다.
2. CORS (Cross-Origin Resource Sharing)
CORS는 다른 도메인에서 리소스를 요청할 때, 웹 브라우저가 이를 제한하는 보안 정책입니다. Django에서 django-cors-headers를 사용하여 특정 도메인에 대한 요청을 허용할 수 있습니다.
예를 들어, 웹 애플리케이션이 localhost에서 실행되고 있을 때만 특정 API 서버에 접근할 수 있도록 설정합니다.
3. 정적 서버 설정 방법
HTML 파일 서빙: HTML 파일을 로컬에서 웹 서버를 통해 서빙하는 방법입니다.
Python의 http.server 모듈을 사용하여 간단한 HTTP 서버를 실행.
Visual Studio Code에서 Live Server 확장을 사용해 자동 새로고침 기능 제공.
PyCharm에서 웹 서버를 실행해 자동 새로고침 기능 제공.
4. React.js, Vue.js 등 프론트엔드 라이브러리
CSR 방식으로 데이터를 요청하는 프론트엔드 라이브러리 예시로 React.js와 Vue.js를 언급하며, 각각을 통해 같은 JSON API를 활용해 UI를 만들 수 있습니다.
React와 같은 UI 라이브러리를 사용하면, 동적 UI를 쉽게 구성할 수 있고, 웹 API를 통해 데이터를 가져와 화면에 렌더링할 수 있습니다.
5. JSON API와 서버 통신
JSON API 요청: 클라이언트는 서버에서 데이터를 JSON 형식으로 받아와 화면을 그립니다. 이때 Fetch API나 Axios 같은 라이브러리를 사용합니다.
세션 인증: 인증이 필요한 API 호출 시, 세션 쿠키를 통해 자동으로 인증이 처리됩니다.
6. 앱 개발에서 JSON API 활용
모바일 애플리케이션(Android, iOS)에서도 JSON API를 사용하여 서버와 통신하고, 앱에서 UI를 그릴 수 있습니다.

Android: Java, Kotlin
iOS: Objective-C, Swift
Cross-platform: React Native, Flutter
웹뷰 사용: 모바일 앱에서 웹 기술을 활용하는 방법으로, 웹뷰를 사용하여 앱 내에서 웹 애플리케이션을 실행할 수 있습니다. 이는 업데이트 용이성 및 개발 효율성을 높여줍니다.

7. Django REST Framework (DRF) 소개
DRF 설치: pip install djangorestframework 명령어로 설치 후, INSTALLED_APPS에 'rest_framework' 추가.
Serializer: DRF에서 데이터 직렬화를 위해 Serializer 클래스를 사용합니다. 이 클래스는 복잡한 데이터(모델, 쿼리셋 등)를 JSON으로 변환할 수 있습니다. 직렬화 로직을 뷰에서 분리해 재사용 가능하도록 구현합니다.
계산된 필드: DRF의 Serializer에서 계산된 필드(예: 제목 길이)를 쉽게 추가할 수 있습니다.
8. Django REST Framework 설정
권한 설정: DRF에서는 요청 권한을 설정할 수 있습니다. 예를 들어, 기본 권한은 AllowAny로 설정되어 있으며, 이를 변경하여 인증된 사용자만 접근할 수 있도록 설정할 수 있습니다.
로그인 기능: Django 기본 로그인 기능을 DRF의 웹 페이지에서 활용할 수 있습니다. 로그인, 로그아웃 기능을 제공하며, 추가적인 템플릿을 통해 편리하게 로그인 UI를 처리할 수 있습니다.
9. 설치 및 설정
pip install djangorestframework로 DRF 설치.
INSTALLED_APPS에 'rest_framework' 추가.
DRF 설정 파일을 통해 API의 권한, 인증 등을 설정.
결론
**Django REST Framework (DRF)**를 사용하여 JSON API를 제공하고, 이를 다양한 클라이언트 애플리케이션(웹, 모바일)에서 활용하는 방법을 다뤘습니다.
클라이언트 사이드 렌더링 방식으로 JSON API를 사용하면, 서버와 클라이언트의 역할이 명확히 분리되어 개발 효율성이 높아집니다.
또한, DRF를 활용하면 데이터 직렬화, 계산된 필드 추가 등 여러 기능을 통해 유지 보수성을 높일 수 있습니다.