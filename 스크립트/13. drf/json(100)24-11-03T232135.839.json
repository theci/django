안녕하세요. 이번 시간에는 Django REST Framework의 Serializer를
활용해서 다양한 상황에 대한 조회 API를 구현해 보겠습니다.
include 함수는 여러 단계에 걸쳐 중첩할 수 있습니다.
그리고 include에서는 url-patterns-list를 인자로 직접 지정하실 수
있고요. 이때에는 tuple로 첫 번째 값에는 url-patterns-list를 지정하고
tuple의 두 번째 값에는 네임스페이스를 지정합니다.
블로그 앱에 새로운 이름 공간으로서 API v1을 추가하겠습니다.
API 버전 1을 의미하고요.
일반적인 웹페이지는 사용자는 웹브라우저를 새로고침하거나 매번 페이지에 접속할 때마다 서버에
최신 버전 코드로 렌더링된 웹페이지를 제공받습니다.
항상 최신 버전을 사용하죠
반면에 API를 사용하는 UI 클라이언트 단에서는 특정 버전의 API 스펙에 맞춰
개발되므로 서버 측에서 업데이트된 API가 이전과 호환되지 않게 변경되면 기존 UI
클라이언트 애플리케이션은 작동하지 않을 수 있습니다
그래서 API의 경우, 이처럼 버전별로 주소를 다르게 맵핑하여 버전 관리가 필요하게
됩니다. 블로그 앱에 api.py 파일을 생성합니다.
views.py 파일은 Django 기본 뷰를 구현할 목적으로 사용하고요.
api.py 파일은 Django REST Framework API를 구현할 목적으로
사용하겠습니다.
블로그의 url.py 파일에서 API를 위한 url.patterns.list를
정의하고요.
url.patterns에 api.slush.prefix를 지정하여 include
해줍니다.
include 함수에는 리스트를 지정할 것이기에 반드시 tuple로 인자를 지정해
주셔야만 합니다.
tuple의 첫 번째 값은 url.patterns이며 두 번째 값은
namespace입니다.
포스팅 리스트 요청과 디테일 요청에 대해서 JSON 응답을 하는 뷰를 구현해 보겠습니다.
리스트 요청, 디테일 요청 모두에 대해서 ID 필드, 타이트 필드, 컨텐츠 필드로
응답합니다.
JSON 직렬하를 위해서는 코드셋이나 모델 인스턴스를 Python 기본 데이터 타입으로
변환을 해 줘야만 합니다.
그럼 JSON 리스펀스를 통해 JSON 직렬화를 수행하고 나서 이처럼 JSON 응답을 할
수 있습니다.
django-rest-framework의 시리얼라이저를 활용해 보겠습니다.
Django 폼에서 폼과 모델 폼이 있듯이 시리얼라이저에서도 시리얼라이저와 모델
시리얼라이저가 있습니다.
모델 내역대로 시리얼라이저 필드들을 자동 생성하시려면 모델 시리얼라이저를 활용하셔야
합니다. 메타 클래스 지정은 모델 폼과 동일합니다.
뷰에서 조회 요청을 처리할 때 Serializer를 활용하는 코드는 이 두 줄 뿐입니다
시리얼라이저 인스턴스를 생성하고 시리얼라이저 인스턴스의 데이터 속성으로 파이썬 기본 데이터
타입으로 변환된 데이터를 제공받습니다
리스트 응답에서는 Serializer 인스턴스 생성 시에 인스턴스 키워드 인자로 코드셋이나
모델 인스턴스 리스트를 지정하시고요.
반드시 Many 키워드 인자를 참으로 지정해 주셔야만 합니다.
Many 키워드 인자에 대해서 참을 지정하지 않으시면 Serializer에서 값 변환 시에
AttributeError 예외가 발생합니다.
디테일 응답에서는 시리얼라이저 인스턴스 생성 시에 인스턴스 키워드 인자로 모델 인스턴스를
하나 지정합니다
시리얼라이저 인스턴스의 데이터 속성의 값은 파이썬 기본 데이터 타입이기에 JSON 응답
인자로 넘겨 JSON 직렬화가 가능하고요 리턴 리스트 타입이거나 리턴 딕 타입인데요 각각
파이썬 기본 타입인 리스트와 사전을 상속받아 확장했습니다 변환을 수행한 시리얼라이저
인스턴스를 시리얼라이저 속성으로 지원할 뿐 그냥 리스트와 사전으로 보시면 됩니다.
블로그의 api.py 경로에 장고 기본 뷰 함수, 포스트 리스트 함수를 정의합니다.
인자는 httpRequest 타입으로 받으며 반환 값은 httpResponse 타입입니다.
URL 패턴도 등록해 줍니다.
포스트 언더바 리스트 뷰 함수 구현에서 포스트 모델에 대한 코디셋을 생성하고 생성된
코디셋을 JSON 리스폰스를 통해 JSON 직렬화를 시도해 보겠습니다.
그럼 이렇게 코디셋 객체는 JSON 직렬화를 수행할 수 없다는 타입 에러가 발생합니다.
JSON 리스폰스에 지정된 JSON 인코더에서 코디셋 타입을 지원하지 않기 때문입니다.
코디셋을 List 사전 조합으로 변환하시면 JSON 직렬화에 성공하고 이렇게 JSON
응답을 받으시게 됩니다.
이번에는 Serializer를 활용해서 코디셋을 Python 기본 데이터 타입으로 변환해
보겠습니다. 블로그 아래에 serializers.py 파일을 생성하시고요.
모델 폰 클래스를 정의하는 것처럼 모델 Serializer 클래스를 정의하는 방법도
동일합니다. 모델 Serializer 클래스를 상속받고, 메타 클래스의 모델 속성으로 모델
클래스를 지정하고, 모델 클래스로부터 가져올 필드 목록을 지정합니다.
리스트가 아닌 문자열로 __all__ 문자열을 지정하시면, 지정 모델 클래스의 모든 필드
내역들로 시리얼라이저 필드들을 자동으로 추가해줍니다.
시리얼라이저 필드 목록은 id, title, content 필드로 지정하겠습니다.
PostListView에서는 PostSerializer 클래스의 인스턴스를
생성합니다.
인스턴스, 키워드 인자로 코디셋을 지정합니다.
인자 이름은 인스턴스이고 인자는 코디셋이죠.
이름이 이상해도 맞는 지정입니다.
시리얼라이저에서는 인스턴스 이름의 키워드 인자로 코디셋이나 모델 인스턴스를 전달받습니다.
시리얼라이저 인스턴스를 생성한 뒤에 데이터 속성을 통해 파이썬 기본 데이터 타입으로 변환된
값을 참조하실 수 있습니다
인스턴스 인자로 코디셋을 지정했으니까 리턴 리스트 타입의 리스트가 되어야 할 것입니다
리턴 리스트 클래스 코드를 보시면 리스트를 상속받았고 시리얼라이저 속성을 추가로 지원하고
있습니다. 그 위에 리턴 딕 클래스 코드로 보시면 사전을 상속받았고 이 역시 시리얼라이저
속성을 추가로 지원하고 있습니다.
시리얼라이저를 통해 변환된 데이터를 JSON 리스펀스를 통해 응답해 보겠습니다.
API 요청을 해보시면 AttributeError 예외가 발생합니다.
QuerySet 인스턴스에는 Title 이름의 속성이 없다고 합니다.
Serializer를 통해 다수의 모델 인스턴스를 변환할 때에는 반드시 many 키워드
인자로 참 인자를 지정해 주셔야만 합니다.
이를 지정하지 않아서 QuerySet을 모델 인스턴스인 것처럼 처리해서 발생한 오류입니다.
매니 키워드 인자로 참을 지정하시면 시리얼라이저에 지정한 대로 아이디, 타이틀, 내용
필드 내역대로 변환이 성공되고 JSON 직렬화로 성공하여 이렇게 JSON 응답을
받았습니다. 이어서 Post_Detail API 뷰도 구현해 보겠습니다.
PK 인자를 받을 것이고요.
이에 맞춰 URL 패턴도 등록해 줍니다.
기본키로 포스팅 레코드를 조회하고요.
생성된 모델 인스턴스를 그대로 JSON 리스펀스에 넘겨보겠습니다.
/ API / 100 주소로 요청을 해보면 타입이 맞지 않아 오류가 납니다.
뷰 구현에서 Serializer 인스턴스를 생성하겠고요.
인스턴스 키워드 인자로 모델 인스턴스를 지정합니다.
데이터 속성으로 Serializer를 통해 변환된 값을 참조하실 수 있습니다.
리턴딕 타입의 사전일 것이고요.
변환된 데이터를 JSON 응답를 통해 응답합니다.
대개의 API 구현에서 리스트 응답과 상세 응답이 다른 경우가 많습니다.
블로그 포스팅 목록에서도 포스팅의 제목만 보여주고 내용은 보여주지 않는다면 굳이 API
응답에서 컨텐트 필드를 응답할 필요는 없을 것입니다.
리스트 조회 시의 Query셀에서는 differ method을 통해 select
query에서 컨텐트 필드를 제외시키고요.
하이픈 기본 데이터 타입으로의 변환에서도 컨텐트 필드는 제외합니다.
코리셋에서 디퍼를 통해 컨텐츠 필드는 셀렉트 코리에서 제외했는데 코리셋 참조 시에 컨텐츠
속성을 참조하면 추가 코리가 발생되어 M++ 문제가 발생하니 주의해주세요.
이제 포스트 리스트 뷰와 포스트 디테일 뷰에서 필요한 코리셋도 서로 다르고 파이썬 기본
데이터 타입으로 변환하는 데이터 구조도 서로 달라졌습니다.
서로 간에 변환하는 데이터 구조가 달라졌으니 django-rest-framework에서는
Serializer를 따로 정의합니다
리스트 조회 목적의 Serializer에서는 Content 필드를 제외한 Id 필드와
Title 필드만 지정하고요 디테일 조회 목적의 Serializer에서는 Id 필드,
Title 필드, Content 필드까지 지정합니다
PostSerializer 코드를 복사해서 PostListSerializer 클래스와
PostDetailSerializer 클래스를 정의합니다.
PostListSerializer 클래스에서는 Content 필드를 제외시킵니다.
PostUnderbarListView에서는 PostListSerializer 클래스를
사용하겠고요.
포스트 언더바 디테일 뷰에서는 PostDetailSerializer 클래스를 사용하도록 합니다.
그럼 이렇게 리스트 API에서는 컨텐트 필드 없이 응답을 하고요.
디테일 API에서는 컨텐트 필드도 같이 응답을 하게 됩니다.
이번에는 외래키 관계를 조회해 보겠습니다.
포스팅 작성자 유저의 PK를 author 필드명으로 추가하겠고요.
N+1 문제 해결을 위해 코디셋에 author 필드에 대한 즉시 로딩도 추가해 줍니다.
시리얼라이저에서는 author 필드명만 추가해 주시면 모델 시리얼라이저의 기본 동작으로
외래키 값으로 조회됩니다.
포스트 모델 클래스에는 User 모델에 대한 외래키로써 author 필드가 있습니다.
포스트 리스트 시리얼라이저 클래스와 포스트 디테일 시리얼라이저 클래스에 메타 필드 리스트에
외래키 필드인 author 이름을 추가하면 디폴트 동작으로 이렇게 외래키 값을 응답하게
됩니다. 포스트 언더바 리스트 뷰에서는 N+1 문제가 발생할 것이니 코디셋에 author
필드에 대한 즉시 로딩 코드를 추가해 줍니다.
JSON 응답에서는 Django 디버그 툴바를 사용할 수 없어서 n++1 문제가 발생하는지
확인하기 어렵습니다.
하지만 뒤에서 Django REST 프레임워크의 API 뷰를 통해 API 요청을 처리하게
되면 HTML 템플릿을 통해 재소응답을 확인할 수 있으므로 M++ 문제 발생 여부를
Django 디버그 툴바를 통해 손쉽게 확인하실 수 있게 됩니다.
이번에는 작성자의 외래 키 값 대신에 유저명으로 조회를 해 보겠습니다.
Author, User, Model 인스턴스를 문자열로 변환하면 User, Model
클래스의 기본 구현에서는 유저명을 반환하도록 구현되어 있습니다.
Serializer에서는 String, RelatedField,
SerializerField로 재정의하시면 외래 키 필드에 대해서 문자열로 변환해 줍니다.
포스트 리스트 시리얼라이저 클래스와 포스트 디테일 시리얼라이저 클래스의 author 필드에
대한 시리얼라이저 필드를 재정의합니다.
author 필드는 외래키 필드이기에 string-related field 시리얼라이저
필드를 적용하시면 외래기 필드의 모델 인스턴스에 대해서 문자열로의 변환을 수행해줍니다.
StringRelatedField 클래스 구현을 보시면 ToRepresentation
메서드에서 이렇게 모델 인스턴스에 대해서 문자열 변환을 수행한 값을 반환하고 있습니다.
API 응답을 확인해 보시면 이렇게 UserName 필드로 응답을 받게 됩니다.
이번에는 str 함수를 사용하지 않고 author 필드의 username 필드를 직접
지정하여 문자열로 응답해 보겠습니다.
시리얼라이저에서는 문자열 필드이기에 character 필드, serializer 필드로
재정의하고요.
source 속성으로 참조할 필드명을 지정하시면 됩니다.
이는 author 필드의 username 필드를 참조하여 값을 가져오도록 설정하는
것입니다. 소스 속성은 원본 모델 필드명과는 다른 이름으로 API를 노출하고자 하실 때
사용하시면 편리합니다 포스트 모델 클래스에서 Author 웹앱 키 필드의 유저 네임 필드는
문자열 필드이니 CharField 필드, Serializer 필드로 정의하고요 맵핑할
필드는 Author 필드의 유저 네임 속성으로 지정해 줍니다
만약 author.email로 지정하시면 이메일 필드로 맵핑되고요.
author.password로 지정하시면 암호 필드로 맵핑됩니다.
암호 필드는 절대 지정해서는 안 되겠죠.
author.username 필드로 지정하시면 이렇게 유저명으로 응답을 받게 됩니다.
PostDetail, Serializer에도 동일하게 적용해 주겠습니다.