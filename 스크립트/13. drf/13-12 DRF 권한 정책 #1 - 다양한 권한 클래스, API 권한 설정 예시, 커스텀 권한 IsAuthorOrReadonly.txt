안녕하세요. 이번 시간에는 django-rest-framework의 각 API 뷰의 권한 정책을
설정하는 방법에 대해서 살펴보겠습니다.
API 뷰로 구현한 API에서는 API 요청을 처리할 때 두 단계로 권한을 확인하고,
권한이 없다면 permission denied 예외를 발생시켜 요청을 거부합니다.
클라이언트에게는 403 forbidden 응답을 하게 됩니다.
API 뷰로 구현한 API가 호출될 때마다 체크할 권한목록은 settings에 REST
underscore Framework 설정에 Default Permission Classes
설정을 통해 List 포맷으로 지정하실 수 있고요.
Default로 Allow Any만이 지정되어 있습니다.
Allow Any 정책은 인증 확인 없이 API 호출을 허용하는 권한 정책입니다.
모든 권한 클래스는 Base Permission 클래스 기반으로 구현되고요.
해즈 퍼미션 메서드와 해즈 오브젝트 퍼미션 메서드를 통해서 권한을 체크합니다.
해즈 퍼미션 메서드는 API 뷰 호출 시에 준비 단계에서 자동 호출됩니다.
인자로 요청 객체와 API 뷰 인스턴스를 바꾸어 참 혹은 거짓을 반환하여 요청의 허용
여부를 결정합니다.
모든 API 호출에서 반드시 호출되는 메서드입니다.
hasObjectPermission 메서드는 API 뷰 호출 시에 getObject 메서드
호출을 통해 관련 넷코드를 조회할 때 자동 호출됩니다.
getObject 메서드를 호출하는 API 뷰 클래스는 retrieve API 뷰 클래스,
update API 뷰 클래스, destroy API 뷰 클래스입니다.
django-rest-framework에서 기본 지원하는 권한 클래스 중에 4개 권한 클래스를
살펴보겠습니다. 그 첫 번째로 AllowAny 권한 클래스입니다.
권한 체크 없이 즉시 참을 반환하여 요청을 허용합니다.
Django REST 프레임워크의 기본 권한 클래스로서 이 클래스만 하나 지정되어
있습니다. 주로 조회 성격의 API에서 인증과 권한 확인 없이 허용하려 할 때 사용합니다.
두 번째로 isAuthenticated 권한 클래스입니다.
Django REST 프레임워크 기본에서는 세션 인증, 베이직 인증, 토큰 인증을
지원하고요. 서드 파티 라이벌리를 통해 JSON 웹토큰 인증 등의 다양한 인증을
지원하는데요. 인증 방법에 상관없이 인증 여부만을 확인하여 인증 상황에서만 요청을
허용합니다. 주로 생성 API에서 사용합니다.
세 번째로 isAuthenticatedOrLeadOnly 권한 클래스입니다.
조회 API에 대해서는 인증 여부를 확인하지 않고 허용하고요.
그 외에 생성, 수정, 삭제 API에 대해서는 인증 여부를 확인하여 인증 상황에서만 생성,
수정, 삭제 API 요청을 허용합니다.
주로 생성 API와 조회 API에 대해서 일괄적으로 권한 정책을 부여할 때 사용합니다.
수정 API와 삭제 API에서는 작성자에 한해서만 허용해야 하기에 이 권한 정책은 맞지
않습니다. 네 번째로 isAdminUser 권한 클래스입니다.
스태프 유저인 경우에만 모든 요청을 허용하고요.
미인증 상황이거나 스태프 유저가 아닌 경우에는 요청을 거부합니다.
권한 클래스에서는 and, or, not 논리 연산자를 지원합니다.
이를 통해 권한 클래스들을 조합하여 새로운 권한 클래스를 만들어 낼 수 있습니다.
Django REST Framework 기본에서 지원하는
IsAuthenticatedOrReadOnly 권한 클래스는 조회 요청이거나 인증된
요청인지를 확인하니까요.
이 두 개의 로직을 개별 권한 클래스로 구현하고 이렇게 OR 논리 연산자로 조합하여 이와
동일한 권한 클래스를 만들어 내실 수 있습니다.
프로젝트의 권한 전역 설정은 Settings의 Default Permission
Classes 설정을 통해서 합니다.
Default로는 Allow Any 권한 정책이 지정되어 있습니다.
Default Permission Classes 설정은 재정의하지 않고 Default
설정을 그대로 사용하겠습니다.
블로그 앱에 포스트 모델에 대한 5개 API에 대해서 권한 정책을 설정해 본다면 이렇게
설정해 볼 수 있겠습니다.
목록 조회 API와 개별 조회 API에서는 인증 확인 없이 노출할 것이기에 Allow
Any 정책을 지정하고요.
디폴트 정책과 동일하니 권한 지정을 생략하셔도 됩니다.
생성 API에서는 요청 유저를 기록해야 하니 Is Authenticated 정책을 지정하여
인증된 요청만 허용하도록 합니다.
수정 API와 삭제 API에서는 작성자에 한해서만 허용해야 할 텐데요.
이 권한 정책은 Django REST Framework 기본에서 지원하지 않습니다.
이어서 만들어 보겠습니다.
커스텀 권한 정책으로서 IsAuthorOrLeadOnly 클래스를 만들어 봤습니다.
조회 요청은 인증 여부에 상관없이 허용하겠고요.
생성은 인증 유저만 허용하고, 수정, 삭제는 작성자만 허용도록 하겠습니다.
목록 조회 요청과 생성 요청은 HasPermission 메서드만 호출하여 권한을
체크하고요. 개별 조회 요청, 개별 수정 요청, 개별 삭제 요청은 1차로
HasPermission 메서드부터 호출하여 권한을 확인하고요.
2차로 관련 레코드를 조회한 직후에 HasObjectPermission 메서드를 호출하여
권한을 확인합니다.
해지 퍼미션 메서드가 호출될 때에는 아직 관련 레코드 조회 전입니다.
그래서 조회 요청일 경우에는 허용하고요.
조회 요청이 아닌 경우에는 인증 여부만 반환하면 됩니다.
해지 오브젝트 퍼미션 메서드가 호출될 때 조회 요청인 경우에는 개별 조회 요청인 경우
하나밖에 없습니다.
조회 요청이니까 작성자 확인 없이 즉시 참을 반환하여 요청을 허용토록 합니다.
HasObjectPermission 메서드가 호출이 될 때 개별 수정 요청과 개별 삭제
요청일 때에는 작성자 외래키 필드와 요청 객체의 유저 인스턴스가 같은 유저인지를
비교합니다. 이렇게 구현된 IsAuthorOrLeadOnly 권한 클래스는 이 API
5개를 모두 커버할 수 있습니다.
포스트 모델에는 author 외래키 필드가 있으니까 이 권한 클래스를 쓸 수 있는데요 만약
author 이름의 필드가 아니라 owner 이름의 필드라면 어떻게 해야 할까요?
코드를 복사해서 isOwner or readOnly 클래스를 또 하나 만들어야 할까요?
이에 대해서는 곧 살펴보겠습니다
현재 아이디가 109번인 포스팅이 있고요 작성자는 유저명 b로 시작하는 유저입니다
PostUpdate API 뷰의 Permission Classes 설정에는
IsAuthenticated 권한 설정이 지정되어 있기에 작성자를 구별하지 않고 인증만
되어 있으면 수정 API 요청을 허용합니다.
PostDestroy API 뷰 클래스에서도 마찬가지죠.
아이디가 109번인 포스팅에 대해 작성자가 아닌 다른 유저로 수정 요청을 해보면 200
응답을 받으며 API 요청이 처리되었습니다.
isAuthorOrLeadOnly Custom 권한 클래스를 통해 작성자에 한해서 수정
API 요청과 삭제 API 요청을 허용하도록 해보겠습니다.
Core 폴더 밑에 permissions.py 경로에 isAuthorOrLeadOnly
클래스 코드를 복사합니다.
조회 요청에 대해서 허용하고요.
비조회 요청에 대해서는 인증 상태에서만 허용합니다.
해제 오브젝트 퍼미션 메서드는 개별 조회, 개별 수정, 개별 삭제 API에서만 호출되어
권한을 체크하는데요.
조회 시에는 즉시 참을 반환하여 요청을 허용하고요.
포스트 모델에는 유저 모델에 대한 외래키로써 어서 외래키 필드가 있잖아요.
개별 수정, 개별 삭제 API에서는 포스팅 작성자와 요청 유저가 같은지 비교하여 같을
경우에만 요청을 허용합니다.
포스팅 수정 API와 삭제 API의 권한 정책으로 IsAuthorOrReadOnly
클래스를 지정합니다.
API 뷰 클래스 코드를 보시면 Permission, Classes, Class 변수로
디폴트 권한 정책이 설정되어 있는데요.
이렇게 Permission, Classes, Class 변수를 재정의하시면 디폴트 권한
정책은 무시되고 지정 권한 정책으로만 동작하게 됩니다.
작성자가 아닌 유저로 수정 요청을 보내면 이렇게 403, forbidden 응답을 받으며
수정 권한이 없어 요청이 거부되고요 작성자로 수정 요청을 보내면 이렇게 205 응답을
받으며 수정 요청이 수락됩니다 삭제에서도 작성자가 아닌 유저로 삭제 요청을 보내면 이렇게
403, forbidden 응답을 받으며 삭제 권한이 없어 요청이 거부되고요 작성자로 삭제
요청을 보내면 삭제 요청이 수락됩니다



Django REST Framework(DRF)에서 API 뷰 권한 설정을 통해 특정 API 요청에 대해 권한을 제어하는 방법을 설명한 내용을 정리하면 다음과 같습니다:

1. 권한 정책 개념
권한 확인: API 뷰에서 권한은 요청을 처리하기 전에 두 단계로 확인됩니다. 권한이 없으면 permission denied 예외가 발생하고, 클라이언트에는 403 Forbidden 응답이 반환됩니다.
Default Permission Classes: 권한 설정은 settings.py의 DEFAULT_PERMISSION_CLASSES 항목을 통해 관리되며, 기본적으로 AllowAny 권한이 설정되어 있습니다. 이 설정은 인증 없이 모든 요청을 허용합니다.
2. DRF 권한 클래스
모든 권한 클래스는 BasePermission 클래스를 상속받아 구현됩니다. 주요 메서드는:

has_permission(): API 뷰 호출 시 권한을 확인하는 메서드로, 요청 객체와 API 뷰 인스턴스를 인자로 받아 True/False를 반환합니다.
has_object_permission(): 특정 객체에 대한 권한을 확인하는 메서드로, 객체를 조회한 후 호출됩니다. 주로 retrieve, update, destroy API에서 사용됩니다.
3. 기본 권한 클래스
AllowAny: 인증 없이 모든 요청을 허용하는 기본 권한 클래스입니다. 조회 API 등에 사용됩니다.
IsAuthenticated: 인증된 사용자만 요청을 허용합니다. 일반적으로 생성 API에 사용됩니다.
IsAuthenticatedOrReadOnly: 인증된 사용자만 생성, 수정, 삭제를 허용하고, 조회 요청은 인증 여부와 관계없이 허용합니다.
IsAdminUser: 관리자 권한을 가진 사용자만 모든 요청을 허용합니다. 인증되지 않은 사용자나 관리자 권한이 없는 사용자는 요청을 거부합니다.
4. 커스텀 권한 클래스
DRF에서 제공하는 기본 권한 클래스 외에도, 권한 정책을 커스터마이즈할 수 있습니다. 예시로 IsAuthorOrReadOnly 클래스를 만들어, 작성자만 수정 및 삭제를 할 수 있게 할 수 있습니다.

IsAuthorOrReadOnly 클래스 구현
목적: 작성자는 수정/삭제 권한을 가질 수 있고, 다른 사용자는 읽기 전용 권한을 가집니다.
구현 방식:
조회 API는 인증 여부에 관계없이 접근 허용
생성 API는 인증된 사용자만 접근 허용
수정/삭제 API는 작성자만 접근 허용
has_object_permission() 메서드에서 작성자만 수정/삭제 권한을 가질 수 있도록 처리
python
코드 복사
from rest_framework.permissions import BasePermission

class IsAuthorOrReadOnly(BasePermission):
    def has_permission(self, request, view):
        # 조회 API는 인증 여부와 관계없이 허용
        if request.method in ['GET', 'HEAD', 'OPTIONS']:
            return True
        # POST, PUT, DELETE는 인증된 사용자만 허용
        return request.user and request.user.is_authenticated

    def has_object_permission(self, request, view, obj):
        # 조회 요청은 작성자 확인 없이 허용
        if request.method in ['GET', 'HEAD', 'OPTIONS']:
            return True
        # 수정/삭제 요청은 작성자가 아닌 사용자는 거부
        return obj.author == request.user
5. 권한 클래스 조합
DRF에서는 권한 클래스를 and, or, not 논리 연산자로 조합하여 복합적인 권한 정책을 만들 수 있습니다.
예시: IsAuthenticatedOrReadOnly는 인증된 사용자만 수정/삭제를 할 수 있게 하며, 조회 요청은 인증 여부와 관계없이 허용합니다.
6. 권한 설정 방법
권한 설정은 APIView 클래스에서 permission_classes 속성으로 지정할 수 있습니다. 이를 통해 기본 권한 설정을 재정의할 수 있습니다.

python
코드 복사
from rest_framework.permissions import IsAuthenticated

class PostCreateAPIView(CreateAPIView):
    permission_classes = [IsAuthenticated]  # 인증된 사용자만 생성 가능
7. 권한 정책 적용 예시
목록 조회 API (ListAPIView): 인증 없이 AllowAny 권한 클래스를 사용하여 누구나 접근할 수 있도록 설정합니다.
개별 조회 API (RetrieveAPIView): 인증 없이 AllowAny 권한 클래스를 사용합니다.
생성 API (CreateAPIView): 인증된 사용자만 요청을 할 수 있도록 IsAuthenticated 권한 클래스를 설정합니다.
수정 API (UpdateAPIView): 작성자만 요청을 할 수 있도록 IsAuthorOrReadOnly 커스텀 권한 클래스를 사용하여 요청을 제한합니다.
삭제 API (DestroyAPIView): 수정 API와 마찬가지로 IsAuthorOrReadOnly 클래스를 사용하여 작성자만 삭제할 수 있도록 설정합니다.
8. 예시: 권한 설정 적용
목록 조회: permission_classes = [AllowAny] (기본값이므로 생략 가능)
개별 조회: permission_classes = [AllowAny]
생성: permission_classes = [IsAuthenticated]
수정/삭제: permission_classes = [IsAuthorOrReadOnly]
Post 모델의 권한 설정 예시
python
코드 복사
# 목록 조회 및 개별 조회
class PostListView(ListAPIView):
    permission_classes = [AllowAny]  # 인증 없이 조회 허용

class PostDetailView(RetrieveAPIView):
    permission_classes = [AllowAny]  # 인증 없이 조회 허용

# 생성 API
class PostCreateView(CreateAPIView):
    permission_classes = [IsAuthenticated]  # 인증된 사용자만 생성 허용

# 수정 및 삭제 API
class PostUpdateView(UpdateAPIView):
    permission_classes = [IsAuthorOrReadOnly]  # 작성자만 수정 허용

class PostDestroyView(DestroyAPIView):
    permission_classes = [IsAuthorOrReadOnly]  # 작성자만 삭제 허용
9. 실제 테스트
잘못된 요청: 작성자가 아닌 사용자가 수정/삭제 요청을 보내면 403 Forbidden 응답이 반환됩니다.
정상 요청: 작성자가 수정/삭제 요청을 보내면 요청이 정상적으로 처리됩니다.
결론
Django REST Framework에서 API 뷰의 권한 정책을 설정하는 방법은 기본 권한 클래스와 커스텀 권한 클래스를 활용하여 세밀하게 제어할 수 있습니다. 
이를 통해 API의 보안을 강화하고, 특정 작업에 대해 권한을 제한하거나 허용하는 정책을 적용할 수 있습니다.