이번에는 author, 작성자 필드를 문자열이 아닌 중첩된 사전으로 응답해 보겠습니다
유저 모델의 필드인 id, username, email 외에도 계산된 필드로서 name
필드를 추가했고요 last name 필드와 first name 필드를 하나의 문자열로
합쳤습니다
시리얼라이저에서는 중첩된 사전의 경우 그 외래키 모델 클래스에 맞춰 모델 시리얼라이저를
추가로 정의해서 처리합니다 유저 모델에 대한 모델 시리얼라이저로서 author
시리얼라이저를 정의하고요.
id, name, email 필드 외에도 계산된 필드로서 name 필드를 추가합니다.
시리얼라이저 메서드 필드에서는 값 계산을 위한 메서드로서 디폴트로 get-field명
메서드를 찾거든요.
그러니 get-name 메서드가 자동 호출됩니다.
이렇게 정의한 Author Serializer를 외대키 필드명에 맞게
PostListSerializer와 PostDetailSerializer에 추가합니다.
중첩의 깊이가 깊어지면 해당 필드에 맞게 Serializer 클래스를 추가로 정의해서
맵핑해 주시면 됩니다.
포스트 모델의 author 필드는 유저 모델에 대한 외래키 필드입니다.
유저 모델에 대한 모델 시리얼라이저로서 AuthorSerializer 클래스를
정의합니다. 맵핑할 필드명으로는 일단 유저 모델의 필드인 id, username,
email 필드를 지정해 주겠고요.
계산된 필드는 곧 구현해 주겠습니다.
포스트 리스트 시리얼라이저와 포스트 디테일 시리얼라이저의 author 필드를
AuthorSerializer 타입으로 변경합니다
API 응답을 확인해 보시면 이렇게 중첩된 사전으로 응답을 받았습니다
이제 author-serializer에 계산된 필드를 추가해 봅시다 유저 모델 클래스에는
없는 name 필드명을 추가했고요.
SerializerMethodField 타입으로 name 필드를 추가합니다.
SerializerMethodField는 디폴트로 getUnderbar 필드명 함수를
찾아서 자동 호출해서 값을 생성합니다.
필드명이 name이니까 getUnderbarName 이름의 메서드를 구현해줍니다.
인자로 모델 인스턴스 하나를 받습니다.
lastUnderbarName 필드와 firstUnderbarName 필드를 조합해서
문자열을 반환합니다.
이번에는 외래키 역참조로서 포스팅에 속한 댓글 메시지에 대한 리스트를 응답해 보겠습니다.
앞선 구현에서 외래키 역참조 이름은 comment_set 인데요.
API에서는 comment_list 이름으로 노출했었습니다.
시리얼라이저에서도 이렇게 하려면 comment_list 이름에 시리얼라이저 필드를
추가하시고요 소스 속성으로 역참조 이름인 comment 언더바 set을 지정하시면 됩니다
외래키 역참조 관계이기에 외래키 관계처럼 string-related field 시리얼라이저
필드를 지정하고요 코디셋을 활용해서 데이터 변환을 하게 되므로 many 키워드 인자는
참으로 지정해줍니다
코멘트 모델 클래스에는 포스트 모델에 대한 외래키 필드가 있습니다.
RelatedName 설정이 없으므로 Post 모델 입장에서 코멘트 모델에 대한 외래키
역참조 이름은 comment_set입니다.
PostDetailSerializer의 외래키 역참조 이름인 comment 언더바 set만
지정해 보겠습니다.
그럼 이렇게 웰의 키 값만 리스트로 변환되었습니다.
comment-set이 아닌 comment-list 이름으로 변환을 하겠고요.
웰의 키에 대한 문자열 표현을 위해 string_related_field 타입을
사용하겠습니다.
참조할 필드명은 comment-set이어야 할 것입니다.
메타의 fields 설정에서도 comment_set을 comment-list로 변경합니다.
API 응답을 확인해 보시면 리스트 응답이 아니네요
comment_set은 코디셋이고 리스트 응답이어야 하니깐요
매니 키워드에 대한 참인자 지정이 빠졌습니다 추가해 주시고 API 응답을 확인해 보시면
댓글 목록이 잘 조회됩니다
코멘트 모델 클래스에는 문자열 변환 시에 메시지 필드를 반환토록 구현되어 있습니다
이번에는 댓글 사전을 리스트로 조회해 보겠습니다
댓글에 아이디 필드와 메시지 필드로 응답합니다
시리얼라이저에서는 코멘트 모델을 위한 모델 시리얼라이저 클래스를 정의하고요 포스트 디테일 시리얼라이저
시리얼라이저에서 노출을 원하는 이름의 시리얼라이저 필드를 추가하고요 외래키 역참조 이름을
소스 속성으로 지정합니다
코멘트 시리얼라이저 모델 클래스를 구현해서 아이디 필드와 메시지 필드를 가진 사전으로
변하도록 하겠습니다
코멘트 모델에 대한 모델 시리얼라이저로서 코멘트 시리얼라이저 클래스를 정의합니다.
필드로는 아이디 필드와 메시지 필드를 지정합니다
API 응답을 확인해 보시면 이렇게 댓글 리스트에서 아이디 필드와 메세지 필드로
변환되었음을 확인하실 수 있습니다
Django REST 프레임워크에서 지원하는 여러 기능 중에 그리고 시리얼라이저에서
지원하는 여러 기능 중에 파이썬 기본 데이터 타입으로의 변환 기능을 사용해 봤습니다
뷰 코드를 변경하진 않았고요 API_뷰 장식자를 랩핑하는 것만으로 Django
REST 프레임워크의 여러 기능들을 활용하실 수 있습니다
이제 요청인자는 Django REST 프레임워크의 request 타입이고요 반환 값은
Response 타입이어야 합니다
반환 값은 HTTP Response 타입도 사용할 수 있지만 Django REST
프레임워크의 response 타입을 사용하셔야만 온전히 Django REST 프레임워크의
기능을 사용하실 수 있습니다
뷰에서는 재손 직렬화를 직접 수행하지 않고요.
Python 기본 타입의 데이터를 반환해 주시면 Django REST 프레임워크 내부에서
재정 직렬화가 자동으로 수행됩니다.
Django 기본 뷰에서는 재손 요청을 지원하지 않거든요.
API 뷰 장식자를 이렇게 사용하는 것만으로 뷰 코드 변경 없이 생성, 수정 요청에서
JSON 요청을 처리할 수 있고요 요청에 맞게 JSON이나 Excel 파일 포맷으로 응답을 할
수도 있습니다
그리고 세션 인증, 기본 인증 등의 다양한 인증을 지원할 수 있고요 서드파티 라이브러리를
설치하시면 JSON 웹토큰 인증도 지원하실 수 있습니다
그리고 지정 요청 권한을 체크할 수 있고요
호출 횟수 허용량 초과 여부도 확인할 수 있고 이를 초과하면 요청을 자동 거부합니다
API 뷰 장식자는 내부에서 API 뷰 클래스를 사용합니다
방금 언급한 기능들은 API 뷰 클래스를 통해서 지원되는 기능들입니다
클래스 기반 뷰는 중복을 배제하고 반복되는 패턴을 클래스로 제공해 주는 기능입니다
API 구현에서도 반복되는 패턴들이 있고 리스트 조회 기능은 ListAPIView 클래스를
통해 지원되고요 코디셋 속성과 시리얼라이저 클래스 속성을 지정하는 것만으로도 기본적인
리스트 조회 API가 구현됩니다
이렇게 구현한 것만으로 JSON 요청에서 JSON 포맷으로 응답을 하고요 물론 메서드
오버라이딩을 통해 기본 동작에 추가 동작을 더하거나 기본 동작을 변경하실 수 있습니다
디테일 조회 기능은 RetrieveAPIView 뷰 클래스를 통해서 지원되고요 이 역시 코디셋
속성과 시리얼라이저 클래스 속성을 지정하는 것만으로 기본적인 디테일 조회 API가
구현됩니다
Post-List 뷰와 Post-Underbar Detail 뷰를
Django REST 프레임워크의 API 뷰 기반에서 동작토록 하기 위해 API
Underbar 뷰 장식자로 랩핑합니다
API 뷰 장식자에서는 인자 하나를 받는데요.
허용할 HTTP 메서드 이름을 리스트로 지정받습니다.
인자가 없으면 디폴트로 GET 요청을 허용하도록 구현되어 있습니다.
HTTP 메서드 이름으로는 get, post, put, patch, delete를 지정하실
수 있습니다. 뷰 함수의 요청 인자는 HTTP request 타입이 아니라 request
타입으로 전달받게 될 것이고요
뷰 함수의 반환 값도 HTTP response instance가 아니라 response
instance로 해주셔야만 Django REST Framework의 응답 포맷 변환 기능인
렌더러 기능을 사용하실 수 있습니다
뷰 함수에서는 포맷 변환 없이 파이썬 기본 데이터 타입의 데이터만 반환하시면 됩니다.
http response instance로 응답하시면 렌더러 처리 없이 반환된 값 그대로
클라이언트에게 응답합니다.
페이지 새로고침하시면 JSON 데이터가 Django REST Framework에 스타일이 입혀진
HTML 페이지 상에서 보여지고 있습니다.
현재 서버의 응답이 HTML 포맷이기에 Django 디버그 툴바도 동작하고 있죠.
API 개발에서도 Django Debug Toolbar를 통한 디버깅이 가능해집니다.
이제 Django REST 프레임워크에 Generic 클래스 기반 뷰를 활용해서 각
API를 재구현해 보겠습니다
목록 API의 대부분의 기능이 구현되어 있는 List API 뷰 클래스를 상속받아 Post
List API 뷰 클래스를 정의합니다
쿼리셋 속성으로 사용할 쿼리셋을 지정하고요 Serializer 클래스 속성으로 데이터
변환에 사용할 Serializer 클래스를 지정합니다
그럼 목록 API 구현 끝입니다
이어서 Detail API의 대부분의 기능이 구현되어 있는 RetrieveAPIView 뷰를
상속받아 PostRetrieveAPIView 뷰 클래스를 정의합니다.
코디셋 속성으로 사용할 코디셋을 지정하고요.
Serializer 클래스 속성으로 데이터 변환에 사용할 Serializer 클래스를
지정합니다. 그럼 Detail API 구현 끝입니다.
JSON 포맷 응답을 위해 API 호출 시에 코디 파라메타로 포맷 JSON을 지정하시면
django-rest-framework에서는 JSON 렌더러를 통해 JSON 포맷으로 변환된
응답을 하게 됩니다.
PostListView 클래스와 PostRetrieve API View 클래스에 적용된
코디셋 속성과 시리얼라이저 클래스 속성은 거의 동일합니다.
이는 뒤에서 하나의 클래스로 합쳐질 수 있습니다.
그런데 현재 API 구현에서는 한 가지 아쉬운 점이 있습니다.
시리얼라이저 구현에 맞춰 API에서 코디셋을 생성해 줘야 한다는 것인데요.
시리얼라이저와 코디셋은 함께 변경될 가능성이 높은 코드입니다.
그런데 시리얼라이저와 API 뷰 코드가 서로 떨어져 있어서 변경 시에 이렇게 떨어진 두
코드를 동시에 수정해야 하는 불편함이 있습니다.
코드도 한눈에 보이지 않고요.
이 아쉬움을 어떻게 해결할 수 있을까요?
Serializer 클래스의 정적 메서드로 Serializer에서 필요한 코디셋을 생성해
주도록 합시다.
그럼 함께 변경되는 코드들이 하나의 Serializer 클래스 안에 같이 구현되어 코드의
응집도와 가독성, 유지보수성이 향상됩니다.
이제 API 뷰에서는 사용할 시리얼라이저 클래스를 지정하고 그 시리얼라이저 클래스에
getOptimized, 코디셋 정적 메서드만 호출하여 반환값을 코디셋 인자로 지정만
해주시면 됩니다.
나머진 해당 시리얼라이저에 응집력 있게 구현되어 있죠.
PostListApiView 클래스에 코디셋을 복사해서 PostListSerializer
클래스에 새로운 정적 메서드 getOptimized 코디셋 메서드를 추가하고 복사한
코디셋을 반환하도록 합니다.
그런데 위 필드 리스트 설정에서는 id, title, author 필드 목록을 반환하는데
코디셋에서는 content 필드만 빼도록 되어 있으니 코드의 통일성이 부족합니다.
코드셋에서도 id, title, author, field만 조회하도록 코드셋을 변경해
주겠습니다. 이처럼 코디셋과 이 코디셋에 맵핑된 시리얼라이저 설정들이 한눈에 보여져 더욱
유지 보수성이 좋아졌습니다.
PostList API 뷰에서는 방금 구현한 getOptimized 코디셋 정적 메서드를
호출하여 코디셋을 지정해 줍니다.
API 응답을 확인해 보시면 잘 동작하고요.
PostDetailSerializer 클래스에도 getOptimized 코디셋 정적
메서드를 구현해 주고요.
포스트 리트리브 API 뷰 클래스에서도 호출도록 해주겠습니다.


이 내용은 Django REST Framework(DRF)를 사용하여 시리얼라이저와 API 뷰를 정의하고, 중첩된 사전 응답 구조를 구현하는 방법에 대한 설명입니다. 
다양한 시리얼라이저 기능을 활용하고, 이를 API 뷰에서 사용하는 방법을 다루고 있습니다. 주요 내용을 정리하면 다음과 같습니다.

1. 중첩된 사전 응답 구조 정의
AuthorSerializer: Post 모델에서 외래키로 참조하는 User 모델을 위한 시리얼라이저.
id, username, email 필드를 매핑하고, name이라는 계산된 필드를 추가합니다. name 필드는 first_name과 last_name을 조합하여 생성됩니다.
SerializerMethodField를 사용하여 name을 계산하는 get_name() 메서드를 구현합니다.

포스트 리스트 및 디테일 시리얼라이저:
PostListSerializer와 PostDetailSerializer에서 author 필드는 AuthorSerializer 타입으로 설정됩니다.

외래키 역참조:
Post 모델의 comment_set을 comment_list로 변환하기 위해 StringRelatedField와 many=True를 사용하여 댓글 목록을 시리얼라이즈합니다.

댓글 모델:
CommentSerializer에서 댓글의 id와 message 필드를 시리얼라이즈하여 댓글 목록을 반환합니다.
PostDetailSerializer에 댓글 목록(comment_list)을 추가합니다.

2. Django REST Framework의 기능 활용
APIView와 APIView Decorators:

APIView 장식자를 사용하여 뷰를 래핑하고, HTTP 메서드를 지정하여 요청을 처리합니다.
GET, POST, PUT, PATCH, DELETE 등의 HTTP 메서드를 지원하도록 설정할 수 있습니다.
반환값은 DRF의 Response 객체로 반환해야 하며, 내부에서 자동으로 직렬화가 수행됩니다.
세션 인증, 기본 인증 등: DRF는 다양한 인증 방식과 권한을 설정할 수 있습니다. 또한 요청에 대한 호출 제한(예: rate-limiting)도 처리 가능합니다.
페이지네이션, 필터링, 검색: ListAPIView나 RetrieveAPIView를 사용하면 기본적인 페이지네이션, 필터링, 검색 기능을 자동으로 제공할 수 있습니다.

3. 클래스 기반 뷰 활용
ListAPIView와 RetrieveAPIView:
ListAPIView는 목록 조회 API를, RetrieveAPIView는 상세 조회 API를 구현하는 데 사용됩니다.
queryset과 serializer_class만 지정하면 기본적인 CRUD 기능이 구현됩니다.

뷰 클래스 통합:
ListAPIView와 RetrieveAPIView는 공통적인 필드와 기능을 갖고 있기 때문에, 이를 하나의 Serializer 클래스에서 처리하도록 개선할 수 있습니다.

4. 시리얼라이저에서 코디셋 생성
시리얼라이저에서 get_optimized_queryset 메서드 구현:
Serializer 클래스 내부에 정적 메서드인 getOptimized를 정의하여, 필요한 쿼리셋을 생성합니다. 
이를 통해 뷰에서 쿼리셋을 따로 관리하지 않고, 시리얼라이저 내부에서 최적화된 쿼리셋을 반환받을 수 있습니다.

API 뷰에서 시리얼라이저 사용:
PostListApiView와 PostRetrieveAPIView에서 getOptimized 메서드를 호출하여, 관련된 쿼리셋을 처리하도록 합니다.
이를 통해 시리얼라이저와 뷰 코드 간의 응집력이 높아지고, 유지보수가 용이해집니다.

5. DRF의 응답 포맷 변환
Response 객체를 사용하여 API 응답을 처리합니다. DRF는 JSON, XML, HTML 등 다양한 포맷으로 응답을 변환할 수 있는 렌더러 기능을 제공합니다.
API 응답을 JSON 형식으로 자동 변환하며, 클라이언트가 요청한 포맷에 맞춰 응답을 반환합니다.

6. Django REST Framework의 일반 뷰 클래스 활용
ListAPIView와 RetrieveAPIView 클래스를 상속받아, 목록 조회 및 상세 조회 API를 간단히 구현할 수 있습니다.
이러한 클래스 기반 뷰를 사용하면 반복되는 코드의 중복을 줄이고, DRF의 기본 기능을 자동으로 제공받을 수 있습니다.

결론
Django REST Framework(DRF)는 강력한 시리얼라이저와 뷰 기능을 제공하여 API 개발을 단순화하고 효율적으로 처리할 수 있게 해줍니다.
중첩된 사전 응답 구조와 외래키 역참조를 활용하여 다양한 관계형 데이터를 직렬화하고, 이를 API 응답에 반영할 수 있습니다. 또한, DRF의 APIView, ListAPIView, RetrieveAPIView와 같은 클래스를 활용하면 CRUD 작업을 간단하게 구현할 수 있으며, Serializer에서 쿼리셋 최적화를 처리하면 뷰와 시리얼라이저 간의 의존성을 줄이고 코드의 응집력을 높일 수 있습니다.