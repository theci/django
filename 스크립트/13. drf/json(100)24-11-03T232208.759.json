안녕하세요. 이번 시간에는 시리얼라이저를 활용해서 생성 및 수정 API를 구현해
보겠습니다.
시리얼라이저는 Django 폼과 사용법이 거의 유사합니다.
API 요청을 보내는 방법은 다양할 텐데요.
HTTP 요청 파일을 통해 API 요청 테스트를 해보겠습니다.
PyCharm에서는 기본에서 지원하고요.
Visual Studio Code에서는 REST 클라이언트 확장을 설치하시면 됩니다.
슬라이드 하단에 안내된 링크의 페이지에서 소스 코드를 복사해서 http 확장자를 가진
새로운 파일을 생성해 주세요.
요청 주소는 로컬 호스트의 8000번 포트이고요.
곧 이어서 구현할 포스팅 생성 주소로 요청을 보낼 것입니다.
Django REST 프레임워크 기본 설정에서는 베이직 인증이 기본 활성화 되어 있습니다.
API 요청에 아솔리제이션 헤더의 시스템에 등록된 유저명과 암호를 지정해서 요청하시면 매
API 요청마다 사용자 인증을 수행하실 수 있습니다.
포스트 모델에서는 타이틀 필드와 컨텐트 필드가 필수 필드입니다.
그래서 포스트 모델 기반의 모델 폼과 모델 시리얼라이저에서는 타이틀 필드와 컨텐트 필드를
필수 필드로 처리합니다.
Django 기본에서는 HTML, Form 태그를 통해 application/x-www-form-urlencoded 타입과
Multipart Form Data 타입의 요청을 지원하잖아요?
Django REST Framework에서도 이 두 가지 타입을 지원하고 추가로
Application JSON 타입의 JSON 요청도 지원합니다.
API 요청에서 Content Field 값 없이 요청하시게 되면 유효성 검사에 실패하게
될 것이고요.
Title Field와 Content Field를 모두 지정하시어 API 요청하시면 요청이
성공합니다. 지금은 이 HTTP 파일만 생성해 주시고 요청 테스트는 API를 구현하면서
수행해 보겠습니다.
미리 제공해 드린 HTTP 파일을 프로젝트에 복사합니다.
파이참에서는 녹색 화살표 아이콘을 클릭하여 각 요청을 전송하실 수 있습니다.
네이버 사이트에 GET 요청을 보내는 요청도 하나 추가해 보겠습니다.
요청하여 naver.com 슬럿이 주소로 페이지 이동 응답을 받고 이동 후에 200 응답을
받았습니다.
스크롤을 올려 요청 헤더도 확인하실 수 있습니다.
Visual Studio Code에서는 REST 클라이언트 확장을 설치하시고요.
HTTP 파일을 여시면 각 요청마다 Send Request 버튼이 있습니다.
이 버튼을 클릭하시어 요청을 보내실 수 있습니다.
Django REST 프레임워크에서 지원하는 세 가지 요청 인코딩을 살펴보겠습니다.
첫 번째, 인코딩으로서 HTML 폼 태그에서 디폴트 설정으로 지원하는 폼 URL 인코디드
방식입니다. 전송 데이터는 이렇게 텍스트 포맷으로 전송되는데요.
이렇게 문자열로 키와 값으로 묶는 인코딩의 특성상 파일 전송은 불가능합니다.
태그에서는 ENC 타입을 생략하면 디폴트로 폼 URL 인코드 방식으로 인코딩되어 서버로
요청이 전송되고요 자바스크립트에서는 직접 URL 서치 파람스를 통해서 인코딩을 해주시고
장고 기본 뷰에서도 이 인코딩을 지원하고요 request.post 속성으로 요청 데이터를
조회할 수 있습니다
파일 전송은 불가능하기에 request.files 속성은 항상 비어있을 것입니다.
Django REST 프레임워크의 API 뷰에서도 이 인코딩을 지원하고요.
Django REST 프레임워크의 request 객체에서는 request.get 속성을
request.queryparams 이름으로 지원하고요.
request.post 속성과 request.files 속성을 하나로 합쳐
request.data 속성으로 요청 데이터를 지원합니다.
HTML 폼태그에서는 get 요청과 post 요청만을 지원하기에 Django 기본 뷰에서도
get 요청과 post 요청만을 지원하는데요.
API 요청에서는 get과 post 외에 put, patch, delete 요청을
사용합니다.
Django REST 프레임워크의 API 뷰에서는 모든 요청을 지원하고요.
요청 메서드에 상관없이 항상 request 객체의 데이터 속성으로 요청 데이터를
지원합니다. 그래서 시리얼라이저 인스턴스 생성 시에는 request.data 속성 하나만
지정하시게 되고요 이 속성 하나만으로 모든 요청 데이터를 시리얼라이저로 다 전달하게 되는
것입니다 두 번째 인코딩으로 멀티파트 폼 데이터가 있습니다
파일 전송이 가능한 유일한 인코딩입니다
HTTP 요청으로 파일을 업로드하실 때에는 반드시 이 인코딩을을 쓰셔야 합니다.
자바스크립트에서는 FormData 클래스를 활용해서 전송하시면 됩니다.
이 인코딩은 Django 기본 뷰에서도 지원하고요.
파일 전송이 되면 리퀘스트의 files 속성을 통해 업로드된 파일 객체 목록에 접근하실 수
있고요. Django REST 프레임워크의 API 뷰에서는 데이터 속성으로 업로드된 파일
객체 목록에 접근하실 수 있습니다.
마지막 세 번째 인코딩으로 애플리케이션/JSON입니다.
API 요청 시에 요청 바디에 JSON 포맷의 문자열을 담아서 요청을 전달합니다.
API에서 많이 사용되는 인코딩입니다.
이 인코딩은 텍스트 기반의 데이터 형식이기에 파일 업로드는 지원하지 않습니다.
파일 업로드를 하시려면 멀티파트 폼 데이터 인코딩을 사용하셔야 합니다.
장고 기본 뷰에서는 JSON 인코딩의 요청을 지원하지 않습니다.
그래서 JSON 요청에서는 request.post 속성과 request.piles 속성은
비어 있는데요.
요청 바디인 request.body 속성에는 요청의 JSON 문자열이 있기에 이를 직접
변환하여 처리하실 수 있습니다.
장고 REST Framework API 뷰에서는 JSON 요청도 지원하기에 그냥
request.data 속성을 통해 요청의 인코딩에 상관없이 일관되게 요청 데이터를
조회하실 수 있습니다.