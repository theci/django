Django REST Framework를 활용하여 생성 API를 만들어 보기 전에 Django
모델 폼을 활용한 생성 페이지 코드부터 먼저 살펴보겠습니다
1단계로 GET 요청과 POST 요청을 나눠서 GET 요청에서는 빈 폼을 보여주고 빈 폼을
통해 유저가 값을 입력하고 전송하면 같은 주소로 포스트 요청을 받습니다.
이때 반드시 로그인 상태여야 하고요.
로그인이 되어 있지 않다면 로그인 페이지로 이동시킵니다.
로그인 후에 빈 폼 입력부터 다시 시작합니다.
2단계로 포스트 요청을 받으면 요청 객체에 포스트 속성과 파일즈 속성을 통해 요청 데이터를
참조하고요. 모델 폼에 모두 넘겨 유효성 검사를 수행합니다.
3단계로 유효성 검사에서 오류가 발생하면 유저에게 오류 메시지와 함께 다시 폼을 노출시켜
재입력을 받습니다.
4단계로 유효성 검사에 통과하면 모델 폼 인스턴스에 save 메서드를 호출하여
데이터베이스에 저장하고 다른 페이지로 이동시킵니다.
데이터베이스에 저장하기 전에 반드시 지정해야 할 모델 필드가 있다면 save 메서드
호출 시에 commit 거짓 인자를 지정하여 데이터베이스로의 저장을 지연시키고 필드 값
지정 후에 데이터베이스에 저장합니다.
모델 폼을 활용한 생성 페이지 구현에 대해서 살펴봤고요.
이와 비교해서 Django REST 프레임워크 시리얼라이저를 통한 생성 API를 구현해
보겠습니다.
API에서는 입력 폼을 보여주는 일 없이 포스트 요청을 다이렉트로 받습니다.
그래서 하나의 요청 메서드만 처리하면 됩니다.
require-post 장식자로 포스트 요청만을 받도록 제안했고요.
API는 웹이 아닌 환경에서도 요청을 받는다면 CSRF 토큰 체크가 무의미하기에 CSRF
exempt 장식자를 적용하여 CSRF 토큰 체크를 하지 않는 경우가 많습니다.
하지만 웹 환경에서는 가급적 CSRF 토큰을 처리하는 것이 보다 안전합니다.
Django REST Framework API View 클래스에서는 디폴트로 CSRF
exempt 장식자가 적용되어 있고요.
Django REST Framework 내부 구현에서 필요시에 강제로 CSRF 토큰 체크를
하기도 합니다.
생성 API를 구현하기 전에 먼저 수행되어야 될 3가지 작업들이 있습니다.
그 첫 번째로, 지원할 요청 파서들을 준비합니다.
지정된 파서들을 통해 요청 데이터를 파싱해서 요청 객체의 데이터 속성으로 참조할 수
있습니다. 앞서 살펴본 3가지 인코딩을 Django REST Framework에서 모두
지원합니다. 두 번째로, 지원할 인증 방법들을 준비합니다.
세션 인증과 베이직 인증을 지원하겠고요.
서드 파티 라이브러리를 통해 JSON 웹토큰 인증도 지원할 수 있습니다.
세 번째로, 이 API를 호출할 권한이 있는지 지정된 권한 체크 클래스들을 통해
확인합니다. 지정된 권한 체크 클래스 중에 하나라도 권한이 없다고 판정을 받으면 403
응답과 함께 요청을 거부합니다.
이 저 Authenticated 클래스는 유저가 인증 상태라면 API 권한이 있는 것으로
처리합니다. 이때 주의하실 것은 권한 체크 클래스 목록이 비어 있다면 권한 없음으로
판정받는 것이 아니라 권한 확인 없이 다음 로직이 수행됩니다.
그러니 반드시 최소한 한 개의 권한 클래스라도 지정해 주셔야만 권한 확인 후에 권한이 있을
경우에만 API가 호출될 것입니다.
이 세 가지 작업들은 API 뷰 클래스 내부에서 자동으로 수행되기에 API 뷰 클래스를
사용하신다면 직접 구현하실 필요가 없는 부분입니다
하지만 이 부분에 대한 이해가 있어야만 Django REST Framework를 통해 API를
보다 효율적이고 안전하게 구현하실 수 있습니다
이제 Serializer 인스턴스를 생성하여 요청 데이터를 넘깁니다.
Django 모델 폼에서는 데이터 인자와 파일즈 인자를 받았지만 Serializer에서는
데이터 인자 하나로 모든 데이터를 다 전달받습니다.
그리고 폼처럼 isUnderbarValid 메서드를 호출하여 유효성 검사를 수행하고요.
유효성 검사에 실패하면 Serializer 속성에 errors 속성을 통해 에러 내역을
조회할 수 있고요.
유효성 검사에 성공하면 serializer.save를 호출하여 데이터베이스에
저장합니다.
serializer 인스턴스의 save에서는 모델 폼처럼 커밋 인자를 지원하지
않고요. 모델 인스턴스의 SaveMethod 호출 전에 값을 지정해야 하는 모델 필드가
있다면 save 메서드의 키워드 인자로 지정하시면 필드 값 할당 후에 모델 인스턴스의 save
메서드가 호출됩니다.
우리가 직접 구현한 PostNew API를 Django REST framework에 Create
API View 클래스를 상속받아 클래스 기반 뷰로 구현하신다면 이렇게 구현하실 수
있습니다.
Create API 뷰 클래스를 상속받았기에 포스트 요청을 받으면 Create 메서드를
호출하여 생성 요청을 처리하고요 요청 파서, 인증 확인, 권한 확인 등은 API 뷰
구현에서 Create 메서드 호출 전에 자동으로 이루어집니다
요청 파서 클래스, 인증 클래스, 권한 클래스들은 프로젝트 전역으로 같은 설정으로 디폴트
설정되어 있기에 그 설정을 그대로 사용하겠고요 필요에 따라 API마다 직접 지정하실 수도
있습니다 Default 권한 클래스는 모든 요청을 허용하는 AllowAny가
Default 전역으로 지정되어 있는데요.
인증 여부 확인을 위해 IsAuthenticated를 지정해 줍니다.
Serializer 클래스 속성을 통해 사용할 Serializer 클래스를 지정하고요.
유효성 검사에 통과하면 performCreate 메서드를 호출하여 데이터베이스에
저장합니다. 기본 구현에서는 인자 없이 serializer.save 메서드를 호출하도록
되어 있는데요.
작성자 정보 저장을 위해 author 필드를 키워드 인자로 넘겨주면 생성 API 구현
끝입니다. Django REST Framework API 뷰 내부에서는 많은 작업들을 자동으로
수행해주지만 그 과정을 이해하고 나면 실제 API 구현은 이처럼 간결하고요.
필요에 따라 다양하게 커스터마이징을 하실 수도 있습니다.
Create API View 클래스를 상속받아 PostCreate API View 클래스를
정의합니다.
Serializer 클래스를 지정해 줘야 하는데요.
아직 사용하고 있진 않지만, PostSerializer 클래스가 있습니다.
ID, Title, Content 필드에 대한 모델 Serializer입니다.
ID 필드는 기본 키니까 입력을 받지 않을 것이고요.
Title 필드와 Content 필드에 대해서만 입력을 받고, 유효성 검사를 하고
데이터베이스에 저장할 것입니다.
SerializeUnderbar 클래스 속성으로 지정합니다.
Django 기본 뷰에서는 LoginRequiredMixin 장식자를 적용해서 로그인 상태에서만 뷰
요청을 허용하잖아요.
이처럼 API 뷰에서는 IsAuthenticated 클래스를 통해 로그인
상태에서만 API 요청을 허용합니다.
PostUnderbarNew 함수뷰를 생성하고 URL 패턴에도 등록합니다.
브라우저로 접속해 보시면 현재 브라우저 요청은 GET 요청이니까 GET 요청은 허용하지
않는다며 405 응답을 받았습니다.
Create API View 구현을 보시면 Post 요청을 받으면 Create 메서드를
호출하여 요청을 처리합니다.
Post 메서드만이 구현되어 있기에 Post 요청만을 지원하고 그 외 요청에 대해서는
405 응답을 하게 됩니다.
authorization 헤더를 생략하고 요청을
보내 보겠습니다
그럼 403 forbidden 응답으로 자격 인증 데이터가 포함되지 않았다는 응답을 받게
됩니다 post create api 뷰에 permission classes 설정에
isAuthenticated를 추가했기에 처리된 응답입니다
아솔리데이션 헤더에 유저명과 암호를 지정하려 합니다.
현재 데이터베이스에 등록된 유저 목록이 알고 싶은데요.
Account 앱의 유저 모델이 어드민에 등록되어 있지 않습니다.
Account의 admin.py 파일에서 모델 어드민을 통해 유저 모델을 등록하면 이렇게
모델 어드민 기본 설정으로 동작하는데요.
유저 모델의 기반은 Auth 앱에서 가져왔죠.
Auth 앱에 유저 모델에 맞춰 만들어진 유저 어드민 클래스가 있습니다.
모델 어드민 기반에서 여러 옵션들이 구현되어 있죠
이 모델 어드민을 가져와서 유저 모델과 연결을 시켜 주겠습니다
페이지 새로고침에 보시면 List Display 항목부터 변경된 UI를 확인하실 수
있습니다 앞서서 Create Fake Post 명령을 통해 10개의 페이크 유저 계정을
생성했었고요 유저명과 암호를 동일하게 지정했었습니다
지금 API 테스트에서 쓰려고 준비한 것이었고요.
자동 생성된 계정 중에 하나를 골라서 authorization 헤더에 지정해 보겠습니다.
성공하는 Form URL 인코디드 요청을 해보시면 500 에러가 발생했어요.
런 서버 로고를 보시면 그 이유가 나오고요.
포스트 모델에 필수 필드인 author 필드가 있는데 이를 지정하지 않고 모델 인스턴스에
save 메서드를 호출해서 integrate error 예외가 발생한 상황입니다.
Create API 뷰 구현에 보시면 create 메서드를 통해 요청을 처리하고 있고요.
create 메서드에서는 유효성 검사에 통과하면 performCreate 메서드를 호출하여
데이터베이스 저장을 수행하고 있습니다.
performCreate 메서드 기본 구현에서는 serializer.save 메서드를
호출하고 있습니다.
serializer의 isValid 메서드 호출에서는 raiseException 인자를
지원하고 있어요.
이 인자를 지정하지 않으면 유효성 검사 성공 여부에 따라 참 혹은 거짓만 반환하는데요.
raiseException 인자를 참으로 지정하시면 유효성 검사에 실패하면
ValidationError 예외를 발생시킵니다.
ValidationError 예외가 발생하면 코드 실행은 여기에서 중단되고 예외가 호출부로
전파되고요.
APIView 클래스의 Dispatch 메서드에서 이 ValidationError 예외를
받아서 유효성 검사 에러 응답을 만들어 줍니다.
performCreate 메서드를 재정의하여 Serializer 인스턴스의 save
메서드를 호출할 때 현재 요청의 User 인스턴스를 author 필드로 저장하도록 인자를
전달합니다. 다시 API 요청해보시면 요청이 성공되고 201 Created 응답을
받았고요. 응답으로 방금 생성된 포스팅 내역을 제 손으로 받았습니다.
이는 시리얼라이저 인스턴스의 데이터 속성을 통해 받은 데이터입니다
API 뷰에서는 디폴드 설정으로 어플리케이션 JSON 요청도 지원하니깐요 요청을 보내보시면
앞선 Form URL 인코디드 방식과 비교해서 요청의 바디 데이터만 다를 뿐 API
구현에서는 동일한 코드로 처리하고 동일한 응답을 하고 있음을 확인하실 수 있습니다