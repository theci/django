장고 뷰에서 삭제 코드를 먼저 살펴보겠습니다
GET 요청을 받으면 정말 삭제할 것인지를 한 번 더 확인하고요 POST 요청을 받으면
지정 모델 인스턴스를 조회하고 삭제한 후에 다른 페이지로 이동시킵니다
이와 비교해서 삭제 API를 구현해 보겠습니다 구현 방식은 비슷합니다
API에서는 Delete 메서드로 삭제 요청을 받습니다
생성 API, 수정 API처럼 요청 파서 준비하고요 인증 클래스 그리고 삭제할 레코드를
조회하고요 해당 레코드를 삭제할 권한이 있는지 확인합니다
이 코드는 수정 API에서의 코드와 동일하죠
Destroy API View 클래스를 상속받아 삭제 API를 구현해 보겠습니다.
Destroy API View 클래스를 상속받았기에 Delete 요청을 받으면
Destroy 메서드를 호출하여 삭제 요청을 처리합니다.
입력 값에 대한 검증이나 데이터 응답은 없기에 Serializer 클래스 지정은 없고요.
기본 조회 코드셋을 지정 받습니다.
나머진 생성 수정 API와 동일합니다.
HTTP 파일을 ID 101번 포스팅에 대해서 삭제 요청을 해 보겠습니다
아직 삭제 API 뷰는 구현하지 않았으니 요청을 보내면 404 응답을 받습니다
Destroy API 뷰 클래스를 상속받은 PostDestroy API 뷰 클래스를
정의하고요 URL 패턴에도 등록합니다
Destroy API View 구현을 보시면 Delete 요청을 받으면 Destroy
메서드를 호출하여 삭제 요청을 처리하고 있습니다
Destroy 메서드 구현을 보시면 지정 레코드를 조회하고 Perform Destroy
메서드를 호출하여 레코드를 삭제합니다
그리고 204 Not Content 응답을 합니다 레코드 조회를 위해 코디셋 속성 지정이
필요하고요 API 호출 권한 체크를 위해 Permission Classes 속성에
IsAuthenticated 클래스도 추가해줍니다
삭제 API 구현 끝이고요.
삭제 요청을 보내보시면 204 응답을 받았고요.
정상 삭제 처리되었습니다.
ID 101번 포스팅을 조회해 보시면 삭제되었기에 조회가 되지 않고 404 응답을
받았습니다.


이 설명은 Django REST framework에서 삭제 API를 구현하는 과정에 대한 내용입니다. 주요 절차와 핵심 사항을 정리하면 다음과 같습니다:

1. 기존 Django 뷰에서의 삭제 흐름
GET 요청: 삭제 여부를 확인하는 페이지로 이동하여 사용자 확인을 받습니다.
POST 요청: 실제 삭제 요청을 처리하며, 모델 인스턴스를 조회한 후 삭제하고, 다른 페이지로 리디렉션합니다.
2. 삭제 API 구현 방식
목표: DELETE 요청을 받아 해당 데이터를 삭제하는 API를 구현하는 것.
구현 흐름:

삭제 요청 처리:
DELETE 메서드로 삭제 요청을 받습니다.
요청 파서 준비:
생성/수정 API처럼 요청 파서를 준비하지만, 이 API에서는 입력값을 받지 않으므로 Serializer 클래스는 지정하지 않습니다.
인증 클래스:
요청이 인증된 사용자에 의한 것인지 확인합니다.
삭제할 레코드 조회:
삭제할 레코드를 조회하고, 권한이 있는지 확인한 후 삭제 작업을 진행합니다.
DestroyAPIView 사용:
DestroyAPIView 클래스를 상속받아 삭제 API를 구현합니다.
DELETE 요청을 받으면 Destroy 메서드가 호출되어 삭제 요청을 처리합니다.
3. DestroyAPIView의 기본 구조
삭제 메서드: DestroyAPIView에서 제공하는 기본 메서드인 **destroy()**를 사용하여 데이터 삭제를 처리합니다.
기본 조회 코드셋: queryset 속성에서 삭제할 레코드를 조회할 수 있는 기본 조회 코드셋을 지정합니다.
권한 체크: permission_classes에 IsAuthenticated 클래스를 추가하여, 인증된 사용자만 삭제 요청을 할 수 있도록 합니다.
응답 코드: 삭제가 정상적으로 처리되면 204 No Content 응답을 반환합니다. (응답 본문은 없음)
4. 삭제 API 구현 예시
PostDestroyAPIView 구현:
DestroyAPIView를 상속받은 PostDestroyAPIView 클래스를 정의하고, 해당 URL 패턴에 등록합니다.
DELETE 요청을 받으면 destroy() 메서드가 호출되어 삭제 작업을 처리합니다.
삭제할 포스팅을 조회하고, perform_destroy() 메서드를 호출하여 삭제합니다.
권한 처리: IsAuthenticated를 permission_classes에 추가하여 인증된 사용자만 접근할 수 있도록 제한합니다.
5. 삭제 테스트
삭제 요청:
DELETE 요청을 보내면 204 No Content 응답을 받습니다. 이때 데이터는 삭제됩니다.
삭제 확인:
삭제한 포스팅을 다시 조회하면 404 Not Found 응답을 받습니다. 이는 데이터가 삭제되어 더 이상 존재하지 않기 때문입니다.
6. 정리
삭제 API 구현:
DestroyAPIView 클래스를 상속하여 DELETE 요청을 받아 레코드를 삭제하는 API를 구현합니다.
perform_destroy() 메서드를 통해 데이터를 삭제하고, 삭제 후에는 204 응답을 반환합니다.
인증을 처리하기 위해 IsAuthenticated 권한 클래스를 설정합니다.
삭제 요청 후 응답:
삭제가 정상적으로 처리되면 204 No Content 응답을 반환하고, 삭제된 데이터를 조회하면 404 Not Found를 받습니다.
이렇게 DestroyAPIView를 활용하여 간단하게 삭제 API를 구현할 수 있으며, 권한 처리 및 응답 처리까지 자동으로 관리할 수 있습니다.