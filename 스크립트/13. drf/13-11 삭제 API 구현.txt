장고 뷰에서 삭제 코드를 먼저 살펴보겠습니다
GET 요청을 받으면 정말 삭제할 것인지를 한 번 더 확인하고요 POST 요청을 받으면
지정 모델 인스턴스를 조회하고 삭제한 후에 다른 페이지로 이동시킵니다
이와 비교해서 삭제 API를 구현해 보겠습니다 구현 방식은 비슷합니다
API에서는 Delete 메서드로 삭제 요청을 받습니다
생성 API, 수정 API처럼 요청 파서 준비하고요 인증 클래스 그리고 삭제할 레코드를
조회하고요 해당 레코드를 삭제할 권한이 있는지 확인합니다
이 코드는 수정 API에서의 코드와 동일하죠
Destroy API View 클래스를 상속받아 삭제 API를 구현해 보겠습니다.
Destroy API View 클래스를 상속받았기에 Delete 요청을 받으면
Destroy 메서드를 호출하여 삭제 요청을 처리합니다.
입력 값에 대한 검증이나 데이터 응답은 없기에 Serializer 클래스 지정은 없고요.
기본 조회 코드셋을 지정 받습니다.
나머진 생성 수정 API와 동일합니다.
HTTP 파일을 ID 101번 포스팅에 대해서 삭제 요청을 해 보겠습니다
아직 삭제 API 뷰는 구현하지 않았으니 요청을 보내면 404 응답을 받습니다
Destroy API 뷰 클래스를 상속받은 PostDestroy API 뷰 클래스를
정의하고요 URL 패턴에도 등록합니다
Destroy API View 구현을 보시면 Delete 요청을 받으면 Destroy
메서드를 호출하여 삭제 요청을 처리하고 있습니다
Destroy 메서드 구현을 보시면 지정 레코드를 조회하고 Perform Destroy
메서드를 호출하여 레코드를 삭제합니다
그리고 204 Not Content 응답을 합니다 레코드 조회를 위해 코디셋 속성 지정이
필요하고요 API 호출 권한 체크를 위해 Permission Classes 속성에
IsAuthenticated 클래스도 추가해줍니다
삭제 API 구현 끝이고요.
삭제 요청을 보내보시면 204 응답을 받았고요.
정상 삭제 처리되었습니다.
ID 101번 포스팅을 조회해 보시면 삭제되었기에 조회가 되지 않고 404 응답을
받았습니다.