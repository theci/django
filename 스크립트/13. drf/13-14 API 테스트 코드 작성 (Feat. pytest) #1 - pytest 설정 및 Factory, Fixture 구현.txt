안녕하세요. 지금 시간까지 API 동작 테스트를 위해 브라우저로 직접 요청을 해보거나,
HTTP 파일을 통해서 매번 수동으로 요청을 하고, 눈으로 동작을 확인했었습니다.
이번 시간에는 테스트 코드로 5개 API 동작을 한 번에 검증해 보도록 하겠습니다.
장고 기본에서 지원하는 테스트에서는 파이썬 표준 라이브러리인 유닛 테스트를 사용합니다.
본 강의에서는 PyTest 라이브러리를 활용해 볼 텐데요.
PyTest 라이브러리를 사용하면 함수 기반으로 간결하고 읽기 쉬운 테스트 코드를 작성할 수 있고요. 
다양한 플러그인들이 지원됩니다.
파이테스트 구동을 위해 4개의 라이브러리를 설치하겠습니다
파이테스트 장고 라이브러리를 통해 파이테스트 테스트에 대한 장고 지원을 받으실 수 있고요
파이테스트, 테스트 Docs 라이버리를 통해 각 테스트 함수에 대해서 한글로 테스트에 대한 설명을 지정하실 수 있습니다
그럼 테스트 수행 시에 지정된 설명과 함께 해당 테스트의 성공 여부를 확인할 수 있어 편리합니다 
그리고 Factory Boy 라이브러리을 통해 모델 데이터를 생성할 때 수동으로
매번 필드 값들을 일일이 지정하지 않아도 공장에서 찍어내듯이 호출만으로 지정 룰로 모델 데이터를 생성하실 수 있습니다.
프로젝트 루트 경로에 pytest.ini 이름의 pytest 설정 파일을 이와 같이 생성해
주세요. 테스트 구동 시에 사용할 장고 세팅스의 파일 경로를 지정하고요 테스트 파일의
패턴과 테스트 파일이 저장된 디렉토리 경로도 알려줍니다
그리고 추가 옵션으로 테스트 독스 옵션을 추가해 주세요
테스트 독스 옵션을 붙여주시면 테스트 결과가 출력될 때 각 테스트에 추가한 테스트 설명이함께 출력됩니다
테스트 함수에 함수 설명을 추가하고자 할 때에는 pytest 마크의 IT 장식자를 사용합니다
첫 번째 스크린샷은 테스트 독스 옵션을 붙이지 않고 마이너스 V 옵션만 붙여 파이테스트를 수행한 결과 화면이고요 
각 테스트의 실행 결과가 테스트 함수 이름으로 출력됩니다
두 번째 스크린샷이 테스트 독스 옵션을 붙여 파이테스트 테스트를 수행한 결과 화면입니다 
총 네 개의 라이브러리를 최신 버전으로 설치합니다
프로젝트 루트에 pytest.ini 파일도 생성하고요 
우리가 생성할 테스트 파일명은 테스트 언더바로 시작하는 파이썬 파일이고요 
각 앱의 테스트 폴더에 테스트 파일을 생성하겠고요
파이테스트 명령 실행 시에 자동으로 테스트 독스 옵션을 붙여 실행하도록 하겠습니다 
터미널을 여시고 가상 환경을 활성화하신 후에 PyTest 명령을 실행해 보세요
아직 테스트를 만들지 않아 실행할 테스트가 없다는 경고가 뜹니다
환경 변수 패스 이슈로 pytest 명령이 동작하지 않으신다면 Python-m pytest 명령으로도 pytest를 실행하실 수 있습니다
Accounts 앱과 블로그 앱의 테스트 폴더에 테스트를 생성할 텐데요 
테스트 생성에 앞서 테스트 폴더에 __init__.py 파일을 먼저 생성해 주세요
파이썬에서는 폴더에 __init__.py 파일이 있어야만 이 파일을 파이썬 패키지로 인식합니다 
이 파일이 없다면 파이 테스트를 통한 테스트 실행 시에 Module Not Found Error 예외가 발생할 수 있습니다
우리가 만들 테스트에서는 Accounts 앱의 User 모델 클래스를 활용해서 테스트용 유저 데이터를 만들 것이고요.
Blog 앱의 Post Model 클래스를 활용해서 테스트용 포스트 데이터를 만들 것입니다. 
Model 클래스를 활용해서 새로운 레코드를 생성하려면 매번 필드 값을 지정해줘야 하잖아요.
이때 Factory Boy 라이브러리의 Factory 기능을 활용하면 매번 필드 값을 지정하지 않아도 이렇게 Factory 클래스 호출만으로 새로운 레코드를 생성하실 수 있습니다. Accounts 앱에서는 User 모델에 대한 UserFactory 클래스를 생성하겠고요.
Factory의 Sequence 타입은 인자로 지정한 함수로 필드 값을 생성하는데요.
UserFactory를 사용할 때마다 인자로 숫자 0, 숫자 1, 2, 3처럼 1씩 자동 증가하는 값을 인자로 받습니다.
그럼 유저명은 사용할 때마다 user0, user1, user2, user3, user4가 되겠죠.
메타 클래스의 Django.GetOrCreate 속성에 유저 네임을 지정했기에 생성된 유저 네임에 유저 레코드가 있는지 먼저 검사하고 없다면 새 유저 레코드를 생성합니다.
팩토리의 레이지 어트리뷰트 타입은 각 필드 값들이 모두 채워지고 나서 수행되고요.
인자로 모델 인스턴스를 받습니다.
이메일 필드에 적용했고요.
유저 낸 필드 값을 참조해서 이메일 주소를 완성합니다.
팩토리의 Faker 타입은 Faker 라이브러리를 활용해서 지정 타입의 값을 랜덤하게 생성받습니다.
Row Underbar 패스워드 필드에 적용했고요.
데이터베이스 저장 시에 Row 패스워드 값을 암호화하여 패스워드 필드에 저장합니다.
블로그 앱에서는 Post 모델에 대한 Post Factory 클래스를 생성합니다.
Title 필드와 Content 필드는 Faker 라이브러리를 통해 값을 랜덤하게 생성하겠고요.
Author 외래키 필드는 User Factory를 활용해서 생성합니다.
Django Shell을 구동하시고 User Factory와 Post Factory를 임포트하신 후에 
각 Factory 클래스의 인스턴스를 생성하는 것만으로 이렇게 레코드를 생성하실 수 있고요.
팩토리, 인스턴스 생성 시에 팩토리 필드 값을 지정하여 원하는 값으로 레코드를 생성하실 수도 있습니다.
Account 폴더와 Blog 폴더에 각각 테스트 폴더를 생성하고요. 
__init__.py 파일과 factories.py 파일을 빔 파일로 생성해 줍니다.
Accounts의 Test의 Factories.py 경로에는 UserFactory 코드를 복사해 주시고요.
Blog의 test_factories.py 경로에는 PostFactory 코드를 복사해 주세요. 
Django Shell을 구동하시고요.
UserFactory 임포트하신 후에 UserFactory 인스턴스를 생성해 주시면, UserName이 User 0인 레코드가 있는지 먼저 검사하고, 없다면 User 0 레코드를 생성합니다.
이렇게 검사를 하는 이유는 유저 팩토리에서 DjangoCategoricalCreate 설정으로 유저 네임 필드를 지정했기 때문입니다.
로 패스워드 필드는 Faker 라이브러리를 통해 랜덤하게 암호가 지정되었고요.
생성 시에 MakePassword 함수를 통해 암호화되어 데이터베이스에 저장되었습니다.
유저네임 필드에 맞춰 이메일 필드도 잘 저장이 되었고요 Post Factory도 임포트하신 후에 인스턴스를 생성해 주시면 이렇게 새로운 포스트 레코드가 생성됩니다 
파이테스트에서는 테스트 언더바로 시작하는 함수를 테스트 함수로 인식하여 자동으로 실행합니다
이를 통해 별도의 설정 없이도 테스트 코드를 쉽게 작성하고 실행할 수 있습니다
픽스쳐는 텍스트 함수에 주입되는 객체를 말하는데요 여러 테스트에 걸쳐 사용되는 값이 있다면 픽스쳐로 정의하시고요
테스트 함수나 픽처 함수에서 필요한 픽처 이름만 인자로 지정하시면 파이테스트에서 자동으로 주입해 줍니다.
주입되면서 매번 호출되어 반환된 값으로 인자 값을 할당 받습니다.
픽처는 각 테스트 함수가 실행이 될 때마다 매번 호출되어 새로운 객체를 생성하여 제공합니다. 
이를 통해 각 테스트 함수들이 격리되어 실행될 수 있고요 한 테스트에서 발생한 상태 변경이 다른 테스트에 영향을 끼치지 않도록 보장합니다 
테스트 함수는 필요한 픽스처를 인자 이름만 지정해서 주입받을 수 있으므로 
객체 생성에 대한 세부 구현을 신경 쓰지 않아도 되기에 테스트 코드의 가독성과 유지 보수성을 향상시킵니다
파이테스트 기본에서도 다양한 픽스처를 제공해 주고요
새로운 픽스처는 함수로 구현하시고 픽스처 장식자로 꾸며주시면 됩니다.
createUser 함수는 UserFactory를 활용해서 새로운 유저 레코드를 생성하고 유저 인스턴스를 반환하고요.
테스트에서 랜덤 암호가 아니라 지정된 암호로 새 유저 레코드를 생성할 때 사용합니다.
getApiClientWithBasicAuth 함수는 Basic 인증 헤더를 적용한 API 클라이언트 인스턴스를 반환합니다.
이는 테스트에서 인증된 API 요청이 필요할 때 사용합니다.
Django REST Framework API 테스트에서는 API 클라이언트를 사용하면 따로 Django 서버를 띄우지 않아도 
HTTP 요청을 보내어 손쉽게 테스트를 수행하실 수 있습니다. 
베이직 인증에서는 ID와 암호를 인증 헤더에 담아 보내는데요.
이전에 HTTP 파일에서는 ID 암호를 직접 지정했었죠.
그런데 베이직 인증에서는 ID:암호 포맷의 문자열을 직접 Base64 인코딩에서 지정해야만 합니다.
HTTP 파일에서는 자동으로 이를 처리해 줬던 것이고요.
이렇게 Base64 인코딩하여 어솔리제이션 헤더에 지정해 줍니다.
Unauthenticated API Client Picture는 기본 API Client 인스턴스를 반환합니다.
비인증 API 요청이 필요할 때 사용합니다.
API Client with New User Basic Auth Picture는 랜덤 암호로 새로운 유저 레코드를 생성하고,
 해당 유저의 유저명과 암호로 Basic 인증 헤더를 적용한 API 클라이언트 인스턴스를 반환합니다.
매 테스트 함수를 수행할 때마다 매번 데이터베이스가 초기화되고요, 마이그레이션이 수행되어 데이터가 없는 상황에서 시작합니다.
그래서 유저 레코드조차 하나도 없는 상황에서 시작하는 거예요.
이 픽처를 사용하면 새로운 유저 레코드 생성을 신경 쓰지 않아도 호출만으로 자동으로 새로운 유저 레코드를 생성하고 
생성된 유저의 인증 헤더가 적용된 API 클라이언트를 사용할 수 있어서 편리합니다.
New User Picture는 자동으로 새로운 유저 레코드를 생성해 줍니다.
New Post Picture는 자동으로 새로운 포스트 레코드를 생성해 줍니다.
블로그의 테스트 테스트 언더바 API.py 경로에 유틸리티 함수 및 픽처 함수를 복사합니다. 
테스트 함수는 아직 없는데요.
테스트 포스트 리스트 함수를 하나 정의하고요.
테스트를 실패시키기 위해 assert 거짓 코드를 추가합니다.
파이테스트 명령으로 테스트를 수행해 보시면 포스트 리스트 이름의 테스트가 실패했고 어느 지점에서 실패했는지 이렇게 확인하실 수 있습니다.


이번 내용은 Django REST Framework API의 테스트를 Pytest를 사용해 자동화하는 방법에 대해 설명하고 있습니다. Pytest를 사용하면 API 동작을 더 효율적으로 검증할 수 있으며, 유닛 테스트보다 더 간결하고 읽기 쉬운 코드를 작성할 수 있습니다.

1. 테스트 환경 설정
필요한 라이브러리 설치
테스트를 위해 설치할 라이브러리는 총 4개입니다:

pytest: Pytest 테스트 프레임워크.
pytest-django: Django에서 Pytest를 사용할 수 있도록 지원.
pytest-testdocs: 각 테스트 함수에 설명을 추가하고, 결과를 문서화할 수 있도록 지원.
Factory Boy: 모델 인스턴스를 손쉽게 생성할 수 있도록 도와주는 라이브러리.
pytest.ini 설정 파일
테스트 환경 설정을 위해 pytest.ini 파일을 생성하고, 다음과 같은 설정을 합니다:

DJANGO_SETTINGS_MODULE: Django의 설정 파일을 지정.
python_files: 테스트 파일의 패턴을 지정 (test_*.py).
testpaths: 테스트 파일이 위치할 디렉토리 지정.
addopts: 테스트 수행 시 사용할 추가 옵션 (--testdox).
2. 테스트 구조
테스트는 각 앱의 테스트 폴더에 작성합니다. 각 폴더에 __init__.py 파일을 추가하여 해당 폴더가 Python 패키지로 인식되게 합니다. 그리고 각 앱에 대해 factories.py 파일을 작성해 모델 인스턴스를 자동으로 생성할 수 있도록 합니다.

3. Factory Boy 활용
Factory Boy를 사용하여 테스트용 모델 데이터를 자동으로 생성할 수 있습니다:

UserFactory: User 모델을 자동으로 생성합니다. UserFactory는 매번 호출될 때마다 유니크한 username을 생성합니다.
PostFactory: Post 모델을 자동으로 생성합니다. PostFactory는 Faker 라이브러리로 랜덤한 title과 content를 생성하고, author는 UserFactory로 생성된 유저로 연결됩니다.
4. 테스트 코드 작성
1) 픽스쳐 (Fixture)
픽스쳐는 테스트 함수에 필요한 객체를 미리 준비해주는 함수입니다. Pytest는 테스트 함수에서 지정한 픽스쳐 이름을 자동으로 인식하고, 해당 객체를 테스트 함수에 전달합니다. 예시로, **create_user**와 **get_api_client_with_basic_auth**와 같은 픽스쳐가 있습니다.

create_user: 새로운 유저를 생성합니다.
get_api_client_with_basic_auth: Basic 인증 헤더를 추가한 API 클라이언트를 반환합니다.
2) API 클라이언트
Pytest에서는 Django REST Framework의 API 클라이언트를 사용하여 HTTP 요청을 보낼 수 있습니다. 인증이 필요한 경우, Basic 인증 헤더를 추가할 수 있습니다. 인증이 없는 경우 기본 API 클라이언트를 사용할 수 있습니다.

3) 테스트 함수
테스트 함수는 **test_**로 시작하는 이름을 가지며, Pytest가 자동으로 이를 테스트로 인식합니다. 예를 들어, test_post_list라는 함수는 포스트 목록 조회에 대한 테스트입니다.

python
코드 복사
import pytest
from rest_framework.test import APIClient
from .factories import UserFactory, PostFactory

@pytest.fixture
def user():
    return UserFactory()

@pytest.fixture
def api_client(user):
    client = APIClient()
    client.force_authenticate(user=user)
    return client

def test_post_list(api_client):
    # 테스트 데이터 생성
    PostFactory.create_batch(5)
    
    # 포스트 목록 조회 요청
    response = api_client.get('/api/posts/')
    
    # 응답 코드 확인
    assert response.status_code == 200
    assert len(response.data) == 5
5. 테스트 실행
Pytest를 실행하면, 테스트 함수에서 정의한 픽스쳐가 자동으로 실행되고, API 클라이언트를 사용하여 HTTP 요청을 보냅니다. pytest 명령어로 테스트를 실행할 수 있으며, -v 옵션을 추가하면 좀 더 상세한 로그를 볼 수 있습니다. --testdox 옵션을 사용하면 테스트 설명이 출력됩니다.

6. 테스트 실패 확인
예를 들어, 테스트 함수 내에서 **assert False**를 추가하면 의도적으로 테스트를 실패시킬 수 있습니다. 실패한 테스트는 어느 부분에서 실패했는지, 어떤 값이 잘못되었는지 등을 로그에서 확인할 수 있습니다.

7. 마무리
각 테스트는 독립적이고 격리되어야 하므로 각 테스트 함수가 실행될 때마다 새로운 객체를 생성하고, 데이터베이스 상태가 초기화됩니다.
Factory Boy와 픽스쳐를 활용하면 테스트 데이터 생성이 간편해지고, 테스트 코드의 가독성과 유지보수성이 향상됩니다.
Pytest를 활용하면, Django 프로젝트에서 API 테스트를 효율적으로 작성하고 실행할 수 있습니다.
이렇게 정리된 방식으로 API 동작 테스트를 자동화하고, 더 효율적인 테스트 환경을 구성할 수 있습니다.