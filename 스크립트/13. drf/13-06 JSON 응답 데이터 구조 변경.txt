안녕하세요. 이번 시간에는 API 뷰에서 JSON 응답 데이터 구조를 변경하여 응답하는
방법에 대해서 살펴보겠습니다.
Django REST Framework의 API 뷰는 시리얼라이저를 통해 변환된 데이터 구조를
그대로 응답하도록 설계되어 있습니다.
하지만 서비스의 요구 사항에 따라 API 응답의 구조를 변경해야 하는 경우가 있을 수
있습니다 요청의 성공 여부에 대한 OK 필드와 처리 결과인 Result 필드를 추가했습니다
이러한 요구 사항을 Django REST 프레임워크를 통해 서비스에 반영하려면 어떻게 해야
할까요? Django REST 프레임워크에서는 렌더러를 통해 다양한 포맷의 응답을 할 수
있는데요 JSON 응답에 한해서만 OK 필드와 Result 필드를 추가한 응답을 하도록
하겠습니다 예를 들어 엑셀 응답에서 엑셀 파일에 대한 응답 데이터로만 생성하는 것이 보다
적절할 것이고요.
엑셀 응답에 요청의 성공 여부 필드가 추가되면 엑셀 파일의 행과 열이 엉뚱하게 보여질
것이기 때문입니다.
리스트 API 뷰에서는 GAN 요청을 받으면 리스트 메서드를 호출하여 요청을 처리하고요
Retrieve API 뷰에서는 GET 요청을 받으면 Retrieve 메서드를 호출하여
요청을 처리합니다
각 리스트 메서드와 Retrieve 메서드를 재정리하여 현재 결정된 렌더러가 JSON
응답을 하는 JSON 렌더러이거나 Browseable API 렌더러라면 응답 데이터인
Response.Data를 다시 사전으로 랩핑, 감싸서 응답하도록 합니다
리턴리스트는 리스트를 상속받은 클래스이며 시리얼라이저 속성을 추가로 지원하고요 ReturnDict은
사전을 상속받은 클래스이며 시리얼라이저 속성을 추가로 지원합니다
둘 다 시리얼라이저 속성을 추가로 지원할 뿐 그냥 리스트와 사전입니다 List API View
클래스 코드를 보시면 GET 요청을 받으면 리스트 메서드를 호출하여 요청을 처리하고
있습니다. 리스트 모델 믹싱 클래스의 리스트 구현을 보시면요.
요청을 처리하고 response 타입으로 응답을 하고 있죠.
응답 데이터를 후처리하기 위해 리스트 메서드를 재정의하겠습니다.
부모의 리스트 메서드를 호출하면 리스판스 인스턴스를 반환합니다.
요청 객체의 AcceptedRenderer 속성을 통해 결정된 렌더러 인스턴스를 참조하실
수 있고요. 결정된 렌더러가 JSON 렌더러 타입이거나, Browseable API 렌더러
타입이라면, 즉 JSON 응답을 하는 경우라면, 이 응답 데이터를 랩핑하여 응답 데이터
구조를 변경하겠습니다.
원본 응답 데이터는 returnList 타입이고요.
변경할 데이터는 returnDict 타입입니다.
OK 키는 참으로 지정하고요.
result 키에 원본 응답 데이터를 지정합니다.
API 요청을 해보시면 응답 객체에 대해서 Serializer 키에 대한 키 에러가
발생합니다. 응답 데이터는 returnList 타입이거나 returnDict 타입이니까요.
Serializer 속성을 추가로 지정해 줘야만 합니다.
그런데 방금 생성한 리턴 딕에서는 시리얼라이저를 지정하지 않았습니다.
원본 응답 데이터에 시리얼라이저 인스턴스를 참조해서 지정해줍니다.
그럼 이렇게 응답 데이터 구조가 변경되었음을 확인하실 수 있습니다.
Retrieve API 뷰 클래스 코드를 보시면, GET 요청을 받으면 Retrieve
메서드를 호투하여 요청을 처리하고 있습니다.
Retrieve Model Mixing 클래스의 Retrieve 메서드 구현을 보시면
요청을 처리하고 Response 타입으로 응답을 하고 있죠.
응답 데이터를 후처리하기 위해 Retrieve 메서드를 재정의하겠습니다.
방금 구현했던 List 메서드 코드를 복사해서 재사용하겠습니다.
List 메서드 이름만 Retrieve로 변경해 주시면 되고요.
원본 응답 데이터는 ReturnDict 타입이죠.
그럼 이렇게 응답 데이터 구조가 변경되었음을 확인하실 수 있습니다.
앞선 구현에서는 List 메서드와 Retrieve 메서드를 재정의해서 구현했었는데요
API 뷰에서는 Dispatch 메서드 내에서 요청에 맞게 List 메서드와
Retrieve 메서드 등을 호출하여 요청을 처리한 후에 최종적으로 Finalize
Response 메서드를 호추하여 응답을 마무리합니다
Finalize Response 메서드를 재정의하면 List 메서드와 Retrieve
메서드를 재정의하지 않아도 하나의 메서드를 통해 같은 코드로 응답 데이터 구조를 변경하실
수 있게 됩니다.
이제 같은 코드의 메서드가 있으니깐요.
이를 별도의 믹스인 클래스로 빼서 구현하시고 응답 데이터 구조를 변경하려는 API 뷰
클래스에서는 이 믹스인 클래스만 상속받으시면 응답 데이터 구조 변경을 지원하시게 됩니다.
훨씬 관리성이 좋아졌죠?
Finalize Response 메서드에서는 응답의 상태 코드를 보고 요청의 성공
여부를 결정하고요.
결정된 렌더러가 없거나 요청 처리 중에 예외가 발생한 경우에는 반드시 재송응답을 하거든요.
이때에도 응답 데이터 구조를 변경하도록 해주겠습니다.
List API View 클래스는 Generic API View 클래스를 상속받고 또
API View 클래스를 상속받습니다.
API View 클래스가 Django REST framework에서 지원하는 모든 기능을 실행하는
핵심입니다.
스크롤을 내려보시면 Dispatch 메서드가 있습니다.
API View 클래스는 View 클래스를 상속받았죠.
뷰 클래스에서는 Dispatch 메서드가 뷰 처리의 시작이며 끝입니다.
Dispatch 메서드가 호출되면 Django REST 프레임워크의 요청 객체를
초기화하고요.
Django REST 프레임워크 관련하여 초기화 작업을 진행합니다.
사용할 렌더러를 결정하고, 인증을 수행하고, 권한을 체크하는 등의 초기화 작업이 있습니다.
그리고 요청 메서드 이름에 맞는 메서드가 있다면 호출하여 요청을 처리하고요.
요청 처리 중에 예외가 발생하면 handleException 메서드를 호출하여 예외내역에
정리합니다. 그리고 최종적으로 finalizeResponse 메서드를 호출하여 응답 객체에
필요한 속성들을 채워 넣고 반환합니다.
그럼 응답 데이터 구조 변경을 위해서 finalizeResponse 메서드를 재정의해서
구현할 수 있겠습니다.
FinalizeResponse 메서드를 재정의하고요.
구현했던 코드들을 옮깁니다.
방금 구현한 FinalizeResponse 메서드를 그대로 복사해서
PostRetrieveApiView 클래스에 붙여넣어도 그대로 잘 동작합니다.
Retrieve 메서드를 재정의한 코드는 이제 필요 없습니다.
API 응답을 확인해 보시면 잘 동작하고요.
PostListApiView 클래스와 PostRetrieveApiView 클래스의 같은
코드에 FinalizeResponse 메서드가 구현되어 있습니다.
이 메서드를 따로 빼서 JSONResponseWrapperMixing 클래스로 정의하고요
응답 데이터 구조 변경을 원하는 Apiview 클래스에서는 이 믹싱 클래스를 상속만 받으면
사용할 수 있도록 해보겠습니다
코어 폴더 아래에 mixin.py 파일을 생성하고요
JSONResponseWrapperMixing 클래스를 정의합니다
PostListApiView
클래스에서도 JSONResponseRapperMixing 클래스를 상속 받도록 하고요.
FinalizeResponse 메서드 재정의 코드는 이제 제거합니다.
PostRetrieveApiView 클래스에도 동일하게 적용해 줍니다.
API 응답을 확인해 보시면 종전과 동일하게 잘 동작합니다.
JSONResponseWrapperMixing 클래스에서 응답 객체의 상태 코드에 따라 OK
필드 값을 동적으로 결정하도록 하겠고요.
응답 객체의 AcceptedRenderer 속성은 FinalizeResponse 메서드가
호출되면 지정되는데요.
API 처리 중에 예외가 발생한다면 이 속성이 설정되지 않습니다.
AcceptedRenderer 속성이 없다면 None으로 참조하도록 하고요.
이 속성이 None이거나, API 처리 중에 예외가 발생한 경우라면 관련 시리얼라이저도
없으니 그냥 사전 객체를 만들어서 동일한 포맷으로 응답하도록 합니다.
포맷 인자에 엉뚱한 값을 지정하면 이렇게 에러 응답을 받고요.
방금 지정한 포맷으로 응답을 받았음을 확인하실 수 있습니다.


이번 설명에서는 Django REST Framework (DRF)에서 API 응답 데이터 구조를 변경하는 방법에 대해 다룹니다. 
기본적으로 DRF는 시리얼라이저를 통해 변환된 데이터 구조를 그대로 응답합니다. 하지만 서비스의 요구 사항에 따라 응답의 형식을 커스터마이즈해야 할 경우가 있습니다. 예를 들어, API 응답에 OK 필드와 Result 필드를 추가하는 경우입니다.

주요 내용 정리
1. 응답 데이터 구조 변경
기본적으로 DRF는 시리얼라이저를 통해 직렬화된 데이터를 응답으로 반환합니다. 그러나 요구 사항에 따라 응답 데이터의 구조를 바꿔야 할 때가 있습니다.
예를 들어, OK 필드와 Result 필드를 추가해야 하는 경우, JSON 응답만 수정하고 다른 포맷(예: 엑셀)은 그대로 두도록 할 수 있습니다.
OK: 요청의 성공 여부 (True 또는 False).
Result: 실제 데이터 (예: 리스트나 객체).

2. 응답 데이터 후처리 방법
DRF의 **ListAPIView**와 **RetrieveAPIView**에서 데이터를 처리하고, 응답을 변경하려면 List와 Retrieve 메서드를 재정의할 수 있습니다.
응답 데이터를 후처리하려면:
리스트 응답의 경우: 응답 데이터를 ReturnList 타입에서 ReturnDict 타입으로 랩핑하여 { "OK": true, "Result": <원본 데이터> } 형태로 변환합니다.
디테일 응답의 경우: ReturnDict 타입으로 반환하여 같은 방식으로 변경합니다.
리스트 메서드:
ListAPIView의 list 메서드를 오버라이드하여 원본 데이터를 Response로 감싼 뒤, OK와 Result 키를 추가합니다.
리트리브 메서드:
RetrieveAPIView의 retrieve 메서드를 오버라이드하여 원본 데이터를 랩핑하고, OK와 Result를 추가합니다.

3. finalize_response 메서드 재정의
ListAPIView와 RetrieveAPIView에서 응답 데이터 구조를 변경하려면 finalize_response 메서드를 재정의할 수 있습니다. finalize_response는 응답이 최종적으로 반환되기 전에 처리할 수 있는 메서드입니다.
finalize_response 메서드에서 응답의 상태 코드와 렌더러를 기반으로 응답 데이터를 후처리하고, **OK**와 Result 키를 추가합니다.
이 방법은 **List**와 Retrieve 메서드를 개별적으로 수정하지 않고, 공통적으로 데이터를 처리할 수 있게 해줍니다.

4. 믹스인 클래스 활용
응답 구조 변경 로직을 믹스인 클래스로 분리하여 재사용성을 높입니다.
JSONResponseWrapperMixin 클래스를 만들어, 이 클래스를 상속받은 API 뷰 클래스에서 응답 구조를 변경할 수 있습니다.
믹스인 클래스에서는 finalize_response 메서드를 재정의하여 응답을 수정하는 로직을 구현합니다.

5. 예외 처리 및 상태 코드 기반 응답
응답 상태 코드에 따라 OK 필드를 동적으로 결정합니다.

예외가 발생한 경우나 렌더러가 설정되지 않은 경우에는 None 값을 처리하도록 하고, 이를 기반으로 응답 구조를 변경합니다.

예외 처리 후에는 Response 객체가 None이 될 수 있으며, 이 경우 **OK**를 False로 설정하고, 에러 메시지나 추가 정보를 응답으로 반환할 수 있습니다.

6. 응답 포맷 변경 시 주의사항
JSON 응답에서만 구조 변경을 하고, 다른 포맷(예: 엑셀)에서는 기존의 형식을 유지합니다.
엑셀 응답에서는 OK나 Result 필드를 추가하면 엑셀의 데이터 포맷에 문제가 생길 수 있기 때문에, JSON 응답에만 해당 구조 변경을 적용합니다.

7. 구현 단계 요약
ListAPIView와 RetrieveAPIView의 list와 retrieve 메서드 재정의:
응답을 { "OK": true, "Result": <원본 데이터> } 형태로 변경.
finalize_response 메서드 재정의:
응답 처리 후 데이터 구조를 변경할 수 있도록 finalize_response 메서드에서 후처리.
믹스인 클래스 생성:
공통 로직을 JSONResponseWrapperMixin 믹스인 클래스로 분리하여 재사용성을 높임.
응답 포맷에 따른 처리:
JSON 응답에서만 구조 변경을 적용하고, 다른 포맷에서는 기본 응답 구조를 유지.
예외 처리 및 상태 코드 기반 응답:
예외 발생 시 OK 필드를 False로 설정하고, 적절한 메시지를 포함하여 응답.

결론
이 방법을 사용하면 Django REST Framework에서 응답 데이터의 구조를 유연하게 변경할 수 있습니다. 
finalize_response 메서드를 통해 공통된 응답 구조 변경 로직을 하나의 믹스인 클래스에서 관리하고, 리스트와 디테일 API에서의 코드 중복을 최소화할 수 있습니다. 
이로 인해 코드의 재사용성이 높아지고, 응답 데이터 구조를 변경하는 요구 사항을 쉽게 처리할 수 있습니다.



