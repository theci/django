이번에는 태그 삭제를 구현해 보겠습니다
특정 태그를 클릭하면 태그 삭제 의사를 확인하고 OK를 하면 삭제 요청을 보내고요 
응답 내용에 상관없이 태그 요소는 웹페이지에서 삭제하도록 구현해 보겠습니다 
클릭 이벤트가 발생했을 때 요청이 보내지도록 HX 트리거 속성에 클릭을 지정하고요 자바스크립트에서는 컨펌 API를 지원해 줍니다
htmx에서는 HX 컨펌 속성을 통해 확인 메시지를 등록할 수 있습니다 클릭 이벤트가 발생하면 
유저에게 진행 여부를 물어보고 유저가 확인을 클릭하면 htmx에서 요청을 보냅니다
이제 삭제 요청을 보낼 주소와 요청 방식을 지정해 줘야 하는데요 삭제 요청을 위해서는 포스트 방식의 요청도 좋고요 딜리트 방식의 요청도 좋습니다
딜리트 방식으로 요청을 보내기 위해 hxdelete 속성으로 태그 삭제 주소를 지정해 줍니다 
서버에서 태그가 삭제된 후에 현 태그 요소를 그냥 지우실 수도 있고요.
삭제되었다는 성공 메시지를 잠시 보여주고 일정 시간 후에 자동 제거되게 할 수도 있습니다.
여기에서는 간결한 구현을 위해 태그 요소가 삭제되도록 hx-swap 속성으로 delete를 지정하겠습니다.
장고에서 CSRF 토큰을 검사하는 CSRF Vue 미들웨어에서는 Get, Head, Options, Trace 요청이 아닌 HTTP 요청에 대해서는 CSRF 토큰을 검사합니다
그러니 Delete 요청에서도 CSRF 토큰을 검사합니다
HTMX 요청 시에 CSRF 토큰이 헤더에 자동 설정되어 전송이 되도록 Body 태그에 HxHeaders 속성으로 커스텀 헤더를 지정하면 HTMX에서 자동으로 이 헤더를 사용합니다
CSRF 토큰을 헤더에 담아서 보낼 때에는 xcsrftoken 헤더명으로 전송합니다
CSRF 토큰은 CSRF 언더바 토큰 템플릿 태그 뿐만 아니라 이렇게 CSRF 언더바 토큰 컨텍스트 데이터로도 조회하실 수 있습니다
심지어 쿠키에도 CSRF 토큰 값이 저장되어 있어요
태그 삭제 뷰에서는 delete 요청만 받도록 하고요.
지정 pk의 태그를 조회하고 데이터베이스에서 삭제합니다.
htmx 요청에서 hx swap 속성의 delete가 지정되어 서버 응답을 무시하고 요소를 삭제토록 동작합니다.
그러니 view 응답의 body는 무시되겠죠.
빈 응답을 하겠습니다.
태그 delete 뷰를 구현합니다.
기본키 pk를 url-captured value로 받아서 태그를 조회하고 데이터베이스에서 삭제하고 빈 body로 응답을 주겠습니다.
태그 딜리트 뷰는 delete 요청에서만 호출되도록 require HTTP 메서드 장식자로 적용해 주겠습니다
URL 패턴도 등록해 줍니다
블로그에 underbar-tag-list.html 템플릿에서 각 태그명에 마우스를 올리면 포인터 커서로 표현하기 위해 커서 포인터 스타일도 적용해줍니다
각 태그명을 클릭하면 htmx 요청을 발생시키겠고요
htmx 요청 발생 전에 유저에게 확인을 받고요 유저가 OK를 하면 Delete 요청으로 태그 삭제 요청을 보내겠습니다
태그 딜리트 뷰의 응답 내역을 활용하지는 않을 것이고요.
응답을 받으면 현 div 요소를 삭제하도록 합니다.
페이지 새로고침하고 동작을 확인해 보겠습니다.
브라우저 개발자 도구의 탭에서 탭을 선택해서 요청 내역도 확인해 보겠습니다.
태그명을 클릭하면 삭제 의사를 물어보죠.
취소하면 htmx 요청이 전달되지 않습니다.
OK를 하면 htmx 요청이 전달되죠.
그런데 페이지에서는 해당 태그가 지워지지 않네요.
브라우저의 개발자 도구를 보시면 delete 메서드로 요청이 되는데 403
forbidden 응답을 받았습니다.
오류 상황이라 htmx에서 현 요소를 delete 하지 않았습니다.
서버 로그를 보시면 CSRF 토큰이 누락되어 요청을 거부했다고 합니다.
delete 요청을 보내는데 CSRF 토큰을 같이 전송하지 않았죠.
body 태그에 hx headers 속성으로 htmx 요청에서 같이 전송할 헤더를 지정합니다. 
페이지 소스보기 해보시면 이렇게 body 태그에 hx headers 속성으로 CSRF 토큰 값이 잘 생성이 되어 있네요.
페이지 새로 고침하시고 다시 삭제 요청을 해보시면 서버에서 200 응답을 받았고요.
해당 요소도 페이지에서 Delete 을 확인하실 수 있습니다.


1. 태그 삭제 UI 구성
태그 클릭 시 삭제 확인: 특정 태그를 클릭하면 삭제 여부를 묻는 확인 메시지를 표시하고, 사용자가 OK를 누르면 삭제 요청을 전송합니다.
HX 트리거: hx-trigger="click" 속성을 사용해 클릭 이벤트를 트리거로 설정합니다.
확인 메시지: hx-confirm 속성을 통해 확인 메시지를 설정합니다.
2. 삭제 요청 전송 방식 설정
요청 방식: 태그 삭제 요청은 DELETE 메서드로 전송합니다. hx-delete 속성에 삭제 요청 URL을 지정합니다.
응답 후 처리: hx-swap="delete" 속성을 사용하여 서버 응답을 무시하고 태그 요소를 삭제합니다.
3. CSRF 토큰 설정
CSRF 토큰 헤더 전송: hx-headers 속성을 <body> 태그에 추가하여 HTMX 요청 시 X-CSRFToken 헤더에 CSRF 토큰이 자동으로 전송되도록 합니다.
CSRF 토큰 조회: CSRF 토큰은 {{ csrf_token }} 또는 컨텍스트 데이터로 조회 가능합니다.
4. Django의 태그 삭제 뷰 설정
삭제 뷰 구현: URL에서 기본키(pk)를 받아 해당 태그를 조회하고 삭제 후 빈 바디 응답을 반환합니다.
메서드 제한: @require_http_methods(["DELETE"]) 장식자를 사용해 DELETE 메서드 요청만 받도록 제한합니다.
5. URL 패턴 등록
태그 삭제 뷰를 위한 URL 패턴을 urls.py에 등록합니다.
6. HTML과 CSS 수정
템플릿 수정: underbar-tag-list.html 템플릿에서 태그명에 커서 포인터 스타일을 적용해 클릭 가능한 UI로 만듭니다.
HTMX 요청 설정: 각 태그 클릭 시 HTMX 요청을 발생시키고, 확인 메시지 후 DELETE 요청을 전송하도록 설정합니다.
7. 테스트
동작 확인: 브라우저 개발자 도구에서 태그 클릭 시 요청을 확인합니다.
403 오류 해결: hx-headers 속성으로 CSRF 토큰이 누락되지 않도록 설정합니다.
결과 확인: 200 응답을 받고 페이지에서 태그가 삭제되는 것을 확인합니다.