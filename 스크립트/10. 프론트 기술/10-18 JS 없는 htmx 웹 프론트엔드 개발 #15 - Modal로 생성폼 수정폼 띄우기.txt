안녕하세요. 이번 시간에는 modal로 생성 폼과 수정 폼을 띄워보도록 하겠습니다.
부트스트랩 5의 modal API를 활용합니다.
먼저, Django 템플릿 파셜스 라이브러리를 설치합니다.
이 라이브러리를 사용하면 하나의 템플릿 파일 내에서 템플릿 조각을 함수처럼 정의하고 여러 위치에서 재사용할 수 있습니다.
이 라이벌리가 없다면 재사용할 템플릿 조각을 매번 별도의 파일로 생성해야 하는 번거로움이 있죠. 
partial define 템플릿 태그를 사용하여 템플릿 조각을 함수처럼 정의하고요.
partial template 태그로 정의한 코드 조각을 필요한 곳에서 손쉽게 재사용할 수 있습니다.
Django 템플릿 파셜스 라이브러리를 설치합니다.
현재 최신 버전 23.4 버전이고요.
세팅스의 인스톨드 앱 리스트에 앱 이름인 템플릿 언더바 파셜스를 추가하면 설치 끝입니다.
이 라이브러리에서 지원하는 템플릿 태그를 사용하시려면 템플릿에서 파셜스 이름으로 로드하면 됩니다. 
부트스트랩5의 모델 API를 활용하여 생성품과 수정품을 띄워보겠습니다.
모델 요소를 위치시킬 모델 컨테이너를 바디 끝에 하나 추가합니다.
생성 버튼이나 수정 버튼을 클릭하면 해당 폼 HTML을 받아와서 모델 컨테이너 요소에 반영합니다. 
생성 버튼, 수정 버튼의 역할은 여기까지이고요.
나머지인 폼 HTML 코드를 생성하는 템플릿에서 모델 HTML과 모델을 띄워주는 약간의 JavaScript 코드가 추가될 것입니다.
태그 생성 수정 요청은 이제 htmx를 통해서만 처리되는 것으로 가정합니다.
그러니 htmx 요청 여부를 판단하는 코드는 모두 제거하고요.
이에 따라 태그 new view 코드가 훨씬 간결해지죠.
modal을 통해 입력 폼을 띄웠으니 입력 폼 취소는 띄워진 modal 창을 닫기만 하면 되고요. 
그러니 cancel URL의 값도 필요 없으니 제거합니다.
입력 값 저장 후에는 모델 창을 숨길 것이므로 서버에서는 유효성 검사 후에 저장한 태그 내역 HTML을 응답할 필요는 없습니다.
대신 성공 메시지 이벤트를 발생시키고 목록 새로고침 이벤트를 발생시킵니다.
이걸로 태그 뉴 뷰 구현은 끝이고요.
이어서 입력 폼 HTML 템플릿 구현을 살펴보겠습니다.
Footstep 5에서는에서는 모델을 띄우는 다양한 방법이 있습니다.
그 중 하나는 HTML로 먼저 모델 창의 레이아웃을 구성하고, JavaScript를 통해 모델을 띄우고 숨기는 것입니다.
하나의 모델 창은 모달 헤더, 모델 바디, 모델 푸터로 구성됩니다.
모델 바디에는 폼 필드들을 매치하고, 모달 푸터에는 저장 취소 버튼을 매치합니다.
모델 바디 내에 폼 태그가 있을 텐데요.
폼 바깥에 저장 버튼이이 있으므로, 저장 버튼을 클릭해도 폼 제출이 되지 않습니다.
폼 바깥에 저장 버튼을 둔 이유는, Bootstrap 5의 모델 레이아웃을 적극 활용하기 위함입니다..
그렇다고 폼 태그 안으로 저장 버튼을 넣으면, 버튼 레이아웃을 직접 구성해야 합니다.
이 문제를 해결하기 위해 폼 밖에서 폼 요소의 Submit 이벤트를 발생시키는 방법을 사용할 수 있습니다.
이렇게 하면 저장 버튼이 잘 동작하고요.
취소 버튼의 경우 모델 내에서 data-bs 디스미스 모델 속성을 지정하는 것만으로도 클릭 시 모델이 숨겨지도록 동작합니다.
폼 제출 후 유효성 검사에 통과하고 저장이 완료되면 서버에서는 Refresh Tag List 이벤트만 내려줄 것입니다.
Refresh Tag List 이벤트가 발생하면 모델도 함께 숨겨지도록 이벤트 리스너를 추가합니다. 
생성 폼이나 수정 폼 모델을 처음 띄울 때에는 모델 코드가 필요하지만, 모델 창이 한 번 띄워지고 나서는 유효성 검사가 실패했을 때 폼 영역의 HTML만 대체되면 됩니다. 
모델 창을 다시 띄울 필요는 없어요.
그러니, 초기 요청인 get 요청에서는 modal 창을 띄우는 코드로 응답하고, 이후 요청인 post 요청에서는 유효성 검사 에러가 발생하면 modal 코드 없이 form 태그 응답만 하면 됩니다.
실습해 볼게요.
블로그의 base.html 템플릿에 modal.html을 위치시킬 modal 컨테이너를 추가합니다.
블로그의 taglist.html 템플릿에서는 기존의 새 태그 폼을 로딩하는 코드를 제거하고, 태그 버튼을 추가합니다.
태그 버튼을 클릭하면 응답 HTML을 받아와서 모델 컨테이너에 반영합니다.
블로그의 태그 리스트 템플릿에서는 수정 폼 로딩 코드를 수정합니다.
수정 폼 HTML을 반영할 대상을 modal-container의 inner-html로 변경합니다. 
태그 뉴 뷰에서는 이제 htmx 요청 여부를 구별할 필요가 없으니 관련 코드를 제거합니다. 
그리고 유효성 검사에 성공하면 저장 후에 성공 메시지와 refresh 태그 리스트 이벤트만 응답하면 되거든요.
성공 메시지 렌더링을 위해 언더바 메세지스 as event.html 템플릿을 통해 응답을 생성하고요.
리프레쉬 태그 리스트 이벤트로 추가해 줍니다.
모델 창에서 취소는 모델 창을 숨기기만 하면 되니까 취소 유아들도 필요 없으니 제거합니다.
마지막으로 블로그의 언더바 태그 폼.html 템플릿입니다.
Bootstrap 5의 이 모델 예시를 가져왔습니다.
제공해 드린 샘플 코드에서 모델 HTML 코드를 복사합니다.
모델 바디 영역에는 기존 폼 태그를 옮겨 놓습니다.
기존 응답 구성에서 모델로 랩핑만 한 거죠.
그리고 자바스크립트 코드를 추가하여 이 모델 레이아웃을 기반으로 모델 창을 띄우겠습니다.
웹브라우저 새로고침하시고 버튼 클릭해 보시면 이렇게 모델 창이 뜨죠.
기존 폼 태그를 옮기면서 저장 및 취소 버튼을 안 지웠네요.
지우고요. 폼필드에 불필요하게 외곽선과 패딩이 있으니 이 스타일도 제거합니다.
Bootstrap 5의 모델 바디 스타일로 충분하죠?
하나의 모델 창 폼에서 유효성 검사 에러가 계속 발생하도록 해봅니다.
그럼 배경이 계속 어두워지죠?
매 유효성 검사 에러 응답마다 모델 창이 추가되어서 검은색 투명 배경이 계속 겹쳐져 어두워지는 것입니다.
모델은 폼을 처음 띄울 때 한 번만 생성하면 되고요.
그 이후에는 폼필드 HTML만 갱신하면 됩니다.
처음 띄울 때는 GET 요청일 것이고요.
이후 요청은 POST 요청일 것입니다.
요청 방식으로 분기해서 GET 요청에서만 모델 응답을 하도록 수정합니다.
페이지 동작을 확인해 보시면 유효성 검사 에러가 계속 발생하도록 저장 버튼을 계속 클릭해 봐도 배경이 어두워지지 않죠.
모달 한 개로만 잘 동작하고 있습니다.
그런데 같은 form 태그 구현이 중복해서 2회 사용되었죠.
form 코드를 별도 템플릿 파일에 저장해서 include 하실 수도 있겠지만, Django 템플릿 파셜스 라이브러리를 활용해 봅시다.
partial define 템플릿 태그로 재사용할 form 코드를 정의하고요.
partial template 태그로 이 form 코드를 활용하도록 변경합니다.
생성과 수정 동작 모두 확인해 보시면 잘 동작할 것이고요.
저장해 보시면 성공 메시지와 함께 모델도 자동으로 닫히고 목록도 새로 고침됨을 확인하실 수 있습니다.



1. 템플릿 파셜스 라이브러리 설치 및 설정
목적: 템플릿 조각을 재사용할 수 있도록 Django 템플릿 파셜스 라이브러리 설치.
설치:
최신 버전(23.4)을 사용.
INSTALLED_APPS에 템플릿_언더바_파셜스 추가.
사용법:
템플릿 조각을 partial define 태그로 정의하고, partial template 태그로 재사용 가능.
2. 모달을 통한 생성 및 수정 폼
부트스트랩 5의 모달 활용:
생성 버튼 및 수정 버튼을 클릭하면 해당 폼 HTML을 받아와서 모달에 표시.
모달을 띄우기 위한 HTML 구조:
모달 헤더, 모달 바디, 모달 푸터로 구성.
모달 바디: 폼 필드가 들어가며, 모달 푸터: 저장 및 취소 버튼.
폼 제출: 저장 버튼을 클릭하여 폼 제출(단, 폼 안에 있는 저장 버튼은 외부에서 폼 제출 이벤트를 발생시키는 방식).
3. HTMX 요청 처리
HTMX 사용:
tag new view에서 HTMX 요청으로 폼을 처리.
htmx 요청 여부에 따라 코드를 간소화.
cancel URL 값 제거: 취소 시 모달 창만 닫히도록 처리.
폼 저장 후 동작:
유효성 검사 후 저장이 완료되면:
성공 메시지 이벤트 발생.
리스트 새로 고침 이벤트 발생.
4. 모달 HTML 및 JavaScript 코드 작성
모달 코드 위치: base.html에 모달 컨테이너 추가.
태그 리스트 템플릿 수정:
tag new 버튼을 클릭하면 모달에 폼 HTML을 로딩.
수정 폼도 동일한 방식으로 모달에 로딩.
자바스크립트:
모달 창을 띄우고 숨기는 코드 추가.
폼 제출 후 성공하면 모델 창을 숨기고 태그 목록을 새로 고침.
취소: 클릭 시 모달 창을 숨기기만 하면 됨.
5. 유효성 검사 및 폼 처리
폼 제출 후 유효성 검사 실패:
폼 영역 HTML만 갱신하고, 모달 창은 다시 띄울 필요 없음.
GET 요청: 모달 창과 함께 폼을 로딩.
POST 요청: 유효성 검사 에러 발생 시 폼만 갱신, 모달 창은 그대로 유지.
6. 모달에서 폼 필드 갱신 및 에러 처리
유효성 검사 실패 시:
배경이 계속 어두워지는 현상을 방지하기 위해 폼을 처음 띄울 때만 모달을 생성하고, 이후에는 폼 필드만 갱신.
반복되는 폼 코드 중복 제거:
partial define을 사용하여 폼 HTML을 템플릿 조각으로 정의하고, 이를 재사용.
7. 결과 확인
성공적인 저장: 폼 제출 후, 성공 메시지와 함께 모델 창은 자동으로 닫히고 태그 목록이 새로 고침됨.
최종 확인: tag new와 edit 기능이 모달로 잘 동작하며, 유효성 검사 후에도 폼 필드만 갱신되고 모달 창은 계속 사용됨.