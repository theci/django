앞선 코드의 htmx 버전입니다
웹페이지에 htmx 라이브러리를 추가해 주고요 새로 고친 버튼에 htmx 속성들을 추가합니다 
hx get 속성에 지정한 주소로 get 요청이 전달될 것이고요 클릭 이벤트가 발생하면 동작이 수행될 것이고 htmx는 서버의 응답을 지정 요소에 업데이트하는 방식으로
동작하는데요 hx target 속성으로 그 대상을 지정해 줍니다
hx-swap 속성에는 지정 요소에 업데이트 할 때의 동작 방식을 지정하는데요.
대상의 innerHTML 속성에 업데이트 하도록 하고, 트랜지션 효과를 주도록 합니다.
그럼 구현 끝이고요.
자바스크립트 구현 없이 앞선 예시와 동일하게 동작합니다.
먼저, 트랜지션 효과를 위한 CSS 코드를 제거합니다.
CSS 없이도 HTML 라이브러리에서 트랜지션 효과를 지원하기 때문이고요.
클릭 이벤트 핸들러와 HTTP 요청, 그리고 응답을 지정 요소에 반영하는 JavaScript 코드도 제거합니다.
HTML 라이브러리에서 HTML 마크업만으로 해당 기능을 구현할 수 있기 때문입니다.
버튼에 대해서는 따로 DOM 조회를 하지 않기 때문에 ID 지정도 필요 없죠.
제거합니다.
htmx 라이브러리를 추가하고요.
현재 버전이 1.9.10 버전이네요.
htmx 동작 시에 GET 요청을 보내도록 hx-get 속성을 사용하고요.
GET 요청을 보낼 URL 주소를 지정합니다.
클릭 이벤트가 발생하면 GET 요청을 보낼 것이고요.
그 응답을 ID가 태그 리스트 컨테이너 요소에 반영할 것이고, 해당 요소의 innerHTML 속성으로 반영하겠습니다.
페이지 새로고침하시고 새로고침 버튼 클릭해 보시면 이렇게 새로고침 버튼 스타일도 안 바뀌고요. 
태그 목록이 로딩되었습니다.
이처럼 HTMX에서는 응답에서 바디 영역만 지정 요소에 반영하고 있습니다.
브라우저 개발자 도구의 네트워크 탭을 여시고 방금 HTMX 요청 내역을 살펴봅시다.
요청 헤더를 보시면 이렇게 HTMX 관련 헤더가 자동으로 설정되어 있음을 확인하실 수 있습니다. 
hx-currenturl 헤더를 통해 현재 페이지 주소를 서버에 알려주고 있고요. 
hx-request 헤더를 통해 현재 HTTP 요청이 HTTPS를 통한 요청임을 서버에 알려주고 있고요.
hx-target 헤더를 통해 응답을 반영할 대상을 알려주고 있습니다.
서버에서는 이 헤더들을 읽어드려 HTTPS 요청에 맞는 응답을 생성하도록 구현할 것입니다.
버튼에 HX Swap 속성에 추가로 Transition True를 지정하시면 이렇게 지정 요소에 응답을 반영 시에 Transition 효과가 적용됨을 확인하실 수 있습니다.