태그 목록 페이지에 태그 생성 폼을 생성해서 태그를 입력하면 페이지 전환이나 페이지
새로고침 없이 태그가 저장되고 태그 목록만 새로고침 되도록 구현해 보겠습니다.
총 세 단계로 나눠 구현을 해 보겠습니다.
1단계고요. 태그 목록 페이지에서 태그 생성 폼을 노출시키려면 장고 기본 기능에서는 태그
언더바일 리스트 위에서 태그 폼 클래스에 대한 인스턴스를 만들고 직접 이렇게 폼 렌더링을
해줘야 합니다.
htmx를 활용하면 태그 생성 페이지 주소 지정만으로 태그 생성 폼 HTML을 로딩해서
동일하게 노출시킬 수 있습니다.
태그 뷰에서는 htmx를 통한 요청에서는 페이지 레이아웃 없이 컨텐츠로만 응답을 주도록
합니다. 그리고 태그 생성 폼에서는 전송 버튼 없이 태그 입력하고 엔터키 입력하면 폼
전송이 되도록 인풋 타입 서브밋 버튼은 제거해 주겠습니다.
이 버튼이 없는 것이 페이지가 나아 보여서 제거했습니다.
실습해 볼게요.
블로그의 태그리스트.html 템플릿에서 태그 생성 폼을 html을 통해 로딩될 수 있도록
해보겠습니다. hx get 속성으로 태그 생성 폼, html을 응답하는 페이지 주소를
지정해주고요.
웹페이지가 로드되고 나서 즉시 로딩되도록 hx trigger에는 load 속성을
지정합니다.
웹페이지를 새로고침하면 이렇게 태그 생성 폼이 로딩되는데 웹페이지 레이아웃이 포함되어
있습니다. 태그 뉴 뷰에서 HTML 요청 여부에 따라 템플릿을 다르게 적용해서 응답을
주도록 변경합니다.
태그 리스트.html 템플릿은 레이아웃을 포함하고 있고 컨텐츠는 언더바 태그 리스트 점
HTML 템플릿을 통해 렌더링하고 있죠.
저장하시고 새로고침하시면 레이아웃이 없는 태그 폼이 로딩됩니다.
혹시 레이아웃이 그대로 적용되어 있으신 분들은 브라우저 캐시 때문입니다.
브라우저에서 강력 새로고침을 해주세요.
크롬 브라우저에서 개발자 도구를 여신 상태에서 브라우저 툴바에 새로고침 아이콘을
우클릭하시면 강력 새로고침
메뉴가 나옵니다.
태그명을 입력하시고 폼 제출을 하시면 태그 생성이 잘 됩니다.
폼 전송 버튼도 제거해 주겠습니다.
태그 생성 폼은 htmx를 통해서 로딩했지만 폼 전송은 htmx를 사용하지 않고 html에
폼 태그를 통해 전송이 되고 페이지 전환이 되고 있습니다.
이미 등록된 태그명을 입력해 보시면 다른 페이지인 블로그 태그스의 new 주소에서 폼
유효성 검사 에러를 보여줍니다.
태그 생성 페이지로 이동했다가 다시 태그 목록 페이지로 이동을 한 상황인 거죠.
1단계에서는 폼 HTML은 HTMX를 통해 로딩했지만 폼 전송은 HTMX를 사용하지
않았었죠. 그래서 폼 전송 시에 페이지 전환이 발생했었던 것이고요.
2단계에서는 폼 전송을 HTMX를 통해 전송해 보겠습니다.
홈 태그에서 hx-post 속성을 지정하여 지정 주소로 포스트 요청을 보내도록 하고요.
hx-trigger 속성으로 폼 서브 및 이벤트 발생 시에 HTMX 요청을 보내고 폼
전송을 여러 번 요청하더라도 1회만 htmx 요청이 이뤄지도록 once 옵션도 지정합니다.
그리고 태그 뉴 뷰에서는 HTMX 요청에 대한 응답에서 form 태그를 포함한 응답을
주므로 hx swap 속성에는 outer html을 지정해서 HTMX 응답을 form
요소에 그대로 덮어쓰도록 합니다.
그럼 HTMX를 통한 form 요청은 구현 끝이구요.
태그 언더반 뉴 뷰에서는 폼 유효성 검사에 실패하면 기존 로직 그대로 각 템플릿에 맞춰
에러 폼 HTML 응답을 줄 것이고요.
폼 유효성 검사에 성공하면 저장 후에 HTML 요청 여부에 따라 다른 응답을 줘야 합니다.
새 태그 생성하고 또 이어서 태그 입력을 받을 수 있도록 태그 폼을 제공해 줄 것이거든요.
그러니 HTML 요청에서는 빈 폼으로 응답을 주도록 합니다.
실습해 볼게요.
현재 태그 생성 폼을 보시면 이렇게 폼 태그로 구성되어 있고 액션 속성과 메서드 속성이
부여되어 있죠 폼 전송 시에 페이지 전환이 일어나게 됩니다
폼 태그에서 액션 속성 대신 hx-post 속성을 사용하고요 hx-trigger 속성으로
submit을 지정하여 폼 서브밋 시에 htmx 요청이 발생토록 하고요 ons를 지정하여
1회만 htmx 요청이 발생토록 제안합니다
페이지 새로고침해 보시면 우리가 지정한 대로 폼 태그에 HTMX 관련 속성이 잘 지정되어
있네요 기존 태그 목록이 없는 새로운 태그를 생성해 봅시다 생성 폼이 새 태그가 추가된
태그 목록으로 바뀌었습니다
그 이유가 무엇일까요?
htmx의 컨텐츠는 서버 응답에 전적으로 의존하니까요 원인은 태그 언더바 뉴 뷰 구현에
있습니다 뷰 구현을 보시면 폼 유효성 검사 통과 후에 태그 목록 페이지로의 이동
redirect 응답이 있죠.
htmx 요청에서도 태그 목록 페이지 이동 응답을 받습니다.
이 부분이 원인이었던 것이고요.
htmx 요청에서는 태그 목록이 아닌 태그 생성된 것에 대한 결과를 응답으로 받아야
합니다. htmx 요청에서는 단순히 텍스트로 저장했어요라고 응답을 해보겠습니다.
페이지 새로 고치지 마시고 다시 새 태그를 생성해 보시면 저장했어요 라고 처리 결과가
나옵니다 그런데 태그 목록은 갱신이 안 되어 있죠
목록 갱신은 다음 슬라이드에서 다룰 거예요
태그 뉴뷰에서 Django 메시지 프레임워크를 통해 태그를 저장했습니다 라는 성공 메시지를
남겼는데 htmx 응답인 저장했어요 응답이 보여질 때에는 그 메시지가 소비되지 않고 있다가
페이지를 새로고침 하니까 그제서야 태그를 저장했습니다 라는 메시지가 소비되어 보여집니다
지금 htmx 응답에서는 단순히 텍스트 응답만 했을 뿐 장고 메시지를 소비하진 않았거든요
조금 있다가 메시지 소비 태그를 적용해 보겠고요 태그 생성 후에도 이어서 새로운 태그를
입력할 수 있도록 새 태그 생성 폼을 제공해 주면 좋을 듯 합니다.
댓글 생성 폼이 있다면 새 댓글 생성 후에도 계속 댓글을 쓸 수 있어야겠죠.
그러니 htmx 응답으로 새 댓글 생성 폼 응답을 해줍니다.
페이지 레이아웃 없이 응답을 해야 하니 블로그의 태그 폼.html 템플릿이 아닌 블로그의
언더바 태그 폼.html 템플릿으로 응답합니다.
그리고 유효성 검사 에러 응답을 유도하기 위해 기존에 있는 태그명으로 태그 생성을 요청해
보세요. 그러면 이렇게 태그 생성 폼 위치에 유효성 검사 에러 내역이 잘 보여지는데요.
브라우저 개발자 도구로 현재 폼 요소를 확인해 보시면 폼 요소가 이중으로 되어 있어요.
바깥 폼이 있었고 HTML 응답으로 폼 태그가 있는 응답을 받았는데 바깥 폼에
innerHTML 속성으로 응답이 적용되었기에 이렇게 폼이 이중이 된 겁니다.
hx-swap 속성이 default로 inner-html이거든요
hx-swap 속성을 outer-html로 지정해 주시면 폼 요소 중복 없이 htmx
응답이 잘 적용됩니다
새로운 태그를 생성해 보면 오류 없이 빈 폼 응답을 받았고요 오류 내용이 없으니 태그는 잘
생성이 된 듯한데 성공 메시지가 보이지 않죠?
페이지 새로고침해 보시면 성공 메시지가 보여집니다.
빈 태그 생성 폼 템플릿에 아직 광고 메시지를 소비하는 코드가 없죠?
블로그의 태그 폼.html 템플릿에 템플릿 태그를 적용해 줄게요.
이제 새 태그를 생성해 보시면 빈 태그 생성 폼 응답에서 성공 메시지가 포함된 응답을 같이
받게 되고요.
이렇게 성공 메시지가 즉시 보여지게 됩니다.
앞선 2단계에서는 새로운 태그를 저장을 했는데 태그 목록 새로고침이 없었죠.
3단계에서는 태그 목록 새로고침을 수행해 보겠습니다.
htmx 요청을 받는 서버에서 응답을 줄 때 hx refresh 응답 헤더에 문자열,
소문자 true 값을 지정하여 페이지 새로고침을 요청할 수도 있습니다.
혹은 HX Trigger 응답 헤더를 통해 커스텀 이벤트를 전달하실 수도 있어요.
Django HTMX 라이브러리에서는 TriggerClientEvent 함수를 통해 응답
객체에 HTMX 이벤트를 손쉽게 추가할 수 있도록 도와줍니다.
물론 이벤트에 대한 인자도 지원합니다.
HTMX 응답에 커스텀 이벤트 Refresh 태그 리스트를 지정했습니다.
웹페이지에서는 바디 요소를 통해 해당 이벤트를 잡으실 수 있습니다.
새로고침 버튼이 바디 요소의 refresh 태그 리스트 이벤트에 대해서도 반응하도록 HX
트리거 속성에 refresh 태그 리스트 from body를 추가합니다.
그러면 클릭 시에도 동작하고, 바디 요소의 refresh 태그 리스트 이벤트가 발생했을
때에도 동작합니다.
이 이벤트는 클라이언트 단에서 자바스크립트를 통해서도 발생시킬 수 있습니다.
실습해 볼게요.
랜덤 메서드는 http response 객체를 반환하죠.
반환 값으로 받아서 이렇게 커스텀 응답 헤더를 지정할 수 있습니다.
hx refresh 헤더로 값이 소문자 true인 응답을 htmx 단에서 받으면 페이지
새로고침을 수행하게 됩니다.
방금 브라우저의 새로고침 아이콘이 바뀌는 거 보셨나요?
HX Refresh 헤더를 통해 서버의 요청에 의한 페이지 새로고침을 확인했고요.
Django HTMX 라이브러리에서는 HTTP Response Client Refresh
클래스를 통해서 HX Refresh 헤더가 설정된 응답 객체를 생성하실 수 있습니다.
그런데 지금은 렌더를 통해서 응답 객체를 바로 생성하니까 지금은 이 클래스를 못 쓰겠네요.
그리고 HX Trigger 응답 헤더를 통해 웹 프론트엔드 딴에 커스텀 이벤트를 발생시키실
수 있습니다 커스텀 이벤트로 Refresh 태그 리스트를 발생시켜 볼게요
그럼 새로고침 버튼에서도 HX Trigger 속성을 통해 Refresh 태그 리스트
이벤트로도 새로고침이 수행되도록 지정해 주셔야 합니다
서버로부터 지정된 이벤트는 바디 요소에 대해 발생합니다
그러니 이벤트명 끝에 From Body도 지정해 주셔야 이벤트에 반응합니다
새 태그를 생성해 보시면 페이지 새로고침 없이 새 태그가 생성되자마자 아래 태그 목록이
갱신되었음을 확인하실 수 있습니다.
Django HTMX 라이브러리에는 HX Trigger 응답 헤더 생성을 도와주는
TriggerClientEvent 함수가 있습니다.
함수 구현을 보시면 이벤트 파라미터도 같이 전달할 수 있도록 도와줍니다.
웹페이지에서 다시 태그 생성해 보시면 종전과 마찬가지로 페이지 새로고침 없이 태그 목록이
갱신됨을 확인하실 수 있습니다.