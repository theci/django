웹 개발에서 동적인 사용자 경험을 제공하기 위해서 자바스크립트는 필수인데요.
하지만 복잡한 자바스크립트 코드 작성 없이도 동적인 UI를 구현할 수 있습니다.
그러한 방법들 중 하나로 HTMX 라이브러리가 있습니다.
HTMX를 사용하면 HTML 마크업만으로 클라이언트 측에 다양한 동적 기능을 손쉽게 추가할 수 있습니다. 
물론 HTMX가 React나 다른 UI 라이브러리를 대체할 수는 없어요.
HTMX는 한계를 가지고 있지만 그 한계를 잘 이해하고 활용하면 자바스크립트 사용을 대폭 줄이면서도 Django와 함께 높은 생산성으로 웹 프론트엔드 개발이 가능해집니다.
복잡한 UI 구현에는 React와 같은 UI 라이벌리가 필요할 수도 있습니다.
하지만 필수는 아니에요.
많은 서비스들이 React가 필요한 만큼 복잡한 UI가 있지는 않습니다.
React가 정답인 양 쓰는 상황은 마치 소 잡는 칼로 닭을 잡는 상황에 비유할 수 있습니다. 
소 잡는 칼이 엄청 크고 힘도 많이 들어가기에 닭장에서는 과한 도구이죠.
닭장에서 소 잡는 칼을 쓰는 사람은 적정 도구보다는 그냥 소 잡는 칼을 쓰고 싶었던 것일 수도 있습니다.
일반적인 웹 페이지에서의 동적인 부분은 HTMX를 사용하시고 클라이언트 단에서 복잡한 UI 처리가 필요한 컴포넌트는 React로 개발하시고 서버 위주로 복잡한 상태값 처리가 필요하실
때에는 뒤에서 다루는 장고 유니콘 라이버리를 사용해 보세요.
각 기술과 활용법에 대한 이해도를 높이시고 필요한 곳에 적정 기술을 사용하시어 개발 생산성을 향상시켜 봅시다.
HTMX 적용에 앞서 실습에 사용할 태그 모델에 대한 뷰 템플릿을 먼저 구성해 보겠습니다.
태그 모델은 기존에 있으니 그대로 사용하시면 되고요.
태그 폼, 모델 폼을 추가로 정의합니다.
태그 목록을 보여줄 태그 리스트 뷰와 태그 생성을 다룰 태그 뉴 뷰를 기본 구성으로 구현합니다.
템플릿은 부모 템플릿으로 사용할 블로그의 Base.html 템플릿을 먼저 정의하고요.
부모 템플릿에서는 HTMLX 라이브러리를 CDN 버전으로 임포트하겠습니다.
Django Bootstrap 5 라이브러리로 Bootstrap 5 CSS와 JavaScript를 적용하고요.
메시지 노출 코드도 추가합니다.
태그 목록을 보여주는 블로그의 태그 리스트 . HTML 템플릿에서는 레이아웃을 구현하고요.
태그 목록 내용은 블로그의 _ 태그 리스트 점 HTML 템플릿으로 나눠 구현합니다.
이렇게 구현하는 이유는 HTMX를 활용한 HTTP 요청에서 레이아웃 없이 컨텐츠로만 응답해야 하는 경우가 있거든요.
이때 컨텐츠만 정의된 템플릿을 사용할 것입니다.
태그 생성 폼을 보여주는 블로그에 태그 폼.html 템플릿에서도 레이아웃을 구현하고요.
태그 폼 내용은 블로그에 _ 태그 폼.html 템플릿으로 나눠 구현하겠습니다.
블로그 앱에 태그 모델 클래스는 이미 있으니 그대로 사용하겠습니다.
태그 폼 폼 클래스는 태그 모델에 대해서 네임 필드에 대한 모델 폼으로 정의합니다.
태그 리스트 뷰와 태그 뉴 뷰를 기본 구성으로 구현합니다.
태그 리스트 뷰는 태그 모델에 대한 쿼리셋을 구성하고 검색어가 있다면 네임 필드에 대해 대소문자 구별 없이 포함된 태그만 줘야 합니다.
그리고 템플릿은 블로그의 태그 리스트.html 템플릿을 사용합니다.
태그 뉴 뷰는 태그 폼, 모델 폼을 사용하는 일반적인 뷰 구성으로 구현하고요.
템플릿 파일은 블로그의 태그 폼.html 템플릿을 사용합니다.
각 뷰에 대한 유화될 패턴도 등록하고요.
블로그의 템플릿의 블로그의 태그 리스트.html 경로의 템플릿 파일을 생성합니다.
블로그의 템플릿의 블로그의 base.html 경로의 부모 템플릿 파일도 생성하고요.
HTML 버전이 1.9.8로 되어 있는데 1.9.10으로 고치겠습니다.
2024년 3월 기준으로 최신 버전입니다.
태그 리스트 점 HTML 템플릿에서는 레이아웃만 구성하고요.
컨텐츠 부분은 _ 태그 리스트 점 HTML 템플릿으로 구현합니다.
언더바 태그 리스트 점 HTML 템플릿에서는 인클루드된 템플릿의 모든 컨텍스트 데이터를 그대로 사용할 수 있습니다.
그러니 태그 리스트 값도 참조할 수 있어요.
태그 뉴 뷰에서는 템플릿 경로를 render 함수에 직접 지정하지 않고 별도 변수에 지정되어 있으니 PyCharm에서 템플릿 자동 생성 기능을 제공해 주진 않네요.
해당 경로에 수동으로 템플릿 파일을 생성해 주겠습니다.
템플릿 경로를 별도 변수로 뺀 이유는 이후 HTML 요청 여부에 따라 응답으로 사용할 템플릿 파일을 다르게 지정하기 위함입니다.
태그 폼점 HTML 템플릿에서는 레이아웃만 구성하고요.
컨텐츠 부분은 언더바 태그 폼점 HTML 템플릿으로 구현합니다.
개발 서버 구동을 확인하시고 블로그의 태그스 주소에 방문하시면 이렇게 태그 목록이 보이고 새 태그 페이지에서 새로운 태그도 생성하실 수 있습니다.