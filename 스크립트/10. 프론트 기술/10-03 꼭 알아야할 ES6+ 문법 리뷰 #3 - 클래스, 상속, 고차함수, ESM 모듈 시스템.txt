자바스크립트의 클래스 문법은 기존의 프로토타입 기반 상속을 보다 쉽게 사용할 수 있도록 만들어진 문법 설탕입니다.
클래스 문법은 클래스 기반 언어에 전통적인 상속 모델을 모방하도록 설계되었지만, 내부적으로 프로토타입 기반의 코드로 변환됩니다.
두 펄슨 코드의 동작은 동일합니다.
앞선 코드에서 프로토타입과 클래스 코드에서 큰 차이가 느껴지지 않을 수 있지만 상속 코드를 보시면 가독성 측면에서 큰 차이가 있습니다.
익스텐지 키워드를 사용하여 클래스 간 상속을 선언하고 슈퍼 호출을 통해 부모 클래스의 생성자에 접근합니다.
메서드 오벌라이딩도 간단하게 구현할 수 있습니다.
프로토타입 버전에서는 상속 코드가 아주 난해합니다.
우리는 클래스 버전으로 코드를 작성하지만 자바스크립트 내부에서는 이와 같이 프로토타입 버전으로 변경되어 동작합니다.
가독성 측면에서의 큰 차이는 클래스 문법이 더 선언적이고 상속 및 인스턴스 생성 과정이 명확하게 표현되기 때문입니다.
클래스 문법은 파이썬을 비롯한 다른 객체 지향 언어의 클래스와 유사하여 다른 언어의 경험이 있는 개발자들에게 더 익숙할 수 있습니다.
고차함수는 다른 함수를 인자로 받거나 반환값으로 함수를 반환하는 함수를 말합니다.
Base-10 함수는 wrap 함수를 반환값으로 반환하기에 고차함수입니다.
파이썬에서도 고차함수를 지원하고요.
고차함수의 예로써 장식자가 있습니다.
고차함수 Base-10 함수는 이렇게 장식자로써 활용될 수 있고요.
base-10 장식자로 wrapping한 mysum 함수는 인자 1, 인자 2를 받으면 13을 반환합니다.
위 자바스크립트 예시 코드에서도 Python 코드와 함수 문법만 약간 다를 뿐 동작은 동일합니다. 
베이스 언더바 10 함수가 이렇게 정의되어 있고요.
중첩된 함수, 베이스 10 함수가 있습니다.
베이스 10 함수 내에서 생성되는 랩 함수를 이렇게 화살 함수로 변경하실 수 있고요.
랩 객체를 생성하자마자 반환을 하니 랩 변수의 할당 없이 즉시 반환토록 변경해 볼 수 있죠. 
랩 함수는 인자로 받은 값을 표현식으로 그대로 반환을 하니 중관로를 생략해 보실 수 있겠고요. 
베이스 10 함수를 화살함수로 이렇게 변경하고요.
베이스 10 함수로 인자로 받은 값을 표현식으로 그대로 반환을 하니 중관로를 생략해 보실 수 있겠습니다.
1단계의 베이스 10 함수와 6단계의 베이스 10 함수는 같은 동작을 하는 함수입니다.
6단계 코드만 보시면 이 함수의 동작을 이해하시기 힘드실 수 있지만 1단계 코드로 바꿔보시면 이해하시기 용이하실 겁니다.
함수가 중첩될수록 화살 함수는 더욱 깊어지겠죠.
React에서는 Redux 구현에서 6단계와 같은 패턴들의 코드들이 자주 보입니다.
웹브라우저 환경에서는 스크립트 태그를 사용하여 그 웹 페이지에 사용되는 모든 JavaScript 파일들에 대해서 일일이 HTML 문서에 추가하고 의존 관계를 맞춰줘야 했습니다.
각각의 스크립트 파일은 글로벌 전역 스코프에 변수와 함수를 추가해서 서로 간에 의존을 했었는데요.
mass.js 파일이 app.javascript 파일보다 항상 먼저 로딩 되어야 하는데 앱.javascript 파일을 먼저 로딩하면 함수를 찾을 수 없어 오류가 발생하게 됩니다.
즉, 로딩 순서에 따라 실행 결과가 달라질 수 있었고, 램스페이스 충돌의 위험이 있는 등 많은 제약이 있었습니다.
ECMAScript 모듈, 줄여서 ESM 시스템은 모듈 내 모든 변수 함수들이 글로벌 전역 공간을 오염시키는 것이 아니라, Export문을 사용하여 모듈에서 공개하고자 하는 특정 함수나 변수를 선택적으로 내보낼 수 있고요.
반대로 import문은 필요한 기능들만 다른 모듈로부터 불러와 사용할 수 있습니다.
객체 비구조화 문법으로 필요한 대상만 선택적으로 import합니다.
ECMA script 모듈을 사용하기 위해서는 HTML 문서 내에 script 태그에 type 모듈 속성을 추가하고요.
각 파일명 확장자는 mjs로 합니다.
ECMA script 모듈의 장점 중 하나는 script의 loading 순서를 개발자가 일일이 관리할 필요가 없다는 것입니다.
script-type 모듈로 지정된 파일이 모듈의 진입점 역할을 하며 해당 모듈이 참조하는 모든 의존성들은 브라우저가 자동으로 관리하고 적절한 순서로 로딩합니다.