여러 소셜미디어에 자주 사용되는 목록 페이지에서의 무한 스크롤을 HTMX를 통해 구현해 보겠습니다. 
페이징 지원을 위해 태그 를 를 변경합니다.
새로 고친 버튼에는 현재 페이지 번호에 맞게 HTMX 요청이 이루어지도록 hxget 속성의 주소에 페이지 인자를 추가해 주겠습니다.
페이지 인자를 추가하지 않으면 웹페이지는 3페이지를 보고 있을 때 새로고침에서는 페이지 지정이 없으니 항상 1페이지를 요청하게 되겠죠.
페이지 번호 렌더링은 Django Bootstrap 5 라이브러리에 bootstep__pagination 템플릿 태그를 활용하겠습니다.
실습해 볼게요.
리스트 뷰 클래스를 상속받은 태그 리스트 뷰 클래스를 정의하고 이를 통해 태그 리스트 함수를 생성합니다.
태그 리스트 함수에서 구현한 내용을 태그 리스트 뷰 클래스에도 적용해 주겠습니다.
모델과 코디셋 설정을 적용하고요.
검색어 처리를 위해 매 요청마다 코디셋을 다르게 지정해야 하니 getCodicet 메서드를 재정의해서 적용합니다.
그리고 매 요청마다 템플릿을 다르게 지정해줘야 하니 getTemplateNames 메서드를 재정의하고요.
getTemplateNames 메서드는 사용할 템플릿 경로명 list를 반환해야만 합니다.
list가 아닌 문자열을 반환해도 동작하도록 Django 내부에서 구현되어 있긴 합니다.
태그 리스트 함수 기반 뷰 구현은 제거하고요.
페이지 새로고침하시면 종전대로 잘 동작합니다.
페이징 지원을 위해 페이지네이트바이 설정을 추가합니다.
저는 태그가 현재 8개뿐이니까 5를 지정해서 2페이지 이상 나오도록 하겠습니다.
5를 지정하니까 이렇게 5개만 출력되죠?
블로그에 태그리스트.html 템플릿에 페이지링크도 추가해줍니다.
부트스트랩 원더바 페이지네이션 템플릿 태그를 활용하고요.
페이지 오브젝트 인자를 안 넘겼었네요.
추가해주고요.
새로고침하시면 페이지 링크도 잘 출력됩니다.
이 페이지에서 새로고침 버튼 클릭해보면 1페이지 내용으로 새로고침이 되고 있습니다.
새로고침 버튼에 hxget 속성에 지정된 주소에 현재 페이지 번호를 추가합니다.
그럼 이렇게 현재 페이지 번호에 맞게 새로고침 시에도 페이지 번호가 지정되어 페이지에 맞게 새로고침이 됨을 확인하실 수 있습니다.
현재 태그 개수가 몇 개 없잖아요
79개의 태그를 미리 만들어 놨습니다
이 태그 목록을 로딩해서 데이터베이스에 없는 태그만 생성해주는 로드 블로그 태그스 관리 명령을 수행하여 태그 개수를 조금 늘려 보겠습니다
블로그 앱에 로드 블로그 태그스 명령을 추가해 줍니다
슬라이드에 안내해 드린 소스 코드를 복사해서 그대로 적용하겠습니다
링크의 텍스트 파일은 한 줄에 하나씩 생성할 태그명이 지정되어 있습니다
파이썬 manage.py 로드 블로그 태그쓰 명령을 실행하면 현재 데이터베이스에 없는 태그들만 생성해줍니다. 
저는 78개가 생성되었네요.
페이지 새로고침하시면 새롭게 등록된 태그들이 보여지고요.
지금은 태그가 많으니 한 페이지에 10개씩 보여지도록 태그 리스트 뷰 설정도 변경해줍니다.
무한 스크롤을 구현할 때 다음 페이지 로딩을 트리거하는 방법이 두 가지가 있습니다
그 중 첫 번째가 다음 페이지를 로딩하는 버튼을 목록 끝에 두어 그 버튼을 클릭하면 다음 페이지를 이어 로딩하는 방식이고요 클릭 투 로드 패턴이라고 부릅니다
두 번째가 스크롤이 목록 끝에 도달하면 자동으로 다음 페이지를 로딩하는 방식입니다.
무한 스크롤 패턴이라고 부릅니다.
첫 번째, 클릭 투 로드 패턴입니다.
underbar-taglist.html 템플릿에서 각 태그들을 렌더링할 때, 방법문에서 마지막 태그이고, 다음 페이지가 있을 때 다음 버튼을 추가해 줍니다.
다음 버튼을 클릭하면 HTMX를 통해 다음 페이지를 요청하고 다음 페이지 내용으로 이 다음 버튼 요소를 대체하겠습니다.
여러 페이지가 하나의 리스트 그룹으로 보여지기 위해 underscore 태그 리스트 점 HTML 템플릿에서는 태그 리스트 그룹을 제거하고요.
부모 템플릿에 리스트 그룹을 추가합니다.
실습해 볼게요.
블로그의 태그 리스트 점 HTML 템플릿에서 페이지 링크를 제거하고요.
블로그의 언더바 태그 리스트 점 HTML 템플릿에서 태그 목록 렌더링에서 마지막 태그이고 현재 페이징에서 다음 페이지가 있을 경우 다음 버튼을 추가해 줍니다.
이 다음 버튼을 클릭하면 다음 페이지를 서버로 요청하고요.
여러 번 클릭 되더라도 한 번만 요청을 수행하고요.
서버 응답을 받으면 다음 버튼 요소를 제거하고 다음 버튼 위치에 응답을 적용합니다.
페이지 새로고침 하시고요.
다음 버튼을 클릭하시면 다음 페이지 내용이 추가됩니다.
그런데 다음 페이지의 최상단의 모서리에 굴곡이 있죠?
블라우저 개발자 도구로 살펴보시면 기존 1페이지의 리스트 그룹 안에 2페이지의 리스트 그룹이 추가로 생성되어서 그렇습니다.
여러 페이지가 하나의 리스트 그룹으로 보여지는 것이 UI 상으로 깔끔할 것입니다.
블로그에 underscore 태그 리스트 점 html 템플릿에서 리스트 그룹을 제거합니다.
그러면 태그 목록에 대한 htmx 응답에서도 리스트 그룹 없이 태그 목록 응답이 있을 것입니다. 
리스트 그룹은 블로그에 태그 리스트 점 html에 적용합니다.
그리고 새로 고친 버튼 클릭 시에도 리스트 그룹에 응답이 적용되도록 hx target 속성도 수정해 줍니다.
페이지 새로고침하시고 다음 버튼 클릭해보시면 이제 하나의 리스트 그룹 안에 여러 페이지의 태그 목록들이 잘 렌더링됨을 확인하실 수 있습니다.
마지막 페이지까지 가시면 다음 버튼이 더 이상 없죠?
마지막 페이지에서 페이지 끝입니다 라고 보여주실 수도 있습니다.
블로그에 언더바 태그 리스트 점 HTML 템플릿에서 두 개의 if 조건을 나눠 지정합니다.
다음 페이지가 없을 때에 대한 조건도 추가합니다.
페이지 새로고침하시고 다시 확인해 보시면 페이지 끝에 도달하면 이렇게 페이지 끝입니다 라고 표시됩니다 

이번에는 무한 스크롤을 구현해 보겠습니다 
클릭을 통한 로드 패턴에서 버튼에 HX 트리거만 클릭해서 리빌드로 변경해 주시면 됩니다
그 버튼이 화면에 보여질 때 자동으로 HTMX 요청이 전달되어 다음 페이지가 로딩됩니다
실습해 볼게요
버튼은 더 이상 클릭을 받지 않을 테니 active 속성을 제거하여 파란색 스타일을 제거합니다.
HX 트리거 속성에서 클릭을 리빌드로 변경합니다.
페이지 새로고침해 보시면 2페이지는 로딩이 되는데 3페이지는 로딩이 안 되네요.
HX 트리거의 온수 설정 때문입니다.
온수 설정을 제거하고요.
페이지 새로고침하시고 스크롤해 보시면 이제 다음 텍스트가 화면에 보이실 때마다 다음 페이지 로딩을 시도합니다.
텍스트는 다음이 아니라 로딩 중입니다으로 보여주는 것이 좀 더 적절하겠네요.



1. 페이징 지원 설정
목표: 무한 스크롤 목록을 위해 HTMX와 Django를 사용하여 페이지별로 데이터를 로드.
설정:
새로 고침 버튼에 hx-get 속성을 추가하여 페이지 인자를 전달.
페이지네이션 표시를 위해 Django Bootstrap 5의 bootstrap_pagination 템플릿 태그 활용.
paginate_by 설정으로 한 페이지에 표시할 항목 수 지정.
확인: 페이지 번호에 맞게 새로 고침 시 페이지 번호가 올바르게 지정됨을 확인.
2. 태그 리스트 뷰 클래스 정의
목표: 태그 목록 페이지를 클래스로 구현.
설정:
TagListView 클래스 생성 후 기존 함수 기반 태그 리스트 뷰를 대체.
get_queryset 메서드를 재정의해 검색어에 따라 다른 queryset을 반환.
get_template_names 메서드 재정의하여 템플릿 경로 반환.
확인: 페이지 새로고침 시 기존 태그 리스트가 정상적으로 표시되는지 확인.
3. 태그 데이터 추가
목표: 태그 수를 늘려 여러 페이지로 구성.
설정:
load_blog_tags 커맨드를 생성하여 태그 데이터를 추가.
python manage.py load_blog_tags 명령어로 데이터베이스에 없는 태그만 생성.
페이지에 10개의 태그가 표시되도록 paginate_by 변경.
확인: 새로고침 시 다수의 태그가 여러 페이지로 나뉘어 표시되는지 확인.
4. 클릭 투 로드 패턴 구현
목표: 목록 끝에 '다음' 버튼을 추가해 클릭 시 다음 페이지를 로딩.
설정:
underbar_tag_list.html 템플릿에서 for 문으로 각 태그 렌더링 후 마지막 태그에 '다음' 버튼 추가.
hx-get으로 다음 페이지 요청을 하고 버튼을 대체.
확인: 다음 버튼 클릭 시, 다음 페이지의 태그 목록이 이어서 로딩되는지 확인.
5. 하나의 리스트 그룹으로 통합
목표: 여러 페이지의 태그가 하나의 리스트 그룹으로 표시되도록 설정.
설정:
underbar_tag_list.html 템플릿에서 리스트 그룹 제거.
리스트 그룹은 tag_list.html 부모 템플릿에 추가하고, hx-target 수정.
확인: 하나의 리스트 그룹 안에 여러 페이지의 태그 목록이 표시됨을 확인.
6. 마지막 페이지 처리
목표: 마지막 페이지 도달 시 ‘페이지 끝입니다’ 메시지 표시.
설정:
underbar_tag_list.html 템플릿에서 if 조건으로 다음 페이지가 없을 때 메시지 추가.
확인: 마지막 페이지에 도달하면 ‘페이지 끝입니다’ 메시지가 표시되는지 확인.
7. 무한 스크롤 패턴 구현
목표: ‘다음’ 버튼이 화면에 보일 때 자동으로 다음 페이지 로딩.
설정:
버튼의 hx-trigger 속성을 revealed로 변경하고 active 속성 제거.
hx-trigger에 대한 once 설정 제거.
텍스트를 '로딩 중입니다'로 변경.
확인: 스크롤할 때마다 다음 페이지가 자동으로 로딩되며 '로딩 중입니다' 메시지가 표시되는지 확인.