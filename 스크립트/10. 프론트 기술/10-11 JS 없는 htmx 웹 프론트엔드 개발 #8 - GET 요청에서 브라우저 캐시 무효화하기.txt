브라우저에서는 GET 요청에 대해서 웹브라우저 단에서 캐싱을 수행합니다.
웹브라우저 단에서 같은 주소로 요청했을 때 서버에서는 다른 내용으로 응답을 줄 준비가
되었음에도 이전 내용으로 응답을 보여주는 경우가 종종 있습니다.
매번 다른 내용을 보여줘야 하는 페이지인데 캐싱이 된다면 유저도 당황스럽겠죠?
서버 측에서 응답 헤더에 캐시 제어 지시어를 설정하여 브라우저 캐싱을 조절할 수 있지만 더
간편한 방법은 요청 URL 자체를 매번 달리하는 것입니다.
브라우저는 URL을 기준으로 캐싱하므로 동일한 리소스에 대해서도 URL이 다르면 새로운
요청으로 인식하여 캐시를 무시하고 서버로 요청을 전달합니다.
이 기법은 검색 UI에서 자주 사용됩니다.
검색어는 동일하더라도 검색 시점에 따라 결과가 달라질 수 있으므로 검색 요청 URL에 현재
시각의 타임스탬프를 query 파라미터로 추가합니다.
타임스탬프는 초단위 또는 밀리 초단위로 계속 변화하므로 URL이 계속 바뀌어 브라우저
캐싱을 우회할 수 있습니다.
멜론 사이트의 상단 검색창에서 검색어를 입력해 보시면 매 글자 입력 시마다 검색 요청이
전송되고요. 요청 URL에는 언더바 이름의 타임스탬프 파라미터가 포함됨을 확인할 수
있습니다.
HTMX를 통한 GET 요청에서도 필요하다면 GET 요청 시에 Query 파라미터로 현재
시각의 타임스탬프가 자동으로 추가되도록 하고 싶은데요.
HTMX 기본 기능에서는 제공하지 않고요.
HTMX에서 제공하는 ConfigureRequest 이벤트가 있습니다.
이 이벤트는 HTMX 요청이 발생되기 전에 요청 설정을 생성할 때 발생됩니다.
HTMX의 ConfigureRequest 이벤트에 대한 이벤트 리스너를 통해서 Custom
Query 파라미터를 추가할 수 있습니다.
모든 htmx GET 요청에 대해서 Query 파라메터를 추가하는 것은 적절하지 않겠고요.
커스텀 속성으로 hxGetWithTimeStamp를 추가하면, htmx의
configRequestEventListener에서 hxGet 속성과
hxGetWithTimeStamp 속성이 같이 추가되었을 때, 현재 시각에 타임스탬프의
쿼리 파라메터를 추가하도록 이렇게 구성해 볼 수 있습니다.
HTMX 엘리멘터는 HTMX 요청이 발생하는 요소이고요.
그 요소에서 HX GET 속성도 있고, HX GET WITH TIMESTAMP 속성이 포함된
경우에만 현재 시각에 타임스탬프 쿼리 파라메터를 추가합니다.
Query 파라메터 이름은 hxGetWithTimeStamp 속성으로 지정할 수 있는데요.
이처럼 이름이 지정되어 있지 않으면 default로 underbar 이름을 씁니다.
이벤트 객체의 detail.parameters 속성에 Query 파라메터를 지정하시면 구현
끝입니다. 블로그의 태그 리스트 점 HTML 템플릿에서 태그 목록을 조회하는 부분과 태그
폼을 요청하는 부분의 타임스탬프, 쿼리 파라메터를 적용해 볼 수 있겠습니다.
Configure 리퀘스트 이벤트 핸들러는 HTMX를 사용하는 모든 페이지에 적용되면 좋습니다.
그러니 최상위 부모 템플릿인 블로그의 Base 점 HTML 템플릿에 이벤트 핸들러를
추가합니다. 새로 고친 버튼에 HxGetWith 타임스탬프 속성을 값 지정 없이 추가하시고
페이지 새로고침 후에 새로고침 버튼을 클릭해 보시면 이렇게 요청 URL에 underbar 이름의
타임스탬프, 쿼리 파라메타가 전달됨을 확인하실 수 있습니다.
새로고침 버튼을 클릭할 때마다 타임스탬프 값이 매번 달라지죠?
현재 타임스탬프 값은 초 단위가 아니라 밀리세컨드 단위로 지정되어 있습니다.
인자명을 타임스탬프로 변경해 보시면 이렇게 지정된 인자명으로 요청이 잘 전달됩니다.
태그 생성폼 요청에도 동일하게 적용해 봅니다.
페이지 새로고침해 보시면 이렇게 타임스탬프가 포함된 요청이 전달됨을 확인하실 수 있습니다.