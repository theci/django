웹 페이지를 새로 고침하는 방법은 두 가지가 있습니다.
첫 번째는 HTML에 태그를 이용하는 것입니다.
태그의 href 속성에 빈 주소를 할당하여 링크를 생성합니다.
웹에서 빈 주소는 현재 페이지를 가리키는 상대 경로로 해석되므로 이 링크를 클릭하면
페이지가 새로 고침됩니다.
두 번째 방법은 자바스크립트를 활용하는 것입니다.
웹페이지에 ClickEvent Listener를 추가하고, 이 리스너 내에서 자바스크립트에
location.reload() 함수를 호출하여 페이지를 새로고침합니다.
웹페이지 새로고침은 간단한 방법으로 최신 데이터를 조회할 수 있기에 자주 사용됩니다.
하지만 한 페이지에 다양한 종류의 데이터를 조회한 경우, 페이지 새로고침으로 인해 페이지
내 전체 데이터를 다시 로드해야 하는 상황이 발생합니다.
페이지 새로고침 없이 태그 목록만 새로고침 기능을 HTMX를 활용하여 구현해 보겠습니다.
블로그에 태그 리스트 점 HTML 템플릿에 새로고침 버튼을 추가하고요.
태그 목록 주소로 GET 요청을 보낼 것이고요.
그 응답을 아래 태그 리스트 컨테이너 요소의 innerHTML로 반영합니다.
트랜지션 효과도 적용하고요.
새로고침 버튼을 추가합니다.
목록 페이지에 GET 요청을 보내어 목록이 담긴 HTML을 받아오겠고요.
응답 HTML은 ID가 태그 리스트 컨테이너인 요소에 반영하겠습니다.
새로고침을 클릭해 보시면 동작은 하는데 이렇게 레이아웃이 이중으로 구성되네요.
대상 요소의 innerHTML 속성에 응답을 반영하고 트랜지션 효과도 추가해 줍니다.
새로고침 버튼을 클릭해 보시면 동작은 하는데 태그 목록 레이아웃이 이중으로 적용됨을
확인하실 수 있습니다.
HTML을 통한 요청에서 웹 페이지 전체 레이아웃 HTML을 받았기 때문이에요.
현 상황에서 태그 목록 페이지에 HTML 요청이 들어가면 레이아웃 없이 컨텐츠로만
응답하도록 이렇게 구성해 보실 수 있습니다.
그럼 새로고침을 하면 이중 레이아웃 없이 태그목록 컨텐츠 부분만 새로고침이 됩니다.
블로그의 태그리스트.html 템플릿에서는 태그목록 컨텐츠를 블로그의 underbar
태그리스트.html 템플릿을 통해 렌더링하고 있습니다.
태그 언더바 리스트 뷰에서 현재 요청이 htmx 요청인지를 hx request 헤더 값이
소문자 true 인지를 검사하여 확인합니다.
htmx 요청일 경우에는 레이아웃 없이 컨텐츠만 응답하기 위해 블로그에 underbar 태그 리스트
점 html 템플릿을 통해서 응답하구요.
htmx 요청이 아닐 경우에는 레이아웃과 함께 컨텐츠를 같이 응답하기 위해 블로그에 태그
리스트 점 html 템플릿을 통해 응답합니다.
새로고침 버튼을 클릭해도 데이터의 변화가 없기에 새로고침이 잘 되는지 인지가 잘 안
되는데요. 브라우저 새 탭에서 새 태그를 생성하시고 지금 탭으로 오셔서 새로고침을 해보시면
이중 레이아웃 없이 새로고침이 잘 됨을 확인하실 수 있습니다.
그런데 HTMX 요청 여부를 확인하기 위해 매번 이렇게 긴 코드를 작성하는 것이
번거롭잖아요?
Django HTMX 라이브러리를 활용하면 Custom Middleware를 통해
Request 요청 객체에 HTMX 속성을 추가해 줍니다.
Request의 HTMX 속성에 대해서 불리한 판정을 하면 HTMX 요청 여부를 알 수
있습니다.
Django HTMX 라이브러리 설치에 대해서는 바로 이어서 살펴보겠습니다.
장고 HTMX 라이브러리를 사용하면 HTMX 요청 헤더 식별을 리퀘스트의 HTMX 속성을
통해 편리하게 확인하실 수 있고요.
HTMX에 필요한 응답 생성을 도와주는 다양한 HTTP 리스펀스 클래스를 지원해 줍니다.
Django에서 htmx 사용을 위한 필수 라이브러리니까 꼭 사용하세요.
설치법은 간단합니다.
Django htmx 라이브러리를 설치하시고, Settings에 Installed Apps
List에 Django__htmx 앱 이름을 추가하고요.
마지막으로 Middleware 설정에 htmx Middleware를 추가하면 끝입니다.
htmx Middleware를 통해 Request 요청 객체에 htmx 속성이 추가됩니다.
htmx 속성은 HTML Details 클래스의 인스턴스이고요.
hx-request, hx-boosted, hx-currenturl, hx-prompt,
hx-target, hx-trigger 등의 htmx 관련 헤더들을 파이썬 속성으로
간결하게 참조할 수 있도록 도와줍니다.
htmx에서는 서버 응답을 통해 클라이언트로 커스텀 이벤트를 전달할 수 있고요.
웹페이지 새로고침을 요청할 수도 있습니다.
이를 위해 응답 헤더를 직접 조작해야 하는데요.
Django HTMX에서는 CustomHttpResponse 클래스를 통해 이러한 응답
헤더 조작을 손쉽게 처리할 수 있도록 도와줍니다.
Django HTMX GitHub 저장소이고요.
Django HTMX 공식 문서가 있고, 설치 문서를 열어보겠습니다.
Django HTMX 라이브러리를 설치하고요.
최신 버전인 1.17.3 버전을 설치합니다.
Settings의 Installed Apps 리스트에는 Django_htmx 앱
이름을 추가하고요.
Settings의 Middleware 리스트에 HTMX Middleware 클래스를
추가합니다.
HTMX 미들웨어 코드를 보시면 미들웨어에서 뷰에 앞서 요청을 처리할 때 Request
요청 객체의 htmx 속성을 htmlDetails 클래스의 인스턴스로 생성함을 확인하실 수
있습니다.
__full 메서드는 파이썬 객체의 분리형 값을 결정할 때 자동 호출됩니다.
내부 구현을 보시면 요청 헤더에 hxRequest 헤더의 값이 소문자 true 인지를
확인하고 있죠.
그러니 if 조건에 request 객체에 htmx 객체를 쓰는 것만으로 이 불리한 메서드가
호출되고 htmx 요청 여부를 확인할 수 있는 것입니다.
htmx 요청 여부를 이렇게 불리언 값으로 직접 변환하여 확인하실 수도 있고요.
if 조건전에 직접 적용하셔도 됩니다.



웹 페이지 새로 고침 및 HTMX를 통한 부분 새로 고침 구현
1. 웹 페이지 새로 고침 방법
HTML 링크를 이용한 새로 고침:

<a href="#">새로 고침</a>와 같은 빈 주소 링크를 클릭하면 현재 페이지를 새로 고침합니다. 웹 브라우저는 빈 주소를 현재 페이지로 해석하여 새로 고침을 수행합니다.
자바스크립트의 location.reload() 사용:

addEventListener로 클릭 이벤트를 처리하고, location.reload() 함수를 호출하여 페이지를 새로 고침할 수 있습니다.
2. 부분 새로 고침을 위한 HTMX 사용
HTMX의 역할:

HTMX는 전체 페이지를 새로 고침하는 대신 특정 부분만 새로 고침하도록 도와줍니다. 이를 통해 페이지 전체를 다시 로드하는 비용을 줄이고, 더 나은 사용자 경험을 제공합니다.
HTMX로 태그 목록만 새로 고침:

태그 목록을 담고 있는 div나 section 요소에 HTMX를 활용하여 특정 부분만 새로 고침하도록 설정합니다.
예를 들어, 새로 고침 버튼을 클릭하면 hx-get을 사용해 태그 목록을 새로 불러오고, 해당 응답을 innerHTML로 삽입합니다.
3. 문제 해결 (레이아웃 이중 문제)
이중 레이아웃 문제:

전체 페이지를 요청하여 응답을 받은 후 innerHTML로 삽입하면, 레이아웃 HTML도 함께 포함되어 이중 레이아웃이 발생할 수 있습니다.
이를 해결하기 위해, HTMX 요청 시 레이아웃 없이 콘텐츠만 반환하도록 서버에서 응답을 구성합니다.
서버 측 처리:

HTMX 요청 여부를 확인하여, 요청이 HTMX에 의한 것이라면 레이아웃 없이 콘텐츠만 응답하도록 합니다. 이를 위해 hx-request 헤더 값을 확인합니다.
htmx 요청이 아닌 경우에는 전체 페이지를 응답하고, HTMX 요청인 경우에는 underbar-taglist.html 같은 레이아웃 없는 콘텐츠만 응답합니다.
4. Django HTMX 라이브러리 사용
Django HTMX 설치:

Django HTMX 라이브러리를 설치하여 HTMX 요청을 쉽게 처리할 수 있습니다. 설치 후 settings.py에 django_htmx 앱과 HTMX Middleware를 추가합니다.
이 미들웨어는 요청 객체에 htmx 속성을 추가하여, HTMX 요청 여부를 간편하게 확인할 수 있도록 도와줍니다.
HTMX 미들웨어와 HTMX 속성:

미들웨어가 요청을 처리할 때 htmx 객체를 Request 객체에 추가합니다. 이 객체는 HTMX와 관련된 다양한 요청 헤더들(hx-request, hx-boosted, 등)을 파이썬 객체로 간편하게 접근할 수 있게 합니다.
HTMX 요청 여부는 request.htmx로 확인할 수 있습니다. request.htmx가 True이면 HTMX 요청이고, False이면 일반 HTTP 요청입니다.
5. 응답 처리
HTMX 응답 처리:
HTMX 응답을 처리할 때, HTMX 요청이라면 CustomHttpResponse 클래스를 사용하여 커스텀 HTTP 응답을 보내고, HTML 콘텐츠만 반환할 수 있습니다.
이 방법은 페이지 새로 고침 없이 필요한 부분만 로드하여, 효율적인 데이터 갱신을 가능하게 합니다.
6. HTMX로 페이지 새로 고침 및 데이터 갱신
새로 고침 버튼:

새로 고침 버튼을 클릭하면 HTMX 요청을 통해 태그 목록을 새로 로드하고, 응답받은 HTML을 innerHTML로 삽입하여 페이지 일부만 갱신합니다.
이때, 레이아웃이 이중으로 적용되는 문제를 방지하기 위해 서버에서 레이아웃 없이 콘텐츠만 반환하도록 설정합니다.
HTMX를 통한 부분 업데이트:

페이지 전체를 새로 고침하는 대신, HTMX를 활용하여 페이지의 일부만 새로 고침하여 데이터를 갱신할 수 있습니다. 이 방식은 성능을 향상시키고 사용자가 보다 빠르게 업데이트된 정보를 확인할 수 있게 합니다.
결론
HTMX를 활용한 부분 새로 고침은 페이지 새로 고침 없이 필요한 부분만 갱신할 수 있게 해줍니다.
Django HTMX 라이브러리는 HTMX 요청을 간편하게 처리하고, 요청에 따라 레이아웃 없이 콘텐츠만 반환할 수 있게 도와줍니다.
이 접근법은 데이터가 많은 페이지나 자주 변경되는 데이터를 다룰 때, 성능과 사용자 경험을 개선하는 데 유용합니다.