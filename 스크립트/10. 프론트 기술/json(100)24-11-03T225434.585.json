안녕하세요 이번 시간에는 Django 기본 기능으로 UI 컴포넌트를 만들어 보고
Django Con 라이브러리를 통해 UI 컴포넌트 개발을 개선해 보겠습니다
웹페이지에서 modal form을 구현하려면 일반적으로 이렇게 HTML 코드와
JavaScript 코드를 매번 작성해야 하죠 재사용성을 위해 별도의 Django 템플릿
코드로 정의하고 include 템플릿 태그를 사용하더라도 관련된 HTML, CSS,
JavaScript 코드가 분산되어 있어 유지보수가 어려울 수 있습니다
게다가 include 문법에서는 with를 통해 값만 전달할 수 있을 뿐 템플릿 태그를
통한 값 전달은 어렵습니다
모달폼 구현이 필요할 때 이렇게 컴포넌트 선언만으로 내부 구현을 신경 쓰지 않고 간결하게
사용할 수 있다면 얼마나 편리할까요?
웹페이지에서 모델폼의 내부 구현을 매번 뜯어볼 필요는 없잖아요
그냥 사용하면 되는 거죠
UI 컴포넌트는 React 또는 Vue와 같은 프론트엔드 라이브러리를 통해서만 가능하다고
오해하시는 분들이 많습니다
그래서 컴포넌트를 위해 React를 쓰고 React를 쓰기 위해 Django의 Form과
View를 멀리하고 Django에서는 API만을 구현해서 썼다면 이는 Django의 높은
생산성을 누리지 못하는 안타까운 상황입니다
UI 컴포넌트는 React와 같은 프론트엔드 라이브러리에서만 구현할 수 있는 것이
아닙니다.
Django 컴포넌트 라이브러리를 활용하여 Django 템플릿 시스템 기반에서 컴포넌트
기반 개발을 지원할 수 있습니다.
Django 템플릿에서 UI 컴포넌트를 선언적으로 정의하고 재사용 가능한 코드를 작성할 수
있습니다. 이는 개발 생산성을 크게 향상시키고 코드의 유지 보수성을 높이는 데 큰 도움이
됩니다 물론 React 기술을 얹어서 React 컴포넌트를 가져와서 같이 사용할 수도 있습니다
장고 기본 템블릿 기능과 스태틱 기능을 활용하여 hello_world 컴포넌트를 만들어
보겠습니다 먼저 컴포넌트를 구현할 컴포넌트 장고 앱을 생성하고요 세팅스의 Installed
Apps List에도 추가합니다
hello_world.html 템플릿에 hello_world 컴포넌트에 HTML 마크업을
구현하고요 컴포넌트만의 유일하리라 생각되는 이름으로 클래스명을 지정합니다
CSS와 JavaScript에서도 이 클래스명으로 참조하여 스타일과 로직을 구현합니다
hello-world.css 파일에는 hello-world 컴포넌트의 스타일을 구현하고요
hello-world.js에는 hello-world 컴포넌트의
JavaScript 코드를 구현합니다
컴포넌트를 활용할 때에는 include 템플릿 태그를 사용해서 컴포넌트 HTML을
include하고요 필요한 인자는 with을 통해 전달하기에 값만 전달할 때에는 충분하지만
다른 템플릿 태그와 함께 사용하기는 어렵습니다
그리고 컴포넌트에서 어떤 인자가 필요하고 디폴트 값이 어떤 값인지를 알아차리기도 어렵습니다
템플릿 코드를 한 땀 한 땀 읽어봐야 하죠
컴포넌트마다 CSS, JavaScript 로딩 태그가 지정되기에 한 페이지 내에서
컴포넌트를 여러 번 사용할 경우 응답에서는 HTML, CSS, JavaScript 코드가
딱 붙어 있고요 컴포넌트 개수만큼 CSS, JavaScript를 로딩하게 됩니다
실습해 볼게요
컴포넌트 관련 기능들을 모아서 구현할 컴포넌트 장고 앱을 생성하고요 Settings의
Installed Apps List에도 등록합니다
뷰 구현은 하지 않을 것이기에 마이 사이트 urls에 include는 하지 않았습니다
컴포넌트는 템플릿 파일과 CSS, JavaScript 파일로 구성됩니다 장고 기본에서 기본
설정으로 템플릿 파일은 app 폴더 밑에 templates 폴더에 저장하고요
css, javascript 파일은 app 폴더 밑에 static 폴더에 저장합니다
템플릿 파일은 Django 내에서만 사용할 뿐 외부에 그 코드가 공개되진 않습니다
템플릿을 통해 렌더링된 문자열만 응답으로 나갈 뿐이고 소스 파일은 외부에 공개되지 않죠
CSS와 JavaScript 파일은 Django 프로젝트 내에서는 저장만 하고 파일 서빙만
할 뿐, Django 내에서 이 CSS, JavaScript 파일을 읽어서 뭔가를 처리하진
않습니다.
브라우저가 읽을 수 있도록 외부에 공개해서 브라우저에 의해서 로딩되어 처리될 뿐인 거죠.
템플릿 시작에서 컴포넌트의 CSS 파일을 로딩하고 템플릿 끝에서 컴포넌트의
JavaScript 파일을 로딩했습니다.
컴포넌트의 클래스명은 컴포넌트 이름을 따라 hello-world 컴포넌트로 지었습니다.
현재 서비스 내에서 이 이름은 아마도 유일할 것입니다.
CSS, JavaScript 파일도 컴포넌트 이름을 딴 클래스에 맞춰 CSS 구현과
JavaScript 구현이 있습니다.
장고 기본 기능만을 활용해서 구현한 hello-world 컴포넌트 구현이 끝났습니다.
이 컴포넌트는 장고 템플릿 문법으로 구현되었으니 include 템플릿 태그를 통해
컴포넌트를 사용하실 수 있습니다.
원하는 횟수만큼 쓰시면 그 횟수만큼 컴포넌트가 렌더링 됩니다.
웹페이지 새로고침 해보시면 템플릿스 디렉토리 내에 새롭게 생성한 컴포넌트 퓨어 폴더를 장고
서버가 모르겠다고 합니다.
컴포넌트 퓨어 폴더는 방금 생성되었고 폴더 생성 이후에 Django 서버가 재시작된 적이
없으니 Django 서버는 이 폴더의 존재를 현재 모르고 있는 상황이네요
이 오류가 뜨시는 분은 Django 서버를 수동으로 재시작해 주시면 Django 서버가
이제 이 폴더의 존재를 인식하게 됩니다
웹페이지 새로 고침하시면 hello-world 컴포넌트가 3개 잘 렌더링됨을 확인하실 수
있습니다
hello-world 컴포넌트의 템플릿 코드를 보시면 태그에 name 값을 노출하고 없다면
default 값으로 익명 문자열을 노출하고 있네요
이렇게 컴포넌트마다 각기 다른 name 인자를 지정해 주시고요
새로고침 하시면 지정된 name 상황에 맞춰 문자열이 잘 렌더링 되고요 각 컴포넌트를
클릭하시면 문자열에 맞춰 알림 메시지도 잘 보여짐을 확인하실 수 있습니다