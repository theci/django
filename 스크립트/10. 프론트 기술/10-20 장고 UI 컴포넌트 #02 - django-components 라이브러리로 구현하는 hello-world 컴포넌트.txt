장고 컴포넌트 라이브러리를 최신 버전으로 설치하겠습니다.
Settings의 Installed Apps List에는 앱 이름인 django-components 이름을 추가합니다.
컴포넌트 구현에서는 하나의 컴포넌트에 하나의 Python 파일, 하나의 HTML 파일, 0개 이상의 CSS 파일, 0개 이상의 JavaScript 파일, 이렇게 4종류가 필요합니다. 
CSS 파일과 JavaScript 파일은 브라우저에 의해 로딩이 되어야 하죠.
그러니 별도 처리 없이 외부에 공개될 테고요.
파이썬 파일과 HTML 파일은 장고 단에서 직접 처리되며 외부에 공개되어서는 안 되는 소스 파일입니다. 
장고 컨퍼런츠 라이브러리에서는 소스 코드의 관리성을 높이기 위해 파이썬 파일, HTML 파일, CSS 파일, JavaScript 파일을 한 디렉토리 경로에 모아서 구현할 수 있도록 지원합니다.
그런데 외부에 퍼블릭하게 공개되는 CSS 파일, JavaScript 파일과 같은 디렉토리에 외부에 공개되어서는 안 되는 Python 파일, HTML 파일이 있죠.
Django의 기본 정적 파일 서빙 기능에서는 컴포넌트의 Python 파일, HTML 파일까지 모두 외부에 공개해 버리는데요.
Python 파일과 HTML 파일은 정적 파일 공개에서 제외하고 서빙이 되도록 Safer Static Files 앱을 사용합니다.
이를 위해 Settings의 Installed Apps List에서 Django 기본의 Static Files 앱은 제거하시고요
Safer Static Files 앱을 등록해 주세요
컴포넌트는 Components 앱 폴더 아래에 src-django-components 폴더의 컴포넌트 별로 폴더를 만들어서 구현하겠습니다
이 디렉토리에 템플릿 파일과 정적 파일이 있으니 템플릿 로더 경로에도 이 디렉토리 경로를 추가하겠고요.
스태틱 로더 경로에도 이 디렉토리 경로를 추가해 줍니다.
Django 컴포넌트 라이브러리를 설치합니다.
현재 최신 버전이 0.52 버전이네요.
앱 등록을 위해 Settings의 Installed Apps List에도 Django underbar Conferences 앱 이름을 추가합니다.
그리고 Django 기본의 Static Files 앱은 등록 해제하시고, Django Underbar Conferences 내에 safe-static-files 앱을 등록해주세요. 
Safe Static Files 코드를 보시면, Static 경로에서 Python 파일, HTML 파일은 무시하도록 설정되어 있습니다.
Safe Static Files를 사용하시면 컴포넌트의 파이썬 코드와 HTML 코드가 외부에 그대로 공개될 일이 없습니다.
컴포넌트 앱 아래에 src-django-conference 폴더의 컴포넌트에서 템플릿 파일과 CSS, JavaScript, Static 파일을 생성할 것입니다.
각 템플릿 로더와 Static 로더가 src-django-conference 경로의 템플릿 파일을 찾을 수 있도록 템플릿의 DIRS 설정에 경로를 추가해 주시고 스태틱 파일들을 찾을 수 있도록 staticfiles.dirs 설정에 경로를 추가해 주세요.
Django 컴포넌트 라이브러리를 활용하여 hello world 컴포넌트를 만들고 활용해 보겠습니다. 
src Django 컴포넌트 폴더의 컴포넌트 폴더로 hello_world 폴더를 생성하고요.
같은 이름으로 Python 파일을 생성합니다.
컴포넌트 클래스 상속받은 Hello World 클래스를 하나 정의하고요.
레지스터 장식자를 통해 컴포넌트 이름과 함께 컴포넌트를 시스템에 등록합니다.
레지스터 장식자에 지정한 이름으로 컴포넌트가 분리어져 사용될 것입니다.
템플릿 네임 속성으로 컴포넌트에서 의존하는 HTML 템플릿 경로를 지정하고요 미디어의 CSS 속성, JS 속성으로 의존하는 CSS, JavaScript 파일 경로를 지정합니다
컴포넌트를 사용할 때 추가로 전달하는 인자를 속성 값이라고 부르겠습니다
컴포넌트 사용 시에 전달하는 속성 값은 컴포넌트 클래스의 getContextData 메서드의 인자로 전달받게 되고요.
반환 값인 사전 객체는 HTML 템플릿의 contextData로 사용됩니다.
컴포넌트의 HTML 템플릿에서는 컴포넌트 이름으로 클래스 이름을 지어 사용하겠습니다.
클래스 이름 끝에 하이픈 컴포넌트를 붙이면 현재 웹 서비스에서 이 클래스명이 다른 클래스명과 겹칠 일은 거의 없을 것입니다.
CSS 파일과 JavaScript 파일도 지정 경로에 추가해 주는데요
앞선 Django 템플릿을 활용한 컴포넌트와 다른 점은 Django 컴포넌트를 활용한 컴포넌트에서는 의존하는 CSS 파일과 JavaScript 파일은 component.css-dependencies 템플릿 태그와 component.js-dependencies 템플릿 태그를 통해 로딩하며 
현 템플릿 내 컴포넌트에서 사용하는 CSS 파일과 JavaScript 파일을 한 대 모아서 페이지당 1회만 로딩한다는 점이 다릅니다.
그러니 자바스크립트 구현에서도 CSS 셀렉터를 지정하실 때 이 자바스크립트 코드는 HTML 코드와 멀리 떨어져 로딩됨을 기억하시고요
같은 클래스명의 요소가 여럿 있음을 인지하시고 도큐먼트의 쿼디 셀렉터 5를 통해 컴포넌트 요소를 모두 탐색해서 로직을 구현해 주세요
템플릿 태그로 지정 이름의 컴포넌트를 사용하실 수 있고요 속성 값도 이렇게 지정하실 수 있습니다 
생성된 HTML 문자열을 확인해 보시면 이렇게 CSS 파일과 JavaScript 파일은 각각 한 번씩만 로딩되고요.
HTML 항목만 컴포넌트를 사용한 횟수만큼 반복되고요.
컴포넌트 속성 값도 잘 전달이 되어 응답이 생성되었음을 확인하실 수 있습니다.
자바스크립트에서는 각 컴포넌트를 클릭하면 지정 네임으로 알러트 알림을 띄우도록 구현했고요.
네임을 Python으로 지정한 컴포넌트를 클릭하면 Hello Python 알림이 뜰 것이고요. 
네임을 지정하지 않은 컴포넌트를 클릭하면 HTML 템플릿에서 구현한 대로 디폴트 값인 익명으로 처리되어 Hello 익명 알림이 뜰 것입니다.

실습해 볼게요.
Django 컴포넌트 라이브러리를 활용하여 Hello, World 컴포넌트를 만들어 보겠습니다. 
src Django 컴포넌트 폴더에 컴포넌트 이름의 폴더와 파이썬 파일을 생성합니다.
Django 컴포넌트 라이브러리에 레지스터 장식자와 컴포넌트 클래스를 임포트합니다.
컴포넌트는 컴포넌트 클래스를 상속하여 구현하고요.
레지스터 장식자를 통해서 지정 클래스의 컴포넌트를 시스템에 등록하고 이름을 부여할 수
있습니다. 컴포넌트 이름은 하이픈으로 구분자를 지정했고요.
그 외 경로에서는 하이픈 대신 언더바를 사용했습니다.
컴포넌트에서는 템플릿 네임 속성으로 의존하는 템플릿 경로를 지정하고요.
미디어 클래스의 CSS, JS 속성으로 의존하는 CSS 파일, JavaScript 파일들의
경로들을 지정합니다.
컴포넌트의 모든 구현은 관리성을 높이기 위해 한 폴더 아래에 모아서 구현합니다.
Settings의 Static Files 설정에 SRC 장고 컴포넌트 경로가 지정되어
있고, 템플릿 설정에도 SRC 장고 컴포넌트 경로가 지정되어 있죠.
그러니 Static Files 경로 지정 시에는 SRC 장고 컴포넌트 폴더의 아래 경로를
지정하시면 Django의 Static Loader가 찾아주고요.
템플릿 경로 지정 시에도 src-django-component 폴더에 아래 경로를
지정하면 Django의 템플릿 로드가 잘 찾아줍니다.
컴포넌트의 템플릿 네임 설정에 src-jango-components 아래 경로를 지정해
줍니다. 그럼 그 설정은 hello-world/hello-world.html이 됩니다.
css 파일은 hello-world 밑에 hello-world.css 경로가 될 것이고요.
자바스크립트 파일은 hello-world 밑에 hello-world.js
경로가 됩니다.
html 구현에서는 일단 간단하게 안녕하세요만 써볼게요.
이렇게 간단하게 hello-world 컴포넌트를 구현했습니다.
블로그에 test.html 템플릿에서 방금 Django 컴포넌트 라이브러리 통해 구현한
hello world 컴포넌트를 사용해 보겠습니다.
component 태그를 로드해 주시고요.
component css dependencies 템플릿 태그를 통해 컴포넌트에서 이제
컴포넌트 템플릿 태그를 통해 Hello World 템플릿을 사용해 봅니다
컴포넌트를 세 번 써봤고요.
페이지 새로 고침하시면 이렇게 Hello World 컴포넌트가 잘 렌더링 되었습니다.
hello_world.html 파일에 세부 구현을 해주겠습니다.
컴포넌트 이름을 따서 Hello World 컴포넌트 클래스명을 지정했고요.
이 클래스명으로 CSS에서 스타일을 더할 것이고, 자바스크립트에서는 필요한 로직을 추가할
것입니다. 앞서 장고 기본 기능으로 구현했던 Hello World 컴포넌트와 클래스명이
겹치죠 그래서 앞서 구현했던 hello world 컴포넌트는 이 템플릿에서 사용하지
않겠습니다
hello_world.css 파일에 hello world 컴포넌트 클래스에 대한 css
파일을 추가해 주고요 hello_world.js 파일에 헬로월드 컴포넌트
클래스 안에 H1 요소에 대한 클릭 이벤트 리스너도 추가해줍니다.
그럼 각 컴포넌트의 H1 요소를 클릭하면 각 내용에 맞게 알림창이 뜹니다.
컴포넌트의 네임 속성 값을 서로 다르게 지정해봅니다.
페이지 새로고침하시면 hello-world.html 템플릿에서 네임 이름의 컨텍스트
데이터를 참조함에도 이 속성 값이 반영이 안 되는데요.
속성 값이 템플릿 컨텍스트 데이터에 즉각 반영되는 것은 아닙니다.
컴포넌트 클래스에서 속성 값을 컨텍스트 데이터로 전달을 해줘야 합니다.
Hello World 컴포넌트 클래스에서 getContextData 메서드를 재정의합니다.
속성 값으로 전달한 값이 getContextData 메서드의 인자로 전달되고요.
이 메서드에 반환 값이 contextData에 반영됩니다.
현재 네임 인자에 디폴트 값이 지정되어 있지 않죠?
필수 속성 값으로 처리될 것이고요.
세 번째 컴포넌트에서 네임 속성 값을 지정하지 않아 현재 타입 에러 예외가 발생했습니다.
네임 속성 값을 옵션으로 처리하시려면 디폴트 값을 지정해 주시면 됩니다.
그럼 Django 컴포넌트를 활용한 Hello World 컴포넌트 구현 끝입니다.


1. Django 컴포넌트 라이브러리 설치
라이브러리 설치: Django 컴포넌트 라이브러리 최신 버전인 0.52를 설치합니다.
settings.py 설정:
INSTALLED_APPS에 django_components를 추가합니다.
기본 Static Files 앱을 제거하고, safer-static-files 앱을 추가하여 보안적으로 안전하게 정적 파일을 서빙합니다.
2. 컴포넌트 구현 구조
컴포넌트 파일 구성:
각 컴포넌트는 하나의 디렉토리 내에서 구성됩니다. (예: hello_world 디렉토리)
디렉토리 내에 Python 파일, HTML 파일, CSS 파일, JavaScript 파일을 포함합니다.
Python 파일:
django_components.Component 클래스를 상속받은 컴포넌트 클래스를 정의합니다.
@register 데코레이터를 사용하여 컴포넌트를 시스템에 등록합니다.
템플릿 이름과 의존하는 CSS 및 JavaScript 파일 경로를 지정합니다.
HTML 파일:
컴포넌트의 HTML 구조를 정의합니다. 여기서는 hello-world.html 파일을 예시로 사용합니다.
CSS 및 JavaScript 파일:
각 컴포넌트의 스타일과 동작을 정의하는 hello-world.css, hello-world.js 파일을 생성합니다.
3. 컴포넌트 사용 방법
템플릿에서 컴포넌트 사용:
component 태그를 사용하여 컴포넌트를 템플릿에서 호출합니다.
컴포넌트의 CSS 및 JavaScript 의존성은 component.css-dependencies와 component.js-dependencies 템플릿 태그를 통해 로딩합니다.
속성 값 전달:
컴포넌트를 사용할 때 추가로 속성 값을 전달할 수 있습니다.
전달된 속성 값은 컴포넌트 클래스의 getContextData 메서드를 통해 컨텍스트 데이터로 전달됩니다.
속성 값은 컴포넌트 HTML 템플릿에서 {{ name }} 형식으로 참조됩니다.
4. getContextData 메서드 구현
속성 값 전달:

getContextData 메서드에서 전달된 속성 값(예: name)을 받아서 컨텍스트 데이터에 반영합니다.
이 값을 템플릿에서 사용할 수 있도록 합니다.
옵션 속성 값:

속성 값에 디폴트 값을 설정하지 않으면 필수 속성 값으로 처리됩니다.
옵션으로 처리하려면 디폴트 값을 설정하여 예외가 발생하지 않도록 합니다.
5. 컴포넌트 예시 구현
hello_world 컴포넌트 생성:

hello-world/hello-world.py 파일을 생성하고, 컴포넌트 클래스를 정의합니다.
hello-world/hello-world.html 파일에 간단한 Hello, World! 텍스트를 표시합니다.
템플릿에서 컴포넌트 호출:

test.html 템플릿에서 component 태그로 컴포넌트를 호출합니다.
component.css-dependencies와 component.js-dependencies 태그를 통해 CSS와 JavaScript 파일을 로딩합니다.
JavaScript 동작:

각 컴포넌트의 H1 요소를 클릭하면 알림을 띄우는 이벤트 리스너를 hello-world.js에 추가합니다.
속성 값 사용:

컴포넌트에 name 속성 값을 전달하여 각 컴포넌트가 다르게 동작하도록 합니다.
name 속성 값을 getContextData 메서드를 통해 전달하여 템플릿에서 사용할 수 있게 합니다.
6. 최종 확인
컴포넌트 동작 확인:
여러 개의 hello-world 컴포넌트를 호출하고, 각 컴포넌트의 알림 창이 제대로 표시되는지 확인합니다.
속성 값이 템플릿에 반영되며, JavaScript 코드가 각 컴포넌트에 맞게 동작하는지 테스트합니다.
7. 개선 및 마무리
디폴트 값 설정:
속성 값에 디폴트 값을 설정하여 필수 속성 값으로 처리될 경우 발생할 수 있는 예외를 방지합니다.
컴포넌트 관리:
각 컴포넌트는 독립적으로 관리되므로, 코드의 재사용성과 유지보수성을 높일 수 있습니다.