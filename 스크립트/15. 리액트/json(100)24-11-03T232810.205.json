안녕하세요. 이번 시간에는 React 상태 값에 대해서 핵심을 빠르게 살펴보겠습니다.
상태 값은 React 컴포넌트에서 UI와 직접적으로 관련된 동적인 데이터이고요.
변경 시에 UI가 재렌더링 됩니다.
버튼 엘리먼트를 클릭하면 increment 함수가 호출되도록 이벤트 리스너를 등록하고요.
카운트 값을 버튼 안에서 보여주도록 했습니다.
상태값은 함수 컴포넌트 내에서 useState 훅을 통해 생성하는데요
상태값이 아닌 이렇게 일반 변수를 사용하시게 되면 이 값을 UI에 노출할 수는 있지만 이
값이 변경되더라도 재렌더링이 자동으로 수행되지 않습니다
버튼을 아무리 클릭해도 이 카운트 값은 계속 0에 머물러 있게 됩니다.
useState 훅을 통해 새로운 상태 값을 정의할 수 있습니다.
인자론은 상태 값의 초기 값을 지정하고요.
직접 값을 지정하실 수도 있고, 인자 없는 함수를 지정하실 수도 있습니다.
반환 값으로는 생성된 상태 값에 대한 getter와 setter 함수를 반환합니다.
Getter는 불변 객체로 취급하셔서 직접 값을 변경하셔서는 안 되고요 항상 setter
함수를 통해 상태 값을 변경하셔야만 합니다
상태 값을 let을 통해 생성하시면 Getter를 통해 값을 변경하시더라도 에러는 발생하지
않지만 상태 값도 변경되지 않습니다
상태 값을 지금처럼 const로 정의하시면 Getter를 직접 변경하시려고 하면 const
변경을 시도했기에 JavaScript 타입 에러 예외가 발생합니다
상태값 변경 함수를 호출했다고 해서 그 즉시 상태값이 변경되는 것은 아닙니다.
increment 함수 내에서 setCount 함수를 연속해서 두 번 호출하면 두 번의
호출에서 인자는 동일한 같은 값으로 전달됩니다.
상태값이 0인 상황에서는 둘 다 인자 1로 전달되어 처리될 것이고요.
그러니 두 번 호출되더라도 값은 2가 아니라 1씩 증가하게 됩니다.
카운터 컴포넌트에 인크리먼트 함수를 구현하고 카운트 상태값을 1 증가시키는 코드를
옮겨줍니다. 버튼 클릭 시에 인크리먼트 함수를 호출도록 하겠습니다.
인크리먼트 함수가 호출되면 카운트 상태값을 1만큼 증가시키는 setCount 함수 호출을
두 번 호출하겠고요.
콘솔 로그에 참조한 카운트 상태값도 출력합니다.
첫 번째 버튼을 클릭해 보시면 숫자 10에서 숫자 11로 1 증가했습니다.
setCount 함수 호출을 두 번 했음에도 2가 아니라 1만 증가했습니다.
콘솔 로그를 보시면 SetCount 호출 시에 count 값은 10이었습니다.
즉, SetCount 호출 시에 둘 다 인자는 11로 지정되어 호출이 된 것이고요.
같은 인자로 두 번 호출되었기에 두 번 호출한 의미가 없이 1만 증가한 상황입니다.
상태값 set 함수는 함수 인자를 지원합니다
이 함수는 순수 함수로 구현하며 직전 상태값을 인자로 받아 다음 상태값을 반환합니다 반환된
값은 새로운 상태값으로 사용됩니다 상태값 set 함수의 함수인자를 지정하면 다음 상태값은
setCount 호출 시점에 결정되는 것이 아니라 상태 업데이트를 처리할 때 동적으로 이전
상태값을 받아와서 결정됩니다.
그래서 setCount 함수를 두 번 호출하면 한 번 클릭할 때마다 숫자가 이식
증가합니다. 간단한 상태 변경에서는 상태값 세트 함수에 값을 직접 지정하지만 상태값 변경이
조금 더 복잡해지면 함수 인자를 통해 상태값을 변경하는 것이 상태값 변경을 좀 더 견고하게
수행하실 수 있습니다
setCount 함수 호출에서 인자로 값을 넘기는 코드는 제거하고요 함수 인자를 지정해
보겠습니다 이 함수는 이전 상태 값으로서 항상 인자 1개를 받고요 다음 상태 값으로서 값을
1개 반환해야만 합니다 값을 하나 받으면 1 증가시킨 값을 반환하도록 합니다..
이 함수를 두 번 호출해 보겠습니다.
그럼 각 버튼을 클릭할 때마다 값이 2씩 증가됨을 확인하실 수 있습니다.
카운터 컴포넌트를 우클릭하면 값이 1씩 감소토록 해 보겠습니다.
onContextMenu 속성으로 contextMenu 이벤트에 대한 핸들러 함수를
지정합니다.
브라우저에서는 마우스 우클릭 시에 기본 동작으로 context 메뉴가 보여지는데요.
context 메뉴가 보여지지 않도록 이벤트 객체에 preventDefault 메서드를
호출해 줍니다.
그리고 decrement 함수를 호출해 상태 값을 1 감소시킵니다.
디크리먼트 함수를 구현하고 호출될 때마다 카운트 값을 1씩 감소시키겠습니다.
마우스 우클릭 시에는 컨텍스트 메뉴 이벤트가 발생하거든요.
버튼 엘리먼트의 onContextMenu 속성 값으로서 이벤트 핸들러를 등록합니다.
이벤트가 발생하면 디크리먼트 함수를 호출합니다.
각 버튼에서 마우스 우클릭하시면 값이 1씩 감소하긴 하는데 매번 컨텍스트 메뉴가 뜹니다.
이는 컨텍스트 메뉴 이벤트를 처리하는 브라우저의 기본 동작입니다.
이 기본 동작이 수행되지 않도록 막아보겠습니다.
인자로 이벤트 객체를 바꾸어 이벤트 객체에 preventDefault 메서드를 호출해
주시면 컨텍스트 메뉴 기본 동작이 더 이상 수행되지 않습니다.
이제 각 버튼을 클릭하면 일식 증가하고, 우클릭하면 일식 감소합니다.
이번에는 최소값, 최대값 범위 내에서만 변경을 지원해 보겠습니다.
최소값은 0으로 하겠고요.
최대값은 10으로 하겠습니다.
상태값의 set 함수는 반드시 다음 상태값을 반환해야만 합니다.
상태값 변경을 하지 않는다고 해서 null이나 undefined를 반환하면 null과
undefined로 상태값이 변경됩니다.
increment 함수에서는 최대값 10 범위 내에서만 값을 1 증가시키려 합니다.
그러니 이전 상대값이 10 이상이라면 이전 상대값을 반환하여 값을 그대로 유지하고요.
10 미만이라면 값을 1 증가시킨 값을 반환합니다.
디크리먼트 함수에서도 마찬가지로 최소값 0 범위 내에서만 값을 1 감소시키려 합니다.
그러니 이전 상태값이 0 이하면 이전 상태값을 반환하여 값을 그대로 유지하고요.
1 이상이라면 1 감소시킨 값을 반환합니다.
increment 함수에서 COUNT 상태값을 1만 증가시키도록 합니다
인크리먼트 함수에서는 직전 상태값이 10이라면 다음 상태값을 10으로 고정해서 반환도록
하고요 그 외에는 1씩 증가시키도록 해보겠습니다
디크리먼트 함수에서는 직전 상태 값이 0이라면 다음 상태 값은 0으로 고정해서 반환도록
하고요. 그 외에는 일식 감소시키도록 해 보겠습니다.
이 중 첫 번째 버튼은 현재 값이 10이기에 클릭해도 값이 더 이상 증가하진 않는데요.
두 번째 버튼은 현재 값이 20이기에 클릭하면 값이 1씩 증가합니다.
최대 값 제한이 10이니까 값이 10에 머물러 있어야 할 텐데 말이죠.
인크리먼트 함수에서 직전 상태 값이 10일 때에만 값을 고정하도록 해 뒀기 때문에 그렇습니다
직전 상태 값이 10 이상일 때 다음 상태 값을 10으로 고정하도록 하겠습니다
그리고 디크리먼트 함수에서도 직전 상태 값이 10 미만일 때 다음 상태 값을 0으로
고정토록 하겠습니다
페이지 새로고침해 보시면 각 버튼의 초기 카운트값은 10, 20, 30이지만 버튼을
클릭하면 최대값 제한에 걸려 10으로 변경됨을 확인하실 수 있습니다.
그런데 최대값 제한이 10이니까 초기 상태값을 20으로 지정받더라도 카운트 상태값의
초기값은 10이 되어야 하지 않을까요?
속성 값을 그대로 상태 값, 초기 값으로 반영하지 않고 로직을 통해 상태 값, 초기 값을
결정하려면 useState 후계의 첫 번째 인자로 인자 없는 함수를 구현해 주시고 초기
값으로 사용할 값을 반환해 주시면 됩니다.
이니셜 카운트 속성 값이 10 이상이라면 초기 값을 10으로 설정하고요.
이니셜 카운트 속성 값이 0 이하라면 초기 값을 0으로 설정하고요.
그 외에는 이니셜 카운트 속성 값을 그대로 초기 값으로 활용하도록 합니다.
페이지 새로고침해 보시면 이제 상태값, 초기값을 크게 봤더라도 최소값, 최대값 범위 내에서
카운터가 동작함을 확인하실 수 있습니다.
카운터 컴포넌트에 카운트 상태값과 의존 관계의 상태값 컬러를 하나 더 추가해 보겠습니다.
이렇게 useState Hook을 하나 더 써서 color 상태 값을 추가합니다.
초기 값은 문자열 yellow입니다.
increment 함수 내에서 count 값을 1 증가시키고 나서 color 상태 값을
변경합니다.
count 값이 짝수이면 red로 변경하고요.
홀수이면 yellow로 변경합니다.
그런데 setColor 함수 호출이 setCount 함수 호출 직후에 이루어지죠.
그러니 count 상태 값이 변경되기 이전 값을 기준으로 색상이 결정됩니다.
이전 값을 참조하기에 숫자 3은 홀수임에도 레드로 보여지고 있어 의도한 색상과 실제 색상이
맞지 않게 됩니다
카운터 컴포넌트에 컬러 상태 값을 하나 추가합니다
초기 값은 문자 옐로우입니다
버튼 엘리먼트의 배경색으로 활용하겠습니다
increment 함수와 디크리먼트 함수에서 카운트 값을 참조해서 짝수라면 컬러 상태 값을 레드로
변경하고 홀수라면 옐로우로 변경하도록 합니다
버튼에서 우클릭해서 1 감소시켜 보시면 숫자가 9입니다.
숫자 9는 홀수니까 색상은 옐로우가 되어야 할 듯 하지만 현재 레드입니다.
콘솔록을 보시면 숫자 10 값으로 색상을 결정했다고 합니다.
현재 보여지는 9는 새로운 상태 값이고요.
색상 결정에 사용된 상태 값은 이전 상태 값인 숫자 10입니다.
코드를 통해 의도한 색상과 실제 색상이 맞지 않는 상황이 발생했습니다.
색상 상태 값을 변경하는 로직을 분리하겠습니다.
useState 훅을 사용하시면 의존 관계의 상태 값이 변경되었을 때 수행될 함수를
지정하실 수 있습니다.
useEffect 훅의 첫 번째 인자는 수행될 함수이며 두 번째 인자는 의존 관계의
상태 값을 배열로 지정합니다.
count 상태 값이 변경되면 첫 번째 인자의 함수가 자동 호출됩니다.
이처럼 상태 변경 로직과 의존 관계의 로직을 분리하여 코드가 더 명확해졌습니다.
increment, decrement 함수 함수에서는 count 상태 값 변경에만 관심을 두고요
count 값 변경에 대한 color 상태 값 변경 로직은 이렇게 유지 이펙트 훅을 통해
구현했습니다.
increment 함수와 decrement 함수에서는 count 상태 값에만 관심을 두고요
color 상태 값에 대해서는 관심을 끊겠습니다.
useEffect 훅을 활용하시면 의존 관계의 상태값이 변경되었을 때 자동 수행될 함수를
등록하실 수 있습니다
useEffect 훅을 통해 카운트 상태값 변경에 대한 컬러 상태값 변경 로직을 구현하겠습니다
useEffect 훅의 두 번째 인자로 의존 관계의 상태값을 배열로 지정합니다
카운트 상태값을 하나 추가해 주고요 유즈 이펙트 훅의 첫 번째 인자 함수에 컬러 상태값
변경 로직을 적용합니다
페이지 새로고침해 보시면 각 버튼의 초기 상태부터 짝수에 맞게 색상이 레드로 보여지고
있고요. 클릭하여 카운트 상태 값을 변경해 보시면 현재 카운트 상태 값에 맞게 컬러 상태
값이 결정됨을 확인하실 수 있습니다.


1. 상태 값의 생성과 기본 개념
React 컴포넌트에서 UI와 관련된 동적인 데이터는 상태 값으로 관리됩니다.
상태 값은 useState 훅을 통해 생성되며, 변경 시 UI가 재렌더링됩니다.
useState는 상태 값과 상태 업데이트 함수 (setter)를 반환합니다.
예제: const [count, setCount] = useState(0);
2. 일반 변수와 상태 값의 차이
일반 변수는 UI에 노출할 수 있지만, 값 변경 시 UI는 자동으로 업데이트되지 않습니다.
상태 값은 변경 시 UI가 재렌더링되므로 UI에 반영됩니다.
3. 상태 값 변경 함수 (setter)의 동작 원리
setCount를 호출하면 상태 값이 변경되지만, 즉시 반영되지 않습니다.
연속 호출 시 이전 상태를 기반으로 다음 상태를 계산하도록 함수 인자를 사용하는 것이 좋습니다.
예제: setCount((prevCount) => prevCount + 1);
4. 상태 변경 시 조건 로직 추가
최대값/최소값 범위 내에서만 상태 값을 증가 또는 감소시키려면 조건 로직을 추가합니다.
상태 값이 최대나 최소값에 도달할 경우 값이 고정되도록 합니다.
예제:
javascript
코드 복사
setCount((prevCount) => (prevCount >= 10 ? 10 : prevCount + 1));
5. 상태 값 초기 설정 로직
상태 값 초기화 시 동적 로직을 추가하려면 useState의 인자로 함수를 전달합니다.
예를 들어, 최대값 10을 초과하는 초기값은 10으로 고정합니다.
예제:
javascript
코드 복사
const [count, setCount] = useState(() => {
  return initialCount > 10 ? 10 : initialCount;
});
6. 의존 상태 값 추가 및 상태 간의 의존성 관리
의존 관계가 있는 다른 상태 값을 추가하려면 useEffect 훅을 활용하여 상태 간의 의존성을 관리합니다.
예를 들어, count 값에 따라 color 상태를 변경할 때 count가 변경될 때마다 color를 업데이트하도록 합니다.
예제:
javascript
코드 복사
useEffect(() => {
  setColor(count % 2 === 0 ? 'red' : 'yellow');
}, [count]);
7. 이벤트에 따른 동작
좌클릭(클릭) 시 increment 함수를 호출하여 count 값을 증가시키고,
우클릭 시 decrement 함수를 호출하여 count 값을 감소시키도록 합니다.
우클릭 이벤트의 기본 동작(컨텍스트 메뉴 표시)을 막기 위해 preventDefault()를 사용합니다.
예제:
javascript
코드 복사
const handleRightClick = (e) => {
  e.preventDefault();
  setCount((prevCount) => (prevCount > 0 ? prevCount - 1 : prevCount));
};