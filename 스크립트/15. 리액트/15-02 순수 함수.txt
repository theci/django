안녕하세요 이번 시간에는 순수 함수에 대해서 살펴보겠습니다
리액트에서는 컴포넌트의 많은 루틴을 순수 함수로서 작성하기를 요구합니다
순수 함수는 같은 입력, 같은 인자에 대해 항상 같은 출력, 같은 값을 반환하는 함수를 뜻합니다 
함수 내부에서 인자 값을 변경하지 않고요.
값을 반환하는 것 외에 함수 외부에 어떠한 영향도 끼치지 않아야 합니다.
이를 부수효과 라고 하고요.
부수효과의 예로써 전역 변수 수정, 파일 입출력, 네트워크 요청 등이 있습니다.
순수함수는 함수의 동작이 오직 입력에만 의존하므로 결과를 예측하기 쉽고, 동일한 입력에 대해 항상 동일한 결과를 기대할 수 있습니다.
not pure 함수는 호출 시에 인자가 아닌 함수 밖의 값을 변경하기에 순수함수가 아닙니다.
not pure 함수는 호출 시에 인자의 속성을 변경하니까 순수함수가 아니고요.
이에 반해 pureFn1 함수는 입력 값에만 의존하며 이 입력 값을 변경하지 않고 새로운 값을 반환합니다.
따라서 이 함수는 순수 함수이며 입력 값의 불변성을 보장합니다.
pureFn2 함수는 purefn1 함수와 동일한 기능을 수행하지만 화살 함수 문법을 사용했습니다. 
이 두 함수 모두 리액트 개발 시에 자주 보실 코드 패턴입니다.
배열의 각 항목을 순회하며 데이터를 변환할 수 있습니다
이때 순수 함수를 구현하여 활용하시게 됩니다
이 메서드들은 리액트에서 상태값 변환 시에 자주 사용하시게 되니 다양하게 사용해 보시며 사용법을 꼭 숙지해 주세요
Reduce 메서드는 배열의 모든 요소의 값들을 하나의 값으로 결합할 때 사용하고요 첫 번째 인자로 누적을 수행할 함수를 지정하고 두 번째 인자로 누적의 초기 값을 지정합니다
모든 수의 합을 구하실 때에는 초기값을 0으로 지정하시고 매 항목에 대해서 이 함수가 호출되며 값을 더하시게 되고요.
모든 수의 곱을 구하실 때에는 초기값을 1로 지정하시고 매 항목에 대해서 이 함수가 호출되며 값을 곱하시게 됩니다.
함수뿐만 아니라 인자의 객체에 대해 불변성을 지키며 새로운 오브젝트를 생성할 때에도 자주 사용됩니다. 
필터 메서드는 특정 조건을 만족하는 요소만을 추출하여 새로운 배열을 생성할 때 사용합니다. 
인자로 짝수 여부를 반환해 주는 함수를 지정하면 이렇게 짝수로만 구성된 새로운 배열을 반환합니다.
맵 함수는 배열의 각 요소에 지정 함수를 적용하여 새로운 배열을 생성할 때 사용하고요.
인자로 제곱을 반환해 주는 함수를 지정하면 이렇게 제곱수로 구성된 새로운 배열을 반환합니다.
이외에도 forEach, sum, every, find, findIndex, sort, slice, splice 등의 메서드를 지원하니 사용법을 꼭 정리해 두시길 바랍니다.
파이썬에서도 비슷한 문법으로 리스트나 여러 순회 가능한 객체에 대해서 동일한 변환을 수행할 수 있습니다.


이번 시간에 다룬 순수 함수와 관련된 내용을 정리해드리겠습니다.

1. 순수 함수 (Pure Function)
정의:

같은 입력값에 대해 항상 같은 출력을 반환하는 함수.
함수 내부에서 인자 값을 변경하지 않음.
함수 외부에 어떤 영향도 끼치지 않음.
부수효과 (Side Effects):

함수 외부의 상태나 값을 변경하는 것을 부수효과라고 하며, 순수 함수는 부수효과가 없습니다.
예시: 전역 변수 수정, 파일 입출력, 네트워크 요청 등.
순수 함수의 특징:

결과 예측이 용이하고, 동일한 입력에 대해 항상 동일한 결과를 반환.
상태 변경이 없고, 인자의 불변성을 보장.
예시:

pureFn1: 입력값을 변경하지 않고 새로운 값을 반환하는 순수 함수.
pureFn2: pureFn1과 동일한 기능을 수행하지만 화살표 함수 문법을 사용한 순수 함수.
2. 리액트에서 순수 함수 사용
리액트 컴포넌트는 순수 함수를 사용해 작성하는 것이 권장됨.
상태값을 변경할 때 불변성(immutable) 을 지키며, 부수효과를 피하는 코드 패턴을 자주 사용.
3. 배열 메서드에서 순수 함수 사용
배열 메서드는 주로 순수 함수를 적용하여 데이터를 변환하는 데 사용됨.
map(): 배열의 각 항목을 순회하며 함수를 적용해 새로운 배열을 반환.
filter(): 특정 조건을 만족하는 항목만 추출하여 새로운 배열을 반환.
reduce(): 배열의 요소들을 하나의 값으로 결합.
예시: 모든 수의 합을 구할 때 초기값 0을 주고 값을 더함, 모든 수의 곱을 구할 때 초기값 1을 주고 값을 곱함.
4. 기타 배열 메서드
forEach(): 배열의 각 요소에 대해 함수를 실행(반환값 없음).
every(): 배열의 모든 요소가 조건을 만족하는지 확인.
some(): 배열의 일부 요소가 조건을 만족하는지 확인.
find(): 조건을 만족하는 첫 번째 요소를 반환.
findIndex(): 조건을 만족하는 첫 번째 요소의 인덱스를 반환.
sort(): 배열의 요소를 정렬.
slice(): 배열의 일부분을 추출하여 새로운 배열 반환.
splice(): 배열의 요소를 삭제하거나 수정.
5. 불변성 유지와 객체 생성
순수 함수는 객체나 배열을 다룰 때도 불변성을 지켜야 함.
기존 객체를 변경하는 것이 아니라 새로운 객체를 생성하여 반환해야 함.
자주 사용되는 메서드들 (map(), filter(), reduce())은 새로운 배열을 반환하여 불변성을 유지할 수 있음.
6. 파이썬과의 유사성
파이썬에서도 리스트나 순회 가능한 객체에 대해 동일한 방식으로 변환 작업을 할 수 있음.
예를 들어, 파이썬에서 map(), filter(), reduce()와 같은 함수형 프로그래밍 기법을 사용하여 순수 함수를 적용할 수 있음.
결론
순수 함수는 리액트 컴포넌트를 설계하고 상태 관리를 할 때 매우 중요한 개념입니다. 이를 통해 코드의 예측 가능성을 높이고, 부수효과를 줄이며, 불변성을 유지하는 방식으로 개발할 수 있습니다. map(), filter(), reduce() 등 배열 메서드는 이러한 순수 함수의 구현에 유용한 도구들입니다.