방금 실습에서는 검색어 문자열을 실시간으로 코디 상태 값에 저장한 후 검색을
수행했었습니다.
검색어 문자열을 실시간으로 확인해서 UI 상에서 유효성 검사 등으로 활용하지 않고 단순히
폼 제출 시에만 활용하신다면 각 폼필드 값을 상태 값으로 관리하실 필요는 없습니다.
React도 결국 브라우저에서 DOM 요소로 렌더링되므로 HTML에서처럼 폼 요소로 감싸면
됩니다. 폼 제출 이벤트를 받으면 이벤트 객체를 통해 현재의 폼필드 값을 참조할 수
있습니다 인풋 엘리먼트를 폼 엘리먼트로 감싸고요 체인지 이벤트 리스너와 킷다운 이벤트
리스너를 제거하고 쿼리 상태 값도 제거합니다 검색을 입력 후에 엔터키가 입력되면 폼에
서브밋 이벤트가 발생합니다
서브밋 이벤트 핸들러를 등록하고요 폼 서브밋의 기본 동작인 페이지 전환이 발생하지 않도록
이벤트 객체에 preventDefault 메서드를 호출해 주고요 자바스크립트로 검색 요청을
수행하겠습니다
이벤트 객체의 타겟 속성으로 서브밋 이벤트가 발생한 요소를 참조하실 수 있고요
쿼리 속성인데요
이는 해당 폼 내에서 쿼리 이름의 요소를 참조합니다
input 요소의 name 속성으로 쿼리를 지정합니다 검색어를 읽어와서 좌우 공백
제거하고요 입력된 검색어가 두 글자 이상이라면 search 함수를 호출하여 검색을
수행합니다
handleKeyDown 함수와 쿼리 상태 값은 이제 사용하지 않으니 삭제합니다
매 API 요청마다 매번 API 설정을 하시지 말고요.
공통 설정은 한 곳에서 하고, API 요청에서는 이를 활용하도록 해보겠습니다.
Axios Hooks 라이브러리에서는 MakeUseAxios 함수를 통해 커스텀 설정에
Axios 인스턴스를 활용하여 Axios 커스텀 훅을 만들 수 있습니다.
공통 설정으로서 요청 주소의 기본 URL을 지정하고요.
기본 헤더, 타임아웃, 세션 인증에서 유용한 다른 출처에서 쿠키 전송 여부 옵션이 있고요.
유효한 상태 코드를 판단하는 함수를 지정할 수 있습니다.
디폴트로 200번대 상태 코드만 성공한 응답으로 처리합니다.
이렇게 생성된 Axios 인스턴스를 make use Axios 함수의 Axios 인자로
전달하면 지정 설정에 새로운 Axios Hook이 생성됩니다.
이 Hook을 Export하여 API 호출에서 사용하시면 됩니다.
API.js 파일을 생성합니다 기본 옵션으로 Axios 인스턴스를 생성하고
make use Axios 함수 호출을 통해 새로운 Axios Hook을 생성합니다 지정
Axios 인스턴스를 통해 HTTP 요청이 만들어집니다
기본 설정을 변경해 보겠습니다
요청의 기본 URL을 지정하고요 디폴트 헤러 설정도 해줍니다
컨텐츠 타입 application.json 헤러는 이미 디폴트로 지정되어 있기에 지정하지
않겠습니다 멜론송 서치 컴포넌트에서 use-axios-hook을 use-api-axios로
변경합니다. 훅에서 이미 베이스 URL 설정이 되어 있기에 요청 URL에서는 이제 호스트를
생략하셔도 됩니다.
API 호스트, 타임아웃, 위드 크리덴셜스 옵션들은 개발 서버 여부나 구동 환경에 따라
달라질 수 있는 설정 값들입니다.
그러니 이러한 설정들은 소스코드에 하드코딩 해서는 안 되고요.
환경 변수를 통해 주입 받기를 추천드립니다.
Create React App에서는 기본에서 .env 파일을 지원합니다
API.javascript 파일에서는 constants.js 파일의 상수들을
임포트하여 Axios Config 설정으로 활용합니다
.env 파일의 React App API 호스트 환경 변수를 https://pyhub.kr로
등록합니다
Create React 앱 애플리케이션 내에서는 React 언더바 앱으로 시작하는 환경
변수만 사용합니다.
그 외에 환경 변수는 무시됩니다.
현재 환경 변수는 process.env를 통해 참조하실 수 있는데요.
constant.javascript 코드 내에서만 환경 변수를 로딩하고 변환하여 다른
모듈에서 활용하도록 하겠습니다.
이렇게 하면 환경 변수의 관리가 중앙 집중화되어 코드의 가독성과 일관성이 향상됩니다.
Django에서의 Django Inviron 라이벌리처럼 환경 변수 문자열을
Boolean으로 변환해주는 유틸리티 함수를 만들었습니다.
문자열이 1이나 알파벳 T로 시작하면 참을 반환합니다.
React 앱 API 호스트 환경 변수가 있다면 사용하고, 없다면 디폴트로
http://localhost8000 문자열을 API 호스트 값으로 사용합니다.
API 타임아웃 값에 대해서도 React 앱 API 타임아웃 환경 변수가 있다면 정수로
변환해서 사용하고, 없다면 디폴트로 0으로 설정합니다.
엑시오스에서는 0은 타임아웃을 적용하지 않음을 뜻합니다.
그리고 API with Credentials 값에 대해서도 React App API
with Credentials 환경 변수 값을 참, 거짓, 불리한 값으로 변환해서
사용합니다. 이 설정 값 상수들을 내보내어 다른 모듈에서 활용하도록 합니다.
API.javascript 파일에서 Base URL, Timeout with
Credentials 설정으로 적용합니다.


이번 실습에서는 검색어 입력과 폼 제출 처리, Axios API 요청 설정을 관리하는 방법에 대해 다뤘습니다. 이를 간략하게 정리해드리겠습니다.

1. 검색어 입력과 폼 제출 처리
1) 상태 관리 최적화
검색어 문자열을 실시간으로 상태에 저장하기보다는, 폼 제출 시에만 그 값을 활용하는 방법으로 상태 관리의 복잡도를 줄였습니다.
폼 요소(input)을 <form> 엘리먼트로 감싸고, submit 이벤트를 통해 검색을 처리합니다.
실시간으로 입력값을 관리할 필요 없이 폼 제출 시에만 검색어를 처리하고, input 엘리먼트의 name 속성을 활용해 값을 참조합니다.
2) 폼 제출 처리
submit 이벤트 핸들러를 등록하여 폼 제출 시 검색을 처리합니다.
preventDefault를 사용하여 페이지 전환을 방지하고, 검색어가 2글자 이상일 경우에만 검색 함수를 호출합니다.
javascript
코드 복사
const handleSubmit = (event) => {
  event.preventDefault();
  const query = event.target.query.value.trim();
  if (query.length >= 2) {
    search(query);
  }
};
handleKeyDown 함수와 검색어 상태값을 제거하여 불필요한 상태 관리 코드를 단순화했습니다.
2. Axios API 요청 설정
1) Axios 인스턴스를 활용한 공통 설정
매 API 요청마다 공통 설정을 반복하지 않기 위해 Axios 인스턴스를 생성하고 이를 커스텀 훅으로 사용합니다.
makeUseAxios 함수를 활용하여 공통 설정을 관리하고, 설정을 활용해 새로운 Axios Hook을 만들어 요청을 처리합니다.
2) Axios 기본 설정
Axios 인스턴스를 만들고, 기본 설정을 설정 파일(API.js)에서 관리합니다.
공통 설정 항목은 기본 URL, 헤더, 타임아웃, 쿠키 전송 등의 옵션을 포함합니다.
javascript
코드 복사
import makeUseAxios from 'axios-hooks';
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_HOST, // 환경 변수로 관리
  timeout: process.env.REACT_APP_API_TIMEOUT || 0,
  withCredentials: process.env.REACT_APP_API_WITH_CREDENTIALS === 'true'
});

const useAxios = makeUseAxios({ axiosInstance });
3. 환경 변수 설정
환경 변수를 사용하여 API 호스트, 타임아웃 설정 등을 관리하고, 이 값을 코드에서 직접 하드코딩하지 않도록 합니다.
.env 파일을 통해 React 애플리케이션의 환경 변수를 설정하고, 이를 process.env로 참조합니다.
예시로 REACT_APP_API_HOST, REACT_APP_API_TIMEOUT, **REACT_APP_API_WITH_CREDENTIALS**와 같은 환경 변수를 사용합니다.
1) .env 파일
dotenv
코드 복사
REACT_APP_API_HOST=https://pyhub.kr
REACT_APP_API_TIMEOUT=5000
REACT_APP_API_WITH_CREDENTIALS=true
2) 환경 변수 로딩 및 설정
환경 변수의 값을 가져와 설정값으로 사용하며, 이를 중앙에서 관리합니다.
예시로, 환경 변수를 Boolean으로 변환하거나, 값이 없을 경우 기본값을 설정합니다.
javascript
코드 복사
// constants.js
export const API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:8000';
export const API_TIMEOUT = parseInt(process.env.REACT_APP_API_TIMEOUT, 10) || 0;
export const API_WITH_CREDENTIALS = (process.env.REACT_APP_API_WITH_CREDENTIALS === 'true');
API.js에서는 이 값을 가져와 Axios 인스턴스 설정에 적용합니다.
4. 구성 요약
검색어 입력과 폼 제출

실시간 상태 관리 대신 폼 제출 시에만 검색어 처리.
submit 이벤트로 검색어 처리, preventDefault로 기본 동작 방지.
Axios API 요청 설정

Axios 인스턴스를 활용하여 공통 설정 관리.
makeUseAxios로 커스텀 훅을 생성하여 요청을 처리.
환경 변수 관리

.env 파일을 사용하여 API 호스트, 타임아웃, 인증 설정을 중앙 집중화.
환경 변수를 코드에서 직접 하드코딩하지 않고, 외부 설정을 통해 관리.
5. 장점
불필요한 상태 관리를 줄이고, 폼 제출 시에만 검색을 처리하여 성능을 최적화했습니다.
공통 설정을 중앙화하고, 코드의 가독성을 높이며, 환경 변수로 설정 값을 관리하여 다양한 환경에서 쉽게 사용할 수 있도록 했습니다.
이와 같은 방법으로 폼 제출과 API 요청을 효율적으로 처리할 수 있습니다.