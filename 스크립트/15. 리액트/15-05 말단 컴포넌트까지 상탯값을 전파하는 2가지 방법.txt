React 컴포넌트는 트리 구조로 구성되며, 부모 컴포넌트와 자식 컴포넌트로 이루어져
있습니다. React 애플리케이션은 이 컴포넌트 트리를 통해 데이터와 상태를 상위
컴포넌트에서 하위 컴포넌트로 전달합니다.
테마, 사용자 정보, 인증 정보 등 애플리케이션 전반에 걸쳐 공유되어야 할 값들은 여러
컴포넌트에서 두루두루 필요할 텐데요.
컴포넌트 트리 구조에서 이 상태 값을 공유하는 방법은 크게 두 가지가 있습니다.
첫 번째로 상위 컴포넌트에서 하위 컴포넌트로 속성 값으로서 한 단계씩 속성 값으로 전달하는
방식입니다. 이 방식은 직관적이고 명시적으로 데이터를 전달한다는 점에서 이해하기 쉽습니다.
하지만 중간 계층의 컴포넌트에서 해당 값을 사용하지 않더라도 말단의 컴포넌트에서 필요하다면
중간 계층에서 속성 값을 받아서 다음 컴포넌트로 일일이 넘겨줘야 하는 번거로움이 있습니다.
기존 앱 컴포넌트는 그대로 두고요 새로운 앱2 컴포넌트를 통해 구현해 보겠습니다
소스 폴더 밑에 app2.js 파일에서 빈 앱 함수를 구현하고요 그 아래에
미리 제공해 드린 소스 코드를 복사해 주세요
useState Hook도 임포트해 줍니다
앱 컴포넌트에서는 루트 컴포넌트만을 사용합니다.
루트 컴포넌트에서는 카운트 상태 값이 정의되어 있고요.
증가 버튼을 클릭하면 이 상태 값이 일식 증가합니다.
카운트 상태 값은 말단의 컴포넌트에서 렌더링이 필요하기에 자식 컴포넌트인 A 컴포넌트와 B
컴포넌트의 속성 값으로 전달합니다.
A 컴포넌트와 B 컴포넌트는 속성값 count를 사용하진 않지만 자식 컴포넌트로 내려주기
위해 속성값으로 받을 수밖에 없습니다.
b 컴포넌트에서 c로, c에서 e로, e 컴포넌트에서 ref 컴포넌트로 count 상태
값이 속성값으로서 전달되었습니다.
app2 컴포넌트 사용을 위해 소스 폴더에 index.js 파일에서 app2
컴포넌트를 임포트하고 app 컴포넌트 대신에 app2 컴포넌트를 사용합니다.
그럼 이렇게 app2 컴포넌트만 렌더링 됩니다.
루트 컴포넌트의 증가 버튼을 클릭하시면 이를 통해 변경된 카운트 상태 값이 말단
컴포넌트까지 전달되어 잘 렌더링 되고 있음을 확인하실 수 있습니다.
React의 기본 기능인 Context API를 사용하면 중간 컴포넌트들이 상태를 직접
일일이 전달하지 않아도 필요한 컴포넌트에서만 그 값을 참조할 수 있어 편리합니다.
Context API가 편리하다고 해서 모든 상태 값을 이를 활용하여 전역으로 관리해서는
안 됩니다. 이렇게 하면 애플리케이션의 모든 컴포넌트가 자주 재렌더링되어 성능이 저하될 수
있습니다 각 컴포넌트 간의 상태값 공유는 최소한으로 유지하는 것이 좋습니다
Context API 사용을 위해 createContext API를 사용하여
CountContext 객체를 하나 생성합니다
이제 countContext.Provider를 사용하여 컴포넌트 트리 내에서 값을 공급할
수 있습니다
프로바이더를 통해 값을 설정하고 하위 컴포넌트에 값을 전달하는 역할을 합니다
Value 속성으로 컴포넌트 트리 내에서 공유할 값을 지정합니다
count라는 이름의 카운트 값을 공유하겠습니다.
이제 이 컴포넌트 트리 내에 각 컴포넌트들은 자식 컴포넌트에게 속성 값을 전달해 줄
목적으로 더 이상 카운트 속성 값을 받을 필요가 없습니다.
속성 값으로 받고 전달해 주는 코드를 모두 제거합니다.
리프 컴포넌트에서는 카운트 상태 값이 필요합니다.
카운트 속성 값은 제거하고요.
useContext hook을 통해 카운트 컨텍스트를 통해 공유된 값을 조회하실 수
있습니다. 공유된 값들 중에 카운트 이름의 값만 가져오겠습니다.
페이지 새로 고침해 보시면 종전과 동일하게 카운트 상태 값이 공유되어 말단 컴포넌트를 통해
카운트 상태 값이 잘 렌더링되고 있습니다.


React 컴포넌트 트리 구조:

React 애플리케이션은 부모-자식 관계로 구성된 컴포넌트 트리로 이루어짐.
상위 컴포넌트에서 하위 컴포넌트로 데이터와 상태를 전달.
상태 값 공유 방법:

상태를 상위 컴포넌트에서 하위 컴포넌트로 속성(props)을 통해 전달.
하지만, 모든 컴포넌트가 상태를 사용하지 않더라도 중간 컴포넌트에서 일일이 전달해줘야 하는 번거로움이 있음.
App2 컴포넌트 구현:

app2.js 파일에서 빈 App 함수를 생성하고 제공된 소스 코드를 복사.
useState Hook 임포트.
App 컴포넌트에서는 루트 컴포넌트만 렌더링하고, 루트 컴포넌트에서 count 상태 값을 정의.
증가 버튼을 클릭 시 count 상태 값이 증가하며 말단 컴포넌트까지 전달.
props 전달 방식:

count 상태 값이 말단 컴포넌트에서 렌더링되므로 A, B, C, E, Ref 컴포넌트를 거쳐 전달됨.
index.js 파일에서 App2 컴포넌트를 임포트하고, 기존 App 대신 렌더링.
Context API의 필요성:

Context API를 통해 중간 컴포넌트들이 일일이 상태를 전달할 필요 없이, 말단 컴포넌트가 필요한 값만 직접 참조 가능.
Context API의 제한사항:

모든 상태 값을 전역으로 관리할 경우, 불필요한 재렌더링이 발생해 성능 저하 가능.
최소한의 상태 값만 Context API로 관리하는 것이 바람직함.
CountContext 생성:

createContext API를 사용해 CountContext 객체 생성.
CountContext.Provider로 컴포넌트 트리에서 count 값을 공급.
Provider 설정:

value 속성으로 공유할 count 값을 지정해 컴포넌트 트리에 전달.
props 제거:

중간 컴포넌트에서 일일이 props를 전달할 필요가 없어짐. count 속성 값을 사용하는 코드 제거.
말단 컴포넌트에서 useContext 사용:

Ref 컴포넌트에서 useContext Hook을 사용해 CountContext에서 count 값을 가져옴.
결과 확인:

페이지 새로 고침 후, Context API를 통한 전역 상태 관리로 count 값이 말단 컴포넌트에 잘 전달되어 렌더링됨.