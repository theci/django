안녕하세요. 이번 시간에는 Django 템플릿 컴포넌트를 React 기술로 만드는 방법에
대해서 살펴보겠습니다.
React 컴포넌트를 Django 컴포넌트 라이브러리를 통한 Django 템플릿
컴포넌트에서 즉시 참조해서 사용할 수 있는 방법은 없고요.
웹 표준의 웹 컴포넌트 기술을 적용하고 파셀, 번들러를 접목해서 React 컴포넌트 코드를
한 번에 생성하는 React 컴포넌트 명령을 직접 개발했습니다.
이들 만드는 과정을 하나하나 살펴보기에는 양이 너무 많아서요.
React 컴포넌트 명령을 통해 손쉽게 컴포넌트를 생성하고 활용하는 예시를 살펴보겠습니다.
먼저 React 컴포넌트 프로젝트는 Django 프로젝트 내에서 코어 밑에
src-react-components-directory에 자동 생성합니다.
React 컴포넌트 이닛 명령으로 이 디렉토리에 Parcel 프로젝트를 자동 생성하고
React 라이브러리와 React DOM 라이브러리를 자동 설치합니다.
추가로 필요한 라이브러리가 있다면 직접 코어 밑에 src 리액트 컴포넌트 폴더로 이동하셔서
NPM 인스톨 명령으로 설치하셔도 되고요.
혹은 React 컴포넌트 인스톨 명령으로 설치하실 수도 있습니다.
React 컴포넌트 크레이트 명령으로 지정 이름의 React 컴포넌트 코드와 이와 연동되는
Django 템플릿 컴포넌트 코드를 자동으로 생성합니다.
React 컴포넌트는 파셀 번들러를 통해서 빌드가 되고요.
파셀의 StartWatchBuild 명령을 React 컴포넌트를 통해서 수행하실 수
있고요. 이때, Django 템플릿 컴포넌트와의 연계에 필요한 CSS,
JavaScript, Mapping 파일도 자동으로 생성해 줍니다.
react-components 명령에서는
watchdog, requests, beautifulsoup4, rivalry를 사용합니다.
최신 버전으로 설치하고요.
react-components.py 파일을 복사해서 core의 management의
commands 폴더 아래에 복사합니다.
python-manage.py react-components-help 명령으로 지원되는
명령에 대한 도움말을 확인하실 수 있고요.
react-components-init 명령으로 코어 밑에
src-react-components 폴더 경로에
react-component-project 폴더를 생성합니다.
파셀 라이브러리와 react-react-dom 라이브러리가 자동 설치되고요.
파셀의 start-watch-build 명령도 설정에 맞춰 자동 추가됩니다.
새로운 컴포넌트 HelloWorld를 생성해 보겠습니다
React 컴포넌트 Create Hello World 명령을 실행하시면 이렇게 React
컴포넌트 코드와 Django 템플릿 컴포넌트 코드가 자동 생성됩니다
React 컴포넌트 Start 명령에서 React 컴포넌트에 HTML 파일을 지정하시면
파셀 번들러로 지정 React 컴포넌트만의 개발 서버를 띄우실 수 있습니다
파셀 디폴트 포트 번호인 1234 포트로 구동됩니다.
React 컴포넌트가 구동 중이고요.
코어 밑에 src-react-components에 src 폴더 아래에
hello-world.js 파일에 React 컴포넌트로 랩핑한 웹 컴포넌트
코드와 React 컴포넌트 코드가 구현되어 있습니다.
웹 컴포넌트 코드는 Base component component 리액트 컴포넌트에 모든
기능이 구현되어 있고요 나중에 지원할 속성이 있다면 그 이름만 observed
attribute 함수의 배열로 지정해 주시면 됩니다
그 속성 값은 리액트 컴포넌트에 속성 값으로써 자동 전달되고요 해당 속성 값이 변경되면
리액트 컴포넌트를 웹 컴포넌트 단에서 재렌더링합니다
아직 Hello World React 컴포넌트에 속성 값을 전달하는 코드는 없지만 Name
속성에 대해서 Default 속성 값을 익명으로 지정해 주겠습니다
그리고 Count 상태 값과 Count 상태 값에 반응하는 Color 상태 값도 추가합니다
파셀 개발 서버 상에서는 React 컴포넌트가 잘 동작하고 있습니다.
현재 React 컴포넌트를 직접 실행했고요.
웹 컴포넌트와 Django 템플릿 컴포넌트를 아직 거치진 않았습니다.
Django 단에서 테스트 뷰를 추가하고, test.html 템플릿을 통해 Hello
World 컴포넌트를 활용해 보겠습니다.
컴포넌트 태그 로드하시고 의존하는 CSS와 자바스크립트 파일도 임포트 해줍니다.
아직 장고 개발 서버를 제가 실행을 안 시켰네요.
장고 개발 서버 실행하고요.
Hello World 장고 템플릿 컴포넌트를 사용해 보겠습니다.
페이지 새로고침하시면 이렇게 방금 구현했었던 React 컴포넌트가 렌더링됨을 확인하실 수
있습니다. 장고 템플릿 컴포넌트를 수행하면 관련 웹 컴포넌트를 거쳐 React 컴포넌트가
렌더링됩니다.
Hello World 장고 템플릿 컴포넌트에 Name 속성 값을 추가로 지원해 보겠습니다.
그럼 파이썬의 컴포넌트 클래스에서 네임 인자를 받아 관련 HTML 템플릿에 전달해 줘야
하고요 HTML 템플릿에서는 이렇게 웹 컴포넌트를 직접 사용하고 있습니다
네임 값이 있을 때에만 웹 컴포넌트의 속성 값으로 데이터 네임을 전달합니다
웹 컴포넌트에 대한 HTML 코드가 생성되어 수행됩니다.
웹 컴포넌트에서는 데이터 네임 속성을 지원함을 명시합니다.
그럼 Base 컴포넌트 단에서 속성명에서 data- 부분을 제거한 이름으로 React
컴포넌트의 속성 값을 전달해 줍니다.
테스트 페이지를 새로고침하면 test.html 템플릿에서 전달한 속성 값이 React
컴포넌트를 통해 아직 렌더링이 안 되는데요.
종종 컴포넌트가 즉시 반영이 안 될 때가 있습니다.
웹브라우저에서 강력 새로고침을 해주시면 이렇게 속성 값이 장고 템플릿 단에서 장고 템플릿
컴포넌트를 거쳐 웹 컴포넌트를 거쳐 React 컴포넌트까지 전달됨을 확인하셨습니다.
이렇게 속성값 전달은 확인했고요.
React 컴포넌트로부터 이벤트를 받으실 수도 있습니다.
React 컴포넌트에서 self 속성값은 React 컴포넌트가 아닌 웹 컴포넌트
인스턴스입니다.
Web 컴포넌트의 dispatchEvent 메서드를 통해 커스텀 이벤트를 발생하실 수
있고요. 장고 템플릿는 결국 웹 컴포넌트로 렌더링 되니까요 이렇게 컴포넌트에 직접
이벤트 리스너를 등록하면 리액트 내부의 이벤트를 장고 템플릿 단의 자바스크립트 코드에서
받아보실 수 있습니다
.gitignore 파일에는 .pacel-cache 폴더명과 node_modules
폴더명을 꼭 추가해 주세요.
컴포넌트 배포 시에는 클립 명령을 먼저 수행하시고요.
빌드 명령으로 빌드된 파일들을 버전 관리에 추가하시고 배포하시면 됩니다.
빌드된 파일은 단순히 자바스크립트 CSS 파일이므로 빌드된 파일을 사용하실 때에는
Node.js나 React 개발 환경이 없어도 됩니다.