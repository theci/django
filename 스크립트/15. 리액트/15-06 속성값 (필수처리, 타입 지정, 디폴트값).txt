안녕하세요 이번 시간에는 예시와 함께 리액트 속성 값에서 필수 속성 값을 지정하는 방법
속성 값의 타입을 지정하는 방법 그리고 디폴트 값을 지정하는 방법에 대해서 살펴보겠습니다
아바타 컴포넌트를 예시로 준비했습니다
컴포넌트를 함수 문법으로 구현하기 때문에 속성 값은 함수 인자 문법을 그대로 사용합니다.
총 4개의 속성 값을 봤습니다.
Name 속성 값은 Image의 Alt 속성 값으로 사용하고요.
Image Element에서 지정 이미지 로딩에 실패했을 경우 대체 텍스트로 보여집니다.
이미지 언더바 URL의 속성 값은 이미지 엘리먼트에서 로딩할 이미지 주소로 사용됩니다.
UR의 속성 값은 A 엘리먼트의 HREF 속성 값으로 사용되어 클릭 시에 이동할 주소로
사용됩니다. 그리고 배지 속성 값은 숫자를 전달받고요.
값이 0보다 클 경우에만 숫자를 보여줍니다.
값이 0 이하일 경우에는 배지는 렌더링 되지 않습니다.
이를 조건부 렌더링이라고 부릅니다.
아바타 컴포넌트의 자바스크립트 코드와 CSS 코드를 소스 폴더의 컴포넌트 폴더 아래에
복사해 주겠습니다.
app3.js 파일을 생성하고요.
index.js 파일에서 app2 컴포넌트는 제거하고요 app3 컴포넌트를
사용하겠습니다
app 컴포넌트에서 avatar 컴포넌트를 사용하고 name, imageurl, url,
badge 4개 속성값도 등록해 줍니다
배지 속성 값이 0 이상일 경우에만 조건부 렌더링이 수행되어 배지가 렌더링됨을 확인하실 수
있습니다. 앞선 예시는 잘 동작했는데요.
만약 누락된 속성 값이 있다면 우리는 누락된 속성 값을 어떻게 확인할 수 있을까요?
이미지 URL 속성 값 하나를 고의로 누락시켜봤습니다.
값이 지정되지 않은 속성 값은 Undefined 값이 됩니다.
화면에 이렇게 보여지는데요.
이처럼 화면을 통해 컴포넌트가 망가진 상황을 눈으로 확인할 수 있다면 다행인데요.
블라우저 콘솔 창에도 어떠한 경고, 에러 메시지도 없고요.
해당 버그를 찾기는 무척 어려울 것입니다.
첫 번째 아바타 컴포넌트에서 고의로 이미지 URL 속성 값을 누락시켰습니다
누락된 속성 값은 컴포넌트에서는 Undefined가 됩니다
그러면 이렇게 첫 번째 아바타 컴포넌트가 망가졌습니다
콘솔 창에서는 어떠한 경고나 에러 메시지도 없는 상황입니다
이때 PropTypes 라이브러리를 활용하실 수 있습니다.
이렇게 컴포넌트에 FlopTypes 속성으로 각 속성 값에 대한 타입 및 필수 여부를
지정할 수 있습니다.
그럼 이렇게 브라우저 개발자 도구의 콘솔 창에서도 필수 속성 값인데 누락되었음을 경고
메시지로 확인하실 수 있고요.
타입에 맞지 않는 속성 값을 전달받았을 때에도 이렇게 경고 메시지를 확인하실 수 있습니다.
IDE2에서는 ESLint를 통해 각종 룰을 적용해서 해당 경고 메시지를 확인하실 수
있습니다.
PyCharm Professional에서는 기본에서 이미 설정되어 있기에 별도 설정을 하지 않으셔도
이렇게 확인 가능합니다.
PropTypes 라이브러리를 설치하고요.
PropTypes를 통해 아바타 컴포넌트의 속성값 타입을 정의해 줍니다.
Name 속성값은 문자열 타입이고 옵션으로 지정하고요.
이미지 URL 속성값은 문자열 타입이래 필수로 지정하겠습니다.
URL 속성값은 문자열 타입이고 옵션으로 지정하고요.
Badge 속성값은 숫자 타입으로 지정하고 옵션으로 지정합니다.
소스 파일을 저장하시면 이렇게 콘솔 창을 통해 필수 값인 Image URL 속성 값이
누락되었고 현재 그 값이 undefined라는 경고 메시지를 확인하실 수 있습니다.
PyCharm Professional에서도 추가 설정 없이도 이렇게 아바타 컴포넌트에서 필수 속성 값인
Image URL이 누락되었다는 경고를 확인하실 수 있습니다.
이미지 URL 속성 값은 다시 원복하시고요.
배지 속성 값이 숫자 타입이잖아요.
그런데 이렇게 문자열로서 다른 타입으로 지정하시면 이렇게 콘솔 창을 통해 경고 메시지를
확인하실 수 있습니다.
배지 속성 값은 숫자 타입이어야 하는데 문자열로 받았다는 경고 메시지가 출력됩니다.
함수에서 디폴트 인자를 지원하듯이 React 컴포넌트에서도 디폴트 속성 값을 지원할 수
있습니다. 함수 인자처럼 속성 값에서도 값을 할당받지 못하면 그 속성 값은
Undefined가 됩니다. 이미지 URL 속성 값은 필수가 아닌 옵션으로 돌리고요.
컴포넌트의 Default Flops 속성으로 각 속성 값에 대한 디폴트 값을 지정할 수
있습니다. 그럼 이렇게 defined 값인 속성 값에 대해서 default 값이
적용됩니다. 속성 값이 null이면 디폴트 속성 값이 적용되지 않습니다.
ImageURL의 속성을 필수가 아닌 option으로 돌립니다.
default props 속성으로 ImageURL의 속성 값에 대한 default 값을
설정해 줍니다.
그럼 첫 번째 아바타 컴포넌트에서는 현재 이미지 URL의 속성 값이 누락되어 있으니 이미지
URL의 속성 값이 Undefined가 되어 디폴트로 지정한 React 로고로 동작함을
확인하실 수 있습니다 직접 Undefined 값을 지정하셔도 디폴트 값으로 동작합니다
그런데 속성 값을 Null로 지정하시면 디폴트 값으로 동작하지 않음을 확인하실 수 있습니다
값이 Undefined일 때만 디폴트 값으로 동작합니다 그런데
브라우저 콘솔 창을 보시면 이렇게 경고 메시지가 뜹니다.
지금의 디폴트 속성 값을 지정하는 방법은 React 18.3 버전부터 Deprecated
되었다고 하고요.
React 다음 메이저 버전에서는 이 방법이 제거될 예정이라고 합니다.
그래서 이제는 자바스크립트의 default 인자 문법을 활용해서 이렇게 디폴트 속성 값을
지정하시면 됩니다.
default props 지원이 곧 제거될 것이라는 경고 메시지를 확인했습니다
default props 코드를 제거하고요 자바스크립트의 default 인자 문법을
활용하여 이미지 URL 속성 값에 대한 default 값을 지정해 줍니다
그럼 이렇게 경고 없이 default 값으로 잘 동작함을 확인하실 수 있습니다



이번 시간에 다룬 내용을 리액트 컴포넌트 속성 값에 대해 정리해드리겠습니다. 주요 내용은 필수 속성 값 지정, 속성 값의 타입 지정, 디폴트 값 지정 방법입니다.

1. 속성 값 (Props)
리액트 컴포넌트는 속성값(Props)을 받아 동작하며, 속성 값은 함수 인자처럼 컴포넌트에서 사용됩니다. 예시로 아바타 컴포넌트에서 4개의 속성 값을 사용했습니다:

name: 이미지의 alt 텍스트로 사용.
imageUrl: 이미지의 URL로 사용.
url: 클릭 시 이동할 주소로 사용.
badge: 숫자값을 받아, 0보다 클 경우에만 배지를 표시 (조건부 렌더링).
2. 속성 값의 필수 여부 지정
컴포넌트에서 속성 값이 필수로 제공되어야 할 경우, PropTypes를 사용하여 속성 값의 필수 여부와 타입을 정의할 수 있습니다.

PropTypes 사용:

name: 문자열 타입이며 옵션.
imageUrl: 문자열 타입이며 필수.
url: 문자열 타입이며 옵션.
badge: 숫자 타입이며 옵션.
이렇게 설정하면 필수 속성 값이 누락되었을 때 콘솔에 경고 메시지가 표시됩니다.

3. 속성 값의 타입 지정
속성 값의 타입을 PropTypes로 지정하여, 타입에 맞지 않는 값이 전달되었을 때 경고를 받을 수 있습니다. 예를 들어, badge는 숫자 타입이어야 하는데, 만약 문자열로 전달되면 경고 메시지가 발생합니다.

4. 속성 값의 디폴트 값 지정
속성 값에 기본값을 설정하려면 두 가지 방법을 사용할 수 있습니다:

defaultProps (React 18.3까지 지원):
defaultProps를 사용하여 속성 값의 기본값을 설정할 수 있습니다.
예를 들어, imageUrl이 옵션이라면, 값이 누락된 경우 defaultProps에서 설정된 기본값이 적용됩니다.

자바스크립트의 default 인자 문법 (React 18.3 이후 권장):
defaultProps는 React 18.3 이후 deprecated되었고, 다음 버전에서 제거 예정입니다.
대신 자바스크립트 함수에서 지원하는 default 인자 문법을 사용하여 디폴트 값을 설정하는 방법이 권장됩니다.

5. 디폴트 값의 동작
속성 값이 **undefined**일 경우 디폴트 값이 적용됩니다.
속성 값이 **null**로 설정되면 디폴트 값은 적용되지 않습니다.

6. PropTypes 라이브러리 활용
PropTypes를 사용하면 각 속성 값의 타입과 필수 여부를 명확하게 지정할 수 있고, 경고 메시지로 오류를 잡을 수 있습니다.
예시:
Avatar.propTypes = {
  name: PropTypes.string,
  imageUrl: PropTypes.string.isRequired,
  url: PropTypes.string,
  badge: PropTypes.number,
};

7. 실제 예시 흐름
이미지 URL 누락:
imageUrl 속성값을 고의로 누락시키면, 해당 값은 undefined가 되어 화면이 망가질 수 있습니다.
콘솔에 경고 메시지가 표시되지 않으면 **PropTypes**를 사용하여 경고를 확인할 수 있습니다.
imageUrl 속성값을 필수로 지정하고, 타입을 명시하면 경고 메시지를 받을 수 있습니다.

8. React의 경고 메시지
React 18.3 버전부터 defaultProps가 deprecated되고, 이후 버전에서 제거될 예정입니다. 대신 자바스크립트 default 인자 문법을 사용하는 방식으로 디폴트 값을 설정하는 것이 좋습니다.

9. 최종 코드 예시
javascript
코드 복사
Avatar.propTypes = {
  name: PropTypes.string,
  imageUrl: PropTypes.string.isRequired, // 필수
  url: PropTypes.string,
  badge: PropTypes.number,
};

// defaultProps (React 18.3 이전 버전)
Avatar.defaultProps = {
  imageUrl: 'https://example.com/default-image.png',
};

// 최신 방식 (React 18.3 이후)
const Avatar = ({ name, imageUrl = 'https://example.com/default-image.png', url, badge }) => {
  // 컴포넌트 로직
};

결론
속성 값의 필수 여부와 타입을 지정하려면 **PropTypes**를 사용하세요.
디폴트 값은 defaultProps 또는 자바스크립트 default 인자 문법을 사용하여 설정할 수 있습니다.
디폴트 값 적용 시, 속성 값이 undefined일 경우에만 적용되며, null은 디폴트 값을 무시합니다.
defaultProps는 React 18.3 이후 deprecated되고, 향후 버전에서 제거될 예정이므로, 자바스크립트 문법을 활용하는 것이 권장됩니다.