예시로써 Input Element에서 입력 글자 수를 자동으로 보여주는 컴포넌트를 구현해
보겠습니다. 이 컴포넌트는 속성 값으로 Input Element의 Name 속성으로 사용할
Name 속성 값만을 받습니다.
JSX 코드에서는 Input Element와 입력 글자 수를 보여주도록 구성하고요.
입력 글자 수를 저장할 상태 값, length를 정의합니다.
초기 값은 0입니다.
Input Element에서 입력 값이 변경될 때마다 글자 수를 다시 세려고 합니다.
그러니 ChangeEvent에 대응하기 위해 onChange 속성 값을 사용하겠고요.
웹브라우저의 기본 자바스크립트 EventHandler에서처럼 이벤트 객체의 Target
속성은 이벤트가 발생한 요소이고요.
Value 속성으로 해당 요소의 현재 값을 참조하실 수 있습니다.
핸들 텍스트 체인지 함수에 현재 입력된 문자열을 인자로 넘깁니다.
그럼 그 문자열의 길이를 length 상태 값에 반영하면 텍스트 인풋 컴포넌트가 재렌더링
됩니다. src의 컴포넌트 폴더에 text-input.js 파일로 컴포넌트를
구현하겠습니다.
app4 컴포넌트에서 다른 컴포넌트는 모두 제거하고요.
text-input 컴포넌트만 두 개 사용해 보겠습니다.
text-input 컴포넌트에서는 Input Element를 통해 입력 박스를 하나
렌더링하고요. 속성 값으로 전달받은 name 속성 값을 지정합니다.
인풋 엘리먼트 아래에 입력 글자 수를 보여주겠습니다.
입력 글자 수를 저장할 length 상태 값을 추가하고 렌더링도 해줍니다.
초기 값은 0입니다.
인풋 엘리먼트에서 Change 이벤트를 통해 입력 값의 변화가 있을 때마다 지정 이벤트
핸들러 함수를 호출시킬 수 있습니다.
체인지 이벤트가 발생하면 이벤트 객체의 타겟 속성을 통해 이벤트가 발생한 요소를 참조하실
수 있고요. 밸류 속성을 통해 이벤트가 발생한 요소의 현재 값을 참조하실 수 있습니다.
핸들 텍스트 체인지 함수를 하나 구현하고요.
인자로 인풋 요소의 현재 입력 문자열을 전달받겠습니다.
length 상태 값에 입력 문자열의 길이를 저장합니다.
체인지 이벤트 핸들러에서는 핸들 텍스트 체인지 함수를 호출하면서 현재 입력 문자열을
전달합니다. 그럼 구현 끝이고요.
입력 상황에 맞춰 입력 글자 수가 실시간으로 카운트 되어 보여짐을 확인하실 수 있습니다.
텍스트 인풋 컴포넌트의 속성값 name에 type도 지정해 주겠고요.
인풋 엘리먼트의 자동완성 기능도 꺼주겠습니다.