안녕하세요. 이번 시간에는 API 없이 React만으로 할 일 목록 애플리케이션을 만들어
보겠습니다. 할 일 목록 생성, 수정, 삭제 관련하여 상태 값을 처리하는 방법에 대해서
살펴보겠습니다.
앞서서 To Do List 컴포넌트를 구현했었는데요.
기본 할 일 목록과 각 할 일 항목을 클릭하여 완료 여부를 토글할 수 있었습니다.
여기에 할 일 목록이 비었을 때 보여줄 메시지를 하나 추가하겠습니다.
index.js 파일에 현재 앱 8 컴포넌트만 활성화되어 있습니다.
앱 8 컴포넌트 라우팅에 ToDoS 주소에 대해 ToDoList 컴포넌트를 추가합니다.
할 일 목록 보여주는 기능과 완료 여부 토글 기능은 이미 구현되어 있고요.
항목이 비었을 때의 메시지를 추가해 주겠습니다.
상태값 초기값을 빈 배열로 두고 페이지를 새로고침하면 이렇게 엠프티 메세지가 렌더링됩니다.
상태값 초기값은 원복합니다.
todoList 컴포넌트에 form 엘리먼트를 추가하고 새할일이 입력되면 todoList
상태값에 추가해 보겠습니다.
새할일 내용을 입력받을 form 엘리먼트와 input 엘리먼트를 추가합니다.
input 엘리먼트의 네임 속성은 content입니다.
입력 값은 따로 상태 값으로 저장하진 않겠고요.
나중에 이 컨텐츠 이름으로 입력 값을 조회할 것입니다.
입력 폼에 SubmitEventHandler를 등록합니다.
SubmitEventHandler에서 폼의 기본 동작인 페이지 전환을 막고요.
이벤트가 발생한 폼 요소의 네임이 컨텐츠인 요소의 값을 읽어와서 좌우 공백을 제거합니다.
불변성을 지키며 투들리스트 상태값 끝에 객체로 새 할 일을 추가합니다.
새 할일을 입력하시고 엔터키 치시면 새 할일이 추가되는데요.
입력된 폼의 값은 그대로입니다.
입력 폼 요소의 리셋 메서드를 호출하여 입력 값을 초기화합니다.
리액트로 개발을 하다 보면 한 컴포넌트가 쉽게 비대해지게 됩니다.
한 컴포넌트가 너무 비대해지면 각 상태 값 간의 의존 관계가 복잡해지고요.
유지 보수하기 힘들어지고 재사용하기 어려워집니다.
그리고 React 컴포넌트는 컴포넌트 단위로 재렌더링이 이루어지기 때문에 작은 상태값 변경
하나에도 매번 컴포넌트 전체가 재렌더링되어 사용성이 낮아집니다
React 개발에서는 적당한 크기의 컴포넌트로 나누는 연습이 필요합니다
투두리스트 컴포넌트는 할 일 목록도 처리하고 새 할 일을 입력받고 추가하고 있죠
투두폼 컴포넌트를 따로 만들어서 새 할 일 입력 값 처리와 관련된 부분은 모두 맡기고요
새 할 일 텍스트만 투두 리스트 컴포넌트에서 전달받아 상대 값에 반영하도록 리팩토링
하겠습니다 그럼 각 컴포넌트가 명확한 역할을 가지게 되어 코드의 가독성과 유지보수성이
향상됩니다. src 폴더, 컴포넌트 폴더 아래에 to-do폼 컴포넌트를 생성합니다.
ToDoList 컴포넌트 아래에 투두폼 컴포넌트를 추가하고요.
FormElement 코드는 잘라내어 ToDoForm 컴포넌트로 옮깁니다.
HandleSubmit 함수도 잘라내어 ToDoForm 컴포넌트로 옮깁니다.
ToDoForm 컴포넌트에는 SetToDoList 함수는 없으니 제거하고요.
투두폼 컴포넌트에서 부모로부터 setToDoList 함수를 속성 값으로 전달받을 수도
있습니다. 하지만 그렇게 하면 투두폼 컴포넌트가 set투두리스트 함수와 강하게
결합되어 버립니다.
자식 컴포넌트는 부모의 상태 값을 직접 알 필요가 없습니다.
자식 컴포넌트는 단지 입력된 값을 부모 컴포넌트로 전달해주기만 하면 됩니다.
이를 위해 onEnter라는 속성을 추가합니다.
부모 컴포넌트에서는 자식 컴포넌트로부터 전달받은 문자열을 이용하여 ToDoList의
상태값을 업데이트합니다.
ToDoList 컴포넌트에 addToDo 함수를 추가합니다.
인자의 새 할 일 내용을 ToDoList 상태값 끝에 추가합니다.
ToDoForm 컴포넌트에 onEnter 속성 값으로 함수를 추가하고 인자의 문자열을
addToDo 함수를 호출하며 전달합니다.
React Bootstrap 컴포넌트를 ToDoList 컴포넌트와 ToDoForm 컴포넌트에
적용해서 UI를 개선해 보겠습니다.
ToDoForm 컴포넌트부터 적용해 보겠습니다.
Form 컴포넌트가 있습니다.
Import해서 적용하시고요.
Input Element는 Form.Control 컴포넌트로 변경합니다.
ToDoList 컴포넌트에서는 Container 컴포넌트와 Card 컴포넌트로 기본
레이아웃을 잡겠습니다.
리스트 그룹 컴포넌트 내 항목들을 ListGroup.Item 컴포넌트로 구성합니다.
카드 컴포넌트로 감싸는 걸 빼먹었네요.
추가해 주시고요.
렌더링된 화면을 보시면, 리스트 그룹 컴포넌트와 카드 컴포넌트 사이에 약간의 틈이
보이는데요.
Variant Plush 속성 값을 적용해서 틈을 제거합니다.
Empty 메시지도 ListGroup 컴포넌트 내에 있으니 ListGroup.Item
컴포넌트를 적용하고 Warning Style을 적용합니다.
각 할 일 항목마다 삭제 버튼을 추가하고요 삭제 버튼을 클릭하면 정말 삭제할 것인지를
물어보고 OK를 하면 지정 인덱스의 항목을 상태 값에서 제거토록 구현해 보겠습니다
한 항목 내에서 텍스트와 버튼을 양 끝에 위치시키기 위해 flexbox을 사용합니다
각 항목마다 버튼 컴포넌트로 삭제 버튼을 추가합니다
상위 컴포넌트에 flexbox을 적용해서 할 일 내용과 버튼을 좌우 끝에 매치합니다.
취소선 스타일과 클릭 이벤트 리스너를 잘라내어 할 일 텍스트에 적용해 주겠습니다.
곧이어 수정 버튼도 추가할 것이기에 삭제 버튼을 div 엘리먼트로 미리 감싸줍니다.
삭제 버튼을 클릭하면 deleteToDo 함수를 호출하고 클릭된 항목의 인덱스를 인자로
전달합니다
deleteToDo 함수를 구현하고요 인자의 인덱스를 ToDoList 상태 값에서
제거하도록 구현해 줍니다
그럼 이렇게 삭제 버튼 클릭만으로 ToDoList 상태 값에서 해당 항목이 제거됨을
확인하실 수 있고요 확인 API를 활용해서 삭제 의도를 확인하도록 합니다
각 할 일 항목마다 수정 버튼을 추가하고요 수정 버튼을 클릭하면 수정할 내용을 입력 받고요
프롬프트는 입력을 취소하면 null을 반환합니다 입력된 내용이 있고 내용이 변경되면
상태 값에서 지정 인덱스의 할 일을 변경토록 합니다 수정 버튼을 추가합니다 수정 버튼과
삭제 버튼이 너무 붙어 있으니 수정 버튼에 m1 클래스를 적용하여 마진을 동쪽 East에
1만큼 주겠습니다.
수정 버튼을 클릭하면 Edit To Do 함수를 호출하고 클릭된 항목의 인덱스를 인자로
전달합니다.
Edit To Do 함수를 구현하고요.
지정 인덱스에 할 일 텍스트를 가져와서 프롬프트 입력 박스에 채워주고요.
입력된 값이 있고, 입력된 값이 수정되었을 때에만 To-Do 리스트 상태 값에 반영하도록
합니다.