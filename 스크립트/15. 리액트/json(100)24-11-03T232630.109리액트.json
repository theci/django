안녕하세요 드디어 리액트 시간입니다
이번 시간에는 리액트 프로젝트를 생성해 보겠습니다
리액트 프로젝트를 생성하는 첫 번째 방법으로 리액트 팀에서 개발한 create-react-app
유틸리티를 통해서 리액트 프로젝트를 생성하겠습니다
가장 널리 사용되어지는 리액트 프로젝트 생성 방법이고요 복잡한 설정을 숨기고 빠르게
프로젝트 개발을 시작할 수 있도록 도와줍니다
별도 라이브러리를 설치할 필요 없이 Node.js만 설치되어 있는 상황에서 npx
create-react-app 프로젝트명 명령을 실행하시면 현재 경로에 프로젝트가
생성되면서 자동으로 React 라이브러리가 설치됩니다.
생성된 프로젝트의 package.json 파일의 script 항목에는 총 4개의 명령이
등록되어 있습니다.
npm run start 명령은 개발 서버를 구동하는 명령이고요.
디폴트로 http://localhost:3000 주소로 구동됩니다.
http://localhost:3000 주소로 접속하시면 이렇게 React Welcome
페이지를 확인하실 수 있습니다.
npm run build 명령은 배포 빌드를 생성하는 명령이고요.
빌드를 하면 Next.js와는 다르게 HTML, CSS, JavaScript, 정적
파일들로만 구성되거든요.
그래서 빌드된 파일들을 Nginx 웹서버를 통해서 직접 서비스하실 수도 있고, GitHub
Pages나 여러 정적 웹서버를 통해 서비스하실 수 있습니다.
npm run test 명령은 테스트를 수행하는 명령이고요.
마지막으로 npm run eject 명령은 숨겨진 설정을 꺼내어 설정 파일을 생성해 주는
명령입니다.
하나하나 프로젝트 설정을 하고자 하실 때 npm run eject 명령에 유혹을 느끼실
수도 있는데요.
eject를 하는 순간 모든 설정을 직접 관리하고 업데이트해야 하기에 절대 추천드리지
않습니다. eject가 정말 필요한 것인지 한 번 더 고민해 보시고 필요하다면 React
앱 Rewired 라이브러리를 활용해 보세요.
Create React 앱 유틸리티로 생성한 React 프로젝트를 본 React 챕터에서
실습해서 사용하겠습니다.
npx create-react-app의 프로젝트명 명령으로 새로운 CRA 프로젝트를 생성합니다
프로젝트가 생성되었고요 CRA에서는 이렇게 4개의 명령이 기본 제공됩니다
프로젝트 폴더로 이동하시면 package.json 외에 별도의 설정 파일은 없습니다.
Create React 앱의 기본 설정으로 동작합니다.
패키지.json 파일 내역을 살펴보시면 이렇게 7개의 라이브러리가 설치되어 있고 4개의
명령이 정의되어 있습니다.
npm start 혹은 npm run start 명령으로 스타트 명령을 구동하실 수
있고요. 로컬로스트의 3000번 포트에서 개발 서버가 구동됩니다.
운영 체제의 기본 브라우저가 자동 구동되면서 http://localhost:3000 페이지를
띄워줍니다. 기본 브라우저를 크롬 브라우저로 설정해 두시면 편리하고요.
npm start 명령이 구동될 때 브라우저 환경 변수가 non-string로 설정되어 있으면
브라우저가 자동으로 열리지 않습니다.
리액트 프로젝트를 생성하는 두 번째 방법으로 Parcel 번들러를 활용하여 설정 하나 없이 리액트
프로젝트를 설정해 보겠습니다.
파셀은 별도의 설정 파일 없이도 프로젝트 구조를 자동으로 감지하여 합리적인 기본 값을
제공하고요. 설정의 복잡성을 줄여줍니다.
간단한 리액트 프로젝트를 구성하실 때 사용하시면 좋은데요.
리액트로 장고 웹 컴포넌트를 구성할 때 사용해 보려 합니다.
먼저 프로젝트 빈 폴더를 생성하고 이동합니다.
파셀 라이브러리와 리액트 라이브러리는 수동 설치하고요.
그럼 이렇게 패키지.json 파일이 구성됩니다.
점 파셀 캐시 폴더는 캐시 폴더이고 노드 언더바 모듈스 폴더는 라이브러리 설치 경로이기
때문에 절대 버전 관리 대상에 넣으시면 안 됩니다.
.gitignore 파일 파일에 폴더 이름을 꼭 추가해 주세요.
이제 파셀 프로젝트를 생성했고요.
첫 React 컴포넌트를 구현해 주겠습니다.
애플리케이션 진입점으로 사용할 소스 폴더 밑에 index.html 파일을 생성합니다.
id가 루트인 요소의 React 컴포넌트를 렌더링 하겠고요.
React 컴포넌트를 정의할 파일을 script type 모듈로 추가해 줍니다.
자바스크립트 파일에서는 React 컴포넌트를 구현하고 아이디가 루트인 요소에 해당
React 컴포넌트를 렌더링합니다.
npm run start 명령을 추가하겠고요.
Parcel Utility의 애플리케이션 진입점으로 HTML 파일 경로를 지정해 주시면
디폴트로 1234 포트에서 개발 서버가 구동됩니다.
포트 옵션으로 포트 번호를 변경하실 수 있습니다
웹블라우저로 접속해 보시면 렌더링된 리액트 컴포넌트를 확인하실 수 있고요 한
모듈 리플레이스를 지원하기에 리액트 코드를 수정하면 페이지 수동 새로고침 없이도 자동으로
새로고침됩니다
파셀에서는 이외에도 워치 명령과 빌드 명령을 지원합니다
myreact02 파셀 빔 폴더를 생성하고요 이동한 후에 파셀 라이브러리를 개발용으로
설치합니다 설치가 끝나면 React 라이브러리와 ReactDOM 라이브러리를 18
버전으로 설치합니다.
그럼 이렇게 패키지.json 파일이 구성됩니다.
파이참이나 편하신 에디터로 myreact02 parcel project 폴더를 엽니다.
parcel 애플리케이션 진입점으로 소스 폴더 밑에 index.html 파일을 생성하고요.
소스 코드를 복사해서 적용하겠습니다.
React 컴포넌트는 index.js 경로에 구현하겠고요.
script 타입은 모듈로 지정합니다.
index.js 파일도 복사해서 적용하겠습니다.
앱 컴포넌트를 함수로 간결하게 구현했고요.
id가 루트인 HTML 요소에 React 컴포넌트 앱을 렌더링합니다.
Start 명령을 추가하고요.
Parcel 명령의 애플리케이션 진입점으로 소스 폴더 밑에 index.html 파일을
지정했습니다. 이 경로로 Parcel 개발 서버가 구동됩니다.
Create React 앱 프로젝트에서는 애플리케이션 진입점이 단 하나이지만,
Parcel에서는 새로운 명령을 만드셔서 새로운 경로로 여러 개의 애플리케이션 진입점을
만드실 수 있습니다.
파셀에서는 디폴트로 1,234 포트로 개발 서버가 구동되고요 포트 옵션을 지정하여 원하시는
포트로 개발 서버를 구동하실 수도 있습니다
웹브라우저로 http://localhost에 1234 주소로 접속하시면 이렇게 앱
컴포넌트가 렌더링 되었음을 확인하실 수 있고요 파셀 개발 서버와 크리에이트 리액트 앱 개발
서버는 모두 웹소켓을 통한 HMR, 즉, 한 모듈 리플레스먼트를 지원하거든요.
개발 서버가 구동 중인 상황에서 리액트 소스 코드를 변경하시면 수동으로 페이지 새로고침
없이도 컴포넌트가 자동 변경됨을 확인하실 수 있습니다.
파셀 프로젝트에서는 자동 생성되는 폴더가
.파셀 캐시 폴더, 노드 모듈스 폴더, 그리고 빌드가 생성되는 dist 폴더가 있습니다.
이 세 개 폴더를 반드시 .gitignore 파일에 등록해 주세요.