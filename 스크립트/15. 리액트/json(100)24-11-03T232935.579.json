안녕하세요. 이번 시간에는 글로벌 전역 상태 관리와 컨텍스트 모듈화에 대해서
살펴보겠습니다.
사용자 인증 정보, 테마, 언어 또는 지역 설정처럼 여러 컴포넌트에서 참조가 필요한 상태
값들은 전역 상태 관리가 필요할 수 있습니다.
리액트에서는 전역 상태 관리를 위한 여러 방법을 제공하는데 그 중 하나가 Context
API입니다. 이 Context API를 활용하면 각 컴포넌트에서 상태 값을 속성 값으로
전달받아 하위 컴포넌트에 기계적으로 전달할 필요 없이 해당 상태 값이 필요한 컴포넌트에서
직접 참조할 수 있습니다.
Context API를 사용하기 위해서는 먼저 Context 객체를 생성해야 합니다.
이때 공유될 값에 Default 값을 설정할 수 있습니다.
Undefined로 명시적으로 지정하겠습니다.
이 인자를 생략하더라도 Default 값은 Undefined가 되지만 명시적으로
지정하겠습니다.
그리고 Context API를 통해 공유할 범위를 Context 객체에 Provider
컴포넌트를 통해 지정하고 속성 값으로 공유할 값을 설정합니다
그러면 Provider 아래의 모든 컴포넌트에서는 이 값을 속성 값으로 전달받지 않아도
Context API를 통해 참조할 수 있습니다
단, Provider 밖에서는 이 값을 참조할 수 없습니다
이 값이 필요한 컴포넌트에서는 Context 객체와 UseContext Hook을 통해
공유되는 값을 참조할 수 있습니다.
현재의 코드는 잘 동작하는 Context API 코드입니다.
하지만 StatusContext와 관련된 코드들이 여러 곳에 분산되어 있어 관리성이 좋지
않습니다.
Status, Context와 관련된 로직들을 별도의 파일에 모듈화를 하면요
Provider 컴포넌트는 단순히 Status Provider 컴포넌트로만 사용하도록 하면
Provider 컴포넌트를 사용할 때 어떤 값을 넘겨야 할지 고민할 필요가 없습니다
그냥 컴포넌트만 사용하면 됩니다
또한 UseContext Hook을 사용할 때 매번 StatusContext 객체와
useContext Hook을 둘 다 임포트해서 사용하는 것이 조금 번거롭죠.
이렇게 하나의 Hook으로 제공하면 더 편리합니다.
이렇게 StatusContext를 모듈화할 수 있습니다.
Context 객체는 생성하고 나서 이를 외부에 Export하지 않고요.
파일 내에서만 Provider와 Hook에서 사용합니다.
커스텀 프로바이더 컴포넌트를 생성하고 그 안에서 공유할 상태 값을 정의한 후 프로바이더를
통해 값을 공유합니다.
외부에서는 이 커스텀 프로바이더 컴포넌트만 사용하면 되므로 어떤 값을 넘겨야 할지 고민할
필요가 없습니다.
단순히 컴포넌트만 사용하면 됩니다.
React Hook은 함수 컴포넌트에서 사용할 수 있고요.
또한 Hook 내에서도 다른 Hook을 사용할 수 있습니다.
Hook의 이름은 항상 use로 시작해야만 합니다
커스텀 훅에서는 컨텍스트 객체를 useContext 훅으로 참조하여 선택 값을 조회합니다
만약 이 훅을 프로바이더 외부에서 사용했다면 프로바이더를 통해 공유되는 값을 조회하지
못하고 컨텍스트 객체 생성 시에 지정한 기본 값으로 조회됩니다
그래서 기본 값으로 조회되면 프로바이더를 사용하지 않은 상황으로 간주하고 오류를 발생시켜
개발자가 수정토록 유도합니다.
외부에는 Context 객체를 노출하지 않고 Provider와 Custom Hook만
노출합니다. 미리 제공해 드린 코드를 복사해서 src 밑에 Context 밑에
StatusContext.js 파일을 생성합니다.
이 Status 상태 값을 공유할 컴포넌트 중에 최상위 컴포넌트에 Status
Provider를 적용합니다
Index.js 파일의 최상위 컴포넌트에 적용하실 수도 있겠고요 본
예시에서는 App 컴포넌트에 적용하겠습니다
이제 이 아래의 모든 컴포넌트에서는 스테이터스 컨텍스트를 통해 공유되는 값을 컨텍스트
API를 통해 참조하실 수 있습니다
탑 내비게이션 컴포넌트에서 직접 API를 통해 스테이터스 상태 값을 조회했었죠
이 API 호출 코드는 제거하고요 useStatusContextHook을 호출하여 컨텍스트
API를 통해 공유되는 스테이터스 상태 값을 조회합니다
페이지 동작을 확인해 보시면 이전과 동일하게 잘 동작합니다.