안녕하세요. 이번 시간에는 EMER 라이벌리를 활용하여 불변 객체를 더 쉽고 간결하게
다루는 방법에 대해서 살펴보겠습니다.
Immer 라이브러리는 일반적인 자바스크립트 코드 스타일로 불변성을 유지하며 수정된 새로운
객체를 만들 수 있도록 도와주는 라이벌리입니다.
이처럼 투들리스트 배열이 있을 때 1번 인덱스 객체의 돈 항목을 토글을 하여 참이면
거짓으로, 거짓이면 참으로 변경하고자 합니다.
일반적인 자바스크립트 코드 스타일로 객체를 수정하신다면 이 코드는 불변성을 지키지
않았습니다.
투들리스트 배열이 상태 값일 경우 이 코드로는 상태 변경이 적용되지 않습니다.
무시됩니다.
불변성을 유지하며 1번 인덱스 객체에 돈 항목을 토글하는 코드입니다.
자바스크립트 배열에서는 map 등의 함수에서는 매 호출에서 두 번째 인자로 이렇게 0부터
1씩 증가하는 인덱스를 제공해 줍니다.
1번 인덱스의 경우에만 돈 항목을 토글한 새로운 객체를 반환하고요.
그 외의 인덱스에서는 원본 객체를 그대로 반환합니다.
그런데 이러한 코드는 직관적이지 않아 학습 비용이 높습니다.
Immer 라이브러리를 사용하시면 일반적인 자바스크립트 스타일의 직관적인 코드로 불변성을
유지하며 수정된 새로운 객체를 생성하실 수 있습니다.
앞선 코드보다 간결하고 가독성도 높습니다.
임어의 produce 함수의 첫 번째 인자는 값을 변환할 원본 객체이고요.
두 번째 인자는 변환 함수입니다.
변환 함수에는 원본 객체의 복사본이 인자로 전달됩니다.
불변성을 신경 쓰지 않고 원하시는 대로 복사본 객체를 수정해 주세요.
그러면 Immer 라이브러리에서 불변성을 유지하며 해당 변경이 반영된 새로운 객체를 생성 반환해
줍니다. Immer 라이벌리의 또 다른 사용 예로써 produce 함수의 첫 번째 인자로 변환
함수만을 넘기시면 불변성을 유지하며 값을 변환해주는 함수를 반환합니다.
이렇게 반환된 함수를 원본 객체를 인자로 호출하시면 불변성을 유지하며 값 변환이 적용된
새로운 객체를 반환받습니다.
이 방식은 React 상태값에 Set 암수에 적용하시면 상태값 변경 로직을 보다 견고하고
간결하게 구현하실 수 있게 됩니다.
할 일 목록을 보여주는 Todo List 컴포넌트를 구현해 보겠습니다.
할 일 목록 상태값의 초기값은 두 개 항목으로 미리 정의되어 있고요.
완료한 할 일은 취소선으로 스타일을 적용합니다.
src 폴더의 component 디렉토리 아래에 todo-list.jsx 파일을 생성하고
todo-list 컴포넌트를 생성하고 export default로 노출합니다.
app5.jsx 파일을 생성하시고요.
todo-list 컴포넌트를 사용하겠습니다.
컴포넌트 소스파이 확장자가 js도 있고 jsx도 있는데요.
둘 다 가능하고요.
JSX 하나로 통일하시는 것이 적절해 보입니다.
index.js 파일에서는 app5 컴포넌트만 사용하도록 하겠습니다.
상태값, 초기값은 전역 변수로 정의하고 useState Hook을 통해 ToDoList
상태값을 정의합니다.
TodoList 상태값은 배열이고 배열 안에 객체가 있잖아요
JSX에서는 객체를 그대로 렌더링 할 수는 없거든요
객체를 렌더링 하면 이와 같은 에러가 발생합니다
꿀팁으로 상태값 배열과 객체 내역을 확인하고자 하실 때에는 JSON 직렬화를 통해 문자열로
변경해서 확인하시면 편리합니다
프리 엘리먼트로 감싸시면 고정폭 문자로 보여지고요 계획 문자로 줄바꿈으로 처리되어
보여집니다 그런데 아직 JSON 문자열에 줄바꿈이 없는데요.
세 번째 인자로 들여쓰기 크기를 지정하시면 JSON 직렬 라시에 들여쓰기가 적용됩니다.
상태값 내역을 한결 파악하기 쉬워졌습니다.
ToDoList 상태값은 배열이니까 Map 메서드를 통해 배열 내에 ToDo 객체를
Element로 변환합니다.
각 항목의 기본 스타일을 커서 포인트를 지정하여 항목의 커서를 올리면 마우스 커서를
변경하도록 했습니다.
완료 스타일로써 취소선을 적용하려고 하는데요.
기본 스타일에 이렇게 스프레드 연산자를 통해 완료 스타일을 병합할 수 있습니다.
완료 스타일은 완료된 항목에 대해서만 적용해야 하고요.
미완료 항목이라면 완료 스타일을 적용하지 않도록 합니다.
이 스타일을 스타일 속성에 반영합니다.
아, 오타가 있었네요.
원이 아니라 돈입니다.
구현한 대로 완료된 항목은 완료 스타일로 잘 보여지고 있습니다.
이번에는 각 할 일을 클릭하면 완료 여부를 토글하도록 투들리스트 컴포넌트를 변경해
보겠습니다.
ToggleToDo 함수는 인자로 전달받은 인덱스에 할 일 목록에 대해 완료 여부를
Toggle합니다. 각 할 일 항목의 OnClickEventListener를 통해서 각
항목의 클릭 이벤트를 받고요.
배열의 Map 메서드에서는 두 번째 인자로 0부터 시작하는 인덱스를 전달합니다.
이제 각 할 일 항목을 클릭하면 완료 여부가 Toggle됩니다.
페이지를 새로 고침하니 경고 메시지가 하나 나타났습니다 경고 메시지에 따르면 리스트 내에
각 자식 요소에는 고유한 키 속성 값이 있어야 한다고 합니다
리액트에서는 리스트 내 각 요소를 식별하기 위해 키 속성을 요구하고요 이를 통해 특정
요소의 추가 및 삭제 여부를 빠르게 파악할 수 있어 렌더링 성능이 향상됩니다
따라서 각 데이터 항목에 대해 데이터베이스 기본 키와 같은 고유한 값을 키로 지정하는 것이
좋습니다. 그러나 현재 상황에서는 고유한 식별자가 없기 때문에 어쩔 수 없이 배열의
인덱스를 키로 사용하겠습니다.
하지만 배열의 인덱스는 단지 순서를 나타내는 값일 뿐이고요 각 데이터의 고유 식별자는
아닙니다 배열의 순서가 변경될 경우 인덱스를 키로 사용하면 예상치 못한 동작이 발생할 수
있습니다 리스트의 요소가 재정렬되었거나 업데이트될 때 리액트가 올바르게 컴포넌트를 구분하지
못해 성능이 저하되거나 상태 관리가 부정확해질 수 있습니다
따라서 가능하다면 배열의 인덱스 대신 고유한 식별자를 key로 사용하는 것이 바람직합니다.
각 할 일 항목을 클릭하면 ToggleToDo 함수를 호출해서 완료 여부 상태를
Toggle하겠습니다.
완료 여부를 toggle 시에 불변성을 지키지 않고 이렇게 값을 변경하시면요.
이처럼 해당 코드가 수행되어도 실제 상태 값이 변경되지 않습니다.
상태 값에서 getter는 항상 참조 목적이고요 값 변경 시에는 항상 setter를
사용하셔야 합니다
불변성을 지키며 배열내 특정 항목의 값을 변경하시려면 일단 배열내 각 항목들을 map
메서드를 통해 순회를 두셔야 하고요 기본적으로 인자의 객체를 반환하되 지정 인덱스의 항목일
경우에만 이렇게 객체의 존 항목 값을 불변성을 지키며 반환하셔야 합니다.
새롭게 생성된 배열을 setToDoList 함수 호출을 통해 상태 값에 반영합니다.
동작을 테스트해 보시면요.
이렇게 클릭된 대상의 완료 여부가 잘 토글됩니다.
할 일의 상태를 변경하는 함수를 emul을 사용하여 보다 간결하게 구현해 보겠습니다.
이머를 적용했고요.
할 일 목록의 getter를 직접적으로 참조해서 구현되었습니다.
Immer 사용을 위해 Immer 라이브러리를 먼저 설치합니다.
기존 상태 변경 로직은 제거하고요.
이머의 produce 함수를 활용합니다.
첫 번째 인자로 원본 배열을 지정하고요.
두 번째 인자로 변환 함수를 지정합니다.
변환 함수에서는 인자로 원본 배열에 복사본이 전달되고요.
변환 함수 내에서는 리턴 값은 없습니다.
단지 전달받은 복사본의 불변성을 신경 쓰지 마시고 변경하시면 됩니다.
그럼 이몰 라이벌리에서 원본 배열을 변경하지 않고 불변성을 지키며 변경이 적용된 배열을
반환해 주고요.
이를 상태값에 반영하시면 됩니다.
이번에는 할 일 목록의 Getter를 직접적으로 참조하지 않고 함수 인자를 통해 간접적으로
직전 상태값을 참조하도록 이렇게 변경하실 수도 있습니다.
produce 함수에서는 첫 번째 인자로 변환 함수만을 지정하면 불변성을 유지하며 값을
변환해 주는 함수를 반환합니다.
상태값 set 함수에서는 함수 인자를 지원합니다.
함수 인자를 넘기면 상태값 변경 시에 직전 상태값을 인자로 전달해 주죠.
그러니 생성된 함수를 이렇게 set 함수 호출 시에 인자로 전달할 수 있고요.
상태값 변경이 잘 동작합니다.
상태값 개터 참조 코드도 없고요.
코드가 보다 간결해졌고 불변성을 신경 쓰지 않고도 불변성을 지키며 상태값을 변경할 수 있게
되었습니다.
이외에도 상태값 배열 끝에 항목을 추가, 지정 인덱스의 배열 항목 1개 제거, 지정
인덱스의 배열 항목 1개 변경에 대한 예시를 작성해 봤습니다.
이머 사용이 항상 가독성이 높은 것은 아닙니다
이머를 사용하지 않은 코드와 비교해 보시고 상황에 맞춰 가독성이 높은 방법으로 구현해
주세요 이 부분에 대한 실습은 뒷 강의에서 다루겠습니다



이번 시간에 다룬 Immer 라이브러리를 활용한 불변 객체 관리 방법에 대해 정리하겠습니다. Immer는 불변성을 유지하면서 객체나 배열을 쉽게 수정할 수 있도록 도와주는 라이브러리입니다.

1. 불변성 유지와 상태 관리 문제
자바스크립트에서 객체나 배열을 수정할 때 불변성을 유지하는 것이 중요합니다. 직접적으로 수정하면 원본 객체가 변경되어 상태 관리가 제대로 이루어지지 않습니다.
예시로, 투두 리스트에서 특정 항목의 완료 여부를 토글하려면, 배열을 순회하며 상태를 변경해야 합니다. 하지만 일반적인 자바스크립트 코드에서는 불변성을 지키기 어렵고 복잡한 코드가 필요합니다.
2. 불변성 유지와 일반적인 자바스크립트 코드
불변성 유지: 배열을 map 메서드를 통해 순회하며 특정 인덱스의 항목만 수정하고, 나머지 항목은 그대로 반환하는 방식으로 불변성을 유지할 수 있습니다. 하지만 이러한 코드가 직관적이지 않고, 작성하기 어렵습니다.
3. Immer 라이브러리 사용법
Immer는 복잡한 불변성 관리 작업을 더 간결하고 직관적으로 처리할 수 있게 도와줍니다. 주요 기능은 produce 함수입니다.

1) produce 함수 사용
produce 함수는 첫 번째 인자로 원본 객체/배열을 받고, 두 번째 인자로 변환 함수를 받습니다.
변환 함수는 원본 객체의 복사본을 수정하는 방식으로 동작하며, 불변성은 Immer가 자동으로 관리해줍니다.
예시: 투두 리스트에서 항목을 토글하는 코드:

javascript
코드 복사
import produce from 'immer';

const toggleTodo = (index) => {
  setTodoList(produce(todoList, draft => {
    draft[index].completed = !draft[index].completed; // 복사본만 수정
  }));
};
변환 함수는 draft 객체를 받아서 복사본을 직접 수정할 수 있습니다.
Immer가 내부적으로 원본 객체를 변경하지 않고 새로운 객체를 반환합니다.
2) produce를 활용한 상태 변경
produce를 사용하면 상태 값을 불변성을 유지하면서도 상태를 간편하게 변경할 수 있습니다. 예를 들어, 할 일 목록에서 완료 여부를 토글하는 기능을 다음과 같이 간단하게 구현할 수 있습니다.

javascript
코드 복사
import produce from 'immer';

const toggleTodo = (index) => {
  setTodoList(produce(todoList, draft => {
    draft[index].completed = !draft[index].completed;
  }));
};
draft는 원본 배열의 복사본이므로, 이를 직접 수정할 수 있습니다.
3) 불변성을 유지하는 코드의 간결화
기존의 코드에서는 map을 사용해 불변성을 유지하면서 배열을 수정했지만, Immer를 사용하면 코드가 더 간결하고 직관적이 됩니다.
불변성을 걱정하지 않고 객체를 수정할 수 있으므로, 코드의 가독성도 높아집니다.
4. produce를 활용한 더 간결한 상태 변경
Immer의 또 다른 장점은 상태값을 변경할 때 setter 함수를 더 간단하게 사용할 수 있다는 점입니다. produce 함수는 새로운 상태값을 반환하므로, 이전 상태를 참조할 필요가 없습니다.
예를 들어, setTodoList에 직접 변경 함수를 넘길 수 있습니다:
javascript
코드 복사
setTodoList(produce(draft => {
  draft[index].completed = !draft[index].completed;
}));
이 방식은 불변성에 신경 쓸 필요 없이 복사본 객체만 수정하면 새로운 상태가 반환됩니다.
5. 상태 변경 함수에서의 produce 활용
**produce**의 두 번째 인자로 변환 함수만 넘기면, 이 함수는 이전 상태를 직접 참조하여 새로운 상태를 반환하는 함수를 생성합니다.
상태 변경 함수에서 setState 함수의 기능을 간소화할 수 있습니다:
javascript
코드 복사
setTodoList(prevState => produce(prevState, draft => {
  draft[index].completed = !draft[index].completed;
}));
이 방법은 상태 값을 직접적으로 참조하지 않고, 이전 상태를 함수 인자로 받아 처리하기 때문에 더욱 유연한 상태 관리가 가능합니다.
6. 리스트에서 key 속성 사용
리액트에서 리스트를 렌더링할 때, 각 항목에 고유한 **key**를 부여하는 것이 중요합니다. key는 리액트가 항목의 추가, 제거, 수정 여부를 효율적으로 추적할 수 있도록 돕습니다.
배열의 인덱스를 key로 사용하면 배열의 순서가 변경될 때 예상치 못한 동작이 발생할 수 있습니다. 따라서 고유 식별자를 key로 사용하는 것이 좋습니다.
7. 불변성 유지하지 않으면 상태가 반영되지 않음
불변성을 지키지 않으면 상태 변경이 반영되지 않거나 예기치 않은 동작이 발생할 수 있습니다. 상태를 변경할 때 setState를 통해 새로운 객체를 반환하도록 해야 합니다.
8. produce를 활용한 배열 항목 추가/삭제/수정
Immer를 사용하면 배열의 끝에 항목을 추가하거나, 특정 인덱스의 항목을 제거하거나 수정하는 작업을 불변성을 유지하면서 간편하게 할 수 있습니다.

1) 배열 끝에 항목 추가
javascript
코드 복사
setTodoList(produce(draft => {
  draft.push(newTodo); // 새 항목 추가
}));
2) 특정 인덱스 항목 삭제
javascript
코드 복사
setTodoList(produce(draft => {
  draft.splice(index, 1); // 특정 인덱스 항목 삭제
}));
3) 특정 인덱스 항목 수정
javascript
코드 복사
setTodoList(produce(draft => {
  draft[index] = updatedTodo; // 특정 인덱스 항목 수정
}));
9. Immer 사용 시 가독성
Immer는 간결한 코드로 불변성을 유지하는데 큰 도움을 주지만, 항상 가독성이 좋은 것은 아닙니다. 상황에 따라 map을 사용한 코드가 더 직관적일 수 있으므로, 상황에 맞춰 사용하는 것이 중요합니다.

결론
Immer 라이브러리는 자바스크립트에서 불변성을 관리하는 데 도움을 주는 유용한 도구입니다.
produce 함수를 사용하면 불변성을 신경 쓰지 않고 객체나 배열을 쉽게 수정할 수 있습니다.
상태값을 변경할 때 setState 함수를 간결하게 작성할 수 있고, 가독성을 높일 수 있습니다.
불변성 유지는 리액트에서 상태 관리의 핵심이며, Immer를 사용하면 이 작업을 간편하고 직관적으로 할 수 있습니다.