안녕하세요. 이번 시간에는 할 일 API를 구현해 보고 Create Reactive
Application 위주로 할 일 API를 활용하여 목록 조회 및 추가 수정 삭제를
구현해 보겠습니다.
단순히 API 호출만을 구현하는 것이 아니라 중복을 줄이고 보다 간결한 코드로 API를
연동하는 방법을 살펴보겠습니다.
블로그 앱에 ToDo 모델을 만들고 기본 옵션으로 모델 시리얼라이저 클래스를 정의하고요.
어드빈에도 등록하고 모델 뷰셋을 통해 기본적인 CRUD API를 등록하겠습니다.
Django REST 프레임워크 기본 설정에서는 인증 방법으로 세션 인증과 베이직 인증이
지정되어 있습니다.
베이직 인증은 사용하지 않으니 제거하고 세션 인증만을 사용하시길 권장드립니다.
permission-classes 설정에서는 isAuthenticated를 지정하여 반드시
인증됨을 요구하겠고요.
페이징 처리는 하지 않겠습니다.
블로그 앱에 ToDoModel 클래스, ToDoSerializer 클래스를 복사하고요.
Admin에도 등록합니다.
ToDoViewSet 클래스도 복사하고요.
세션 인증만 지원하는 부분은 Settings에서 Django REST 프레임워크의
Default 설정에 적용하시면 다른 API에도 두두 적용되니 추천드립니다.
라우터에도 등록하고요.
블로그 앱에 대해 마이그레이션 파일 생성해 주시고, 마이그레이트까지 해줍니다.
웹브라우저로 http://localhost:8000의 블로그의 API에 ToDoS URL
열어보시면 이렇게 Django REST 프레임워크 응답을 확인하실 수 있고요.
이 페이지에서 새로운 레코드 생성도 하실 수 있고, 수정도 하실 수 있습니다.
Django REST 프레임워크의 API 뷰 클래스에서는 CSRF Exempt 장식자를
통해 CSRF 검사를 하지 않도록 설정되어 있습니다.
하지만 Django REST Framework Session 인증을 사용하면 Session
인증에서는 CSRF 검사를 항상 수행하도록 구현되어 있습니다.
세션 인증에서는 세션 쿠키가 자동으로 블라우저에 의해 요청마다 자동 전송되므로 악의적인
웹사이트가 사용자의 권한을 도용하여 요청을 보낼 수 있기에 CSRF 공격을 방지하기
위함입니다.
CSRF 미들웨어에서 CSRF 토큰을 확인하기 전에 요청의 호스트 주소를 검사하거든요.
디폴트로는 장고 API 서버의 호스트 주소에 대해서만 매칭을 검사합니다.
브라우저 입장에서 장고 API 서버의 호스트 주소와 Create React 페이지의 호스트
주소가 다른 경우에는 장고 settings의 CSRF Trusted Origins 설정으로
Create React 페이지의 호스트 지정이 필요합니다.
그리고 Post-Patch-Put-Delete 요청에서는 CSRF 토큰 전송이 필요한데요.
CSRF 토큰을 지정하는 방법은 두 가지입니다.
첫째로 요청 데이터에 CSRF 미들웨어 토큰 값이 있거나, 둘째로 요청 헤더에 X CSRF
토큰 값이 있거나 입니다.
Axios의 Request Interceptor을 통해 두 번째 방법을 적용해 보겠습니다.
매 요청이 전송되기 전에 POST, PATCH, PUT, DELETE 요청일 때 쿠키에서
CSRF 토큰 값을 추출하여 X-CSRF-Token 헤더로 지정합니다.
그럼 Axios 인스턴스를 통한 모든 API 요청에서 CSRF 토큰을 염려하실 필요가
없습니다. 현재 실습 환경에서는 Django API 서버의 주소는
http://localhost8000이고 CRA 리액트 페이지 주소는
http://localhost:3000으로서 주소가 다르니까요.
API 요청에서 POST 등의 요청을 해야 하고 세션 인증을 사용하기에 요청 처리 시에
반드시 CSRF 토큰 체크가 수행됩니다.
Django Settings에 CSRF Trusted Origins 설정에 CRA React
페이지 주소를 반영하고요.
환경 변수를 통해 지정되도록 이미 구현되어 있으므로 .env 파일에 CSRF Trusted
Origins 환경 변수를 등록하고 Django 서버로 재시작시켜 줍니다.
CRA 리액트 애플리케이션에서는 Axios 인스턴스에서 request 인터셉터를
추가하고요.
post, patch, put, delete 요청에 한해 요청 헤더에 xcsrftoken
헤더를 추가토록 하고요.
값은 쿠키에 csrftoken 값을 가져와서 설정합니다.
그럼 Axios 인스턴스를 사용할 때에는 매 요청마다 자동으로 csrftoken이 전송될
것입니다. React-Toastify 라이브러리를 설치하겠습니다 라이브러리를 설치하겠습니다 토스트
메시지가 렌더링 될 위치를 토스트 컨테이너 컴포넌트를 통해서 지정하고요 속성 값으로서 각종
옵션을 커스터마이징합니다
메시지 위치는 우상단으로 지정했고요 3초 뒤에 자동으로 메시지가 사라지고요 클릭하면 즉시
사라집니다 그리고 최신 메시지가 상단에 위치토록 했고요 진행 바는 보이지 않도록 했고요
마우스를 올리면 시간 체크를 멈춥니다 토스트 메시지는 토스트 함수를 통해 손쉽게 내보내실
수 있고요 메시지 내용으로는 문자열 뿐만 아니라 JSX 문법을 통해 React 컴포넌트도
지원됩니다
React-Toastify 라이브러리를 설치합니다.
2024년 5월 기준으로 최신 버전 10.0.5 버전입니다.
최상위 React 컴포넌트가 지정된 index.js 소스 파일에서
react-toastify.css 파일을 임포트하고요.
Toast 메시지가 렌더링 될 ToastContainer 컴포넌트로 임포트해줍니다.
API 요청에서는 200 OK 응답 뿐만 아니라 다양한 오류 상황이 발생할 수 있습니다.
엑시오스의 기본 설정에서는 응답 상태 코드가 200 이상 300 미만일 때에만 정상
응답으로 처리하고 그 외의 상태 코드는 에러로 처리합니다.
이러한 에러들은 웹블라우저의 개발자 도구를 열지 않으면 인지하기 어려운데요.
개발 중에 개발자 도구를 꺼둔 채 왜 화면에 변화가 없는지 헤매는 경우가 많습니다.
이때 각종 에러를 토스트 메시지로 즉시 띄우도록 하면 에러 상황을 즉시 파악할 수 있어
편리합니다.
Axios의 response intercept 함수에서 각 에러 상황에 대해 toast
메시지를 추가하여 각 API 호출 시의 에러 메시지 처리를 간소화했습니다.
유효성 검사에 실패한 경우에는 toast 메시지로 필드별 에러 메시지를 보여주도록
했습니다. 물론 폼 컴포넌트 내에서 추가로 필드별 에러 메시지를 노출시킬 수 있도록 다음
슬라이드에서 API 요청을 간소화한 함수를 제공합니다.
Create React 앱의 index.javascript 파일에서 최상위 컴포넌트는
React의 StrictMode 컴포넌트입니다.
이 컴포넌트는 npm run start 명령을 통해 개발 서버에서만 동작하고요.
개발 중 발생할 수 있는 잠재적인 문제를 사전에 감지하고 경고합니다.
이를 위해 컴포넌트를 두 번 렌더링합니다.
물론 배포 시에는 한 번만 렌더링해요.
개발 시에는 두 번 렌더링 되기 때문에 Axios Hooks 사용 시에 첫 번째 Axios
요청이 전송될 때 바로 이어지는 두 번째 렌더링으로 인해 앞선 Axios 요청이 자동으로
취소되고 다시 요청됩니다.
개발 서버에서는 요청 취소 에러가 발생하기에 이를 무시하도록 했습니다.
API 서버가 작동하지 않거나 네트워크 문제로 API 서버에 접속할 수 없을 때에도
Toast 메시지로 알려주어 개발 편의성을 높였습니다.
CSRF, Failed 등 django-rest-framework 오류 메시지에 대해서도
Toast 메시지를 표시하도록 했습니다.
그 외의 모든 에러에 대해서도 Toast 메시지를 띄우도록 했습니다.
이와 같은 방법으로 API 요청 오류를 일관되게 처리함으로써 개발 편의성을 높이고 에러
상황을 빠르게 인지할 수 있습니다.
Axios Instance의 Response Interceptor에서 현재 401 응답에
대해서만 페이지 이동토록 구현되어 있는데요.
추가로 400 응답, 요청 취소, 네트워크, 오류 등에 대해서 Toast 메시지를 통해
오류 내역을 출력하도록 하겠습니다.
코드 복사해서 적용해 주시고요.
누락된 Toast 함수도 임포트합니다.
Django 서버를 잠시 죽이신 후에 CRA 페이지 새로고침을 해보시면 이렇게 네트워크
에러 발생 메시지를 Toast 메시지로 확인하실 수 있습니다.
이 Toast 에러 메시지가 없었다면 브라우저 개발자 도구 콘솔 창을 보고 계시지 않았다면
아무런 변화가 없는 에러 화면을 보고 계셨어야 했고요.
왜 동작하지 않는지 당황하셨을 텐데요.
이제 토스트 메시지로 즉시 확인하실 수 있게 되었습니다.
Django 개발 서버는 다시 살려주세요.
REST API 요청에서는 일관된 URL을 제공하며 Django REST Framework를 통해
API 요청을 일관되게 처리합니다.
이를 통해 각종 요청과 응답에 대한 처리가 통일성을 유지하고 있습니다.
매 API 요청에서는 보다 간소화된 방법으로 API 호출을 수행하고 응답 및 오류를 처리할
수 있도록 API Request 함수와 Make REST API 함수를 구현했습니다.
API 호출 시에 Axios 인스턴스를 사용하므로 인증과 CSRF, 에러 메시지 등에
대해서는 신경 쓰지 않으셔도 됩니다.
이는 개발자가 순수하게 응답 데이터에만 집중할 수 있도록 도와줍니다.
Make REST API 함수 호출 시에 리소스의 주소를 지정하면 해당 리소스의 List,
Detail, Create, Update, Delete 메서드를 반환합니다.
이를 통해 간결하게 API 호출을 수행할 수 있으며 반환값은 Axios Hooks의
반환값과 동일하게 맞췄습니다.
Django REST 프레임워크에서는 유효성 검사에 실패했을 때 400 BadRequest
응답을 합니다.
응답 상태 코드 400은 엑시오스에서 에러로 처리되지만, API Request 내에서는 이를
예외로 발생시키지 않고, 유효성 검사 오류 메시지를 컴포넌트에서 직접 처리할 수 있도록
에러 객체를 반환하도록 했습니다.
이러한 구조를 통해 개발자는 보다 효율적이고 일관된 방식으로 API 호출을 관리할 수
있으며 오류 처리 및 인증에 대한 부담을 덜 수 있습니다.
Axios Instance를 통한 API 호출을 랩핑한 API Request 함수를
추가합니다. 지정 URL 메서드 데이터로서 HTTP 요청을 보내고요.
응답 상태 코드가 200 이상 300 미만이 아닐 때에는 예외가 발생합니다.
이 예외 객체로 에러를 파악합니다
응답 상태 코드가 400이면 유효성 검사 에러니깐요
이때에는 컴포넌트 단에서 에러 객체로 에러 메세지를 확인할 수 있도록 에러 객체를
반환합니다 그 외에 에러에 대해서는 레이즈 에러, 플래그가 참이면 예외로써 전파하고요.
거짓이면 에러 객체로 반환도록 했습니다.
그리고 Make REST API 함수를 복사해서 추가합니다.
인자로 리소스의 리스트 주소를 등록하면요.
해당 리소스와 관련된 리스트 디테일, 크레이트 업데이트, 딜리트 요청을 할 때 매번
URL을 직접 조합하지 않아도 응답 상태 코드 400에 대해서도 매번 처리를 하지 않아도
간결한 코드로 API 호출을 할 수 있어 편리합니다.



이번 강의에서는 할 일(ToDo) API를 구현하고, Create React App(CRA)과 Django REST 프레임워크를 연동하여 CRUD 기능을 구현하는 방법에 대해 다루었습니다. 핵심 내용은 다음과 같습니다:

1. Django REST 프레임워크 설정:

블로그 앱에 ToDo 모델을 생성하고, 해당 모델에 대한 시리얼라이저(ToDoSerializer)를 정의한 후, 관리자 페이지에 등록합니다.
ToDoViewSet 클래스를 사용하여 기본적인 CRUD API를 등록합니다.
인증 방법으로 세션 인증을 사용하며, isAuthenticated로 인증을 요구합니다.

2. CSRF 설정:

Django의 기본 CSRF 보호 기능은 세션 인증을 사용할 경우 활성화됩니다. 이는 악의적인 웹사이트로부터의 공격을 방지하는데 필요합니다.
CRA 리액트 앱과 Django 서버의 호스트가 다를 경우, CSRF Trusted Origins 설정에서 리액트 앱의 호스트를 추가해야 합니다.
Axios에서 요청 인터셉터를 사용하여 CSRF 토큰을 자동으로 헤더에 추가하여 CSRF 검사를 우회합니다.

3. Axios와 React-Toastify 연동:

Axios를 사용해 API 호출을 관리하며, 응답 상태 코드가 200 OK 이외의 값을 받을 때는 React-Toastify를 이용해 에러 메시지를 즉시 표시합니다.
유효성 검사 실패, 네트워크 오류 등의 에러를 사용자에게 Toast 메시지로 알려줍니다.

4. API 요청 처리 간소화:

Axios 인스턴스를 사용하여 API 요청을 간소화하고, 인증 및 CSRF, 에러 처리에 대한 부담을 덜어줍니다.
Make REST API 함수로 각 리소스의 URL을 지정하면 해당 리소스에 대한 CRUD 작업을 간단하게 처리할 수 있습니다.

5. 유효성 검사 및 에러 처리:

Django REST 프레임워크에서 유효성 검사 실패 시 400 BadRequest 응답을 반환하며, 이를 Axios에서 처리하고, 필드별 오류 메시지는 컴포넌트 내에서 처리할 수 있도록 구성됩니다.

6. 개발 환경에서의 편의성:

React의 StrictMode는 개발 시 컴포넌트를 두 번 렌더링하여 잠재적인 문제를 사전에 경고합니다. 이로 인해 Axios 요청이 중복되거나 취소되는 상황이 발생할 수 있어, 이를 처리하는 로직이 필요합니다.
네트워크 오류 및 서버 문제를 쉽게 파악할 수 있도록 Toast 메시지를 활용해 실시간으로 오류를 사용자에게 알려줍니다.

요약:
Django REST 프레임워크와 Create React App을 활용한 API 연동 및 CRUD 기능 구현.
CSRF 보호와 세션 인증을 설정하고, 이를 Axios 인터셉터를 통해 자동으로 처리.
React-Toastify를 사용하여 API 호출 시 발생하는 오류를 사용자에게 실시간으로 전달.
API 호출을 간소화하고, 유효성 검사 및 오류 처리를 효율적으로 관리하는 방법을 배웠습니다.