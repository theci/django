안녕하세요. 이번 시간에는 Create React App, React 애플리케이션에서
장고 폼과 뷰의 기능을 빌려 하이브리드 방식으로 서비스를 개발해 보겠습니다.
앞서 구현했던 할일 목록 애플리케이션입니다.
modal 기능을 활용해서 입력 폼을 생성했습니다.
오른쪽 아래에 DDT 아이콘이 보이시나요?
이는 Django Debug Toolbar 아이콘입니다.
그렇습니다. 이 폼은 Django 폼을 활용한 Vue HTML 응답을 React 단에서
모델 기능을 통해 띄운 것입니다.
React에서는 데이터 보여주는 기능만 구현하면 코드가 간결한데 폼 처리에서 폼 필드가
많아지면 상태 관리가 아주 복잡해지거든요.
그에 반면, Django 폼은 많은 수의 필드로 간결한 코드로 처리할 수 있죠.
폼과 뷰를 활용해서 장고에서는 할 일 생성 페이지를 만들어 두고요 리액트에서는 이렇게
iframe-modal-custom-component에서 iframe-source 속성으로
할 일 생성 페이지의 url만 지정하면 됩니다
프로젝트 설정으로 쿠키도 자동 전송되니 인증에 대해서도 신경 쓸 필요가 없습니다.
유효성 검사에 실패하면 장고 폼을 통해 에러 메시지가 표시됩니다.
유효성 검사에 통과하고 저장이 되면 장고 페이지로부터 메시지를 받아 상태 값에 추가하여
페이지 새로고침 없이도 할 일 목록이 갱신됩니다.
리액트 애플리케이션이라고 해서 모든 기능을 리액트로 구현해야 하는 것은 아닙니다.
이처럼 장고의 강력한 폼 처리 기능을 결합하여 효율적이고 유지 보수성 높은 애플리케이션을
구현할 수 있습니다.
아이프레임 모델 커스텀 컴포넌트입니다.
총 3개의 속성 값을 받습니다.
타이틀은 모델의 제목이고요
아이프레임 소스는 띄울 페이지 주소입니다 속성 값에서 호스트가 생략되어 있으면 API
호스트 설정을 자동으로 추가하여 편의성을 높였습니다
아이프레임으로 접속할 페이지는 해당 사이트에서 리액트 페이지 주소에 대해 아이프레임 접속을
허용해 줘야만 합니다 허용하지 않으면 이처럼 아이프레임 접속 요청을 브라우저에서 거부합니다
이에 대한 장고 프로젝트 설정은 다음 슬라이드에서 다루겠습니다.
세 번째 속성 값은 handleClose 함수입니다.
모델 창을 그냥 닫을 때에는 handleClose 함수는 인자 없이 호출되고요.
폼 저장 후에 닫아야 할 때에는 handleClose 함수에는 저장된 할 일 객체가
전달됩니다. 이 할 일 객체는 iframe 페이지로부터 메시지도 전달받습니다.
미리 제공해 드린 iframe 모델 소스 파일을 src 밑에 components 폴더로
복사합니다.
Django 서버에서 React 페이지에서의 iframe 접속을 허용하려면 csp 설정이
필요한데요.
Django에서는 Django csp 라이브러리를 활용합니다.
이 라이벌리는 Mozilla에서 관리하는 프로젝트입니다.
라이벌리를 설치하시고 middleware에 csp-middleware를 추가하고요.
세팅스의 CSP 프레임, 안세스터 등의 설정에 리액트 페이지 주소를 추가합니다.
장고 CSP 라이브러리 최신 버전을 설치합니다.
세팅스의 미들웨어 설정에 CSP 미들웨어를 추가하고요.
CSP 미들웨어는 다른 미들웨어와 의존 관계가 없으므로 미들웨어 순서는 상관없습니다.
그리고 CSP 각종 설정들을 복사해서 적용해 주시고요.
환경변수 파일 .env에는 CSP 프레임 앤세스터스 값을 iframe 요청을 허용할 페이지
주소를 지정합니다.
현재 개발 환경에서는 CRA 리액트 페이지에서 iframe 접속을 할 테니까요.
리액트 페이지 주소를 지정합니다.
Django 환경변수 로딩을 위해 개발 서버를 재시작합니다.
할 일 생성 페이지를 Django 프로젝트에서 구현합니다.
모델 폼과 CreateView, Class 기반 뷰를 활용하는 일반적인 Django
페이지이고요.
React 페이지에서 이 페이지를 iframe으로 띄우기에 React 페이지와 CSS,
JavaScript 등이 모두 격리됩니다.
이 페이지에서 필요한 리소스들은 이 템플릿에서 직접 명시해 주세요.
Crispy Forms 라이브러리를 활용하여 Form 레이아웃을 파이썬 코드로 구성했고요.
이 페이지가 보이실 때 바디 요소의 세로 크기를 조사하여 아이프레임 부모 윈도우로 메시지를
보내고요. 이 메시지는 React의 iframe 모델 컴포넌트에서 받아서 모델 창의 크기를
조절합니다. 그리고 유효성 검사 통과 후에 레코드 저장 후에 ToDoSerializer를
통해 모델 인스턴스를 Python 객체로 변환하고요.
템플릿 단에서 JSON 문자열로 변환한 뒤에 iframe 부모 윈도우로 저장된 객체를
메시지로 보냅니다.
이 메세지는 React의 iframe-modal 컴포넌트에서 받아서 HandClose
속성값 함수 호출 시에 인자로 전달하여 ToDoList 컴포넌트로 전달됩니다.
ToDoCreateView 코드를 블로그의 viewspy 파일에 복사합니다.
모델 폼을 활용한 일반적인 생성 뷰이고요.
유효성 검사 통과 후에 폼 생성에서 사용했던 템플릿 파일을 활용해서 응답하고요.
생성된 데이터를 savedData 이름으로 contextData로 넘깁니다.
그럼 템플릿 단에서 자바스크립트를 통해 iframe 부모 윈도우로 생성된 데이터 객체를
전달할 것입니다.
블로그의 urspy 파일에 url 패턴도 추가해 주시고요.
블로그의 forms.py 경로에 ToDoForm 모델 폼을 생성하고요.
Crispy Forms를 활용해 폼 레이아웃을 구성합니다.
템플릿의 블로그에 언더바 투드폼.html 파일을 복사해서 생성합니다.
방금 구현한 페이지를 열어보면 이렇게 독립적으로 유효성 검사 및 저장까지 잘 동작하고요.
이 페이지 주소를 React의 iframe에서 사용할 것입니다.
ToDoList 컴포넌트에 iframe 소스 속성 값을 추가하고요 새 할 일 버튼을 추가하고
새할일 버튼을 클릭하면 iframe 소스 속성 값에 장고 새 할 일 생성 페이지 주소를
지정합니다 그럼
iframe 소스 주소로 iframe modal 컴포넌트가 렌더링 되고요 modal 창이
이렇게 뜹니다
모달창에서 그냥 닫기 버튼을 누르면 핸드 클로즈 함수는 인자 없이 호출되고요.
Set iframe source null 함수 호출로 모달창을 닫습니다.
Django 새 할 일 생성 페이지에서 유효성 검사를 통과하고 저장 후에는 핸드 클로즈
함수에는 인자로 저장된 객체가 전달되고요.
ToDoList 상태 값에 추가하고 모달창을 닫습니다.
ToDoList 컴포넌트에 iframe 소스 상태 값을 추가하고요 초기 값은 null입니다
새 할 일 버튼을 추가하고요 클릭하면 iframe 소스 상태 값에 할 일 생성 페이지
주소를 지정합니다
새 할 일 버튼을 오른쪽 끝에 붙이기 위해 flex-layout을 적용하고요 iframe
modal 컴포넌트를 추가하고 iframe 소스 속성 값으로 iframe 소스 상태 값을
적용합니다 새 할 일 버튼을 클릭하시면 이렇게 아이프레임으로 장고의 할 일 생성 페이지가
떴습니다.
리액트에서는 단지 페이지 주소만 지정했을 뿐 폼 생성 및 유효성 검사 그리고 저장까지 모두
장고단에서 수행됩니다.
유효성 검사에 통과하면 장고 페이지로부터 저장된 객체를 메세지로 받아서 핸드 클로즈 함수가
호출되고요. 인자로 저장된 객체가 넘어옵니다.
그럼 To-Do 리스트 상태 값에 추가하고 모델 창을 닫고요.
페이지 새로고침
전혀 없이 싱글 페이지 애플리케이션(SPA) 방식으로 장고와 깔끔하게 통합되었습니다.
현재 수정 기능은 React 단에서 API를 호출하여 처리하고 있습니다.
앞선 생성 구현도 엄청 간결했었는데요.
수정 구현도 간결합니다.
Django에서는 할 일 수정 페이지를 구현하고요.
ToDoUpdateView 클래스는 ToDoCreateView 클래스와 상속받는 클래스만
닫을 뿐 나머지 구현은 동일합니다.
Create React App To Do List 컴포넌트에서는 수정 시에 Edit To
Do 함수를 호출하는데요.
기존의 수정 코드는 모두 제거하고요.
React에서는 단순히 Django의 수정 페이지, 유효할 문자열만 조합해서 IPM 소스
상태 값에 반영만 해주면 됩니다.
그럼 모델 창이 뜨면서 할 일 수정 UI가 보여질 것입니다.
iFrame 모델 컴포넌트의 HandClose 속성 값에서는 인자로 수정된 객체를 전달받을
텐데요. ToTheList 상태 값에서 인자의 객체 정보가 있다면 갱신하고, 없다면
추가토록 HandClose 함수 구현을 변경합니다.
ToDoUpdateView 클래스 코드를 복사해서 적용합니다.
상속받는 클래스가 UpdateView라는 것을 제외하면 나머지 코드는
ToDoCreateView 코드와 동일합니다.
URL 패턴도 추가하고요.
이제 수정 기능에서 Django 쪽 구현은 끝났고요.
투드 리스트 컴포넌트에서는 Edit To Do 함수에서 수정 기능을 구현하고 있죠.
기존에 수정할 내용을 입력받고 비교하고 수정 API 호출하는 코드는 모두 제거하고요.
할 일 수정 페이지 주소를 계산하여 iframe 소스 상태 값에 반영만 해줍니다.
그럼 수정 버튼을 클릭하면 이렇게 즉시 모델 창으로 수정 폼이 뜨죠.
수정하고 저장하면 할 일 목록에서 기존 항목이 변경되는 것이 아니라 끝에 추가되었습니다.
이는 HandClose 함수에서 인자로 전달받은 객체를 단순히 ToDoList 상태값 끝에
추가하도록 구현되어 있어서 그렇고요.
ToDoList 상태값에서 인자의 객체 정보가 있다면 갱신하고 없다면 추가하도록
HandClose 함수 구현을 변경합니다.
그럼 수정 후에 기존 항목이 갱신되며 수정 기능 구현 끝입니다.



이번 시간에는 React와 Django를 결합한 하이브리드 애플리케이션 개발에 대해 다루었습니다. 구체적으로, 할 일 목록 관리 애플리케이션에서 Django의 폼과 뷰를 활용하여 React에서 iframe을 사용하여 할 일 생성 및 수정 기능을 구현하는 방식입니다. 핵심 내용을 정리하겠습니다:

1. Django와 React 결합 방식
Django 폼과 뷰를 사용하여 할 일 생성 및 수정 페이지를 Django에서 구현.
React에서는 주로 데이터 표시와 모달 창을 통한 폼을 띄우는 역할만 담당.
아이프레임 (iframe) 을 사용하여 Django에서 제공하는 할 일 생성/수정 페이지를 React에서 띄움.
2. 아이프레임 모달 구현
아이프레임 모달 컴포넌트:
세 가지 속성: title, iframeSource (iframe의 URL), handleClose (모달을 닫을 함수).
모달 내에서 할 일 생성/수정 페이지를 띄우고, 저장된 할 일 객체는 부모 React 컴포넌트로 전달됨.
Django와 React 간 메시지 전달:
Django에서 폼 처리 후 유효성 검사 결과를 React로 전달, 그 후 상태값을 업데이트하며 UI 갱신.
3. Django 설정
CSP (Content Security Policy) 설정을 통해 React에서 Django 서버로 iframe 요청을 허용.
Django CSP 라이브러리를 설치하여 iframe 접근을 설정.
할 일 생성 페이지는 Django에서 모델 폼을 사용해 구현되고, 유효성 검사 후 데이터를 부모 React 컴포넌트로 전송.
4. 할 일 생성 및 수정 처리
할 일 생성:
Django 폼을 통해 할 일 생성 페이지를 제공하고, React에서 iframe으로 해당 페이지를 띄운다.
폼 제출 후, Django는 생성된 데이터를 React로 전달하고, React는 이를 상태값에 추가하여 화면에 표시.
할 일 수정:
수정 페이지도 Django에서 구현하며, React에서는 수정할 페이지의 URL을 iframe에 전달하여 수정 기능을 처리.
수정 후, React에서 상태값을 업데이트하여 UI 갱신.
5. React에서의 상태 관리
React에서는 상태값(ToDoList)을 관리하고, 아이프레임의 handleClose 함수는 인자로 전달된 할 일 객체를 통해 상태값을 갱신.
새 할 일 추가 및 수정 시:
새로운 할 일을 추가할 때와 수정할 때는 모두 Django에서 제공하는 페이지를 iframe으로 띄우고, React는 해당 페이지의 상태값을 반영하여 UI를 갱신.
6. SPA(싱글 페이지 애플리케이션) 방식
페이지 새로고침 없이 SPA 방식으로 데이터를 갱신하고, Django와 React가 효율적으로 통합되어 유지 보수성이 높은 애플리케이션을 구현.
7. 코드 변경 및 설정
Django 뷰:
ToDoCreateView, ToDoUpdateView 클래스를 사용하여 할 일 생성 및 수정 페이지를 처리.
이 페이지들은 Django의 CreateView, UpdateView 클래스 기반 뷰로 처리되며, 폼을 제출한 후 생성된 데이터를 React로 전달.
React:
아이프레임을 통한 Django 페이지를 렌더링하고, 이를 통해 데이터 생성 및 수정.
아이프레임 소스를 통해 Django 페이지 URL을 설정하여 이를 React 페이지에서 띄우며, 폼 제출 후 결과를 부모 컴포넌트로 전달.
이 방식으로 Django와 React의 장점을 결합하여 효율적이고 유지 보수가 용이한 애플리케이션을 개발할 수 있습니다.