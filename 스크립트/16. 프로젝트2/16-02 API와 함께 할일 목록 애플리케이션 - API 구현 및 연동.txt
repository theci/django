ToDoList 컴포넌트를 컴포넌츠 경로에서 페이지스 경로로 옮기겠습니다.
현재의 ToDoList 컴포넌트는 재사용성이 낮아 특정 페이지에 종속적이기 때문입니다.
옮기시고 나서 ToDoList 컴포넌트를 사용하는 App5 컴포넌트와 App8 컴포넌트에서
임포트 경로도 맞게 수정되었는지 확인합니다.
할 일 목록 조회 API를 연동해 보겠습니다.
현재는 메모리 내에서 상세 값으로 관리되고 있습니다.
Use API Axios Hook을 활용하여 할 일 목록 API를 호출합니다.
콘솔창에 수신 데이터, 로딩 여부, 에러 객체를 출력해 보시면 이렇게 매 렌더링 시마다
출력되었고요 이렇게 수신된 데이터를 확인하실 수 있습니다
API 조회된 할 일 목록은 앞선 상태 값과 동일한 이름으로 변경하고요 기존 상태 값은
제거하고 상태 값, 초기 값 배열도 제거합니다
유즈 API 액시오스 훅을 통해서 상태값 Getter만 제공받을 뿐 이 상태값을 수정할
수는 없습니다 현재
상태값 Setter인 SetToDoList 함수는 없고요 지금은 주석 처리하겠습니다
API 호출하고 응답을 받기 전까지는 ToDoList 상태값은 Undefined이니깐요.
아래의 코드에서 .length 속성 참조 시에 이렇게 타이배러가 발생하고 있습니다.
디폴트 값으로 빔 배열을 지정해 주겠습니다.
그리고 로딩 상태값을 참조하여 Spinner 컴포넌트로 로딩 중임을 보여주겠습니다.
네트워크 통신이 빠르면 스피너가 너무 빨리 지나가서 잘 안 보이실 텐데요
크롬 브라우저 개발자 도구에서 탭에서 를 느린 시리즈로 변경하시고 페이지 새로고침해 보시면
네트워크 통신이 느리게 동작해서 스피너 아이콘을 조금은 더 길게 확인하실 수 있습니다
그리고 loadingError 상태값을 참조해서 에러 내역도 간단하게 보여주겠습니다.
Django 개발 서버를 일부러 죽이고 새로고침해 보시면 이렇게 에러 메시지를 확인하실 수
있습니다. toast 메시지만으로 충분하시면 이 에러 렌더링 부분은 제거하셔도 좋습니다.
그럼 목록초의 API 연동 끝입니다.
ToggleToDo 함수에서 할 일 수정 API를 연동해 보겠습니다.
먼저 수정 대상인 할 일 객체를 조회하고요.
MakeRestAPI 함수를 통해 ToDoRestAPI 객체를 생성합니다.
이제 이 객체를 통해 손쉽게 REST API를 호출할 수 있습니다.
ToggleToDo 함수에서는 갱신이 목적이니까요.
업데이트 메서드를 활용합니다.
첫 번째 인자로 레코드의 기본 키를 지정하고요.
두 번째 인자로 수정할 값을 지정합니다.
업데이트 메서드에서는 푼 요청이 아닌 패치 요청으로 API 요청을 하거든요.
그러니 전체 필드를 모두 지정하지 않아도 수정할 필드만 지정하셔도 됩니다.
업데이트 메서드는 프라미스 객체니까 await 지정이 필요하고요.
await는 async 함수 내에서만 사용할 수 있으니 함수를 async 함수로
변경합니다. 반환 값으로 응답 데이터와 에러 객체, 그리고 리스펀스 객체를 받으실 수
있고요. 응답 데이터를 출력해 보시면 이렇게 변경이 반영된 데이터베이스에 저장된 레코드
내역을 확인하실 수 있습니다
서버에서는 데이터가 변경되었지만 UI에서는 아직 변경이 반영되지 않았는데요 변경을 반영하는
가장 손쉬운 방법은 새로고침을 하는 것이죠
새로고침이 가장 쉬운 방법이지만 서버에 API 요청을 한 번 더 해야 합니다 아래에
setToDoList 함수 호출 코드처럼 상태값을 직접 변경할 수 있으면 API 호출 없이
즉시 화면에 반영할 수 있을 텐데요.
지금은 setToDoList 상태값 변경 함수가 없죠?
이 상황을 해결하기 위해 상태값을 하나 더 추가하겠습니다.
useApiAxios의 상태값은 변경할 수 없으니 원본 상태값으로 두고요.
추가로 정의한 상태 값에서는 원본 상태 값을 복사하는 거죠.
그럼 복사한 상태 값은 변경할 수 있게 됩니다.
그런데 페이지 새로고침 해보시면 경고 메시지가 22개나 떴습니다.
이 경고 메시지가 뜬 이유는 오리진 투들리스트 상태 값의 디폴트 값인 배열 때문입니다.
API 응답이 있기 전까지는 오리진 투들리스트 상태 값은 Undefined가 되고 매번
디폴트 값인 빈 배열이 할당됩니다.
매 재렌더링 시마다 빔 배열은 새로운 객체이고 오리진 투들리스트 상태 값이 변경되었으니
오리진 투들리스트 상태 값에 의존하는 useEffectHook 함수가 호출되고요 투들리스트
상태 값도 변경되는 거죠
투들리스트 상태 값이 변경되면 재렌더링이 발생되고 재렌더링이 발생하면 오리진 투들리스트
상태 값도 다시 배열이 할당되고 유즈 이펙트 훅이 또 실행되고 투들리스트 상태 값이
변경되고 그러니 또 재렌더링이 발생하고 이렇게 악순환이 반복되는 상황입니다
API 응답을 받아 오리진 투들리스트 상태 값에 값이 있을 때까지 반복됩니다
이 상황을 해결하려면 오리진 투들리스트 상태 값의 디폴트 값으로는 undefined를
할당해서 매번 새로운 객체가 생성되지 않도록 하고요.
useEffect hook 내에서 오리진 투들리스트 값이 거짓이면 빈 배열로 변한토록
하시면 문제가 깔끔하게 해결됩니다.
이제 toggleToDo 함수 내에서 저장 후에 목록 새로고침 함수 호출은 제거하시고요.
업데이트 요청의 응답 객체를 투들리스트 상태 값에 반영하시면 됩니다.
그리고 API 호출 시에 요청이 실패했을 수도 있습니다.
요청이 실패하면 현재 Toast 메시지로 에러 메시지를 보여주도록 했으니 따로 에러 메시지
노출 코드는 작성하지 않겠습니다.
하지만 컴포넌트 노출이 필요하시다면 에러 객체를 참조해서 작성하실 수 있고요.
API 요청이 성공하면 데이터 상태 값이 있는 것이니 데이터 상태 값이 있을 때에만
ToDoList 상태 값에 반영하겠습니다.
그리고 투드 리스트 상태 값을 순에 돌며 리스트 그룹 아이템 컴포넌트를 렌더링할 때 키
인자로 인덱스 값을 지정했었는데요.
이는 각 투드 객체에서 유일한 값이 없어서 어쩔 수 없이 지정했었던 것이죠.
그런데 이제 id 필드로 데이터베이스 기본 키 값이 있으니 이를 지정해 주시면 키 속성
지정이 깔끔해집니다.
이번에는 addTodo 함수에서 할리 생성 API를 연동해 보겠습니다.
ToDoList API에 create 메서드를 호출하고요
첫 번째 인자로 생성 요청 데이터를 지정합니다 완료 여부 필드는 서버에서 디폴트 값이
지정되어 있으니 지정하지 않으셔도 됩니다
await 호출을 위해 async 함수로 변경하고요 API 요청이 성공했을 때에만
ToDoList 상태 값에 반영합니다
이번에는 deleteToDo 함수에서 할 일 삭제 API를 연동해 보겠습니다.
ToDo, REST API의 delete 메서드에서는 첫 번째 인자로 삭제할 할 일의 기본
키만 지정하시면 됩니다.
삭제가 성공적으로 수행되면 응답 상태 코드는 204번 no-content 응답을 하고요.
응답 바디가 비워져 있습니다.
데이터가 삭제되었으니 응답으로 보낼 데이터가 없는 거죠.
이는 RFC 7231번 문서에도 정의된 표준적인 방법입니다.
삭제 API 호출 후에 삭제 성공을 확실히 체크하시려면 응답의 상태 코드가 204번인지
확인하시고요.
ToDoList 상태 값에서 해당 인덱스의 할 일을 제거합니다.
이번에는 EditToDo 함수에서 할 일 수정 API를 연동해 보겠습니다.
수정 API는 앞서 ToggleToDo 함수에서도 연동을 해봤었죠.
지정 ID의 할 일에 대해서 새로운 텍스트로 수정 API 요청을 하고요.
API 요청이 성공했을 때에만 ToDo 리스트 상태 값에 반영합니다.




이번 글에서는 React 애플리케이션에서 Django REST API를 연동하여 할 일 목록을 조회하고 수정, 추가, 삭제 기능을 구현하는 과정을 설명하고 있습니다. 내용을 단계별로 정리하겠습니다:

1. ToDoList 컴포넌트 경로 이동 및 수정
ToDoList 컴포넌트를 재사용성이 낮아 페이지 경로로 옮겼습니다.
기존 App5 및 App8 컴포넌트에서 임포트 경로를 수정하여 새로운 위치에서 ToDoList 컴포넌트를 사용하도록 했습니다.
2. 할 일 목록 조회 API 연동
기존에 메모리 내에서 관리되던 할 일 목록을 useApiAxios 훅을 사용하여 API로부터 데이터를 조회하게 변경했습니다.
데이터를 조회한 후, 상태값을 업데이트하고 로딩 상태를 표시하는 Spinner를 추가했습니다.
데이터 수신 중 로딩 상태를 표시하고, 에러 발생 시 Toast 메시지로 에러를 처리했습니다.
API 응답이 없거나 에러가 발생했을 경우 적절한 처리를 했습니다.
3. 할 일 수정 API 연동 (ToggleToDo 함수)
ToggleToDo 함수에서 수정 요청을 보내는 부분을 API로 연동했습니다.
MakeRestAPI 함수로 PATCH 요청을 보내어 해당 할 일을 수정하고, 응답을 받은 후 UI에 반영하도록 했습니다.
UI에서 즉시 반영하려면 상태값을 업데이트할 수 있어야 하므로 useApiAxios 훅을 수정하여 상태값을 변경할 수 있도록 추가 상태값을 정의했습니다.
useEffect 훅을 사용해 상태값을 효율적으로 관리하며, API 응답 후 변경된 데이터를 UI에 즉시 반영할 수 있도록 했습니다.
4. 할 일 추가 API 연동 (addTodo 함수)
할 일 추가는 POST 요청을 통해 처리되었습니다. 새로운 할 일 데이터를 서버에 전송하고 응답을 받은 후 ToDoList 상태값을 업데이트했습니다.
ToDoList 상태값에 새로운 할 일을 추가하는 방식으로 구현했습니다.
5. 할 일 삭제 API 연동 (deleteToDo 함수)
할 일 삭제는 DELETE 요청을 통해 이루어집니다. 삭제할 할 일의 ID만 지정하면 되며, 삭제 후 응답 상태 코드 204를 확인하고 UI에서 해당 항목을 삭제했습니다.
6. 할 일 수정 API 연동 (EditToDo 함수)
EditToDo 함수는 ToggleToDo와 유사한 방식으로 특정 할 일의 텍스트를 수정하는 API 요청을 처리합니다.
수정된 데이터를 서버에 전송하고, 성공적으로 처리되었을 때만 ToDoList 상태값을 업데이트했습니다.
7. 상태 관리 및 UI 업데이트
모든 API 호출 후에는 응답 데이터가 성공적으로 반환되었을 경우에만 UI에 반영되도록 했습니다.
상태값을 효율적으로 관리하기 위해, 원본 데이터를 변경하지 않고 복사본을 사용하여 수정 가능하게 하였으며, 이를 통해 불필요한 렌더링을 방지했습니다.
8. 에러 처리 및 개선
Toast 메시지를 통해 API 요청 중 발생할 수 있는 에러를 사용자에게 전달했습니다.
네트워크 에러나 400번대 유효성 검사 에러 등 다양한 오류 상황을 Toast 메시지로 표시해 사용자에게 피드백을 제공했습니다.
결론
위와 같이 React 애플리케이션에서 Django REST API와 연동하여 할 일 목록 조회 및 수정, 추가, 삭제 기능을 구현하였습니다. 
이를 통해 상태값을 효율적으로 관리하고, API 요청과 응답 처리를 간소화하며, 사용자에게 적절한 피드백을 제공할 수 있었습니다.