안녕하세요. 이번 시간에는 가상 환경 생성 및 라이브러리 설치에 대해서 살펴보겠습니다.
현재 로그인 유저명이 Ubuntu입니다.
루트의 srv 디렉토리는 빈 디렉토리이고요.
이 디렉토리 소유자를 Ubuntu로 변경하고 이 디렉토리에 가상 환경, 설정 파일,
데이터, 소스 코드 등을 배치하겠습니다.
srv, venv 경로에 파이썬 3.12 기반으로 가상 환경을 생성하고 생성한 가상 환경을
활성화합니다. 가상 환경 활성화 후에는 파이썬 명령으로도 파이썬 3.12를 사용하실 수
있습니다. 팁으로 가상 환경 내 파이썬 명령의 절대 경로를 알고 있다면 그 절대 경로의
파이썬 실행을 통해서 가상 환경 활성화 없이도 가상 환경을 활용하실 수 있습니다.
가상 환경을 사용하는 파이썬 프로그램을 시스템 서비스로 등록하실 때 가상 환경 활성화
없이도 가상 환경을 사용할 수 있어서 편리합니다 로그인 유저명을 확인하고요 소속 그룹명도
확인합니다 루트의
srv 디렉토리의 권한이 루트임을 확인했고요 srv 디렉토리 경로의 소유자 및 그룹을 현재
유저인 우분2로 변경합니다
파이썬 3.12 명령으로 파이썬 3.12를 사용할 수 있죠
파이썬 3.12의 가상 환경을 srv의 venv 경로에 생성합니다
리눅스니까 가상 환경 디렉토리 내에 빈 디렉토리에 액티베이트 스크립트와 파이썬 명령 그리고
pip 명령이 있습니다
소스 venv 빈 액티베이트 명령으로 지정 가상 환경을 활성화합니다.
파이썬 명령의 경로를 확인해 보니 가상 환경이 잘 활성화되었네요.
가상 환경을 비활성화하고요.
가상 환경을 활성화하지 않더라도 이렇게 가상 환경 내에 파이썬이나 PIP를 절대 경로로
지정하여 가상 환경을 사용할 수 있습니다.
Requirements Directory에 production.txt 경로에 라이브러리를
일괄 설치할 텐데요.
Psycopg2 라이브러리가 설치될 테니 라이브러리 설치에 필요한 시스템 패키지를 먼저
설치해줘야만 PsychoPG2 라이브러리가 설치됩니다.
SIV의 코스 레포 경로에 GitHub 상의 소스 코드를 복제합니다.
GitHub 저장소에 여러분의 소스코드가 있으시다면 여러분의 저장소 주소를 지정해
주시고요. 없으시다면 제 저장소 주소를 지정해서 배포를 진행해 주세요.
myproj 프로젝트에 서비스용 라이브러리를 설치합니다.
강의의 GitHub 저장소 코드를 복제해서 배포를 진행해 보겠습니다.
GitHub 페이지에서 코드 버튼 클릭하시고 로컬 클론 탭에서 https 주소를 복사해
주세요. 라이트 세일 인스턴스에는 Git 명령이 이미 설치되어 있고요.
Git 클론 저장소 주소 그리고 srv에 코스 레포 명령을 실행합니다.
그러면 루트의 srv에 코스 레포 경로의 저장소가 복제됩니다.
우리는 이 저장소에서 myprj 프로젝트를 배포하려 합니다.
myprj 디렉토리 내에 requirements.production.txt 파일이 있고요.
이 라이브러리 목록을 설치할 것입니다.
가상 환경을 활성화하지 않고 절대 경로로 가상 환경 내에 파이썬 명령을 지정해서 배포용
라이벌리를 설치해 보겠습니다.
Psycopg2 라이브러리를 설치할 텐데, Psycopg2 라이브러리 설치에 필요한 시스템
패키지를 아직 설치하지 않아 오류가 발생할 것입니다.
PG-config 실행 파일을 찾지 못해서 Psycopg2 라이브러리를 설치할 수 없다고
합니다. 이제 사이코 PG-2 라이브러리 설치에 필요한 시스템 패키지를 설치해 줍니다.
설치 중에 오래된 라이브러리를 사용하는 데몬들을 재시작할 것인지 물어보기도 하는데요
기본 선택된 항목으로 버튼을 눌러 진행합니다
탭 키도 항목 간에 이동할 수 있습니다
시스템 패키지 설치가 끝났고요 다시 배포용 파이썬 라이브러리 설치를 진행해 보시면 오류
없이 모두 잘 설치가 되었습니다.
PIP 리스트 명령으로 설치된 라이브러리 목록도 확인해 봅니다.
서비스에서 필요한 디렉토리를 먼저 생성합니다.
설정 파일용, 데이터 저장용, 그리고 정적 파일들을 모아서 저장할 디렉토리 경로, 그리고
미디어 파일들을 저장할 디렉토리 경로입니다.
서비스의 환경 변수는 srv config의 django.env 경로에 생성하겠습니다.
나노 편집기나 편하신 방법으로 설정 파일을 생성해 주세요.
리눅스 터미널에서의 텍스트 편집이 어려우시면 로컬에서 내용을 만드신 후에 복사해서
적용하시는 방법도 좋습니다.
디버그 환경 변수는 django.env 파일에서 지정하지 않겠습니다.
Gunicorn 명령에서 env 인자로 지정하겠고요 Gunicorn 명령으로 디버그 인자를 지정하면
손쉽게 디버그 환경을 끄고 켤 수 있어서 배포 상황을 보다 손쉽게 디버깅할 수 있습니다
Allowed Host 환경 변수에는 여러분 서버에 공인 IP를 추가해 주시고요
서비스는 IP로 HTTP Protocol로 서비스되기에 CSRF 환경 변수는 필요 없으니
지정하지 않겠습니다
데이터베이스는 PostgreSQL 데이터베이스를 사용하기 전에 배포를 간결하게 먼저
연습하기 위해 SQLite 데이터베이스를 사용하겠습니다
배포 스택을 하나라도 줄이면 배포 난이도가 좀 더 낮아지니까요 그리고 SMTP, 메일 발송
관련 환경 변수도 지정하시고요.
static 정적 파일을 저장할 경로는 앞서 디렉토리를 생성한 대로, srv에 static
files 디렉토리 경로를 사용하겠고요.
미디어 파일 정적 파일을 저장할 경로로 앞서 디렉토리를 생성한 대로, srv에 데이터에 미디어 파일
파일스 경로를 사용하겠습니다.
장고점 env 파일 저장 후에 cat 명령으로 내용도 꼭 확인해 주세요.
"-n 옵션을 활용하시면 줄번호를 추가하실 수 있는데요.
한 줄로 저장되어야 할 설정들이 여러 줄로 나눠 저장된 것은 아닌지 확인하시기 좋습니다.
root의 srv 디렉토리 아래에 config, data, static files
디렉토리를 생성하고, data 디렉토리 아래에 media files 디렉토리도 생성합니다.
모든 디렉토리를 생성했고요.
nano 편집기로 root의 srv, config, django.env 파일을
생성하겠습니다.
강의노트에 안내해드린 링크에서 예시 설정 파일을 복사하실 수 있습니다.
저도 복사해서 진행해 보겠습니다.
Allowed Host 설정에 여러분의 공인 IP를 추가해 주세요.
저도 제 IP에 공인 IP를 추가해 주겠습니다.
SMTP 설정도 모두 채워 주시고요.
Static Root 환경 변수와 Media Root 환경 변수도 확인해 주세요.
Ctrl-O 키를 눌러 저장하고 Ctrl-X 키를 눌러 나노 편집기를 종료합니다.
cat 명령에서 "-n", 옵션을 지정해서 줄 번호를 붙여 설정 파일 내용을 확인합니다
등호 앞뒤로 띄어쓰기는 없는지 확인해 주시고요 긴 설정의 경우 한 줄인데 여러 줄로 나눠
저장되진 않았는지 누락된 설정은 없는지 꼭 확인해 주세요
django.env 환경 변수 기반에서 환경 변수 로딩 상황을 검증해 보겠습니다
django 프로젝트 디렉토리로 이동해 주시고요
가상 환경을 활성화하고 파이썬 경로를 통해 가상 환경 활성화 여부를 확인합니다
맥과 리눅스의 쉘에서는 명령 앞에 그 명령에서 사용할 환경 변수를 지정하실 수 있습니다
env.path 환경 변수로 django.env 환경 변수의 파이 경로를 지정해서
django 쉘을 구동합니다
그리고 세팅스를 통해 환경 변수를 통해 주입된 설정들을 하나하나 확인해 주세요
환경 변수에 혹은 환경 변수 파일에 어떤 값을 지정했다고 해서 그 값이 반드시 정확하게
settings 설정에 반영되리라는 보장은 절대 없습니다 장고 프로젝트의 settings의 각 설정들이 각
환경 변수 값이 도달하는 최종 목적지이고요 settings 설정으로 장고가 동작하니깐요
settings 내역으로 환경 변수 값들을 꼭 그리고 마이그레이션 내역 확인해 주시고요.
migrate 명령으로 db.sqlite3 데이터베이스의 데이터베이스 테이블을 생성합니다.
myproj 디렉토리로 이동하고요.
가상 환경도 활성화합니다.
python manage.py shell 명령 구동 시에 env.path 환경 변수를
지정해서 실행합니다.
django.env 파일에도 디버그 환경 변수 지정이 없죠?
디버그 환경 변수 지정이 없으니 디버그 설정이 참일 텐데, 우리 프로젝터에서 디버그 설정이
참이면 Django 디버그 툴바를 활성화 시켰었습니다.
그런데 우리는 Requirements, Production.txt에 지정된 라이브러리만
설치했기에 Django 디버그 툴바 라이벌리는 설치되어 있지 않은 상황입니다.
디버그 참 설정은 설정 확인 목적으로 임시로 지정한 것이기에 Django 디버그 툴바
라이브러리를 굳이 requirements.production.txt 파일에 추가하진 않을
것이고요 pip 인스톨 명령으로 Django 디버그 툴바 라이브러리를 설치만 해주겠습니다
다시 Django Shell을 구동하시면 Django Shell이 구동되었고요 환경 변수를
통해 지정한 Settings 설정들을 하나하나 확인해 보세요
절대 상상하지 마시고 실제 반영된 값을 확인하시는 습관을 들이는 것이 중요합니다
데이터베이스 인스 설정에서 많은 분들이 배포에서 헷갈리시는 경우가 많습니다
데이터베이스는 SQLite로서 Root의 srv-data-db.sqlite3 경로를
사용하고 있습니다
show migrations 명령을 내려보시면 아직 migration 적용 현황이 비어
있죠 migrate 명령으로 모든 데이터베이스 테이블을 생성해 주시고요
create superuser 명령으로 superuser도 생성해 줍니다
그리고 장고 개발 서버로 이렇게 서버를 띄우실 수 있고요 지금 장고 인스턴스
가상 머신은 80번 포트와 443 포트만 방화벽에서 열려 있어 8000번 포트로 서버를
띄우면 외부에서 접속할 수가 없습니다
80번 포트로 띄우려니 이 포트에 접근할 권한이 없다고 합니다
1024 미만의 포트이니 루트 권한이 필요합니다
수두를 붙여 루트 권한으로 실행하려니 루트는 현재 Ubuntu 유저 셸의 패스 내역을
몰라서 가상 환경 내에 파이썬 명령의 경로를 모릅니다
그래서 파이썬 명령의 절대 경로를 지정해 주시면 이렇게 장고 개발 서버로 80번 포트로
서버가 구동됩니다 Django 개발 서버는 개발용 서버일 뿐 실 서비스 급의 성능을 내는 서버가
절대 아닙니다 이는 테스트 목적일 뿐임을 꼭 기억해 주세요
가상 머신의 공인 IP로 접속해 보시면 이렇게 웹 페이지가 잘 뜨고요 어드밋 페이지
로그인도 확인해 보시면 잘 됩니다
현재 DB.sqlite3 데이터베이스를 사용하고 있으며 장고 개발 서버로 서버를 띄운
상황임을 다시 말씀드립니다 명령행에서 유니콘 명령으로 장고 서비스를 직접 띄워봅니다.
맥과 리눅스에서는 한 줄 명령을 여러 줄로 나눠서 쓸 때, 각 줄의 끝에 역 슬래시를
씁니다. 이 지유니콘 명령은 한 줄 명령이니 한 줄로 쭉 붙여서 입력해서 실행하셔도
됩니다. 앞서 Requirements에 production.txt 파일을 통해 가상 환경에
Gunicorn을 설치했었습니다.
지유니콘 명령을 실행할 사용자명과 그룹명을 현재 로그인 유저, Ubuntu로 지정해 줍니다.
이를 지정하지 않으면 루트 권한으로 Django 서버가 뜰 텐데요.
루트 권한으로 Django 서버가 뜨면 Django 서버를 통해 생성되는 파일들이 루트
소유로 생성이 되므로 일반 사용자 권한으로 해당 파일들을 수정하거나 삭제할 수 없게
됩니다. 이렇게 유저명과 그룹명을 지정해주면 생성되는 파일들도 해당 사용자와 그룹에 소유가
되어 관리가 용이해집니다.
서비스 환경 변수 파일의 경로는 ENV_PATH 환경 변수로 지정하고요.
그리고 배포 시에 settings의 디버그 설정을 거짓으로 설정하면 디버깅 정보가 보이지
않아 막연히 상상하며 배포 디버깅을 하게 되는데요.
이렇게 디버그 환경 변수를 지정하고 settings 내에서 디버그 환경 변수를 반영토록 하면 오류
상황을 좀 더 빠르게 확인하실 수 있습니다.
실 서비스 시에는 반드시 디버그 환경 변수 값을 소문자 false 혹은 0으로 지정해서
꺼주셔야 합니다.
디버그 환경 변수 값을 누락하면 디버그 설정은 참으로 동작하도록 settings가 구성되어
있습니다. 그리고 디버그 참인 상황에서는 오류가 없다가 디버그 거짓으로 변경하면 오류가
발생하여 서버가 죽는 경우가 종종 발생합니다
이 경우에도 미리 이렇게 서버를 터미널에서 직접 띄워보면 초기 구동 오류를 빠르게 확인하실
수 있습니다
Ctrl-C 키를 눌러 장고 개발 서버를 중단시킵니다
그리고 Gunicorn 명령으로 80번 포트로 다시 장고 개발 서버를 구동합니다 새로고침
해보시면 웹페이지는 뜨는데 스타일이 모두 없어졌습니다
오류 상황은 아니고요 정상 동작하는 상황이 맞습니다
현재 스태틱 파일 서빙이 안 되는 상황인데요 스태틱
파일은 장고 런 서버 개발 서버에서만 개발 목적으로 제공되는 기능이고요 Gunicorn으로 장고
서버를 띄웠기 때문에 지유니콘에서는 스태틱 파일 서빙 기능을 기본 제공하지 않습니다
스태틱 파일 서빙은 이후 영상에서 엔진엑스 웹 서버를 통해서 서빙하도록 할 것입니다