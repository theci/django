안녕하세요. 이번 시간에는 라이트 세일 인스턴스를 생성하고 설정하는 과정을 차근차근
살펴보겠습니다. 첫 번째 순서로 라이트 세일 인스턴스 생성입니다.
장고 서버 목적으로 하나만 생성하겠습니다.
본 강의에서는 아마존 웹 서비스 가입에 대해서는 다루지 않습니다.
회원가입 시에 해외 결제가 가능한 신용카드 등록이 필요합니다.
아마존 웹서비스 서비스에 가입하시고, Lightsail 데시보드 페이지에 접속해
주세요. 사이트가 영어로 뜬다면, 페이지 상단의 톱니바퀴 아이콘을 클릭하여 사이트 언어를
한국어로 변경합니다.
인스턴스 페이지에서 인스턴스 생성 버튼을 클릭합니다.
인스턴스 위치는 서울로 하겠습니다.
서울이 선택되어 있지 않다면 AWS Region 및 가용 영역 변경 메뉴를 통해 서울로
변경해 주세요.
플랫폼은 Linux/Unix를 선택하고 블루프린트는 OS 전용 탭에서 Ubuntu
22.04 LTS를 선택합니다.
리눅스 서버에서는 서버 접속에 SSH 프로토콜을 사용합니다.
SSH 접속을 위해서는 ID 비밀번호 인증이나 공개키 비밀키 인증 방식을 사용할 수
있는데요. 라이트셀 인스턴스에서는 보안을 위해 ID 비밀번호 인증을 기본적으로 지원하지
않고 공개키 비밀키 인증만을 지원합니다.
공개키 비밀키를 라이트셀 인스턴스 메뉴를 통해 생성 후에 공개키를 다운로드 받거나 로컬에서
공개키 비밀키 쌍을 생성하신 후에 비밀키를 업로드 하실 수도 있습니다.
라이트셀 인스턴스에서는 웹브라우저를 통해서도 SSH 접속을 지원하므로 인스턴스 생성 후에도
웹브라우저로 접속한 SSH 접속을 통해 다른 공개키 비밀키 쌍을 여럿 등록하실 수도
있습니다. SSH 키 페어는 변경하지 않고 인스턴스 플랜
선택 메뉴에서 생성할 라이트셀 인스턴스의 CPU, 메모리, 스토리지, 트래픽에 따른 플랜을
선택하실 수 있습니다.
가장 낮은 플랜이 2개의 vCPU, 512MB 메모리, 20GB SSD 스토리지, 1TB의
트래픽을 지원하는데요 배포 테스트용으로 충분한 사양이므로 이 스펙으로 장고 가상머신을 하나
생성하겠습니다 새 장고 가상머신의 이름은 장고 인스턴스로 지정하고요 인스턴스 생성
시작합니다 각 가상 머신마다 공인 IP가 할당되어 있지만 이 공인 IP는
가상 머신을 재시작할 때 변경될 수 있습니다 서비스되는 가상 머신은 고정 IP가 필수입니다
라이트세일 인스턴스에서는 고정 IP는 최대 5개까지 인스턴스에 연결되어 있는 동안에는
무료입니다 사용하지 않을 이유가 전혀 없겠죠
단, 고정 IP를 인스턴스에서 분리하시면 그 고정 IP를 꼭 제거해 주셔야 합니다
인스턴스에 연결되지 않은 고정 IP는 요금이 부과됩니다
인스턴스 이름을 클릭하여 인스턴스 대시보드로 이동합니다 네트워킹 탭을 클릭하시면
현재의 공인 IP와 사설 IP를 확인하실 수 있습니다
이 페이지에서 고정 IP 연결를 통해 고정 IP를 할당하실 수도 있고요
네트워킹 페이지를 통해서 고정 IP를 생성하실 때 고정 IP를 연결할 인스턴스를 지정하실
수도 있습니다 고정 IP 위치가 서울인지 확인하시고 연결할 인스턴스로 장고 인스턴스 선택해
주시고 고정 IP 이름은 장고 인스턴스 IP로 지정하고 고정 IP를 생성하겠습니다.
그럼 서버에 고정 IP가 할당되었고요.
이 고정 IP로 인터넷망에서 서버에 다이렉트로 접속하실 수 있습니다.
라이트세일에서는 각 가상머신에 대해 SSH를 사용하여 연결 기능을 통해
웹브라우저를 통한 SSH 접속을 지원합니다
SSH 접속할 서버에 .ssh 폴더의 authorized_keys 경로의 파일에 SSH
공개키를 열어 등록할 수 있습니다
현재 한 개의 공개키가 등록되어 있고요 라이트세일 인스턴스 생성 시에 지정된
공개키입니다.
SSH 공개키와 비밀키는 한 쌍입니다.
공개키는 자물쇠에 비유할 수 있고, 비밀키는 열쇠에 비유할 수 있습니다.
자물쇠는 공개적으로 공유될 수 있으며, 이를 열 수 있는 것은 자물쇠에 맞는 열쇠를 가진
사람뿐입니다.
열쇠만 있다면 자물쇠를 열 수 있기에 열쇠는 안전하게 보관되어야 합니다.
비밀키는 절대, 비밀키는 열쇠이고요.
절대 외부에 노출되어서는 안되며, 디폴트로 로컬에 home directory 밑에 .ssh
directory 밑에 id_rsa 경로의 파일을 사용합니다.
공개키는 홈 폴더 밑에 .ssh 폴더 밑에 id_rsa.pub 경로에 저장됩니다.
윈도우 기본에 ssh-utility와 ssh-keygen-utility가 제공됩니다.
홈디렉토리 밑에 .ssh 폴더에 id_rsa 비밀키와 id_rsa.pub 공개키가 있다면 이를
사용하시면 되겠고요.
없다면 ssh-keygen 명령으로 생성합니다.
제 공개키와 비밀키를 삭제하고 다시 생성해 보겠습니다.
이미 공개키, 비밀키 쌍이 있으신 분들은 이 공개키와 비밀키가 다른 서버에 사용되고 있을
수 있으니 절대 파일은 삭제하지 마세요.
ssh-keygen 명령을 실행하고요.
디폴트 경로에 공개키, 비밀키를 생성합니다.
그럼 id rsa 파일과 id rsa.pub 파일이 이렇게 생성이 되었죠.
윈도우에서는 타입 명령으로 지정 경로의 파일 내용을 표준 출력으로 보내실 수 있고요.
맥과 리눅스에서는 cat 명령을 사용합니다.
표준 출력의 내용을 클립보드에 복사하시려면 윈도우에서는 클립 명령을 사용하고요.
맥에서는 PB Copy 명령을 사용합니다.
클립보드에 복사된 공개키를 서버의 Authorized Keys 파일에 복사할 텐데요.
먼저 메모장에 붙여넣어 복사가 잘 되었는지 확인합니다.
장고 인스턴스 리눅스 서버의 .ssh 경로에서 cat 명령을 활용해서 Authorized
Keys 파일 끝에 공개키를 추가하겠습니다.
공개키를 붙여놓고 새로운 줄에서 Ctrl-D 키를 입력하시어 입력의 끝을 전달하시면 파일
끝에 추가됩니다.
캡 명령으로 파일 내용을 확인하시면 파일이 잘 추가되었습니다.
리다이렉션 기호를 한 개만 쓰시면 파일 추가가 아니라 덮어쓰기, 오버라이트로 동작하므로
주의해주세요. 파일 덮어쓰기가 된다면 브라우저 SSH 연결에 사용되던 공개키가 제거되므로
브라우저를 통한 SSH 연결이 불가능해집니다.
이제 등록한 공개키와 한 쌍인 비밀키가 있는 컴퓨터에서 ssh ubuntu 골뱅이 서버에
공인 ip 명령을 입력하시면 비밀번호 입력 없이도 공개키 비밀키 인증을 통해 리눅스 서버에
로그인 됨을 확인하실 수 있습니다.
아마 SSH 접속에서 Permission Denied 오류가 발생하는 분도 계실 수
있습니다. 여러 이유가 있을 수 있는데요.
본 강의를 그대로 따라 하셨다면 첫 번째 이유가 가장 유력합니다.
공개키 복사가 엉뚱하게 되어 한 줄이 아닌 여러 줄로 복사가 된 경우입니다.
공개키는 한 줄로 입력되어야 합니다.
여러 줄로 복사되실 수 있으니 차근차근 확인해주세요.
혹은 슬라이드에 제 IP를 그대로 입력하셨을 수도 있습니다.
여러분의 서버 IP를 확인해주세요.
공개키를 다시 복사하시고 서버에 Authorized Keys 파일에도 다시 붙여넣기
해보세요. 장고 인스턴스 가상 머신의 IP 버전 4 방화벽 설정을 변경해 보겠습니다.
22번 SSH 접속은 보안을 위해 허용된 IP만 접속을 허용하겠고요.
HTTP 접속을 위해 80번 포트, HTTPS 접속을 위해 443 포트를 추가하겠습니다.
장고 인스턴스 대시보드의 네트워크 탭으로 이동합니다
IPv4 방화벽 설정을 보시면 22번 SSH 포트와 80번 HTTP 포트가 모든 IPv4
주소에 대해서 접속을 허용하고 있습니다
HTTPS 443번 포트를 모든 IPv4 주소에 대해서 접속을 허용하겠고요 22번 포트는
보안을 위해 지정 IP로부터의 접속만을 허용하도록 하겠습니다
현재 여러분들의 IP를 추가해 주시면 되는데요.
여러분들의 IP는 구글에서 What is my IP로 검색해 보시면 아실 수 있습니다.
여러분들이 사용하시는 네트워크에 따라 IP가 변경될 수 있으니 그때마다 IP를 매번 추가해
주셔야 합니다.
매번 추가해 주셔야 SSH 접속을 하실 수 있습니다.
서버에 SSH 접속하시면 shell prompt에 호스트명이 출력되는데요.
호스트명이 디폴트로 사설 IP로 지정되어 있어서 호스트명만 봐서는 정확히 어떤 서버에
접속한 것인지 알아차리기 어렵습니다.
서버 대수가 늘어나면 더 헷갈리겠죠.
엉뚱한 서버에서 서버 업데이트나 백업을 수행한다면 생각만 해도 아찔합니다 호스트명을
의미있게 변경해 보겠습니다
서버의 호스트명은 루트의 etc 리포지토리 아래의 호스트네임 파일을 통해 관리합니다
리눅스에서 텍스트 파일을 편집하는 방법은 다양한데요
나노 편집기를 활용해 보겠습니다
수두를 통해 관리자 권한으로 etc, hostname, 경로의 파일을 나노 편집기로 편집을
시작합니다.
방향키로 커서를 이동하실 수 있고요.
Backspace 키로 파일 내용을 모두 지우시고, django 인스턴스를 입력하고,
Ctrl-O 키를 눌러 파일 내용을 저장하고요.
Ctrl-X 키를 눌러 나노 편집기를 종료합니다.
파일 내용이 잘 변경되었고요.
리부트 명령으로 django 서버를 리부팅합니다.
잠시 후에 다시 SSH 접속해 보시면 호스트 네임이 의미있게 변경되었음을 확인하실 수
있습니다. 매번 SSH 접속을 할 때마다 유저명, 호스트명, 포트, 공개키 등을 지정하는
것은 너무 번거로운 일입니다.
홈 디액토리 밑에 .ssh 디액토리 밑에 컨피그 파일에 서버 별로 접속 정보를 미리
설정하고 설정에 대한 이름 지정만으로 ssh 접속을 할 수 있습니다.
윈도우에서 먼저 진행해 보겠습니다.
홈 폴더 밑에 .ssh 폴더 아래에 컨피그 파일이 없다면 생성해 주세요.
이때 주의하실 것은 config 파일은 확장자가 없어야 합니다.
그런데 윈도우 탐색기를 통해 생성하실 때 자동으로 txt 확장자가 붙을 수 있습니다.
윈도우 탐색기에서 파일 확장명 보기 옵션이 꺼져 있다면 파일 확장자가 지정되어 있음에도
파일 확장자가 숨겨져 있어 파일 확장자가 없는 것으로 오해하실 수 있습니다.
윈도우 탐색계에서는 pd, 파일 확장명, 보기 옵션을 켜주시고요.
config 파일에서도 확장자를 제거합니다.
config 파일을 메모장이나 vs 코드 등 편하신 에디터로 열어주시고요.
장고 인스턴스에 대한 설정을 추가합니다.
사용하실 임의의 이름으로 호스트 항목을 지정하고요.
서버의 주소를 hostname 항목으로 지정하고, 계정명은 user 항목으로 지정합니다.
본 연결에서는 그 외 설정은 default 설정을 사용할 것이기에 지정하지 않습니다.
파일 저장하시고요.
이제 터미널을 여시고 ssh 명령에서 host 항목으로 지정한 이름을 지정하시면 해당
설정이 사용되어 ssh 연결이 시도됨을 확인하실 수 있습니다.
맥에서는 ssh config 파일을 Visual Studio Code로 바로 열어보겠습니다.
host 항목으로 장고 인스턴스 이름을 임의로 지정하고요.
hostname 항목으로 접속할 서버의 주소를 지정하고, user 항목으로 접속할 서버의
계정명을 입력합니다.
나머지 설정은 default 설정을 사용할 것이기에 지정하지 않았습니다.
터미널에서 ssh 장고 인스턴스 명령으로 서버 주소, 계정명 등을 지정하지
않고, 호스트 이름만으로 SSH 접속을 시도함을 확인하실 수 있습니다.
서버에 접속하면 KOKR-UTF-8 이름의 locale로 변경할 수 없다는 경고가 발생하고
있습니다.
locale-A 명령으로 시스템에서 사용 가능한 locale 목록을 출력해 보면
KOKR-UTF-8이 없습니다.
루트 권한으로 locale-gen ko_KR.UTF-8 명령으로 로케일을 생성해 주시고요.
다시 locale -a 명령을 실행해 보시면, 로케일 목록에서 kokrutf8을 확인하실 수
있습니다. ssh 접속을 종료하셨다가 다시 접속해 보시면, 로케일을 변경할 수 없다는
경고가 사라졌음을 확인하실 수 있습니다.