안녕하세요. 이번 시간에는 Django 프로젝트 배포에 앞서 Django 배포에서 사용할
라이벌리 목록을 정리하고 서비스 배포에서 필요한 세팅스와 환경 변수 목록을 정리해
보겠습니다.
Django 구동 환경에 따라 필요한 패키지 목록이 다를 텐데요.
우리는 이미 Requirements Directory 내에 사용 목적에 따라 여러 파일로
나눠놨습니다.
배포용 라이브러리는 Requirements 디렉토리 내에 production.txt 파일에
정리합니다. 배포 환경에서는 데이터베이스를 PostgreSQL을 사용할 것이기에
psycho-pg2 라이브러리가 필요합니다.
Ubuntu 리눅스 서버에서는 psycho-pg2 라이브러리를 설치할 때의 빌드 과정이
필요하거든요.
이때에는 시스템 패키지로 repqdev 패키지와 지정 파이썬 버전의 python3dev
패키지가 필요합니다.
시스템 패키지 설치에 대해서는 Ubuntu Linux 서버 세팅할 때 다루겠습니다.
그리고 Django 서버는 더 이상 run-server 명령을 사용하지 않고, WSGI
HTTP 서버인 GUnicon을 사용하겠습니다.
Gunicorn은 윈도우를 지원하지 않기에 윈도우에서는 라이벌리 설치는 되지만 실행하실 수는
없습니다.
Gunicorn을 Ubuntu Linux 서버에 설치하면 Gunicorn을 통해 Django
서버를 이렇게 구동합니다.
Django 프로젝트 경로에서 수들을 지정하여 루트 권한으로 가상 환경 내에
GUnicon을 실행합니다.
bind 인자로 서버에서 사용할 IP 주소와 포트 번호를 지정하고요.
env 인자로 Django 서버에서 필요한 환경 변수를 지정하실 수 있고요.
서버 진입점으로 My Site Directory 내에 WSGI.py 파일의 애플리케이션
객체를 지정합니다.
Django Channels 라이브러리를 사용하실 경우, Django 서버를 WSGI가
아닌 ASGI로 구동하셔야 하는데요.
이때에는 Uvicorn 라이브러리가 추가로 필요하고요.
Gunicorn 구동 시에는 Worker Class 인자로 Ubicon Worker를
지정하시고, 서버 진입점으로 WS.py가 아닌 AS.py를 지정해서 실행하시게 됩니다.
장고 서비스에서 필요한 환경 변수는 루트에 srv, config, django.env 파일
경로에 저장하고, GUnicode 명령에서 env 인자로 환경 변수 지정 시에
env-pass 이름의 환경 변수로 지정하여 로딩토록 하겠습니다.
그러니 세팅스 내에서는 env-pass 이름의 환경 변수를 로딩토록 추가하고요.
현재 세팅스에 디버그 환경 변수, AllowedHost 환경 변수, CSRF Trusted
Origins 환경 변수, Secret Key 환경 변수, SMTP 메일 발송을 위한 환경
변수를 로딩하도록 이미 설정되어 있습니다.
Secret Key 환경 변수를 배포용으로 따로 지정하시려면 장고
Extensions 라이브러리에서 Generate Secret Key 명령으로 비밀키
생성을 도와주니 사용해보시면 편리합니다.
현재 세팅스의 데이터베이스 이즈 설정은 db.sqlite3로 하드코딩 되어 있는데요.
Django Environment Library에서는 env.db 함수를 활용하시면
database-underbar-url 환경 변수 문자열을 파싱하여 Django
데이터베이스 설정 사전 객체를 생성해 줍니다.
디폴트로 DB.SQLite3 데이터베이스 설정을 만들어 두고요.
데이터베이스 URL 환경 변수가 있다면 이를 활용하도록 settings를 변경해 줍니다.
PostgreSQL을 연결하기 위한 데이터베이스 URL의 환경변수는 이처럼 하나의 환경변수
문자열에 데이터베이스 종류, 유저명, 암호, 호스트, 포트, 데이터베이스명을 지정하고요.
데이터베이스 연결 옵션을 추가로 지정하실 수 있습니다.
Requirements, production.txt 경로에 배포용 서버에서 사용할
라이브러리를 추가해 줍니다.
서버에서 PostgreSQL을 사용할 것이기에 Psycopg2 라이벌리를 추가하고요.
WSGI 장고 서비스 구동을 위해 Gunicorn을 추가합니다.
장고를 ASGI로 구동하진 않을 것이기에 Uvicorn 라이벌리는 추가하지 않으셔도 됩니다.
세팅스 내에서 env__path 환경 변수를 로딩해서 path 객체로 변환합니다.
env-pass 환경 변수 값이 없다면 default로 project-root에 .env
파일 경로를 사용하겠습니다.
지정 경로에 .env 파일이 있다면 이를 로딩해서 환경 변수로 반영할 것입니다.
default-database-url 설정으로 project-root에 db.sqlite3
경로를 지정하겠고요.
env.db 함수를 활용하시면 database-url 환경 변수를 로딩할 것입니다.
서비스 배포에서는 static underbar root 설정이 꼭 필요합니다.
Django 프로젝트에서는 Django 앱별로 static 정적 파일들이 나눠 저장되어
있는데요. 각 Django 앱의 static 정적 파일들의 경로는 Django만이 알고
있고요. 이 정적 파일들을 Nginx와 같은 정적 파일 서버나 아마존 웹 서비스의 S3와
같은 정적 파일 서비스를 통해서 서비스하려면 한 디렉토리로 복사해서 모아줘야만 합니다.
여러 Django 앱에 나누어 저장된 스태틱 정적 파일들을 한 디렉토리로 모아서 복사해주는
명령이 python manage.py collectstatic 명령이고요.
이 명령이 수행되면 세팅스의 static-route 설정에 지정된 경로로 복사해줍니다.
스태틱 루트 설정도 환경 변수를 통해 주입 받도록 하고요.
스태틱 언더바 루트 환경 변수가 없다면 프로젝트 루트에 static files 디렉토리
경로를 사용하겠고요.
스태틱 언더바 url 설정과 미디어 언더바 url 설정 그리고 미디어 루트 설정도 환경
변수를 통해 주입 받을 수 있도록 변경합니다.