안녕하세요. 이번 시간에는 Ubuntu Linux 서버의 시스템 서비스로 장고
애플리케이션을 구동하는 방법에 대해서 살펴보겠습니다.
시스템 D는 Ubuntu Linux에서 사용하는 서비스 관리자입니다.
여러 시스템 서비스를 시작, 중지 및 관리하는 역할을 합니다.
루트의 etc, 시스템 D, 시스템 경로에 시스템 서비스 등록을 위한 파일을 등록합니다.
각 파일은 서비스 확장자를 가집니다.
서비스가 실행될 작업 디렉토리를 지정하고요.
서비스를 실행할 사용자와 그룹을 지정합니다.
그리고 서비스가 시작될 때 실행될 명령을 지정합니다.
가상 환경 내에 Gunicorn 실행 파일을 지정했기 때문에 가상 환경을 활성화, 액티베이트
하지 않아도 가상 환경이 사용됩니다.
Gunicorn 명령에서 config 인자를 사용했고요
파이썬 파일로 다양한 Gunicorn 실행 옵션을 지정할 수 있습니다
Gunicorn conf.py 파일과 Gunicorn 명령의 동작 테스트를 위해서 서버의 터미널에서 해당
명령을 먼저 수행해 보겠고요 장고 서버를 8080 포트로 구동했는데 방화벽에서는 80443
포트만 외부에 공개했으니 8080 포트는 외부에서 접속을 할 수가 없죠
새 터미널을 열어서 Django 인스턴스 서버에 SSH 접속하고요.
curl 명령으로 로컬 호스트의 8080 포트에 요청을 보내어 응답 헤더만 출력해
보겠습니다. 그러면 200 응답을 이렇게 잘 받아 올 것입니다.
ETC의 Systemd 시스템 디렉토리 경로에 django 서비스 파일을 생성하겠습니다.
해당 디렉토리 경로를 보시면 소유자와 그룹이 루트이고요.
권한이 755로서 루트만이 해당 디렉토리 경로에 파일을 생성할 수 있습니다.
루트 권한으로 나노 에디터를 통해 파일을 생성하셔도 되겠고요.
Ubuntu 유저 권한으로 파일을 생성할 수 있는 홈 디렉토리에 django.service
파일을 먼저 생성하고 파일을 옮기는 방식으로 진행해 보겠습니다.
이 방식은 수도 지정 없이 파일을 생성하기에 cat 명령을 이용해 파일을 생성할 때 좀 더
수월하게 파일을 생성할 수 있습니다.
cat 명령으로 표준 입력의 텍스트를 django.service 파일에 저장합니다.
명령을 입력하시고 파일 내용을 붙여넣기 하신 후에 새로운 줄에서 Ctrl-D 키를 눌러
입력의 끝을 전달합니다.
그러면 파일 저장이 되었고 내용을 확인해 보니 잘 저장이 되었네요.
루트 권한으로 이 파일을 ETC, Systemd, system directory로
이동시키겠습니다.
잘 옮겨졌죠?
unicorn.conf 파일은 아직 없으니 지정 경로에 생성해 주겠습니다
최소 설정으로 bind 설정만 추가했고요 이외에도 다양한 설정들을 공식 문서를 통해
확인하실 수 있습니다
Systemd 서비스 관리자를 통해서 수행될 명령을 복사해서 터미널에서 테스트로 구동해
보겠습니다 에러가 발생했습니다.
mysite 모듈을 찾을 수 없다고 하는데요.
우리 Django 프로젝트에서 mysite는 settings.py가 저장된 경로이죠.
명령을 실행한 디렉토리가 프로젝트 디렉토리가 아닌 홈 디렉토리라서 mysite 경로를 찾지
못해 발생한 에러입니다.
워킹 디렉토리 설정이 있었죠.
해당 디렉토리로 먼저 이동하고요.
다시 명령을 실행해 보시면 명령이 잘 구동되고요.
8080 포트로 서버가 구동되었습니다.
그런데 외부에는 80 포트와 443 포트만 열려 있을 뿐 8080 포트는 열려 있지 않아
외부에서 접속 테스트를 해 볼 수는 없습니다
새 터미널을 열고 Django 인스턴스 서버에 SSH 접속하여 curl 명령으로 로컬
호스트 8080 포트로 요청을 보내어 테스트를 해 보겠습니다
응답을 잘 받아왔고요. -i 옵션을 붙여 응답 헤더만 출력해보면 이렇게 200 응답을 잘
받아옴을 확인하실 수 있습니다.
직접 구동한 장고 애플리케이션은 Ctrl-C 키를 눌러 정지시키시고 이제 Systemd를
통해 시스템 서비스로서 장고 애플리케이션을 구동해보겠습니다.
한 가지 팁으로 서버에서 설정 파일이나 소스 파일을 표준 출력으로 출력할 일이 많은데요.
이때 cat 명령으로 출력하면 문법 강조 없이 한 가지 색으로만 텍스트가 출력되거든요.
그러면 코드에 오류가 있어도 쉽게 알아차리기 힘듭니다.
이때에 bat 유틸리티를 사용해 보세요.
batcat 명령으로 문법 강조 기능을 사용하실 수 있습니다.
sudo apt install –y bat 명령으로 먼저 bat-utility를 설치하신
후에 batcat 명령으로 파일 내용을 출력해 보시면 이렇게 문법 강조가 된 코드를
확인하실 수 있습니다.
가독성이 훨씬 좋아졌습니다.
방금 생성한 장고점 서비스 파일을 Systemd 서비스에 등록해 보겠습니다.
새로운 서비스 파일을 생성했거나 파일이 수정된 경우에는 루트 권한으로 시스템 컨트롤 명령을
수행해 주셔야 시스템 뒤에서 변경된 설정을 다시 읽어갑니다.
장고 서비스를 활성화하여 부팅 시 자동 시작하도록 하겠고요.
아직 서비스가 시작된 상태가 아니니 서비스를 시작시켜 주고요.
상태도 확인해 줍니다.
서비스가 구동 중인 상황이라면 Status 명령에서 Active 상태로 조회가 되는데요.
어떤 이유로 구동에 실패했다면 Failed 상태로 조회됩니다.
그 아래에서 에러 로그를 확인할 수 있고요.
에러 이슈를 해결하신 후에 리스타트 명령으로 서비스를 재시작시키실 수 있습니다.
서비스 중지 명령도 제공하고요.
Journal Control은 Systemd 시스템의 로그를 확인하고 관리하는 도구입니다.
"-u", 옵션으로 지정 Systemd 서비스의 로그만을 확인하실 수 있고요. "-f",
옵션으로 로그를 실시간으로 확인하실 수 있고, Since, Until 옵션으로 시간
기반으로 로그를 필터링 하실 수도 있습니다.
루트 권한으로 시스템 컨트롤 데몬 리로드 명령을 통해 시스템 파일을 다시 읽어드립니다.
장고 서비스를 활성화시키고요.
수동으로 구동합니다.
상태를 확인해 보면, 구동 중으로 확인됩니다.
키보드에 Q 키를 눌러 명령을 빠져나오고요.
curl 명령으로 접속 테스트를 해보면 200 응답을 받았습니다.
서비스가 잘 구동되고 있습니다.
journal control 명령으로 장고 서비스의 최신 로그를 확인할 수 있고요.
-f 옵션을 붙여 실시간으로 새로운 로그를 계속 확인할 수도 있습니다.
Ctrl-C 키를 눌러 명령을 빠져나옵니다.
로그에서 출력되는 시간이 플러스 0으로서 UTC 시간대인데요.
글로벌 서비스라면 그대로 두시는 것이 유용할 테지만, 한국에만 서버가 있는 경우라면
KST, 대한민국 표준 시간대로 보시는 것이 편하실 것입니다.
UTC보다 9시간 빠릅니다.
타임 데이트 컨트롤 쇼 명령으로 현재 시간대를 확인하실 수 있고요.
SetTimeZone 명령으로 대한민국 표준 시간대를 시스템 시간대로 설정해 줍니다.
그러면 Date 명령에서도 KST, 대한민국 표준 시간대로 출력되고요.
Log에서는 아직 UTC로 보여지지만, Django 서비스를 재시작시켜 주시면 Log도
대한민국 표준 시간대로 출력됨을 확인하실 수 있습니다.


1. Systemd 서비스 파일 생성
Systemd는 Ubuntu에서 시스템 서비스를 관리합니다.
/etc/systemd/system/ 경로에 .service 파일을 생성해 서비스를 등록합니다.
Django 애플리케이션의 서비스 파일(django.service)을 생성하여 서비스 설정을 정의합니다.
2. 서비스 파일 설정
서비스 파일에서 작업 디렉토리, 사용자, 그룹, 실행 명령을 설정합니다.
가상 환경을 사용하고 있다면, Gunicorn 실행 파일을 명시하여 가상 환경을 활성화할 필요 없이 실행되도록 설정합니다.
gunicorn.conf.py 파일에서 필요한 실행 옵션을 설정하고, bind 설정으로 포트도 지정합니다.
3. 명령 테스트
생성한 gunicorn 명령을 서버 터미널에서 실행하여 제대로 동작하는지 확인합니다.
curl 명령을 이용해 로컬 8080 포트로 요청을 보내 200 응답이 오는지 확인합니다.
4. 서비스 파일 등록
django.service 파일을 /etc/systemd/system/ 경로로 이동하여 Systemd 서비스로 등록합니다.
이동 후, sudo systemctl daemon-reload 명령을 실행해 시스템이 변경 사항을 인식하게 합니다.
5. 서비스 시작 및 상태 확인
sudo systemctl enable django로 서비스가 부팅 시 자동으로 시작되도록 설정합니다.
sudo systemctl start django로 서비스를 시작하고, sudo systemctl status django로 서비스 상태를 확인합니다.
서비스가 구동 중이면 Active로 표시되며, 구동에 실패하면 Failed로 표시됩니다.
6. 에러 및 로그 관리
journalctl -u django 명령을 통해 해당 서비스의 로그를 확인할 수 있습니다.
journalctl -u django -f 옵션을 통해 실시간 로그를 모니터링할 수 있습니다.
7. 로그 시간대 설정 (선택 사항)
기본 시간대는 UTC이지만, 한국 서버용이라면 KST로 변경할 수 있습니다.
sudo timedatectl set-timezone Asia/Seoul 명령으로 대한민국 표준 시간대(KST)로 시스템 시간대를 설정합니다.
서비스 재시작 후 로그가 KST 시간대로 출력됩니다.