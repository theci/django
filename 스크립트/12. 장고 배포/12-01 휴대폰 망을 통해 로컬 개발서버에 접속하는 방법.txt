안녕하세요. 이번 시간에는 휴대폰 망을 통해 로컬 개발 서버에 접속하는 방법을
살펴보겠습니다.
장고 개발 서버를 구동하시면 http://localhost:8000 주소로 접속하시게
됩니다. 서버를 띄운 컴퓨터에서는 해당 주소로 이렇게 웹페이지에 접속하실 수 있습니다.
여러분의 스마트폰이나 다른 컴퓨터에서 같은 주소를 입력해 보시면 이렇게 접속이 되지
않습니다. 그 이유는 로컬 호스트와 127.0.0.1은 컴퓨터 네트워크에서 사용되는 특별한
IP 주소로써 그 주소를 입력하는 컴퓨터 자신을 가리키는 주소이기 때문입니다.
스마트폰의 브라우저로 로컬 호스트로 접속하시면 그 스마트폰의 서버를 찾는다는 의미입니다.
서버는 다른 컴퓨터에 있으니 이처럼 페이지를 열 수 없다는 서버 접속 오류가 발생합니다.
휴대폰으로 내부망 서버에 접속하려면 크게 4가지 방법이 있습니다.
첫 번째로, 휴대폰을 내부망과 같은 네트워크에 물립니다.
개발 서버를 띄울 때에는 네트워크 내 다른 컴퓨터에서도 접속할 수 있도록, 런 서버 인자로
서버의 IP:8000이나 0.0.0.0 콜론 8000을 지정해 줍니다.
런 서버 인자 없이 수행하면 개발 서버를 띄운 로컬 머신에서만 해당 서버에 접속할 수
있습니다. 이제 같은 네트워크에서 휴대폰 브라우저를 통해
http://192.168.10.176:8000처럼 여러분들의 장고 개발 서버를 띄운
컴퓨터의 IP를 지정하시면 이렇게 내부망 서버의 웹페이지에 접속하실 수 있습니다.
웹페이지에 접속하면 이렇게 허용되지 않는 호스트라는 예외가 발생하는데요.
이는 호스트 헤더 공격을 방지하기 위한 Django의 기본 보안 기능입니다.
Django 기본 설정에서는 Localhost 혹은 127.0.0.1 IP를 통한 접속만
허용하고요. 다른 호스트명을 허용하려면 Settings에 Allowed Host 설정에
추가해 주시면 됩니다.
추가 인자 없이 런 서버 명령으로 장고 개발 서버를 띄우시면 로컬 호스트 주소로 웹페이지에
접속하실 수 있습니다.
그런데 그 컴퓨터의 IP로는 접속이 안 되는데요.
런 서버 인자로 0.0.0.0 을 지정하시고 다시 접속해 보시면 IP로도 웹페이지에
접속하실 수 있습니다.
현재 허용되지 않은 호스트 예외가 발생했는데요.
세팅스에서는 이미 AllowedHost 설정을 환경 변수로부터 로딩토록 구현되어 있으니
.env 파일에 AllowedHost 환경 변수로 현재의 호스트명을 추가해줍니다.
그리고 웹페이지 새로고침하시면 웹페이지에 접속이 잘 됩니다.
제 개발 머신에는 유선랜에 대한 IP가 하나 더 있거든요.
그 IP로 접속해보면 장고 서버에는 접속되지만, 허용되지 않은 호스트 예외가 다시
발생합니다.
AllowedHost 환경 변수에 다시 추가해주고 개발 서버를 재시작하면 정상 서비스
됩니다. 같은 네트워크의 와이파이를 통해서도 휴대폰을 통해 접속해 보시면 이렇게 웹페이지가
잘 뜹니다. 두 번째 방법으로는 내부망 서버에 다이렉트로 공인 IP를 추가로 할당해서
외부망에서 직접 접속할 수 있습니다.
그런데 집에서는 대개 인터넷 회선 하나만을 쓰고 이마저 공유기에 물려서 쓰기에 인터넷 회선
하나를 추가로 받기는 부담스럽고요.
학교나 회사 전산실로부터 공인 IP를 추가로 할당받기는 되게 어렵죠.
장고 개발 서버가 구동되는 컴퓨터에 새로운 공인 IP를 이렇게 추가하셨다면 추가된 IP를
통해서 서비스될 수 있도록 런 서버 명령에서도 공인 IP를 지정해 주시거나 0.0.0.0을
지정하실 수 있습니다
그럼 이렇게 LTE 5G 망에서도 공인 IP를 통해서 내부망 서버의 웹페이지에 접속하실 수
있습니다. 서비스되는 IP, 즉 호스트가 변경되었으니 이 IP도 Allowed Host
설정에 추가해 주셔야 합니다.
세 번째로 내부망의 서버를 외부망에서 접속할 수 있도록 외부 네트워크와 연결된 공유기에서
내부망 서버로 요청을 전달해 주는 방식입니다.
이는 공유기의 DMZ 설정이나 포트 포워딩 설정을 활용합니다.
IP 타임 등 거의 모든 공유기가 이 설정을 지원합니다.
집에서는 공유기를 통해 손쉽게 설정할 수 있지만, 학교나 회사 네트워크에서는 전산실에서
이를 설정해줘야 하는데요.
이를 요청하기가 쉽지 않습니다.
네번째는 외부망의 다른 서버를 경유해서 클라이언트 요청을 받을 수 있습니다.
ngrok, 로컬 터널 등의 서비스를 활용해 보실 수 있는데요.
본 강의에서는 ngrok을 사용해 보겠습니다.
이때에는 런 서버 명령에서 추가 인자 없이 로컬 호스트 접속만 허용하도록 개발 서버를
띄우셔도 됩니다.
왜냐하면 클라이언트 요청을 장고 개발 서버가 직접 받지 않고요 로컬에 띄운 ngrok
프로그램을 경유해서 요청을 받을 것이기 때문입니다
장고 개발 서버를 먼저 띄운 상황에서 ngrok 프로그램으로 터널을 생성할 것이고요 그러면
ngrok 유틸리티를 통해 도메인 주소를 할당받게 되고요 휴대폰에서는 그 도메인 주소로 접속을
하시면 유저는 ngrok 서버를 경유해서 장고 개발 서버에 접속하게 됩니다
이는 일시적으로 웹페이지를 외부에 공개하는 방법일 뿐 서비스 배포가 아닙니다.
서비스의 네트워크가 안정적이지 않기 때문입니다.
테스트 목적으로만 사용해 주세요.
ngrok 서비스는 실행 파일을 다운받아서 즉시 실행하실 수 있고요.
로컬 터널 서비스는 Node.js 라이벌리 형태로 배포되기 때문에 Node.js가 설치된
상황에서 npm 명령으로 설치해서 실행하실 수 있습니다.
ngrok은 유료 서비스지만 무료 플랜으로 테스트 목적으로 충분합니다.
두 서비스 모두 새 터널을 생성할 때마다 새로운 도메인으로 구동됩니다.
즉, 도메인이 매번 변경된다는 거예요.
이 점 주의해 주시고요.
ngrok 서비스는 유료 플랜에 가입하면 고정 도메인을 사용하실 수 있습니다.
장고 개발 서버가 재시작될 때마다 도메인이 변경되지 않을까
걱정되실 수 있는데요.
장고 개발 서버와 터널링은 별개의 프로그램이니깐요.
Django 개발 서버가 재시작 되더라도 기존 터널링을 종료하지 않으시면 도메인이 변경되지
않으니 안심하세요.
ngrok 구동을 위해 ngrok.com 서비스에 먼저 가입해 주셔야 하고요.
그 후에 OS에 맞게 실행 파일을 다운받을 것이고요.
웹페이지에 안내된 인증 토큰을 터미널에서 실행해서 ngrok 설정 파일에 인증 토큰을
저장합니다. 그리고 ngrok HTTP 8000 명령을 통해 앵그록을 통해 들어오는
HTTP 요청을 로컬의 8000 포트로 전달하도록 하겠습니다.
포트 번호는 로컬 개발 서버에 맞게 다른 포트 번호를 사용하실 수도 있습니다.
장고 개발 서버를 로컬에서 띄우겠고요.
ngrok 명령에 맞춰 8000 포트로 띄우겠습니다.
그럼 화면처럼 ngrok 웹페이지 주소를 안내받게 되고요.
그 주소로 로컬의 개발 웹 서버에 접속하실 수 있게 됩니다.
ngrok.com 페이지에 접속하시고 회원가입을 진행해 주세요.
그럼 셋업 설치 페이지를 통해 OS별 ngrok 에이전트 설치 방법을 가이드 받으실 수
있습니다. 윈도우 문서를 열어보면요.
초코 패키지 매니저를 통해서도 ngrok을 설치할 수 있다고 합니다.
그 아래에 인증 토큰을 추가하는 명령도 안내되고 있습니다.
ngrok을 다운받아서 설치하실 수도 있습니다.
운영 체제에 맞게 다운받으시고요.
집 압축 파일입니다.
압축을 풀어서 실행 파일을 우리 마이 프로젝트, 장고 프로젝트로 복사해 줍니다.
파일명은 윈도우에서는 ngrok.exe일 것이고요.
맥이나 리눅스에서는 확장자 없이 ngrok 파일일 것입니다.
ngrok 에이전트 실행에서는 실행 파일 하나만 있으면 됩니다.
인증 토큰을 추가하는 명령을 복사해서 터미널에서 실행시켜줍니다.
그리고 ngrokhttp8000 명령을 실행하면 이렇게 ngrok agent가 구동되고요.
Forwarding 주소를 안내받게 됩니다.
이 주소로 접속해 보시면 장고 웹페이지가 뜹니다.
만약 장고 개발 서버가 죽어 있고 ngrok 에이전트만 떠 있는 경우에는 이렇게 ngrok 에러
페이지를 만나시게 됩니다.
이때에는 장고 개발 서버가 죽어 있으니 다시 실행시켜 주시고 웹페이지 새로 고침하시면
됩니다. 현재 새로운 호스트 명이니 이 주소를 ALLOWED_HOSTS 설정에 추가해 주셔야
하겠고요. 개발 서버 재시작시켜 주세요.
ngrok 에이전트를 매번 실행할 때마다 주소가 변경되니까요.
매번 AllowedHost 설정에 반영하는 것이 번거로울 수 있습니다.
팁으로써 이때에는 AllowedHost 설정에서 서브 도메인을 생략하시면, ngrok 프리점
앱 도메인의 모든 서브 도메인을 허용하게 됩니다.
현재 앵그록 주소에서 로그인을 해보시면 CSRF 검증 실패 오류를 만나시게 됩니다
이는 웹페이지는 HTTPs로 서비스되고 있는데 장고 서버는 HTTP로 서비스되고 있어서
CSRF 검증에 실패한 상황입니다
이때 현재의 HTTPS 주소를 신뢰할 수 있도록 CSRF Trusted Origins
설정에 현재의 HTTPS 주소를 추가해 주시면 CSRF 검증을 통과하실 수 있습니다.
HTTPS로 서비스되는 앵그록 페이지에서 로그인을 시도해 보시면 이렇게 CSRF 검증
오류가 발생합니다.
현재 세팅스에는 CSRF Trusted Origins 설정을 재정의하는 코드가 없는데요.
AllowedHost 설정을 복사해서 환경 변수로부터 설정 값을 주입 받도록 하겠습니다.
.env 파일에서 CSRF Trusted Origins 환경 변수로서 HTTPS를 포함한
ng-log 서비스 주소를 지정하시고요.
개발 서버 재시작시켜 주시고요.
다시 로그인을 해 보시면 로그인이 잘 됩니다.