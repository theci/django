에러 로그를 좀 더 체계적으로 관리할 수 있도록 도와주는 다양한 서비스 중에
Sentry가 있습니다.
Sentry는 Django로 개발된 서비스이기도 한데요.
설치형 및 서비스형으로 제공됩니다.
서비스형은 Sentry.io 사이트를 통해 무료로도 에러 트래킹 기능을 사용할 수
있습니다.
Sentry를 통해 에러를 추적하고 유사한 에러를 그룹화하여 관리할 수 있고요 같은 에러가
반복해서 발생할 경우 Sentry는 이를 하나의 이슈로 그룹화해서 보여줍니다
이를 통해 개발자는 에러의 빈도와 중요도를 쉽게 파악할 수 있습니다
그리고 에러에 대한 상세한 정보를 제공합니다
에러 메시지, 스택 트레이스, 요청 정보, 환경 변수 등 디버깅에 필요한 다양한 정보를
수집해서 보여줍니다
그리고 실시간 알림 기능을 제공하여 에러 발생을 이메일, 슬랙, 푸시 등을 통해 다양한
채널을 통해 에러 알림을 받을 수 있습니다
Sentry를 사용한다면 굳이 어드민스 설정을 통해 이메일 알림을 받을 필요는 없을
것입니다.
Sentry.io 페이지에 방문하셔서 회원가입을 합니다.
구글, GitHub, Azure DevOps 계정이 있으시면 그 계정으로 회원가입을 하실
수도 있습니다.
회원가입을 하면 모니터링을 할 플랫폼을 선택할 수 있는데요.
우리는 Django를 선택합니다.
이어 Django 프로젝트에 Sentry를 통합하는 방법이 가이드됩니다.
Sentry SDK 라이브러리를 설치하고 Settings에 Sentry SDK의 init
함수만 호출해주면 Sentry 통합 끝입니다.
DSN은 데이터 소스 네임의 약자로서 Sentry 서버의 주소, 프로젝트 식별자, 인증
정보 등을 포함하는 URL 형식의 문자열입니다.
센트리에서는 성능 모니터링 기능도 제공해 주는데요
아래 두 설정은 샘플링 비율이 1.0으로서 100%로 설정되어 있습니다
샘플링 비율을 너무 높게 설정하면 성능에 영향을 줄 수 있고 너무 낮게 설정하면 충분한
데이터를 수집하지 못할 수도 있습니다
초기에는 샘플링 비율을 높게 시작하고 점진적으로 샘플링 비율을 조정하여 최적의 균형을 찾는
것이 좋습니다 이 코드를 프로젝트에 적용해 보겠습니다.
requirements.production.txt 파일에 sentry-sdk 라이브러리를
추가합니다. 3개의 century 설정을 환경 변수를 통해 주입 받도록 적용하도록
하겠습니다.
sentry-dsn 환경 변수를 추가하고요.
세팅스에서 sentry-dsn 환경 변수 값이 있다면 century-sdk를 임포트하고
초기화 과정을 진행합니다.
TracesSampleRate 설정 값은 SENTRY_TRACES_SAMPLE_RATE 환경
변수로 주입 받도록 하고요, default로 1.0을 지정했습니다.
ProfilesSampleRate 설정 값도 동일하게
SENTRY_PROFILES_SAMPLE_RATE 환경 변수로 주입 받도록 하고,
default로 1.0을 지정했습니다.
소스 파일 저장하고 커밋합니다.
뷰 샘플 에러 버튼을 클릭해서 다음 페이지로 넘어갑니다.
샘플 에러 페이지가 보여집니다.
탭에서 모든 에러 목록을 조회하실 수 있습니다.
이제 장고 서비스에서 에러를 발생시켜 보겠습니다.
강의의 GitHub 저장소를 사용하시는 분들은 Sentry 관련 코드가 이미 적용되어
있습니다. 각자의 저장소를 쓰시는 분들은 추가된 커밋 내역을 서버 프로젝트에 반영해
주세요. 서버에 django.env 파일에 sentry-dsn 환경 변수를 추가합니다.
잘 지정되어 있네요.
django 서비스를 재시작하고 접속해 보면 502 Bad Gateway 응답을
받았습니다. 이는 엔진X 서버는 떠 있는데 django 서버가 죽어 있는 상황입니다.
django 서비스의 로그를 보면 Sentry SDK가 없어서 django 서버 구동에
실패했네요.
라이브러리 설치하고 장고 서버 재시작하고요.
새로고침하시면 500 응답을 받았죠.
센트리 이슈 페이지에서 새로고침해 보시면 곧 에러 내역이 자동으로 등록되었음을 확인하실 수
있습니다. 이제 데이터베이스 URL 환경 변수에서 고의로 만든 에러 상황은 제거하도록
하겠습니다.