안녕하세요. 이번 시간에는 라이트세일 관리형 데이터베이스 포스그릿 SQL 리소스를
생성하고 장고 서비스에 연동하는 방법에 대해서 살펴보겠습니다.
Settings에 Databases 설정을 보시면 현재 SQLite3 데이터베이스입니다.
라이트 세일 페이지에서 Database 탭을 클릭해주세요.
데이터베이스 생성 버튼을 클릭해서 새 데이터베이스를 생성하겠습니다.
데이터베이스 위치는 라이트세일 인스턴스와 같은 위치의 서울로 지정하겠고요.
데이터베이스는 MySQL 및 PostgreSQL을 지원합니다.
2024년 4월 현재 최신 버전은 16.2 버전입니다.
데이터베이스 사용자 이름과 암호, 데이터베이스 명을 직접 지정하실 수도 있고요.
라이트세일에서 생성해 주는 값을 사용하실 수도 있습니다.
저는 생성해 주는 값을 사용해 보겠습니다.
사용자 이름과 암호는 데이터베이스 생성 후에도 확인하실 수 있는데요.
마스터 데이터베이스 이름은 이후에 대시보드에는 보이지 않으니 잘 기억해 주세요.
DB Master입니다.
데이터베이스 플랜은 처음 3개월 무료로 제공되는 가장 저렴한 15달러 플랜을
선택하겠습니다.
데이터베이스명은 Django PostgreSQL DB로 지정하고 아래에 데이터베이스 생성
버튼을 클릭하여 생성합니다.
대략 10분 정도 걸립니다.
현재 생성 중 상태이고요.
웹페이지를 그대로 두시면 상태가 자동으로 갱신되는데요.
간혹 상태가 자동으로 갱신되지 않기도 하더라고요.
가끔 웹페이지 새로고침을 한 번씩 해주세요.
현재 백업 중 상태가 좀 긴 듯해서 웹페이지 새로고침을 하니 사용 가능 상태로 보여집니다.
데이터베이스 대시보드 페이지에서 사용자 이름과 암호, 그리고 호스트명, 포트 번호를
확인하실 수 있습니다.
이 데이터베이스의 퍼블릭 모드를 활성화하여 외부에 공개하실 수도 있지만 디폴트로 비활성화
되어 있습니다.
퍼블릭 모드가 비활성화 상태이지만 데이터베이스와 동일한 리전, 위치의 라이트세일
인스턴스에서는 데이터베이스에 접근할 수 있습니다.
암호 표기 버튼을 클릭하시면 자동 생성된 암호를 확인하실 수 있고요.
데이터베이스 계정 정보로 database-url 환경 변수 값을 구성해 보겠습니다.
편하신 에디터 여시고요.
유저명 복사해서 붙여 넣으시고, 암호는 그대로 쓰지 마시고, 암호에 골뱅이처럼 예약으로
사용되는 특수문자가 포함된 경우 데이터베이스 URL 값이 잘못 해석될 수도 있습니다
그래서 URL 인코딩을 수행한 암호를 적용합니다
호스트명, 포트번호, 데이터베이스 이름도 붙여넣습니다
그리고 한 줄로 이어보겠습니다
유저명 다음에는 콜롬 문자를 쓰고 암호를 쓰고요 암호 다음에는 골뱅이 문자를 쓰고
호스트명을 씁니다
호스트명 다음에는 콜론 문자를 쓰고 포트 번호를 씁니다.
포트 번호 다음에 슬래시 문자를 쓰고 데이터베이스명을 씁니다.
데이터베이스명 다음에 물음표 문자를 쓰고 추가 옵션을 지정합니다.
라이트 세일 데이터베이스에는 SSL 연결이 필수이므로 SSL 모드 리콰이어드 옵션을
지정하고요.
장고에서는 매 HTTP 요청을 처리할 때마다 데이터베이스 연결이 필요할 때 새로운 연결을
맺고 HTTP 요청이 장고에서 데이터베이스 연결을 즉시 끊지 않고 Connection
Max Age 설정에 지정된 시간만큼 연결을 유지하다가 이후 HTTP 요청에서 데이터베이스
연결이 필요할 때 이 연결을 재사용할 수 있습니다.
장고.env 환경 변수 파일에서 기존 데이터베이스 URL 값은 주석 처리해 주시고요.
완성된 데이터베이스 URL 문자열을 복사해서 적용합니다.
BATCAT 명령으로 설정 값을 확인해 보면 한 줄로 설정이 잘 적용되었습니다.
장고 쉘에 들어가서 환경 변수를 통해 Databases 설정이 제대로
지정되는지 확인해 보겠습니다.
Makefile에서 Shell 명령이 지원되니까요.
Make Shell 명령으로 Django Shell로 진입하겠습니다.
그런데 오류가 발생했습니다
DB 마스터 유저라는 데이터베이스 백엔드는 지원하지 않는다고 합니다
데이터베이스 URL 설정에서 데이터베이스 백엔드를 지칭하는 postgres:// 를
누락했습니다 그래서 유저명을 데이터베이스 백엔드로 받나 봅니다
postgres:// 를 추가하고요 저장하고 빠져나옵니다
다시 Django 쉘로 진입합니다
Settings의 Databases 설정을 보시면 우리가 지정한 대로 유저명, 암호,
호스트, 포트, 데이터베이스명, 그리고 각종 옵션까지 잘 지정이 된 것을 확인하실 수
있습니다. Show Migrations 명령을 내려보시면 현재 적용된 마이그레이션이
없습니다. 앞선 강의에서 수행했었던 마이그레이트는 SQLite3 데이터베이스에 대해서
수행했었고요.
지금은 다른 데이터베이스를 바라보고 있고 그 데이터베이스는 비어져 있는 데이터베이스이기에
이렇게 적용된 마이그레이션이 없는 것으로 조회되는 것입니다.
make migrate 명령을 수행하여 데이터베이스 테이블을 생성해 줍니다.
Django 서비스 재시작하고요.
웹페이지에 접속해 보시면 현재 PostgreSQL 데이터베이스로 서비스되고 있습니다
비용 측면에서 관리형 데이터베이스 사용료가 부담될 수 있지만 장기적으로 유지보수 비용을
절감할 수 있기 때문에 효율적입니다
작은 서비스를 운영하실 경우 하나의 가상머신에서 데이터베이스와 장고 서비스까지 모두
구동하고 싶으실 수 있는데요 이때
이와 같이 가상머신에 직접 PostgreSQL을 설치하실 수 있습니다.
Ubuntu 22.04 기본에서는 PostgreSQL 최신 버전을 지원하지 않기에
PostgreSQL 공식 apt 저장소를 추가하고요.
패키지 목록 업데이트하시면 최신 버전의 PostgreSQL을 설치하실 수 있습니다.
PostgreSQL 데이터베이스에 접속해서 데이터베이스 유저와 데이터베이스를 생성하고 데이터베이스
소유자로 지정해 줍니다.
그리고 장고에서 계정 정보에 맞게 데이터베이스 URL 설정하시고 접속하시어 말그레이트
명령으로 데이터베이스 테이블 생성하시고 서비스 운영하시면 됩니다.
이렇게 기본 설치는 데이터베이스를 설치한 머신에서만 로컬 호스트로 접속하실 수 있고요.
네트워크를 통해 다른 컴퓨터에서도 접속하시려면, PostgreSQL 설정을 변경하시고,
방화벽 설정도 열어주셔야 합니다.