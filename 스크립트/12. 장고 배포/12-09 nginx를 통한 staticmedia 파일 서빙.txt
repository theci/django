안녕하세요. 이번 시간에는 NGINX를 통한 스태틱 미디어 파일 서빙 방법에 대해서
살펴보겠습니다.
장고 서비스에서 사용되는 환경 변수 목록에서 스태틱 루트 설정과 미디어 루트 설정을
확인합니다. 각 경로의 디액토리가 현재 있고, Ubuntu인지 소유자도 확인합니다.
각 디액토리는 모두 비워져 있는 상태입니다.
static 정적 파일은 서비스 배포 단계에서 Django의 static root 경로로
미리 모아져야 합니다.
모으는 명령이 collect static 인데요.
collect static 명령을 수행할 때 필요한 환경 변수도 지정해 줘야 하고, 가상
환경도 미리 활성화, 액티베이트 해야 하죠.
명령을 수행해 보면 static underbar root 설정에 지정된 경로에
2,249개의 파일이 복사되었습니다.
그리고 스태틱 언더바 루트 디렉토리 목록을 보시면 이렇게 각 앱의 정적 파일들이 확인됩니다
이제 NGINX를 통해 루트의 srv 스태틱 파일드 디렉토리 내에 파일만 서빙만 하면
되겠네요 스태틱 파일 서빙에 앞서 각 장고 앱의 스태틱 파일들을 한 디렉토리로 모아
보겠습니다 서비스에
사용되는 환경 변수에서 static root 설정을 확인합니다.
srv/static/files directory 경로입니다.
이 디렉토리는 현재 비워져 있습니다.
서버에서 collect static 명령과 같은 장고 관리 명령을 실행하실 때에는 장고
서비스가 구동되는 환경과 동일하게 설정을 맞춰 주셔야 합니다.
그렇지 않다면 다른 설정으로 엉뚱하게 동작할 수 있습니다.
광고 서비스 환경과 동일하게 환경 변수와 가상 환경을 지정하고 컬렉트 스태틱 명령을
수행합니다. srv static files 디렉토리에 총 2,249개의 파일을 복사했다고
합니다. 잘 동작했고요.
디렉토리 내역을 보시면 이렇게 각 스태틱 파일들이 잘 복사가 되었습니다.
이제 nginx를 통해 서빙만 해주시면 됩니다.
앞에서 컬렉트 스태틱 명령 수행 시에 매번 env 패스 환경 변수 지정하고 가상 환경도
활성화해야 하고 매우 번거롭습니다.
그리고 정신이 없다 보면 환경 변수를 빼먹거나 오타로 엉뚱한 경로를 입력할 수도 있습니다.
실수할 여지는 줄여가는 것이 좋습니다.
리눅스에서는 Make Utility가 지원되고요.
Make Utility에서는 Make 파일을 통해 길고 여러 개의 명령에 대해서 짧은 명령
하나로 지정하실 수 있습니다.
Make 파일 내에서 env-path 경로와 파이썬 경로도 정의해 주고요.
manage.py 명령도 이렇게 정의해 줍니다.
Make를 통해 지원할 명령을 이렇게 여러 정의할 수 있습니다.
이때 유의하실 것은 make 파일에서는 들여쓰기는 반드시 공백, 스페이스가 아닌 텝 문자로
입력되어야만 합니다.
그렇지 않으면 missing separator 오류가 발생합니다.
이 make 파일을 myproj 프로젝트에서 manage.py 파일이 있는 디렉토리 경로에
생성하고요.
make collect static 명령을 내려오시면 이렇게 환경 변수 파일도 사용하고
가상 환경도 사용하여 정적 파일 수집이 잘 되었음을 확인하실 수 있습니다.
이제 실수할 여지가 거의 없어졌죠?
제공해 드린 기스트 페이지에서 Make 파일을 복사해 주세요.
Make 파일에서는 들여쓰기를 공백 문자가 아닌 탭 문자로 쓰셔야만 하는데요.
복사하는 과정에서 템 문자가 공백 문자로 변환될 수도 있으니 안전하게 더블겟 명령으로 로우
파일을 다운받아 주세요.
강의 영상에 보여지는 명령 외에도 장고 서비스를 재시작하는 명령과 nginx 리로드,
리스타트 명령도 추가했으니 편하게 써보세요.
Make 입력하시고 Tab 키를 눌러보시면 자동 완성도 지원됩니다.
Make 콜레트 스태틱 명령을 통해 환경 변수와 가상 환경이 적용된 콜레트 스태틱 명령을
수행합니다. 같은 경로에 대해 이미 콜레트 스태틱 명령을 수행했었기에 이미 파일들이
복사되어 있는 상황인데요.
다시 명령을 수행하면 기존의 파일들을 덮어쓰기 할 수도 있는데 이 명령을 진행할 것인지
물어봅니다.
collect static 명령에 no-input 인자를 추가하시면 물어보지 않고 항상
덮어쓰기로 동작합니다.
srv/static/files 디렉토리에 파일들은 생성했지만 아직 nginx 웹서버를
통해서 서빙은 하지 않았기에 여전히 웹브라우저를 통한 정적 파일 조회가 되지 않습니다.
서버에 static 정적 파일이 srv/static/files 경로에 모두 준비되었습니다.
nginx에서 정적 파일 서빙 코드는 아주 간결합니다.
location 지시자로 요청을 처리할 url의 prefix를 지정하고요.
alias 지시자를 통해서 파일을 서빙할 directory root 경로를 지정합니다.
django의 settings에서 STATIC_URL 설정으로 static 슬러시 설정이
있었었죠. 그 설정을 따라 location 지시자로 지정해 줍니다.
장고와 설정을 맞춰줘야만 합니다.
static 접근 URL은 장고단에서 생성되니깐요.
이를 맞춰주지 않으면, 장고단에서 생성한 static 파일의 URL은 엔진엑스에서 처리할
수 없는 주소가 될 것입니다.
static 정적 파일은 장고의 STATIC_ROOT 설정대로
srv_static_files_directory에 모아져 있죠.
그 경로를 지정합니다.
미디어 설정도 이와 마찬가지로, Django의 미디어 관련 설정에 맞춰
Location 지시자를 지정하고요.
Django의 미디어 루트 경로를 alias 지시어로 지정합니다.
Nano 명령으로 엔진X 설정 파일을 직접 수정해 보겠습니다.
서버 블록 안에 Location 블록으로 static 주소로 시작되는 요청에 대한 룰과
미디어 주소로 시작되는 요청에 대한 룰을 추가합니다.
각자 alias 지시자로 지정한 디렉토리에서 파일을 찾아 응답합니다.
파일이 없다면 404 응답을 합니다.
엔진X 리로드 명령 수행하시고요.
웹블라우저 새로고침하시면 이제 정적 파일 서빙이 동작합니다.
이제 웹페이지의 스타일도 정상적으로 보여집니다.
미디어 파일 업로드 테스트를 위해 새 기록을 해보겠습니다.
제목, 내용, 사진을 지정해서 저장합니다.
사진이 저장되고 정상 서빙되고 있습니다.
미디어 루트 설정에 지정한 대로 srv, 데이터, media_files 디렉토리를 보시면 이렇게
파일이 잘 저장되어 있습니다
급하게 정적 파일을 수정할 일이 있으시더라도 복사본 파일들은 절대 수정하지 마시고요
원본 스태틱 파일을 수정하신 후에 collectstatic 명령으로 복사해서 서비스에 적용해 주세요
복사본 파일을 직접 수정하면 프로젝트의 파일과 불일치가 발생할 수 있고 변경 내역을
추적하기 어렵기 때문입니다.
이후 배포 시에 해당 변경 사항이 누락되어 서비스에 반영되지 않을 수도 있습니다.
이는 배포 과정의 일관성을 해치고 예기치 않은 문제를 야기할 수 있습니다.
원본 스태틱 파일을 수정하고 collectstatic 명령으로 복사하는 방식은 스태틱 파일 관리를
단순화하고 유지 보수성을 향상시킵니다.
모든 스태틱 파일의 원본이 한 곳에 위치함으로 필요한 변경 사항을 쉽게 식별하고 적용할 수
있습니다.



1. Django 설정 확인
STATIC_ROOT와 MEDIA_ROOT 경로를 Django 환경 변수에서 확인합니다.
각 디렉토리가 존재하는지, 소유자가 올바르게 설정되었는지 확인합니다.
2. 정적 파일 수집
collectstatic 명령을 사용하여 Django의 모든 앱에서 스태틱 파일을 모아둡니다.
collectstatic을 실행할 때 환경 변수를 지정하고 가상 환경을 활성화해야 합니다.
명령을 실행하면 STATIC_ROOT 경로에 모든 정적 파일이 복사됩니다.
3. NGINX를 통한 스태틱 파일 서빙 설정
수집된 정적 파일을 NGINX가 서빙할 수 있도록 srv/static/files 경로를 NGINX에 연결합니다.
location과 alias 지시자를 통해 요청 URL과 실제 파일 경로를 지정합니다.
4. Makefile을 사용해 수집 명령 간소화
환경 변수를 빠뜨리는 것을 방지하기 위해 Makefile을 작성합니다.
Makefile 내에서 env-path와 manage.py 명령을 설정하여 make collectstatic 등 간편한 명령으로 스태틱 파일을 수집할 수 있습니다.
Makefile에서는 들여쓰기를 탭 문자로 사용해야 합니다.
5. NGINX 설정 파일 수정
NGINX 설정 파일에서 location 지시자를 사용해 정적 및 미디어 파일에 대한 경로를 지정합니다.
location /static/ 및 location /media/를 추가하여 각각 STATIC_ROOT와 MEDIA_ROOT 경로에 파일이 있는지 확인합니다.
6. NGINX 리로드
설정 변경 후, sudo systemctl reload nginx 명령으로 NGINX 설정을 적용합니다.
브라우저에서 정적 파일이 잘 로드되는지 확인합니다.
7. 미디어 파일 업로드 테스트
Django 애플리케이션에서 미디어 파일 업로드 테스트를 수행해 봅니다.
업로드한 파일이 MEDIA_ROOT 경로에 저장되고 웹페이지에서 정상적으로 표시되는지 확인합니다.
8. 스태틱 파일 변경 시 주의 사항
서비스에 필요한 정적 파일을 변경할 때는 원본 파일을 수정하고 collectstatic 명령으로 다시 복사합니다.
복사본 파일을 직접 수정하지 않도록 주의합니다.
