안녕하세요. 이번 시간에는 CRA React 애플리케이션을 빌드하고, 빌드된 파일을
리눅스 서버에 업로드해서 리얼 웹 서버를 통해 서비스 되도록 설정까지 해 보겠습니다.
빌드를 위한 환경 변수를 먼저 설정하고 확인해 주셔야 합니다.
빌드용 환경 변수는 .env.production 파일에 설정했었죠.
두 환경 변수 값이 모두 Sass, CRA, Sass인지 확인해 주시고요.
npm run build 명령을 수행하시면 배포 빌드가 생성됩니다.
빌드 디렉토리에 배포 빌드가 생성되고요.
index.html 파일을 열어보시면 public__url 환경 변수에 지정한
slushcr의 slush 주소 기반으로 각 정적 파일들의 링크가 생성되었음을 확인하실 수
있습니다. CRA 애플리케이션을 빌드한 파일은 HTML, CSS, JavaScript와
같은 정적 파일이기 때문에 리눅스 서버에서는 Node.js 설치가 필요 없고요 이 빌드된
파일들을 리눅스 서버에 올려서 Nginx를 통해 정적 파일 서빙토록 설정하시면 됩니다
섹션 12 강의에서 생성하고 설정했던 아마존 웹서비스 라이트 세일 가상머신 기반에서 설정을
이어갑니다 혹시 가상머신을 삭제하셨다면 섹션 12 강의를 참고하셔서 동일하게 라이트 세일
가상머신을 생성하고 설정해 주세요
로컬의 빌드 디렉토리를 아마존 웹서비스 라이트 세일 가상머신 서버로 복사를 해야 할 텐데
어떤 방법이 있을까요?
일단 ssh 명령으로 리눅스 서버에 접속해 봅니다
루트 경로에 srv 디렉토리에 소스 파일들을 복사했었죠.
이 경로에 cra-build 디렉토리를 생성하고 로컬에서 생성했던 cra-build 파일을
복사하려 합니다.
아직 cra-build 디렉토리를 생성하진 않겠고요.
엑싯 명령으로 리눅스 서버 연결을 끊고요.
다시 로컬입니다.
ssh 접속 명령에서 이어서 shell 명령을 쓰시면 즉시 해당 서버로 ssh 접속하고
해당 명령 수행하고 ssh 접속을 끊습니다.
Django 인스턴스에서 루트의 srv/cra-build 경로에 디렉토리를 생성하라는
명령이죠. 다시 서버 접속에서 루트의 srv 폴더에 보시면 cra-build 디렉토리가
생성되어 있습니다.
이 명령을 뒤에서 활용합니다.
SCP 명령이 있습니다.
SSH 연결을 활용해서 로컬의 파일이나 디렉토리를 지정 서버의 지정 경로로 한 번에
복사하실 수 있습니다.
SSH 연결에 필요한 공개키는 이미 심어 뒀으니 별도의 인증 설정도 필요 없습니다.
"-r", 옵션을 Recursive 옵션으로 디렉토리를 복사할 때 사용하는 옵션입니다.
로컬의 빌드 디렉토리를 Django 인스턴스 서버의 Root SRV CRA 빌드의 테스트
경로로 복사해 봅니다.
이 명령에서는 반드시 부모 디액토리가 생성되어 있어야만 합니다.
없는 부모 디액토리를 자동으로 생성해 주진 않습니다.
부모 디액토리가 없다면 복사가 실패합니다.
복사가 잘 된 듯 하고요.
서버에 접속해서 루트의 srv, cra, build의 테스트 디액토리를 보시면 로컬의 빌드
디액토리의 파일들이 모두 잘 복사되어 있음을 확인하실 수 있습니다 복사할 때 중간에
디액토리가 하나 더 생기는 실수를 많이 하거든요
복사되었다고 해서 당연히 잘 되었겠지 라고 생각하지 마시고 꼭 복사된 파일 경로를 확인해
주세요 정확한 경로에 복사가 되었는지 말이죠
그것이 실수를 줄이고 시간을 줄이는 습관입니다
루트의 srv 디렉토리에서 cra-build 폴더를 제거합니다.
rm -rf 명령은 정말 위험한 명령입니다. "-r"-
옵션은 재귀적으로, "-f"- 옵션은 pos, 즉 삭제 시에 묻지 말고, 지정 경로의 모든
파일 폴더들을 중간에 띄어쓰기 잘못하시면 서버의 시스템 파일들이 순식간에 삭제되어
버립니다. 조심해서 사용해 주세요.
서버 연결 끊고요.
로컬의 Build 폴더를 지정 서버의 지정 경로로 복사하는 스크립트를 세 가지 버전으로
만들어 뒀는데요.
Mac Linux 버전, Windows PowerShell 버전, 그리고 Node.js
버전입니다.
Node.js 버전을 활용해 볼게요
아래에 deploy.mjs 파일을 CRA 프로젝트의 scripts 폴더를 생성하시고 복사해
주세요 이
Node.js 스크립트가 실행되면 ssh 명령을 활용해서 서버에 현재 날짜 시간 이름의
폴더를 생성하고요 scp 명령을 활용해서 방금 생성된 폴더로 빌드 파일을 복사합니다 명령이
실행될 때마다 매번 새로운 이름의 폴더가 생성이 될 텐데요.
매번 바뀌는 폴더 경로를 nginx 웹서버에서 바라보게 하려면 매번 nginx 설정을
바꾸는 건 번거롭잖아요.
그래서 새로운 폴더를 생성하고 그 폴더 경로를 루트의 srv, cra, build의
Current 경로의 Symbolic 링크가 바라보게 해줍니다.
그럼 nginx 설정에서는 root의 srv, cra build,
current-symbolic-link만 바라보면 됩니다
혹시 예전 버전으로 cra 애플리케이션을 돌리려면 current-symbolic-link가
이전 버전의 폴더를 바라보도록 변경만 해주시면 됩니다
nginx 설정은 안 바꾸셔도 돼요
방금 추가한 deploy.mjs 명령은 그냥 노드 명령으로 실행하셔도 되는데요 cra
애플리케이션이니까 package.json에 scripts 항목의 명령을 추가해 보겠습니다.
이제 npm run deploy 명령으로 실행하실 수 있고요.
접속할 서버 호스트는 필수 옵션입니다.
id 골뱅이 ip처럼 지정하셔도 되고요.
인자로 접속 호스트 지정해서 실행하시면 이렇게 ssh 명령으로 Django 인스턴스 서버에
접속해서 root의 srv, cra, build 디렉토리가 없다면 생성하고요.
현재 시각을 가진 이 경로의 폴더를 srv-cra-build-current 경로의 심볼릭
링크가 가리키게 합니다.
아직 이 폴더를 생성하진 않았습니다.
존재하지 않는 디렉토리 경로도 심볼릭 링크가 가리키게 할 수 있습니다.
이제 scp 명령으로 해당 디렉토리 경로로 build 디렉토리 내 파일들을 복사했습니다.
리눅스 서버에 접속해서 root의 srv, cra build 디렉토리를 보시면 이렇게
Current Symbolic Link와 날짜, 시각, 이름의 폴더가 있습니다.
빌드 디렉토리의 파일 복사가 잘 되었습니다.
방금 추가한 root의 srv, cra build의 Current 디렉토리 경로에는 cra
애플리케이션의 빌드 파일이 저장되어 있죠.
cra 애플리케이션 빌드 파일 서빙을 위한 nginx 설정 파일을 추가하겠습니다.
Build 폴더 아래에는 asset-manifest.json 파일,
favicon.icon, logo192.png 등의 여러 파일들이 있습니다.
이 파일들은 Slushy CRA 슬러시 경로를 통해 요청 받으면 Current 폴더 바로
아래에서 nginx가 읽어서 응답을 줄 것이고요.
Build 폴더 바로 아래에 CRA 애플리케이션을 위한 static 폴더가 있습니다.
여기에 빌드된 다양한 CSS, JavaScript 파일들이 있습니다.
해당 URL 경로로 요청을 받으면 이 static directory 경로에서 nginx가
읽어서 응답을 줄 것이고요.
마지막으로 그 외의 모든 slush CRA로 시작되는 요청은 CRA React
애플리케이션의 라우터에서 사용하는 경로로 보고요.
current directory의 index.html 파일을 nginx가 읽어서 응답을
줍니다. 슬러시 CRA 슬러시 About과 같은 URL의 파일이 존재하는 것이 아닙니다.
URL이 달라져도 nginx에서는 항상 index.html 파일만은 응답합니다.
그럼 React CRA 애플리케이션이 구동되면서 현재 URL 경로를 보고 현재 URL
경로에 맞게 라우팅 처리를 해서 URL에 맞는 화면을 React가 그립니다.
설정 파일 저장하시고 빠져나오시고요.
nginx 문법 검사하면 통과하고요.
nginx 재로딩 해주세요.