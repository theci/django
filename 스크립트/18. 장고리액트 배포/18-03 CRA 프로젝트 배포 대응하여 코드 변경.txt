안녕하세요 이번 시간에는 CRA 프로젝트 배포 대응해서 코드를 변경하겠습니다
배포 시에 CRA 애플리케이션과 Django 애플리케이션은 같은 출처에서 서비스하려 합니다
즉, 하나의 엔진X 웹서버를 경유하고요
현재 Slush static으로 시작하는 요청은 Django의 static 파일 파일을 서빙하고
있고요 Slush media로 시작하는 요청은 Django의 media 파일 파일을 서빙하고
있습니다 Slush static, Slush media로 시작하는 요청이 아닌 그 외의
모든 요청은 Django 서버로 전달하고 있고요 추가로 Slush CRA로 시작하는 요청은
React 애플리케이션이 구동되도록 할 것이고요 이를
위한 코드 변경을 이번 영상에서 해보려 합니다
현재 CRA 애플리케이션은 최상위 주소를 사용하도록 개발되어 있으므로 이를 슬러시 주소
아래에서 동작하도록 변경하겠습니다
먼저 환경 변수 파일을 개발용과 배포용을 분리하겠습니다
.env 파일에 명시된 환경 변수들은 개발용으로만 사용하기 위해
.env.development 파일명으로 변경하고요 새 파일로 .env.production
파일을 생성해서 두 개의 환경 변수를 정의합니다.
첫 번째 환경 변수인 react-app-root-path 환경 변수는 커스텀 환경
변수이고요.
slush-cra-slush 문자열을 지정합니다.
이 값은 cra 애플리케이션 내에서 url을 생성할 때 참조할 것입니다.
두 번째 환경 변수인 public URL 환경 변수는 Create React App에 이미 약속된 환경
변수고요 이 값은 npm run build 명령을 통해 생성되는 정적 파일들의 기본 주소를
지정합니다
iframe-modal-component에서 event.origin 값을 확인하는 코드가
있습니다 이는 웹브라우저에서 메세지 이벤트를 통해 메세지를 받으면 여러 소스에서 이벤트가
많이 넘어오거든요
수많은 메시지 이벤트 중에 장고 서버에서 넘어오는 메시지 이벤트만 필터링 할 목적으로
이렇게 iframe 주소와 event.origin 주소를 비교한 것입니다.
iframe 주소에 url 스키마와 호스트명까지 모두 지정되어 있으리라 가정하고 작성된
코드인데요. 그런데 CRA 애플리케이션과 장고 서비스가 같은 출처인 경우에는 URL
주소에는 호스트가 없습니다
그러니 호스트 주소가 없는 문자열에서 호스트명이 있는지 검사하는 코드는 항상 실패할 수밖에
없는데요 현재 페이지에 origin과 event.origin이 같은지를 비교하는 코드를
추가합니다 이 코드는 현재 페이지와 같은 출처의 페이지, 즉, Django 서버로부터
전달되는 메시지를 선별할 수 있습니다.
constant.javascript 파일에 환경 변수 React 앱 루트 패스 값을 참조한
루트 패스 설정을 추가하고요.
디폴트 값으로 Slush 문자열을 지정했습니다.
API 서버와 CRA 서버가 동일 출처일 때에는 API 호스트 지정이 필요 없으니 API
호스트의 디폴트 값은 빈 문자열로 변경하겠습니다
개발 서버의 환경 변수 REACT_APP API 호스트에는 반드시
http://localhost:8000이 지정되어 있어야 하겠죠
루트 패스 설정 값을 내보냅니다
URL 링크를 생성하는 모든 코드에 루트 패스 값을 반영해 보겠습니다
앱 8 컴포넌트의 라우터에서 최상위 패스로 루트 패스를 지정합니다
그럼 나머지 라우팅에는 루트 패스가 모두 적용되고요 탑 내비게이션 컴포넌트에서는 최상위
주소를 나타내는 링크를 루트 패스로 변경하고요 블로그 주소 앞에도 루트 패스를 추가하고,
어바웃 주소 앞에도 루트 패스를 추가합니다 로그인, 회원가입, 프로필, 로그아웃 버튼은
CRA 페이지가 아니라 장고 페이지로 이동을 할 것이기 때문에 React 라우터를 통한
이동이 아니라 실제 A 태그를 통한 페이지 이동을 해야 합니다.
as 속성은 제거하고요.
to 속성을 href 속성으로 변경합니다.
그럼 라우터를 통해 페이지 이동을 흉내 내는 것이 아닌 실제로 페이지 이동을 합니다.
index-page 컴포넌트에서도 블로그 주소 앞에 루트 패스를 추가하고요.
post-detail-page 컴포넌트에서도 블로그 주소 앞에 루트 패스를 추가합니다.



이번 강의에서는 CRA(Create React App) 애플리케이션과 Django 애플리케이션을 같은 출처에서 서비스할 수 있도록 설정을 변경하는 방법을 설명했습니다. 이 설정을 통해 Nginx를 사용하여 두 애플리케이션이 동일한 도메인에서 동작하게 할 수 있습니다. 주요 내용은 다음과 같습니다:

1. 환경 변수 설정
개발용과 배포용 환경 변수 파일을 분리하여 설정합니다.
.env.development: 개발 환경에서 사용되는 변수
.env.production: 배포 환경에서 사용되는 변수
REACT_APP_ROOT_PATH: CRA 애플리케이션이 동작할 루트 경로를 설정하는 커스텀 환경 변수로 slush-cra-slush 값을 지정합니다. 이 값은 애플리케이션 내에서 URL을 생성할 때 참조됩니다.
PUBLIC_URL: Create React App에서 사용되는 기본 환경 변수로, 정적 파일들의 기본 URL을 지정합니다.
2. iframe 메시지 이벤트 처리 수정
**event.origin**을 비교하는 코드에서, CRA 애플리케이션과 Django 서버가 동일 출처일 경우 호스트명이 없기 때문에 이를 처리할 수 없었습니다. 이를 해결하기 위해 현재 페이지의 origin과 **event.origin**을 비교하여 Django 서버에서 넘어오는 메시지만 필터링할 수 있도록 수정합니다.
3. 루트 경로 설정
constant.js 파일에서 환경 변수를 참조해 루트 경로를 설정합니다. 디폴트 값은 slush로 지정됩니다.
API 서버와 CRA 서버가 동일 출처일 때, API 호스트는 빈 문자열로 설정됩니다. 개발 서버에서는 http://localhost:8000이 API 호스트로 설정됩니다.
4. 라우팅 변경
라우터에서 최상위 경로를 루트 경로로 설정하여 모든 라우팅에 루트 경로가 적용되도록 합니다.
탑 내비게이션 컴포넌트에서 링크를 루트 경로를 포함한 주소로 변경합니다.
블로그 주소와 어바웃 주소에도 루트 경로를 추가합니다.
5. 로그인/회원가입/프로필 이동 처리
로그인, 회원가입, 프로필, 로그아웃 등의 버튼은 CRA 페이지가 아니라 Django 페이지로 이동하므로, React Router의 to 속성을 href 속성으로 변경하여 실제 페이지 이동이 이루어지도록 합니다.
6. 기타 변경 사항
**index-page**와 post-detail-page 컴포넌트에서도 블로그 주소 앞에 루트 경로를 추가하여 모든 링크가 일관되게 동작하도록 수정합니다.
7. 배포 환경
배포 시, CRA 애플리케이션과 Django 애플리케이션은 Nginx 웹 서버를 경유하여 하나의 도메인에서 서비스되며, Django의 static과 media 파일은 기존처럼 Django 서버가 서빙하고, React 애플리케이션은 slush-cra-slush 경로 아래에서 제공됩니다.
이 과정은 CRA와 Django를 하나의 서버에서 운영하는 배포 환경에서 경로 설정과 API 요청을 제대로 처리할 수 있도록 도와줍니다.