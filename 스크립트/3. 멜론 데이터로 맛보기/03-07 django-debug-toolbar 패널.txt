자 이번에는 장고 디버그 툴바의 여러 패널들을 간단하게 살펴보겠습니다
히스토리 패널들이 있습니다
과거 스냅샷으로 전환하여 해당 요청에 대한 내역을 확인할 수 있는데요 우리가 페이지가 계속 바뀌면서 매번 현재 요청에 대한 디버그 툴바 내용만 볼 수 있는데 장고 디버그 툴바는
히스토리를 다 저장하고 있다는 거죠
특정 요청에 대한 내역을 보고 싶을 때 스위치 버튼을 눌러서 이렇게 전환을 하실 수 있습니다 
타이머 패널의 경우에는 브라우저에서의 요청 시작에서부터 응답 처리까지 걸린 시간을
각각의 항목별로 시간을 확인할 수 있습니다
그리고 settings 패널은 현장고 서버의 settings 내역을 확인할 수 있어요
그래서 우리가 이제 나중에 서비스 개발을 하시다 보면은 환경 변수나 여러가지 값을 참조해서 세팅스를 좀 동적으로 변경하는데 
그러한 환경변수 내역이 세팅스에 정확하게 반영이 되어있는지 확인할 목적으로 쓰시면 좋습니다.
헤더 패널은 현재 요청에 대해서 그리고 응답에 대한 헤더를 확인하실 수 있어요.
물론 이런 내역은 크롬 브라우저의 개발자 도구의 네트워크 탭을 통해서도 확인해 볼 수 있겠지만 
웹브라우저 안에서도 장고 디버그 툴바를 통해서 편리하게 헤드값을 살펴보실 수 있고요 리퀘스트 패널이 있습니다
이 패널에서는 하나의 요청이 어떤 뷰를 통해서 처리가 될 때 어떤 인자로 호출이 되었고요
그리고 쿠키 내역과 그리고 세션 데이터와 요청의 GET 데이터와 POST 데이터까지 확인을 하실 수 있어요
히스토리 기능이 있으니까 원하는 요청으로 스위치에서 해당 요청에서 어떤 쿠키나 세션이나 GET POST가 어떤 값이었는지 확인하기 아주 편리합니다
그리고 앞서 살펴봤던 SQL 패널이죠
SQL 패널은 장고 디버그 툴바 미들웨어가 요청을 받은 순간부터 응답을 처리할 때까지의
수행된 SQL 내용 및 실행 계획을 확인할 수 있습니다
템플릿 패널입니다.
이 템플릿 패널에서 편리한 기능이 뭐냐면 어떤 템플릿들이 사용되고 있고 그 템플릿 내에서 사용하는 값들의 목록을 살펴볼 수 있습니다
템플릿 패널을 한번 열어볼까요
로컬러스트 8000의 핫트랙 페이지로 가보겠습니다
여기에 템플릿 패널을 열어볼게요
열어보시면 현재 어떤 템플릿이 사용이 된지 보이죠
이렇게 보이고요 그리고 song이 여러 번 활용이 되었음을 확인하실 수 있고 어떤 템플릿에서 어떤 값들을 참조할 수 있는지 제공된 값들의 목록을 값과 함께 살펴보실 수
있어요 song에는 우리가 이렇게 song이 있네요
노래만 참조하도록 했잖아요
우리가 인덱스에 가보면 여기에 song에 only만 넣었으니까 값이 좀 적은데 only를 만약에 빼잖아요
이렇게 빼시면은 새로고침하고 다시 열어보면은 값이 많아졌죠
인덱스에 있는 모든 값이 넘어오는데 이렇게 하기보다 사용되는 값을 명시적으로 지정하고 only 주시면은 이 값만 이렇게 확인을 하실 수 있게 됩니다.
캐시 패널에서는 캐시 내역을 확인할 수 있습니다.
캐시는 다양한 목적으로 사용할 수 있는데요.
대표적으로 모든 유저에게 동일한 뷰 응답을 할 경우 매번 데이터베이스 조회와 템플릿 렌더링을 수행하는 것은 리소스 낭비일 수 있습니다.
이 경우 캐시를 적용해보면 첫번째 요청에서는 캐싱된 내역이 없으니 데이터베이스 조회 및 템플릿 렌더딩이 수행되지만 두번째 요청부터는 캐시된 내역을 캐시해서 바로 꺼내어서 응답을
주기 때문에 데이터베이스 부하를 줄이고 보다 빠른 응답이 가능해집니다
많은 수의 유저에게 같은 화면이 제공되는 이벤트 페이지에 적용하면 좋습니다
view함수에 cache를 적용하려면 cache_page 장식자를 만료시간을 초단위로 지정합니다. 
그러면 첫 요청에서는 캐싱된 내역이 없으니 데이터베이스 조회가 발생하지만 지정된 만료시간인 60초 내에 재요청이 있으면 
스크린샷과 같이 데이터베이스 조회 없이 캐싱된 값으로 응답이 되었음을 확인할 수 있습니다.
캐시에 대해서는 이후 자세히 살펴보겠습니다.




이번 내용에서는 Django 디버그 툴바의 다양한 패널을 소개하고, 각 패널의 용도와 활용 방법을 설명하였습니다. 주요 패널 기능은 다음과 같습니다:

1. 히스토리 패널
기능: 과거의 요청 내역을 확인할 수 있습니다. 디버그 툴바는 요청마다 기록을 저장하여, 이전 요청에 대한 디버그 정보를 쉽게 전환하여 볼 수 있습니다.
활용: 페이지를 여러 번 새로고침하거나, 여러 요청을 처리하면서 발생한 디버그 정보를 비교할 때 유용합니다.
2. 타이머 패널
기능: 요청 시작부터 응답까지 걸린 시간을 항목별로 분리하여 보여줍니다. 각 처리 단계에 걸린 시간을 확인할 수 있어 성능 최적화에 도움이 됩니다.
활용: 요청과 응답 처리에 소요되는 시간을 추적하여 성능을 개선할 부분을 찾을 수 있습니다.
3. Settings 패널
기능: 현재 Django 서버의 설정 값을 확인할 수 있습니다. 이를 통해 환경 변수나 설정 값이 정확히 반영되었는지 확인할 수 있습니다.
활용: 동적으로 설정을 변경한 후, 설정 값이 올바르게 반영되었는지 점검할 때 유용합니다.
4. 헤더 패널
기능: 요청과 응답에 대한 헤더 정보를 확인할 수 있습니다. 이는 크롬 개발자 도구의 네트워크 탭과 비슷하지만, 디버그 툴바 내에서 편리하게 확인할 수 있습니다.
활용: 요청과 응답 헤더에서 중요한 정보를 추출할 때 유용합니다.
5. 리퀘스트 패널
기능: 요청 시 전달된 인자, 쿠키, 세션 데이터, GET/POST 데이터를 확인할 수 있습니다. 히스토리 기능을 통해 특정 요청에 대한 자세한 데이터를 살펴볼 수 있습니다.
활용: 특정 요청에 대한 데이터 흐름을 추적하고, 전달된 인자나 데이터를 확인할 수 있어 디버깅 시 매우 유용합니다.
6. SQL 패널
기능: 요청 처리 중 실행된 SQL 쿼리 및 실행 계획을 확인할 수 있습니다. 이를 통해 쿼리 성능을 분석하고 최적화할 수 있습니다.
활용: 페이지가 요청될 때 실행되는 쿼리와 쿼리의 실행 계획을 분석하여, 데이터베이스 쿼리를 최적화하는 데 유용합니다.
7. 템플릿 패널
기능: 사용된 템플릿과 템플릿 내에서 참조되는 변수 값들을 확인할 수 있습니다. 템플릿에서 사용된 값들을 명시적으로 나열해 보여주며, 이를 통해 템플릿 렌더링을 추적할 수 있습니다.

활용: 템플릿에서 실제로 사용되는 데이터와 그 값을 쉽게 확인할 수 있어, 템플릿의 렌더링 과정에서 문제가 발생했을 때 유용합니다.

예시: song 데이터를 예로 들면, only를 사용하여 필요한 값만 넘겨주면 템플릿에서 참조되는 값의 목록을 깔끔하게 볼 수 있습니다. only를 빼면 템플릿 내의 모든 값이 보여집니다.

8. 캐시 패널
기능: 캐시된 데이터를 확인할 수 있습니다. 데이터베이스 조회와 템플릿 렌더링을 캐시하여 성능을 개선하는 데 사용됩니다.

활용: 동일한 데이터를 반복해서 조회하는 경우, 첫 요청 시 데이터베이스 조회 후 캐시된 값을 사용하여 성능을 개선할 수 있습니다.

예시: cache_page 장식자를 사용하여 특정 뷰를 캐시하고, 이후 요청에서는 캐시된 데이터를 사용하게 할 수 있습니다.
캐시 사용 예시:

첫 요청 시에는 데이터베이스 조회가 발생하지만, 캐시가 설정된 후에는 캐시된 데이터를 반환하여 더 빠르게 응답할 수 있습니다.
캐시 내역을 확인하여, 캐시가 적절하게 작동하는지 모니터링할 수 있습니다.
정리
Django 디버그 툴바는 여러 패널을 통해 개발 중인 웹 애플리케이션의 다양한 정보를 실시간으로 확인할 수 있는 유용한 도구입니다. 각 패널을 활용하면 요청 및 응답 처리 시간, SQL 쿼리 성능, 템플릿에서 사용되는 값, 캐시 상태 등을 추적할 수 있으며, 이는 성능 최적화와 디버깅에 매우 유용합니다.

히스토리 패널을 통해 과거 요청을 확인하고,
타이머 패널로 응답 시간 분석,
SQL 패널을 통해 쿼리 최적화,
템플릿 패널을 사용해 데이터 흐름을 점검,
캐시 패널로 캐시의 작동 상태를 확인하는 방식으로 효율적인 디버깅과 최적화를 할 수 있습니다.
Django 디버그 툴바를 잘 활용하면 개발 중 발생할 수 있는 다양한 문제를 보다 쉽고 빠르게 해결할 수 있습니다.



