안녕하세요 이번 시간에는 웹 멜론 데이터를 데이터베이스에 부어 노래 검색 서비스를 만들고 장고 모델과 어드민을 통해 데이터를 관리하는 서비스를 빠르게 만들어 보겠습니다
시작하기에 앞서 새로운 장고 프로젝트 폴더를 먼저 생성을 해주겠습니다
mydjango03hottrack 이라는 폴더이구요
그리고 가상 환경을 생성하고 활성화하고 장고 프로젝트를 생성하겠습니다
그리고 이어서 핫트랙이라는 앱을 장고 기본 앱 템플릿으로부터 만들어주고요.
이 장고 기본 앱 템플릿은 하단 링크에서 확인하실 수 있는데요.
장고 콤프의 앱 언더바 템플릿이라는 폴더에 있는 구성 그대로 새로운 앱을 생성하는 것입니다. 
핫트랙 앱을 생성하고 나서 urls.py를 이렇게 만들어 주시고요
그리고 핫트랙 앱에 apps.py에서 기본 컴픽 설정이 있는데 여기에 verbose_name이라는 설정을 핫트랙이란 이름으로 추가해 줍니다
이렇게 추가해 주시면 어드밋 페이지에서 우리가 지정한 이름으로 핫트랙 앱이 한글로 보여지게 됩니다 
앞서서 핫트랙 앱을 생성을 했으니까요 Installed Apps 리스트에다가 핫트랙 앱을 등록을 해주고요 
그리고 핫트랙 앱의 urls.py가 이 프로젝트에서 사용될 수 있도록 mysite의 urs 에다가 hottrack.urls 를 include 해주시고 
이 주소에 대한 시작 주소로서 핫트랙 슬러시를 추가해 주겠습니다
그리고 최상위 주소로 접근 시에 핫트랙 슬러시 주소로 페이지 이동을 시키기 위해서 빈 주소를 입력하시고 뷰함수는 첫번째 인자는 리퀘스트를 받겠구요
응답으로써 리디렉트 응답을 통해 핫트랙 슬러시라는 주소로 이동을 하도록 했습니다
장고 앱은 Installed Apps 리스트에 등록이 되어야만 장고 앱으로서 대접을 받습니다.
이렇게 등록이 되어야만 models.py에 정의된 모델들을 자동으로 인식해서 데이터베이스 스키마에 반영할 수 있겠구요.
admin.py에 정의된 관리자 클래스를 인식해서 Admin 앱에서 로딩하게 됩니다.
그리고 앱 폴더 밑에 있는 static 폴더 경로를 정적 파일 로더에 자동으로 등록하고요
앱 폴더 밑에 있는 templates 폴더 경로를 템플릿 로더에 자동으로 등록을 합니다
그리고 앱 폴더 밑에 있는 test.py 또는 앱 폴더 밑에 있는 test라는 폴더의 테스트 케이스를 자동으로 인식해서 테스트 명령을 내릴 때 그 파일들을 실행을 해주겠구요
앱 폴더 밑에 있는 매니지먼트 폴더 밑에 Commands 아래에 커스텀 Django 관리 명령을 추가할 수 있는데 여기에 추가된 명령들도 앱이 Installed Apps에 등록이 되어야만
사용할 수 있게 됩니다.
새 Django 프로젝트 폴더를 만들어 보겠습니다.
myjango03의 hottrack 이란 이름으로 만들 것이구요
디렉토리 이동해서 가사 환경을 생성해 줍니다.
윈도우는 python 3.11의 minus m vmv의 env가 되겠구요
그리고 pi env를 사용하는 환경에서는 이제 사용하는 버전을 지정해서 로컬 버전을 지정해 주시고 그 다음에 이렇게 가사 환경을 생성하는 거죠
가상 환경을 생성하시고 나서 윈도우에서는 venv에 스크립트에 액티베이트 까지 쳐주시면 되겠고 맥이나 니눅스는 소스 vmv에 bin에 액티베이트 해주시면 되겠습니다
그 다음에 Django 라이브러리 설치가 필요하죠
그래서 Django는 4.2.0 버전 중에 최신 버전이 설치가 되도록 하겠구요
django-admin startproject mysite.django 프로젝트도 생성을 해주겠습니다
이렇게 django 파일들이 잘 생성이 되었구요
그리고 핫트랙 앱도 생성을 해주겠습니다
자 PyCharm에서 방금 생성한 장고 프로젝트 폴더를 방금 열었구요.
여시면은 확인하실게 뭐냐면 프로젝트의 파이썬 인터프리터 설정에서 가상 환경이 잘 잡혀있는지 확인하시구요.
검색을 해볼까요?
장고로 검색하시면은 여기에서 장고 지원이 활성화되어 있는지 살펴보시고 활성화 안되어 있다면 체크하시고 프로젝트 경로 그리고 세팅스 경로 그리고 매니지 파이 스크립트 경로 이제
마이그레이션스 여기까지 넣어주시고 확인을 눌러주시면 되겠습니다
그리고 윈도우 파이 3에서 터미널 설정과 인코딩 설정이 있었죠
그 설정들은 한 번만 설정하시면 되겠고요 프로젝트마다 추가로 설정해 줘야 되는 부분은 이제 black입니다 
현재 가상 환경에 설치가 안되어 있으면은 터미널에서 직접 설치하셔도 되겠구요
Install black을 클릭해서 설치를 하실 수도 있습니다
자 설치가 되고 나면은 이 두 개의 옵션을 다 켜 줄게요
그래서 리포맷 명령 시에도 블랙을 적용하겠구요
세이브 시에도 적용을 하도록 하겠습니다
그리고 오케이는 눌러 주겠구요
자 이제 터미널을 여셔 가지고요 가상 환경이 잘 활성화가 되어 있는지 확인해 보겠습니다
파워셀에서는 get command python 이라는 명령에서 select object source 라고 해주시면 되겠구요
맥이란 이눅스는 which란 명령인데 음 저는 가상 환경이 잘 활성화가 터미널에서 잘 안됐네요. 일단은 수동으로 해주겠습니다
이렇게 해주고 나서 다시 명령해서 가상 환경 활성화 하고요 다음에 Migrate 한번 해주겠구요 
그리고 Manage Run Server 명령을 해서 개발 서버를 구동해주고 개발 서버에 대해서 접속도 확인해 주겠습니다
자 이어서 핫트랙 앱에서 urs.py라는 파일을 생성해 주겠구요
기본적으로 url 패턴즈라는 이름의 리스트만 있으면 됩니다
이 파일을 장고해서 자동으로 읽어 가는 거거든요
근데 이제 이 리스트 구성에 필요한 것이 장고 urls의 import path를 통해서 url 패턴즈 리스트의 항목을 채우는 것이고 
그리고 현재 디렉토리의 views를 뷰 맵핑을 위해서 이렇게 사용을 합니다
이렇게 저장을 해주시고 핫트랙 앱에서 apps.py를 여시면 기본 앱 컴피그 설정이 있습니다
여기에다가 버버스네임이라고 해서 이름을 핫트랙이라고 주겠습니다
마이 사이트의 urspy 에서 위에 있는 이 문자앨은 주석이니까 삭제해도 괜찮습니다
이렇게 삭제를 하시고 시작 주소도 heartracks.urls를 주고요 다음에 include heartracks.urls를 include를 해줍니다
인클루트 임포트 안되어 있으니까 커서 두시고 Alt 엔터 맥은 옵션 엔터 하시면은 임포트가 뜨겠구요 
절대 xml-e-tree 이거 선택하시면 안돼요
혹시 이것을 선택하셔서 추가가 되셨다면은 지우시구요
다시 해서 django.urls에 include를 하십니다
이름은 같지만은 서로 다른 function이기 때문에 xml 걸 추가하시면은 오류가 나요
django가 동작하지 않습니다
그리고 제가 슬라이드에서는 이 인자 앞에 키워드를 썼었거든요 
키워드를 쓰는 이유는 여러분들이 장고 처음 하실 때 해당 인자가 정확하게 어떤 역할을 하는지 인자의 순서만 봐서는 명확하게 인지하기 힘들거든요
어떤 API를 쓸 때 그 인자의 이름도 같이 이렇게 지정해 주시면 이 인자가 어떤 역할을 하는구나 라고 좀 더 명확하게 인지할 수 있기 때문에 저는 이렇게 지정하시는 것을
추천드립니다 
그리고 route에서 최상위 주소로 들어오면 view함수에서는 slushy-heartrack 주소로 이동하도록 정답을 주겠습니다.
이렇게 저장하시고 새로 고침하시면 heartrack 주소로 이동합니다.
그런데 아직 heartrack.urls.py에서 아직 맵핑된 내역이었기 때문에 page.not-found가 뜨는 거예요.
자 이제 마지막으로 Settings 파이에서 Installed Apps 에다가 hottrack 이름을 추가하시면요 
앱 등록이 되는 것이고요
혹은 hottracks.apps.hottrack.config 라고 해서 여기에 있는 설정 경로를 지정하는 방식도 있습니다
이렇게 하셔도 되고 이렇게 하셔도 됩니다
앱 이름만 지정하시면 해당 컴피그에 이 첫번째 있는 이 디폴트 컴피그를 사용하겠고요
앱에서 여러 개의 컴피그가 정의가 되어 있다면 그때 사용할 컴피그를 Installed Apps 에다가 지정을 해주시면 되겠습니다
자 이번에는 핫트랙 시작 페이지를 한번 만들어 볼 텐데요 오른쪽 화면과 같은 시작 페이지를 만들어 보겠습니다
여기에 필요한 HTML 코드는 하단 링크에서 이렇게 확인하실 수 있어요
자 여기에 있는 Views 파이에서 Index View는 이제 템플릿을 렌더링 하는 것 밖에 안하죠
index.html 파이는 이 경로에다가 위치할 것이고요
이 내용을 그대로 복사하시면 됩니다
그냥 HTML 뿐이에요
그리고 index.html 에서 include를 하는 underbar.song.html 을 합니다 
그래서 그 파일도 underbar.song.html 파일도 이 경로에 생성을 해주겠습니다 
이 템플릿을 구성하는 데에 사용한 파일들은 bootstrap 5 cdn 파일과 bootstrap 에 앨범 예시가 있습니다
그 앨범 예시를 참고했구요
그리고 여기에 들어가는 이미지는 lorem pixum 서비스 에서 제공하는 url 을 가져와서 사용을 했습니다
자 이제 하트랙에 views 파일을 여시구요
이 코드를 한번 타이핑을 해보죠
python 코드는 짧으니까 타이핑을 하고 html 코드는 복사를 하겠습니다
그래서 인덱스하는 view 함수가 있어요 view
함수가 있고 이 view 함수가 호출되기 위해서는 urls.py 에서 맵핑이 필요합니다
그래서 pass함수 쓰고 빈 주소가 있으면은 views.index함수가 호출하도록 하겠다라고 지정하실 수 있겠구요
앞에다가 키워드인자도 키워드이름도 이렇게 붙여볼 수 있죠
현재의 view함수는 아무것도 return하지 않죠
아무것도 return하지 않으면 non을 return한 것으로 처리합니다
그렇기 때문에 여기에서 새로고침 해보시면은 아 제가 오타를 냈네요
뷰가 아니고 뷰입니다
이제 서버가 구동 중이고 접속을 해보시면은 자 이런 오디오가 발생합니다
이런 오디오 자주 보실 거에요
자 핫트랙스 뷰스에 있는 인덱스라는 함수가 뷰 함수는 http의 response를 리턴하기를 기대하고 있는데 그러지 않고 non을 대신 리턴했다라고 하죠
자 이런 오디오 뜨시면 뷰 함수를 확인을 하시면 되는 거예요
자 그리고 리턴 렌더의 리퀘스트에 이제 하트랙의 index.html 파일을 사용할 겁니다.
새로 고침해보시면 이제 index 파일을 찾을 수 없다라고 하는 거죠.
오류가 바뀌었습니다.
index함수의 첫번째 인자는 http request라는 타입입니다.
그래서 이것도 import 해주시면요 타입을 지정하시면 해당 타입에 대해서 이런 자동 완성을 좀 더 명확하게 지원받으실 수 있어요
타입을 안쓰면 툴이 그 타입을 추돈을 해야 되는데 타입을 지정해 주면은 그런 추돈의 공수를 조금 줄일 수 있죠
그래서 좀 더 정확한 안내를 받으실 수 있어요
그리고 반환 타입은 항상 HTTP 리스폰스 타입이어야 합니다
자 그리고 렌더 함수도 보시면은 컨트롤이나 맥의 커맨더 눌러서 보시면 이렇게 함수 구현부로 들어갑니다. 
첫번째 인자는 리퀘스트, 두번째 인자는 템플릿 네임, 세번째 인자는 컨텍스트고 추가 인자도 있습니다.
우리는 이 3개의 인자를 사용하는 거에요.
파이썬 함수에서 해당 인자의 이름을 지정하지 않으면 이렇게 순서대로 인자가 지정됩니다
앞에 템플릿 네임이라고 보여주는 것은 파이참이 기능인 것이고요
우리는 좀 더 명확하게 인자 이름을 이렇게 지정을 해 보겠습니다
그리고 세번째 인자는 컨텍스트한 이름으로 우리가 사전을 지정해 줄 거에요
자 이제 템플릿 파일을 생성을 해 주겠습니다
인덱스 메시네멜 파이는 이 경로에 생성을 하는 거에요
자 그러면 제가 핫트랙이라는 폴더를 찍어서 생성할 것이거든요
그러면 템플릿 부터 이렇게 복사합니다
자 핫트랙 폴더 이름 찍고 new에 파일 하신 다음에 나머지 경로 템플릿 부터 index.html 까지 지정 하시면요 
킷에 자동 추가 하겠느냐 자동 추가합니다 하시고
그러면 핫트랙에 템플릿에 핫트랙에 index.html 파일이죠
이 파일이고 이 내역을 복사하고요 선택이 어려우시면 로우 라는 메뉴를 클릭해서 여기에서 전체 선택 컨트롤 A 하시고 붙여넣기 하셔도 됩니다
우리가 추가로 해야 될 파일이 underbar_song.html 파일이죠
이 파일도 핫트랙 밑에 템플리스에 핫트랙에 언더밧송.html 파일이니까 이 파일도 이 경로를 복사하셔가지고 hottrack 밑에 아닙니다
위에 이름 찍어서 이렇게 하시고 롤에서 전체 선택해서 붙여넣습니다
자 그러면 새로 고침 해보시면은 어 아직도 템플릿을 찾을 수 없다라고 합니다
그래요 자 이런 오디오가 나오시면요 정말 중요한 팁이에요
특히 초호심자 분들이 꼭 확인하셔야 될 부분이 있는데 템플릿을 찾을 수 없다라는 오디오가 나시면요 자 이 부분을 보셔야 돼요
이 부분에 보시면은 현재 장고가 어떤 경로에서 템플릿 파일을 찾기를 시도했는지가 나오거든요
핫트랙의 인덱스 message.html 파일을 찾기를 시도했는데 찾기를 시도한 경로가 장고 앱에 어드민 앱에 템플리스에 핫트랙의 인덱스 메시테멜을 찾았는데 없었고 그리고 여기도 이 이름으로
찾았는데 auth 앱에서 찾았죠
자 우리가 만든 이 핫트랙 앱은 이 두 개 없습니다
그쵸 장고 개발 서버를 한번 껐다가 새로 켰습니다
그리고 이렇게 새로 고침하시면 나와요 방금 이렇게 개발 서버를 재시작한 이유는 장고 개발
서버는 이 템플리스라는 폴더의 존재를 언제 체크하냐면 장고 개발 서버가 시작할 때
체크합니다 이 장고 개발 서버가 시작되고 나서 템플리스 폴더가 만들어졌기 때문에 장고 개발
서버는 템플릿 폴더의 존재를 몰랐던 거예요
installedapps에서 admin을 추가하면 이 앱 밑에 있는 템플리스 경로를
템플리스 로더에 자동 추가한다고 말씀드렸잖아요
그 추가하는 작업을 개발 서버가 처음 시작할 때 딱 한번 하는 거에요 장고 개발 서버가 떠
있는데 재시작이 아직 안된 상황에서 템플리스 폴더가 추가가 되었기 때문에 이 개발 서버가
모르고 있었고 그래서 수동으로 재시작을 했던 겁니다
근데 템플릿 폴더를 만드시고 나서 만약에 Python 파일을 한번 바꿨어요
이렇게 바꾸시고 저장하시면 자동 재시작이 되죠
자동 재시작이 된 상황에서는 이 새로 생긴 템플릿 폴더를 인식했을 겁니다



이번 시간에는 웹 멜론 데이터를 데이터베이스에 저장하고, 장고 모델과 어드민을 통해 노래 검색 서비스를 만들기 위한 기본적인 설정과 구성을 다루었습니다. 주요 과정은 아래와 같습니다:

1. 프로젝트 및 가상환경 설정
새 장고 프로젝트 폴더 생성: mydjango03hottrack이라는 폴더를 생성.
가상환경 설정: python -m venv env 명령어로 가상 환경을 생성하고 활성화.
Windows: env\Scripts\activate
macOS/Linux: source env/bin/activate
장고 설치: pip install django==4.2.0으로 장고를 설치.

2. 장고 프로젝트 및 앱 생성
장고 프로젝트 생성: django-admin startproject mysite 명령어로 프로젝트 생성.
앱 생성: python manage.py startapp hottrack 명령어로 hottrack 앱 생성.
생성 후 apps.py에서 verbose_name = '핫트랙'으로 앱 이름 설정.

3. urls.py 설정
앱의 URL 설정: hottrack/urls.py를 만들어 URL 패턴을 정의하고, 이를 mysite/urls.py에 include로 연결.
예시: path('', views.index, name='index')로 views.index와 연결.
최상위 URL에서 hottrack 주소로 리디렉션: views.index 함수에서 리디렉션을 구현.

4. 앱 등록 및 설정
앱 등록: mysite/settings.py의 INSTALLED_APPS에 hottrack 앱 추가.
hottrack.apps.HottrackConfig를 지정하거나 hottrack만 입력하여 기본 설정을 사용.
정적 파일 및 템플릿 설정: static 폴더 및 templates 폴더가 자동으로 설정됨.

5. 뷰 및 템플릿 생성
뷰 함수 작성: views.py에서 index 함수 작성. 이 함수는 템플릿을 렌더링하도록 구성.
템플릿 생성: hottrack/templates/hottrack/index.html 및 underbar_song.html 파일 생성.
Bootstrap 5 CDN을 사용하여 기본적인 UI를 구성.
이미지는 lorem pixum 서비스에서 제공하는 URL을 사용.

6. 템플릿 경로 문제 해결
템플릿 경로 설정: 템플릿이 올바르게 로드되지 않으면 경로 설정을 확인.
문제 해결: 템플릿 파일을 찾지 못하는 경우, django-admin 서버를 재시작하여 템플릿 경로를 인식하게 함.
템플릿을 찾을 수 없다는 오류가 발생하면, INSTALLED_APPS에 hottrack을 추가한 후 개발 서버를 재시작해야 합니다.

7. 개발 서버 실행
서버 실행: python manage.py runserver 명령어로 장고 개발 서버를 실행.
서버가 실행되면, http://127.0.0.1:8000/에서 웹 페이지를 확인할 수 있습니다.

8. 추가적인 설정 및 주의 사항
뷰 함수 인자: views.index 함수에서 첫 번째 인자는 request여야 하고, render 함수에서 템플릿과 컨텍스트를 전달해야 합니다.
템플릿 자동 재시작: 장고 개발 서버는 파일 변경 시 자동으로 서버를 재시작하지만, 새로 생성된 템플릿 파일을 인식하려면 수동으로 서버를 재시작해야 합니다.

요약
이 과정에서는 장고 프로젝트를 설정하고, hottrack 앱을 생성한 뒤 기본적인 URL, 뷰, 템플릿 구조를 통해 간단한 웹 서비스를 구성했습니다. 
또한 템플릿 파일 경로 문제를 해결하고, 개발 서버에서 제대로 작동하도록 설정하는 방법을 다루었습니다. 
이 기본적인 흐름을 통해 더 복잡한 기능과 데이터베이스 연동, 어드민 설정 등을 추가할 수 있습니다.