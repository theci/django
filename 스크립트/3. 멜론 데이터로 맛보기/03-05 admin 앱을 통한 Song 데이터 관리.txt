어드민 앱을 통한 송 데이터 관리입니다.
유저는 조일만 하는 데이터인 경우 관리 목적의 UI를 직접 개발하기보다 장고의 어드민
기능을 활용하면 개발 공수를 줄이고 유저 서비스에 더 집중을 할 수 있게 됩니다.
장고에서는 모델 클래스를 어드민에 등록하는 것만으로 어드민 기능을 통해 등록된 모델에 대한
조회, 생성, 수정, 삭제 UI를 제공받을 수 있습니다
자 현재 장고 개발 서버가 떠 있구요
그리고 웹브라우저에서 어드민 주소로 접속을 해 보십니다
자 이제 이 화면이 장고 어드민 앱에 대한 로그인 페이지가 되겠구요
이 페이지에 로그인을 하기 위해서는 슈퍼유저 계정이나 스태프 유저 계정이 필요합니다
우리가 python manage.py createsuperuser 라는 명령을 통해서 슈퍼 유저
계정을 만드실 수 있어요
그래서 저는 myadmin 유저명에 이메일 주소는 비우고 이미에 암호를 입력을 하셔가지고
슈퍼 유저 계정을 만든 다음에 방금 만든 admin 계정으로 이렇게 로그인을 합니다
자 그러면 어드민의 현재 기본으로 등록된 모델은 유저 모델과 그룹 모델밖에 없습니다
여기에 핫트랙의 모델스에서 song 이라는 모델을 한번 등록을 해 볼게요
등록을 하려면 어드민.py에서 등록하려는 모델을 임포트하신 다음에
어드민.site.register를 통해서 이렇게 모델을 등록하실 수 있습니다
새로 고침해보시면 이렇게 핫트랙이라는 한글명이 뜨고 송이 떴죠
우리가 핫트랙이라는 한글은 우리가 앞서 지정했던 앱스의 앱스의 앱 설정에서 보버스 네임 핫트랙이 이
문자앱이 여기에 뜨고 있습니다
자 이렇게 모델 클래스를 등록하는 것만으로 어드민 페이지에 이렇게 UI가 제공되는데요
이렇게 추가도 할 수 있겠고요 그리고 변경도 혹은 삭제도 지원해 줍니다
그리고 클릭해서 목록도 볼 수 있습니다
현재 데이터베이스에 저장되어 있는 이런 데이터들을 여러분들이 확인할 수 있는 거죠
그런데 현재의 이 목록에서 확인할 수 있는 정보가 너무 없어요
그냥 song object 199에서 일련번호만 있을 뿐이죠
송 모델에 대한 어드민을 커스텀 하기 위해서는 admin.ModelAdmin을 상속받은 별도의 클래스를
만들어야 되고 이 클래스 이름을 SongAdmin이라고 해보겠습니다
그러면 이제 이 레지스터에서 두 번째 인자도 송어드민을 넘기면 이 모델에 대한 옵션을 이
송어드민을 통해서 제공을 받는 거예요 없으면은 이 부분이 생략이 되면은 기본 모델어드민으로
동작을 하는 거죠
지금은 지정된 게 없기 때문에 새로 고침을 해도 바뀐 게 없어요
자 현재 이 코드에서 이렇게 쓰셔도 되고 혹은 여기에서 이제 장식자의 형태로 쓰실 수
있는데 이때는 이렇게만 씁니다
사이트라는 부분이 여기에 생략된 거예요 생략이 되어 있습니다
그러면 제가 여기에서 인자로 뭘 넣어볼 수 있냐면
list_display라는 걸 넣어가지고 현재는 이 테이블에 컬럼이 한 개 이지만은 여기에
이제 여러 개의 컬럼을 추가할 수 있습니다
일단 네임만 넣어 볼게요
넣어 보시면은 이렇게 네임이 출력이 되죠
그리고 이제 아티스트 네임이 있겠구요
다음에 앨범 네임이 있겠고 다음에 장르가 있겠고 라이크 카운트가 있겠고 릴리즈 데이트라고
해서 이 필드들은 현재 송 모델에 다 있는 필드들입니다
이렇게 했죠 자 근데 여기에서 속 모델에 가보시면은 cover_url이 있습니다
커버 언더바 url도 넣어 보시면은 새로 고침을 해보시면은 이렇게 url이 보여지는데 자
저는 이미지를 여기에 바로 보고 싶어요
그러면 이 필드 값을 우리가 변환을 해야 되잖아요
이미의 이름을 만듭니다
이 이름의 필드는 이 모델에는 없어요
그럼 이 이름의 third을 하나 만드는 거에요
ModelAdmin에다가 만들면, 여기에 지정된 이름의 메소드가 ModelAdmin에 있으면 100개의
매행에 대해서 해당 컬럼의 값을 보여줄 때, 그냥 Hello라고 해볼까요?
이렇게 하시면 다 hello 라고 나오죠
그러면 현재 매 행의 값을 보여줄 때마다 이 function 을 호출하고 해당 행에 대한
그 song 모델 인스턴스 인자도 넘겨줍니다
자 여기에서 이미지 URL을 우리가 만들어 주는 거예요
그래서 이미지 URL을 만드실 때에 장고에서는 format_html을
활용하시면 안전하게 이런 url을 만드실 수 있게 됩니다
그래서 첫번째 인자로 html 포맷을 쓰고요 두번째 인자로 해당 포맷을 구성하는 인자를
넘겨줍니다 그래서 이미지 src 구역 여기에 이제 들어갈 영역 이 값이 들어갈 영역에
placeholder 를 만들어 주고요 이렇게만 하고 저장해 볼까요
저장하시고 자 새로 고침 해보시면은 이미지가 크게 출력이 됩니다
이미지에 대해서 썸네일 처리를 해볼 수도 있겠구요
가장 간단하게는 원본은 크지만 보여줄 때만 조금 작게 보여줘 볼까요
이렇게 해서 새로 고침 해보시면은 이미지가 작게 보여지고 있습니다
여기에서 파이탐에서 여기 밑에 이제 물결 표시가 있는데 이건 뭐냐면 이 메소드가 스태틱
메소드가 되어도 괜찮지 않을까
왜냐면 셀프를 직접적으로 참조하는 게 없으니까 그래요
그래서 이거를 스태틱 메서드라고 지정을 하셔도 동작에는 셀프를 참조 안하기 때문에 동작은
상관이 없겠고요
혹은 이 메서드를 여기에 지정하는 것이 아니라 song 클래스 모델단에서
song_cover_image 태그라고 해볼까요
이것도 여기에 property도 넣어볼 수 있겠죠
이렇게 넣고 format-html도 넣고요 그러면 song이 아니라 셀프를 받을 거고
여기도 셀프를 받을 것입니다
커버 이미지 태그에서 HTML 태그를 이렇게 만들어 줍니다
그럼 여기는 이렇게 태그라고 넣어 주시면 모델 어드민의 리스트 디스플레이에 지정하는
이름들은 해당 모델의 필드나 혹은 인자 없는 함수나 혹은 마커섬 속성을 지정하실 수도
있겠고 혹은 해당 모델 어드민에 인자 한 개 맞는 메소드를 지정하실 수도 있는 거예요
그리고 새로 고치 마시면은 똑같이 동작을 하고 있습니다
자 이어서 이제 Search Fields라는 옵션이 있습니다
필드 하나를 넣어 볼게요
이렇게 넣고 새로 고침해 보시면은 검색 박스가 뜨죠
여기에 만약에 지하라고 해봤어요
지하라고 하니까 나오지 않아요
자 여기 보면 지하란 이름이 아티스트 네임에 있잖아요
그리고 제가 검색을 하면은 검색어가 넘어가고 필드에 지정된 필드에 대해서 oa 조건으로
검색을 수행합니다
우리가 앞서 수행했던 검색이랑 똑같은 거예요
자 여기서 아티스트 네임 필드 혹은 제가 앨범 네임에 대해서 이렇게 검색을 수행하겠다라고
하면은 새로 고침하니까 결과가 나오죠
데이터베이스에서는 이제 외열 조건으로 쿼리가 수행이 되어서 검색 결과가 나오는 것입니다
이제 리스트 필터라는 항목을 통해서 제가 장르라고 넣어 볼게요
넣어 보면은 여기에 새로고침을 해주잖아요
장르라는 필드가 문자열 필드인데 값을 다 나열을 해서 이렇게 해당 이름을 클릭하면은 해당
장르 이걸로 이제 필터링을 해주는 거죠 데이터베이스에 셀렉트웨어 조건으로 코디해서 이렇게
결과를 보여주는 거구요
추가로 이제 릴리즈 데이트는 모델에서 데이트 필드입니다
성격이 조금 틀려져요
새로고침 해보면은
데이트 필드에 대해서는 자동으로 올해, 이번 달, 최근 7일, 오늘 데이트 필드에 대해서
출력되는 항목이 이렇게 되겠구요
이런 항목들도 스톰에서 원하시는 필드 항목으로 그 조건으로 이렇게 데이터베이스의 AND
조건으로 조회한 결과를 확인하실 수 있고 클리어 올 필터스 누르면 조회 조건이 해제되어서
전체를 보실 수 있습니다 좋아요
수 갱신을 한번 해보겠습니다
우리가 데이터베이스에다가 멜론에 있는 노래를 등록을 해놨죠
이 중에 정보 중에 좋아요
수가 있습니다 이 데이터 중에 아마 좋아요
수는 수시로 계속 바뀔 거단 말이죠.
특정 곡을 어드민 해서 선택을 한 다음에 클릭 클릭 해서 선택된 곡에 대해서 업데이트
라이크 카운트 라는 추가 액션을 등록합니다.
디폴트는 삭제 하나에요.
등록해서 실행을 누르면은 두 곡에 대해서
좋아요수를 업데이트하는 액션을 하나 만들어 보겠습니다
이걸 수행하기 위해서 각각의 곡마다 멜론에서의 아이디가 있거든요
그래서 그 아이디를 리스트로 받으면 멜론 사이트에서 getsonglike.json 이라는
PIE를 통해서 폴딩에서 아이디를 넘기면 좋아요
정보를 얻을 수 있습니다 그러면 이 펑션을 우리가 SongAdmin에서
updateLikeCount라는 펑션을 하나 정리했고 이 펑션은 Actions라는 이름의
리스트에다가 이름을 등록할 거예요
Actions에 등록이 된 함수는 인자 두 개를 받습니다
첫 번째 인자는 Action도 하나의 웹 요청이니까 그 웹 요청에 대한 리퀘스트 객체이고요
두번째 쿼리셋은 뭐냐면 선택된 레코드에 대한 쿼리셋입니다
그러면 제가 코디 셋에서 필요한 정보는 melon_uid라는 필드만 필요한데 멜론
UID라는 문자열로만 구성된 리스트를 만들고자 할 때 밸루스 언더바 리스트와 필드 1개와
플랫 2를 이렇게 주시고요
그 다음에 이 리스트를 GetLikeStick에다가 넘기면 좋아요
정보가 오죠 좋아요
정보를 가지고 해당 코디셋에서 각각의 곡에 대해서 LikeCount 값을 갱신해요
아직 DB에 업데이트 안 됐어요
여러 곡에 대해서 좋아요 갱신일 수 있잖아요
그러면 각각의 곡마다 Song.Save를 통해서 업데이트를 하기보다 모든 곡에 대해서 같은
필드를 업데이트 했기 때문에 Song.Object.BulkUpdate를 쓰시고 코디셋을
넘기고 업데이트할 필드명을 주면 업데이트 코디가 개별적으로 데이터베이스에서 수행되는 것이
아니다 업데이트 쿼리를 모아서 한 번에 수행하기 때문에 훨씬 효율적으로 동작합니다
그리고 self.message_user를 통해서 좋아요 갱신 완료라는 메시지를 남기면 여기
어드민 페이지 상단에 이 메시지가 보여주는 거예요
한번 해볼게요
슬라이드 하단에 멜론.py 코드를 미리 제가 준비해뒀습니다
핫트랙스 밑에, 유틸드 밑에 멜론.py라는 파일을 만들고요 이 코드를 여기다가 붙여넣겠습니다
붙여넣으시고 그 다음에 어드민에 가십니다
어드민에서 제가 액션을 하나 만들건데 액션의 이름은 updateLikeCount라는
메서드구요 액션에 등록할 것이기 때문에 인자를 2개 받는 거에요
해당 메서드를 어디에 등록하느냐에 따라서 받는 인자가 바뀌는 겁니다
액션스에다가 이 이름을 등록을 하면은 인자 2개를 받는 겁니다
2개를 받으면 여기에서 멜론UID로 구성된 리스트를 받으려고 합니다
멜론UID 리스트라고 했어요
그럼 이 리스트를 likes dig 함수를 호출해서 임포트하고 인자로 넘기면은 좋아요
정보를 우리가 받게 됩니다
그리고 for song in 코디셋을 쓰시면은 송을 하나씩 손해를 도실 수 있죠
여기에서 likeCount를 갱신하는데 likesDig에서 이제 송의 멜론 UID로
조회해가지고 likeCount 값을 업데이트 하고요 아직은 모델 인스턴스에서 속성값만
바뀌었을 뿐 딥인 업데이트 안된 거예요
여기에서 세이브를 하셔도 되는데 이렇게 하면은 코드셋의 개수만큼 업데이트 코디가
개별적으로 실행되기 때문에 이렇게 하기보다 이제 song.object.bulk 업데이트가
있어요 이걸 활용하시고 이 코디셋은 LikeCount를 통해서 값이 바뀌어 있는 거죠
업데이트할 필드는 일괄 업데이트할 필드는 LikeCount라고 필드명을 지정해 줍니다
그리고 나서 이제 self.messageUser에서 첫번째 인자로 리퀘스트 넘겨주고 두번째
인자로 좋아요 갱신 완료라고 써주는 거죠
페이지 새로 고치 마시고요
모델을 선택한 다음에 업데이트 라이크 카운트에서 고 하시면 좋아요
갱신 완료라고 나오는데 이 부분을 조금 개선해 보신다면 ChangedCount도 쓰고 만약에 송의
라이크 카운트와 라이크 값이 이렇게 만약에 다르다면 다드다면은 값을 지정하고 다음에
ChangedCount도 1 증가시켜요
이렇게 쓰고 ChangedCount에 곡의 좋아요 갱신할 곡을 지정해 줍니다.
이렇게 3개 넣고 UpdateLikeCount 쓰시고 좋아요가 한 26만 3만 5만 정도
되네요 이렇게 해서 꼭 해보시면은 3곡에 대해서 좋아요가 갱신이 완료가 되었다고 나오고요
이렇게 좋아요 수도 바뀌었음을 확인을 하실 수 있습니다



이번 내용은 장고 어드민을 활용하여 Song 모델 데이터를 관리하는 방법과, 어드민을 커스터마이징하는 여러 방법에 대한 설명입니다. 이를 통해 어드민 UI를 효율적으로 관리하고, 필요한 기능을 추가할 수 있습니다.

1. 장고 어드민 로그인 및 기본 설정
어드민 로그인: 장고 어드민 페이지에 로그인하려면 슈퍼유저나 스태프 유저 계정이 필요합니다. python manage.py createsuperuser 명령어로 슈퍼유저 계정을 생성하고, 해당 계정으로 로그인합니다.
기본 모델: 어드민에 기본으로 등록된 모델은 유저 모델과 그룹 모델뿐이며, 필요한 모델을 어드민에 등록해야 합니다.

2. 모델 등록 및 기본 사용
모델 등록: song 모델을 어드민에 등록하려면, admin.py 파일에 admin.site.register(Song)을 추가하여 모델을 등록합니다.
어드민 UI 제공: 모델을 등록한 후, 어드민 페이지에서 해당 모델에 대한 조회, 생성, 수정, 삭제가 가능한 UI가 자동으로 제공됩니다.

3. 어드민 UI 커스터마이징
ModelAdmin 커스터마이징:

ModelAdmin 클래스를 상속받은 SongAdmin 클래스를 생성하여, 모델의 어드민 UI를 커스터마이징할 수 있습니다.
예: list_display 옵션을 사용해 컬럼을 추가하여 보여주거나, 특정 필드만 보여주게 설정할 수 있습니다.
예시:

class SongAdmin(admin.ModelAdmin):
    list_display = ('name', 'artist_name', 'album_name', 'genre', 'like_count', 'release_date')
이미지 출력: cover_url과 같은 URL을 이미지로 변환하여 표시하려면, format_html을 사용하여 HTML을 안전하게 생성하고, 이미지를 표시하는 방법을 적용할 수 있습니다.


def cover_image(self, obj):
    return format_html('<img src="{}" width="100" />', obj.cover_url)
cover_image.short_description = 'Cover Image'


4. 어드민 검색 기능 추가
SearchFields 옵션을 사용하여 검색 기능을 추가할 수 있습니다. 특정 필드를 검색할 수 있도록 설정하면, 해당 필드에 대한 검색 박스가 나타나고, 검색어에 맞는 데이터를 필터링할 수 있습니다.
class SongAdmin(admin.ModelAdmin):
    search_fields = ['artist_name', 'album_name']
5. 어드민 필터링 기능
List Filters: 특정 필드에 대해 필터링할 수 있는 기능을 제공합니다. 예를 들어, genre 필드를 기준으로 데이터를 필터링할 수 있습니다.

class SongAdmin(admin.ModelAdmin):
    list_filter = ['genre']
Date Filters: release_date와 같은 날짜 필드에 대해서 기간별 필터링을 자동으로 제공합니다 (예: "오늘", "이번 달", "지난 7일").

6. 어드민 액션 추가
Custom Action: 선택된 여러 항목에 대해 특정 작업을 실행할 수 있습니다. 예를 들어, 선택한 Song 객체들의 **좋아요 수(like_count)**를 외부 API를 통해 갱신하는 액션을 추가할 수 있습니다.

액션 구현: SongAdmin에 updateLikeCount라는 액션을 추가하고, 이를 실행하면 선택된 곡들의 좋아요 수를 멜론 API에서 조회하여 업데이트할 수 있습니다.

Actions 리스트에 updateLikeCount 메서드를 등록:

class SongAdmin(admin.ModelAdmin):
    actions = ['updateLikeCount']
    
    def updateLikeCount(self, request, queryset):
        melon_uids = queryset.values_list('melon_uid', flat=True)
        likes = get_song_likes(melon_uids)  # 외부 API 호출
        for song in queryset:
            song.like_count = likes.get(song.melon_uid, 0)
        queryset.bulk_update(queryset, ['like_count'])
        self.message_user(request, f'{queryset.count()} songs updated.')
액션 결과 메시지: self.message_user를 사용하여 작업이 완료되었음을 알리는 메시지를 어드민 페이지 상단에 표시할 수 있습니다.

7. 효율적인 DB 업데이트
여러 곡에 대해 좋아요 수를 갱신하는 경우, bulk_update를 사용하여 한 번에 모든 업데이트를 수행하는 것이 성능 면에서 효율적입니다. 이는 개별적으로 업데이트하는 것보다 데이터베이스 성능에 유리합니다.
정리
장고 어드민 사용: 모델을 admin.py에 등록하면 자동으로 CRUD UI가 제공됩니다.
UI 커스터마이징: ModelAdmin 클래스를 활용하여 리스트 디스플레이, 검색, 필터링 등을 설정할 수 있습니다.
액션 추가: 선택된 항목에 대해 커스텀 작업을 실행할 수 있으며, 외부 API 호출 등을 통해 데이터 갱신 작업을 자동화할 수 있습니다.
효율적인 DB 작업: bulk_update를 사용하여 여러 개의 레코드를 효율적으로 업데이트할 수 있습니다.
장고 어드민은 빠르게 데이터 관리 UI를 제공하며, 커스터마이징을 통해 필요한 기능을 쉽게 추가할 수 있습니다.




