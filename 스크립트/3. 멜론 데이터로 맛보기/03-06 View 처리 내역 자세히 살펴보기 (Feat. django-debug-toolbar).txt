이번 시간에는 Django 디버그 툴바를 통해서 뷰 처리 내역을 자세히 살펴보겠습니다.
Django 디버그 툴바는 Django 개발에 있어서 필수 라이브러리입니다.
먼저 설치를 하려면 Django 디버그 툴바를 설치하는 것이고, 본 가이드는 디버그 툴바
4.2.0 기준으로 작성이 되었습니다.
라이벌리를 설치하고 나서 디버그 툴바에 대한 앱 등록, 미들웨어 등록, URL 패턴즈 등록
이 세 가지를 해줄 텐데, 이 세 가지 모두 디버그라는 옵션이 켜져 있을 때만, 즉 개발
서버에서만 활성화해 줄 거예요
왜냐하면 실서비스에서 하면은 Django 디버그 툴바가 디버그 정보를 모으기 때문에
실서버에서는 좀 부담일 수 있습니다 개발 서버에서만 디버깅 목적으로 사용하는 거고요
INSTALLED_APPS 리스트가 위에 있고 그 아래에서 디버그가 참일 때에만 인스톨드 리스트
끝에다가 DEBUG_TOOLBAR를 추가하는 거고요
디버그 툴바는 순서는 별로 상관없습니다
이 순서가 상관있는 장고 앱도 있는데 디버그 툴바는 상관없어요
그 다음에 middleware는 무엇이냐면 장고 뷰 함수가 호출되기 전에 모든
middleware가 호출되고 그리고 장고 뷰 함수가 값을 리턴하고 나서 모든
middleware가 역순으로 호출됩니다
그래서 뷰 함수를 감싸고 있는 function이 middleware인데요
Django 디버그 툴바를 통해서 다양한 정보를 수집하기 때문에 미들웨어 중에 Django
디버그 툴바가 가장 먼저 호출되도록 미들웨어의 처음에다가 django-debug-toolbar를
위치시키는 거고요 그러면 요청 처리 시에 미들웨어 중에 가장 먼저 호출이 되고요 응답을
처리 시에는 역순으로 호출되기 때문에 미들웨어의 처음에 있으면 응답 처리 시에는 가장 늦게
호출됩니다 이렇게 하시면 좀 더 많은 정보를 모아서 보여줄 수 있게 되는 거고요
마이 사이트의 urls에서는 Django 디버그 툴바를 위한 주소 지정이 필요하거든요
그래서 디버그 툴바의 urls에다가 임의의 이름으로 urlpatterns에다가 이렇게
추가를 해주는 거고 마지막으로 Internal IPS는 디버그로 왜 안 감싸냐면
Internal IPS라는 항목은 List인데요
Django 디버그 툴바는 여기 접속하면 현재 서비스의 모든 내역이 다 보여지기 때문에
개발 서버에서 뛰었다 할지라도 이 개발 서버에 접속하는 모든 사람들에게 Django 디버그
툴바를 보여주는 것은 너무 위험해요.
안에 환경 변수 값도 볼 수 있고 하기 때문에 위험합니다.
그래서 개발 서버에 접속한 모든 사람들에게 디버그 툴바를 보여주는 것이 아니라 이 IP에서
접속한 유저만 이제 디버그 툴바를 보여주겠다 입니다.
그래서 여기에 127.0.0.1을 지정하시면 장고 개발 서버를 띄운 그 컴퓨터에서만
접속했을 때 장고 디버그 툴바를 보여주고 그 네트워크에 다른 컴퓨터에서 접속한 사람들에게는
장고 디버그 툴바가 보여지지 않겠고요 만약에 다른 컴퓨터에서 접속한 그 IP에도 접속을
허용하신다면 여기 콤마 쓰시고 IP를 추가해 주시면 되겠습니다
Django 디버그 툴바를 설치하겠는데요 현재 mydjango03이라는 프로젝트에서 설치한
라이브러리는 Django 하나밖에 없습니다
파이썬 프로젝트에서 의존성 라이브러리를 관리하는 방법이 여러 가지가 있어요
가장 전통적인 방법은 뭐냐면 requirements.txt 파일을 사용하는 겁니다
제가 여기에다가 Django는 4.2.7 버전이죠
이렇게 이렇게 설치가 되어 있고요 이렇게 관리하실 수 있고 추가로 필요한 라이브러리는
장고, 디버그, 툴바입니다.
설치된 라이브러리는 이렇게 물결이 없지만 설치가 안된 라이브러리는 이렇게 물결이 있습니다.
마우스 커서 올려두셔도 툴팁이 나오죠.
django-debug-toolbar 4.2.0이 설치가 안 되었다 최신 버전은 4.2.0이다 라고 합니다
그래서 저는 슬라이드처럼 일단 최신 버전으로 설치를 해 보겠습니다
이렇게 지정하시고 나서 이제 설치할 때 Alt Enter를 입력하시면 이렇게 설치 메뉴가
나오고요 엔터 입력하시면 라이브러리를 설치를 하실 수 있게 됩니다 물결도 사라졌네요.
settings 파일을 여신 다음에 Installed Apps 밑에서 Debug 옵션,
Debug라는 것은 위에 상단에 있습니다.
위에 있어요. 이 값을 참조해서 쓰는 거고요.
혹시 아래에서 Debug 값을 만약에 이렇게 바꾸시면 이때는 이 영역이 영향을 받지 않죠.
파이썬 코드는 순서대로 실행되기 때문에.
그래서 이후에 디버그 값을 바꾸시더라도 이 시점에서 바꾸셔야지만이 아래에도 다 적용이
됩니다 그러면 installed apps에서 가장 뒤에 제가 추가를 할 것이기 때문에
코드를 썼어요
middleware에서는 가장 처음에 추가할 것이기 때문에 이렇게 추가하시면 가장 끝에
추가하는 거고요 끝이 아니라 저는 처음에 추가할 것이기 때문에 리스트 하나 만들고 더하기
middleware라고 쓰시면 처음에 추가가 됩니다.
제일 밑에다가, django-debug-toolbar라고 쓸게요.
internal-ips라는 항목으로 127.0.0.1을 허용하겠다.
이렇게 사용을 하겠습니다.
세트의 urls에서, settings-debug, 자, 우리 세팅스가 아닌 다른 파일에서
세팅스 값을 참조하실 때는 커서 올려 두시고 Alt, Enter 누르시면은 Import,
Disname 할 때 이 My Site의 세팅스를 하시면 안 돼요
이게 아니라 이렇게 하시면 안 되고 항상, 세팅스의 위치에 상관없이 항상 django.contrib의
세팅스를 하셔야 됩니다
장고의 기본 설정이 있고 그리고 우리 프로젝트의 설정을 합쳐야 되거든요
그 합쳐주는 역할을 장고 콤프의 세팅스가 해줍니다
세팅스 위치가 나중에 바뀔 수도 있는데 이 위치에 상관없이 settings 밖에서는 항상 세팅스는
장고 콤프의 세팅스를 참조하셔야 돼요
이렇게 쓰시고 나서 이제 url 패턴지에서 리스트 끝에다가 추가합니다.
그래서 path는 route는 이제 디버그, 이렇게 시작 주소 주고 view는
include에 디버그, toolbar에 urls를 include 하겠다 라고 주시고
저장하시는 거죠.
자 그러면은 우리가 어드민이 있는데 여기에서 새로고침
한번 하시면요
이렇게 웹페이지 안에서 디버그 툴바가 뜨고 하이드 누르면은 이렇게 버튼 나오고요
클릭하시면은 디버그 툴바가 출력이 됩니다
장고 디버그 툴바를 설정하시고 나면 현재 프로젝트의 모든 페이지에서 장고 디버그 툴바가
이렇게 보여지게 됩니다.
그런데 index.py를 열면 제가 만약에 내용을 다 치우고 Hello라고 했어요.
이렇게만 쓰시면요.
새로고침해 보시면 Hello만 나오고 디버그 툴바가 안 뜨죠.
안 뜹니다. 다시 원복을 시켜봤어요.
Ctrl-Z 눌러서.
누르고 다시 하면 나오죠.
페이지 소스 보기를 하면은 장고 디버그 툴바가 동작하기 위해서는 딴 게 있는 게
아니에요. 우리의 응답에다가 추가로 Django 디버그 툴바와 관련된 HTML, CSS,
JavaScript 코드를 추가해서 응답을 준 겁니다.
이건 누가 했냐면 미들웨어가 해준 거죠.
미들웨어가 처리를 해준 거예요.
우리 응답에다가 디버그 툴바의 HTML을 주입을 한 거잖아요.
주입을 하려면 주입하려는 타겟이 있어야 되거든요.
근데 그 타겟이 어디냐면, 다시 지우고 hello라고 쓴다면, 그 타겟은 장고
디버그 툴바의 기본 세팅으로는 body 끝나는 태그입니다.
지금 여기에서 다시 제가 새로 고침을 해보면, body hello에 나머지 태그가 추가되어
있고, 웹페이지도 이렇게 보여집니다.
그래서 여러분들이 장고 디버그 툴바를 적용하시고 나서 어떤 뷰 만들고 기본 템플릿을
만들 때 바디 태그 안 쓰고 그냥 마크업을 하는 경우 있잖아요
이런 경우는 장고 디버그 툴바가 됩니다
항상 Visual Studio Code나 PyCharm Professional도 느낌표하고 탭하시면 기본 HTML 만들어지거든요
이렇게 기본 HTML 구성해서 메타 필요 없으면 나머지는 지우셔도 되는데 꼭 HTML5를
선언하는 DOC 타입 꼭 넣어주시고요.
HTML의 랭에서 현재의 언어, KOML 언어를 알려주시고, 헤드, 메타, 타이틀,
바디까지 딱 이 최소한의 HTML 코드를 맞춰주신 상황에서 이제 템플릿 개발을 들어가셔야
돼요 맵 표준에 맞고 그리고 이런 Django 디버그 툴바도 안정적으로 서비스 제공을
받으실 수 있습니다
Django 디버그 툴바가 보여지는 템플릿 조건은 Django 디버그 툴바는 body
태그가 끝나는 태그 전에 HTML, CSS, JS 코드를 주입을 합니다
그래서 body 끝나는 태그가 없으면 이렇게 Django 디버그 툴바가 없는 거고요
body 끝나는 태그가 있으면 이렇게 해당 이 사이에 body 태그 끝나는 태그 직전에
이렇게 Django 디버그 툴바가 삽입이 되는 겁니다 Django 디버그 툴바에서 지원해주는 여러
기능들이 이렇게 패널의 형태로 제공이 되고 있습니다
이 패널 중에 SQL 패널이 저는 가장 중요하다고 보는데요
SQL 패널을 클릭해 보시면 현재 페이지가 보여지는 동안에 수행된 SQL 내역을 이렇게
모아서 보여줄 수 있겠고요 어떤 쿼리가 수행이 되었고 이 쿼리가 수행된 시간과 시간과
그리고 해당 쿼리에 대해서 수행된 SQL 내역 및 해당 조회 내역 그리고 그 쿼리에 대해서
이 버튼 클릭하시면 실행 계획까지 보실 수 있어요
데이터베이스 관련해서 좀 더 최적화를 하고자 하실 때 꼭 참고하시면 큰 도움을 받는 그런
고마운 기능입니다
좋아요 갱신 액션을 쿼리를 한번 확인을 해보려 합니다 특정 노드에 클릭해서
좋아요수 갱신을 했을 때 업데이트 코드가 어떻게 실행이 되었는지 한번 확인을 해보고 싶어요
한번 해보겠습니다
인덱스 페이지는 원복을 하겠고요 송어드민을 엽니다
열고 나서 제가 어떤 노드를 클릭하고 업데이트를 해봐요
업데이트 했잖아요.
이 시점에 SQL 패널을 여는 겁니다.
여셨을 때 현재 페이지가 보여질 때에 사용된 콜인데 보시면 다 SELECT밖에 없어요.
SELECT SELECT SELECT. 왜 SELECT밖에 없지라고 해서 여기 개발 서버
로그를 보시면 액션이 수행될 때는 POST 요청으로 날아가거든요.
그런데 수행되고 나서 302라는 것은 처리하고 나서 페이지 이동 응답을 한 겁니다.
그러면 이 주소로 다시 이동하고 나서 이 요청에 대한 SQL 내용이 보여지는 거죠
이 요청이 아니라 조회 요청에 대한 SQL 내용이 보여진 거예요
그래서 업데이트 쿼리가 보여지지 않는 겁니다
그래서 Django 디버그 툴바에서는 아래에 보시면 Intercept redirect라는
옵션을 제공해 주고 있습니다
페이지 이동을 끊어서 갈 수 있습니다
302 페이지 이동 응답을 받았을 때 즉시 이동을 시키지 않고요 끊어서 포스트 응답을 받은
상황에서 딱 머물러 있고요 그 상황에서 SQL 패널을 열면 이렇게 업데이트 쿼리를 확인할
수 있고 Location 링크를 클릭하면 그래서야 페이지 이동이 되는 거예요
우리도 한번 확인해 보자면 아래에 Intercept Redirect가 있죠
이 옵션을 켭니다
켜고 나서 다시 노래를 이렇게 선택하고, 업데이트, 라이크, 카운트 하고, 한 곡 더
해볼게요. 하고, 고!
하면 딱 머물러 있죠?
머물러 있는 상황에서 SQL 패널을 여시면 이렇게 업데이트 쿼리가 수행됨을 아실 수 있고,
업데이트 쿼리가 하나의 쿼리로 이렇게 전달되고 있습니다.
벌크 업데이트를 수행하면 이런 식으로 쿼리가 전달되는구나 라고 확인을 할 수 있는 거죠
그래서 업데이트 쿼리에서 like, count 값만 이렇게 업데이트가 되고 있어요
업데이트 쿼리를 한번 비교를 해보려고 합니다
우리가 액션을 수행할 때에 벌크 업데이트를 썼는데 이걸 안 쓰고요 쿼리셋을 순에 둘 때에
like count를 업데이트하고 매번 .save를 호출하는 거예요
한번 해볼게요
어드밍 코드에서 벌크 업데이트 부분을 이렇게 지우고 song.save라고만 이렇게 호출을
해 줄게요. 됐죠?
이렇게 하시고 페이지 이동한 다음에 Intercept Redirect 옵션 체크 돼
있죠? 다시 몇 곡을 선택한 다음에 업데이트를 해 주겠습니다.
그리고 SQL 패널을 보시면 수행된 SQL 내역을 보면 업데이트에서 Set 해 보면 멜론
UID, 랭크, 앨범 네임, 네임, 아티스트 네임, 커버 URL 해서 하나의 업데이트
코드에서 모든 필드에 대해서 업데이트가 이루어지고 있죠.
Django 모델에서의 .save를 노출하면 모델의 모든 필드에 대해서 업데이트를
수행합니다. 이런 특성을 이렇게 Django 디버그 툴바를 통해서 확인하실 수 있는 거고
특정 필드만 내가 업데이트 하겠다고 하신다면 여기에 updateFields라는 속성으로
likeCount 이렇게만 지정하시면 해당 필드로만 업데이트 코리가 수행이 되는 거야 다시
페이지 이동한 다음에 몇 곡을 선택을 하고 그리고 업데이트해서 확인을 해보시면 이번에는
코디가 좀 더 심플해졌죠
만약에 어떤 포스팅의 내용 같은 것들이 큰 대상에 대해서 컨텐츠 내용이 바뀌지 않았음에도
.save 호출을 통해서 매번 컨텐츠 내용을 업데이트를 하게 되면 데이터베이스와의 불필요한
트래픽이 발생하는 거죠.
상황에 따라 이렇게 업데이트 필드를 지정하시거나 혹은 벌크 업데이트를 활용하셔서 갱신을
원하는 필드만 적절히 호출하는 것이 필요할 수 있습니다.