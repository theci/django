같은 호스트, 서로 다른 포트에서 장고 서버와 웹 프론트엔드 서버를 운영하는 상황을
실습해 보겠습니다.
주로 한 대의 물리 컴퓨터에서 여러 서버 프로세스를 띄우는 개발 환경이 이에 해당합니다.
웹브라우저에서는 장고 서버와 웹 프론트엔드 서버에 직접적으로 접속합니다.
http://localhost:3000 주소의 웹 프론트엔드 서버에서
http://localhost8000 주소의 블로그의 WhoAmI 페이지로 요청을 보내면,
지정 페이지로 요청은 전달되어 401 응답은 받지만, 출처가 달라 CORS 정책이 위반되어
웹블라우저가 예외를 발생시켜 패치 요청을 중단시킵니다.
장고 웹페이지에서 장고 디버그 툴바를 통해 쿠키 현황을 보시면 쿠키의 Session ID가
있습니다.
브라우저의 개발자 도구의 콘솔 탭에서 document.cookie로 자바스크립트로
쿠키 내역을 조회해 보시면 QRS 토큰 쿠키는 조회되지만, Session ID 쿠키는
조회되지 않습니다.
Django에서 로그인 처리 시에 Session ID 쿠키는 HTTP Only 쿠키로
처리하기 때문에, JavaScript로 Session ID 쿠키 조회 및 탈취가
불가능합니다. 웹 프론트엔드 페이지인 http://localhost3000 주소에서 개발자
독을 통해 쿠키 내역을 확인해 보시면 장고 웹 페이지에서 확인했던 세션 아이디가
조회됩니다. 쿠키는 호스트만 구별할 뿐, 서로 다른 포트에서는 공유됨을 확인하실 수
있습니다.
http://localhost8000 주소인 장고에서 서빙되는 웹 페이지에서 장고 디버그
툴바의 request 패널을 통해 session id 쿠키 값을 확인하실 수 있습니다.
http://localhost3000 주소인 Python 정적 서버로 서빙되는 웹 페이지에서
브라우저 개발자 도구의 탭에서 쿠키 항목을 보시면 이렇게 Django의 Session ID
값이 동일하게 제공되고 있음을 확인하실 수 있습니다
쿠키는 도메인이 같으면 포트가 달라도 공유됩니다
브라우저 개발자 도구 탭에서 document.cookie 코드로 모든 쿠키 내역을 조회할
수 있는데요 Session ID 쿠키는 Django에서 쿠키 생성 시에 HTTP Only
옵션을 붙여 생성하기에 자바스크립트로는 조회가 되지 않음을 확인하실 수 있습니다
http 요청을 받는 장고 서버에서 CORS 설정을 통해 http://localhost:3000
3000 주소에 대해 http 요청도 허용해 줘야 하고요.
쿠키 전송도 허용해 주면 통신이 가능할 것입니다.
Django CORS Headers 라이브러리를 설치합니다.
Settings에 CORS Allowed Origins 설정으로 HTTP 요청을 허용할
주소를 지정하고요.
그러면 모든 뷰 응답에 Access Control Allow Origin 헤더로 지정
주소가 설정되어 브라우저에게 변경된 CORS 정책을 알려주게 됩니다.
CORS Allow Credentials 설정을 참으로 지정하여 다른 출처로부터의 요청에
쿠키 자동 전송을 활성화합니다.
그러면 모든 뷰 응답의 Access Control Allow Credentials 헤더로
소문자, True 문자열이 지정되어 웹브라우저에게 변경된 CORS 정책을 알리게 됩니다.
장고 CORS 헤더스 공식 저장소 페이지입니다.
Django CORS Headers 라이브러리를 최신 버전으로 설치합니다.
실습 당시에는 최신 버전이 4.3.1이었습니다.
Settings의 인스톨드 앱 리스트에 CORS 헤더스 앱 이름을 추가하고요.
미들웨어 리스트 처음에 CORS 미들웨어를 추가합니다.
공식 문서를 보시면 CORS 미들웨어를 다른 미들웨어보다 상단에 위치시켜 달라고 합니다.
응답을 생성하는 미들웨어보다 먼저 먼저 위치하여 응답 생성 후에 응답 헤더를 추가하기
위함입니다.
세팅스의 CORS Allowed Origins 설정이 리스트 타입으로 필요하고요.
HTTP 요청을 허용할 다른 출처의 주소들을 지정합니다.
프로토콜과 도메인 그리고 포트 번호까지 기입합니다.
HTTP 요청을 보내는 http://localhost:3000 그럼 Django 뷰 응답에
CORS Middleware를 통해 응답 헤더에 Access Control Allow
Origin 헤더가 추가됩니다
그리고 CORS Allow Credentials 설정을 불리언 타입으로 지정합니다
그럼 응답 헤더에 Access Control Allow Credentials 헤더가
추가됩니다. 이 설정은 참으로 지정해 주세요.
웹 프론트엔드 서버의 페이지에서 새로 고침하면 응답 헤더에 CORS 관련 응답 헤더들이
보이고요. 이제 장고 페이지로의 HTTP 요청이 허용됩니다.
그리고 쿠키도 있습니다.
그런데 패치 요청 시에 쿠키가 자동 포함되어 전송되지 않아서 세션 인증에 실패하고 401
응답을 받습니다.
http://localhost:3000/csrapi-call.html 페이지를 새로고침해
보시면 CORS 오류가 사라졌습니다.
자바스크립트 패티 API 호출에서 예외 발생 없이 정상적으로 응답을 받고 있습니다.
그런데 401 응답을 받았네요.
세션 인증이 처리되지 않은 상황입니다.
브라우저 개발자 도구의 탭에서 응답 헤더를 보시면 CORS 설정한 대로 CORS 관련된
응답 헤더들을 정상적으로 받았습니다.
그래서 이제 HTTP 요청이 가능한 것이고요.
그런데 요청 헤더를 보시면 쿠키 헤더가 없죠?
요청 시에 Session ID 쿠키가 없으니 Session 인증이 처리되지 않은
상황입니다.
토르다든 출처로의 패치 요청에서 쿠키를 자동 포함시키려면 Credentials,
Include 설정을 추가해 주셔야만 합니다.
이 설정 하나만 넣어주시면 됩니다.
자바스크립트 측에서 그 외에 하실 작업은 없습니다.
페이지를 새로 고침해 보시면 요청 헤더에 쿠키가 자동으로 포함되어 전송되고요.
Session ID 값도 전송됨을 확인하실 수 있고요.
Django 서버에서도 Session 인증이 처리되어 200 응답을 받았음을 확인하실 수
있습니다. 현재 요청 헤더에 쿠키 헤더가 없는 상황이고요.
HTML 폴더에 csrapi-call.html 파일에서 패치 API 호출 시에
Credentials Include 설정을 추가합니다.
그럼 요청 시에 쿠키를 포함해서 요청을 수행합니다.
페이지 새로고침에 보시면 이제 Session 인증이 수행되어 200 응답을 받았네요.
요청 헤더를 보시면 이렇게 쿠키 헤더에 Session ID 값이 있음을 확인하실 수
있습니다.