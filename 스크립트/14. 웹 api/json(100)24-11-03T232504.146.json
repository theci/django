이번에는 같은 루트 도메인으로 서비스해 보겠습니다 도메인 구입 및 설정은 비용도 들고
복잡한 과정이니깐요
빠른 테스트 목적으로 로컬 개발 머신의 호스트 파일을 변경해서 로컬 주소에 도메인을 부여해
보겠습니다 윈도우에서는 cwindows-system32-drivers.etc의 호스트
경로에 호스트 파일이 있구요.
맥과 니눅스에서는 root의 etc의 호스트 경로에 호스트 파일이 있습니다.
파일 포맷은 같구요.
117.0.0.1 IP에 대해 api.mydj.com 도메인과 mydj.com 도메인을
추가하겠습니다.
그럼 이 컴퓨터에서만 방금 추가한 도메인이 지원되며 127.0.0.1 IP를 가리키게
됩니다 호스트 파일의 설정은 해당 컴퓨터에서만 적용되므로 다른 컴퓨터나 인터넷 상에서는
적용되지 않습니다
실제 도메인을 사용하시려면 도메인을 구입하시고 DNS 서버에 해당 도메인을 등록하고 IP
주소를 할당하셔야 합니다
윈도우에서 메모장을 관리자 권한으로 실행합니다 열기 메뉴로 C에 Windows에
System32에 Drivers에 etc 폴더를 열어 주시고요.
파일 타입을 모든 파일로 지정하시면 확장자가 없는 호스트 파일이 있습니다.
이 파일을 열어 주세요.
파일 하단에 127.0.0.1 IP에 대해서 mydj.com 도메인과
api.mydj.com 도메인을 추가합니다.
파일을 저장하시고 메모장을 닫아주세요.
mydj.com 주소와 apimydj.com 주소로 픽 명령을 수행해 보시면
127.0.0.1 IP로 조회되시면 설정 성공입니다.
맥이나 리눅스에서는 nano 명령을 루트 권한으로 실행합니다.
루트에 etc의 호스트 파일을 여시고요.
파일 하단에 127.0.0.1 IP에 대해서 mydj.com 도메인과
api.mydj.com 도메인을 추가합니다.
파일을 저장하시고 닫아주세요.
루트 도메인은 같지만 서브 도메인이 달라 다른 출처이기에 CORS 설정이 필요합니다.
장고 서버는 api.mydj.com 도메인을 사용할 것이기에 세팅스의 AllowedHost
설정에 포트 번호를 제외한 api.mydj.com 도메인을 추가해 주시고요.
CORS Allowed Origins 설정에는 프로토콜과 포트 번호까지 기입하셔야 합니다
웹 프론트엔드 서버의 주소를 지정하고요 다른 출처로부터의 요청에 쿠키 자동 전송을 허용해
주겠고요 가장 중요한 Session Cookie Domain 설정인데요 마침표로 시작해서
루트 도메인 주소를 기입합니다
그러면 Session Cookie 생성 시에 도메인 속성으로 지정되어 브라우저에서 서브
도메인 간의 쿠키를 공유해 줍니다
그럼 CORS 설정으로 인해 HTTP 요청도 가능해지고 쿠키 자동 전송도 허용되었고요.
패치 요청에서 Credentials Include 설정만 해주시면 쿠키가 자동 전송되어
이렇게 세션 인증이 정상 처리됩니다.
엔진엑스 도커 컨테이너는 사용하지 않으니 을 눌러 중단시키겠고요.
장고 서버는 8000번 포트에서, 파이썬 정적 웹서버는 3000번 포트에서 구동 중입니다.
장고에서 사용할 api.mydj.com 도메인을 사용하겠습니다.
http://api.mydj.com 8000 페이지를 열어주세요.
Settings에 Alert Host 설정에 api.mydj.com 도메인을 추가하시고요.
환경 변수로부터 주입 받도록 설정되어 있으니
.env 파일에 추가합니다.
Django 개발 서버 재시작하시고 페이지 새로 고침하시면 페이지는 뜨는데, HTTP
요청이 실패했다고 합니다.
http://api.mydj.com 8000에 블로그에 Who am I 페이지가 정상
동작하고 있고요.
블로그에 index.html 템플릿 코드를 보시면, HTTP 로컬 호스트에 8000 주소로
요청을 보내고 있었네요.
다른 호스트로 요청을 보내니 다른 출처이고, CORS 설정이 필요한 상황이었습니다.
요청 주소에서 프로토콜과 호스트를 제거하시어 현재 페이지 주소로 요청을 보내도록 하시면
정상 처리됩니다.
이제 http://mydj.com 3000에 csrapicall.html 페이지를
열어주세요. 사공사 응답을 받았습니다.
csrapicall.html 파일을 열어보시면 프로토콜과 호스트가 생략되어 있죠.
그러면 http://mydj.com 3000에 블로그의 후에마이 주소로 요청을 보내고
있는 상황입니다.
장고 서버로 보내야 할 요청을 파이썬 정적 웹서버로 요청을 보내고 있는 상황이죠.
그래서 사공사 응답이 발생했습니다.
장고 주소를 지정해 주시고 새로고침하시면 CORS 오류가 발생했습니다.
이제 CORS 설정을 해주시면 됩니다.
세팅스에서 CORS 관련 설정들을 모두 살립니다.
CORS Allow the Origins 설정에는 http://mydj.com 3000
주소를 지정하시고요.
CORS Allow Credentials 설정도 참으로 살립니다.
그리고 같은 루트 도메인에서 세션을 공유하실 때에는 세션 쿠키 도메인 설정으로 마침표도
시작하는 루트 도메인 주소를 지정해 주세요.
그리고 다시 로그인을 하시면 해당 루트 도메인 주소의 하이 도메인에 대해서 세션 아이디
쿠키가 공유됩니다.
페이지 새로고침하시면 이제 HTTP 요청이 허용되어 CORS 오류가 사라졌고요.
패치 요청 시에 Credentials Include 설정을 추가해 주시면 요청 시에 쿠키도
자동 추가되어 세션 인증이 자동으로 처리됩니다.