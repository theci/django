Django Next.js 라이브러리를 활용하여 Django 서버를 경유해서
Next.js 서버로 요청을 보내 보겠습니다.
웹 클라이언트에게는 Django 서버만 노출되기에 Next.js에서 CSR 방식의 API
호출에서도 http://localhost:8000에 단일 출처가 되어 CORS 설정과
Credentials include 지정 없이도 자동으로 Session ID 쿠키가
전송되어 Session 인증을 활용하실 수 있습니다.
그리고 Django 템플릿으로 Next.js 레이아웃을 적용하는 등 응답 HTML을
변경하실 수도 있습니다.
Django Next.js 라이브러리를 설치하겠습니다.
Django Next.js 라이브러리는 ASGI 방식의 구동이 필요합니다.
ASGI는 비동기 파이썬 웹 프레임워크를 위한 표준 인터페이스입니다.
Django에서 ASGI 활성화를 위해 Channels 라이브러리와 Daphne 라이벌리를
설치합니다.
Daphne 라이브러리는 반드시 Installed Apps List에 처음에 위치시켜 주셔야
합니다. 왜냐하면 Daphne 라이벌리에서 Django 기본의 Run Server 명령을
재정의했기에 Django 기본의 Run Server 명령이 아니라 Daphne 앱의 Run
Server 명령이 우선순위를 가져 구동되게 하기 위함입니다.
Daphne의 Run Server 명령에서 ASGI 구동을 지원합니다.
인스톨드 앱 리스트에 Django Next.js 앱도 추가해 주시고요.
Django Next.js 라이브러리를 위한 추가 설정은 Next.js_설정
사전을 통해서 합니다.
Next.js_서버_URL 키로 Next.js 서버의 주소를 지정하실 수
있고요. 디폴트로 http://127.0.0.1:3000으로 지정되어 있습니다.
런 서버 명령을 수행해 보시면 이렇게 ASGI 다푸네가 출력되셔야 합니다.
최신버전의 django-nextjs 라이브러리를 설치하고 common.txt 파일에도
의존성을 명시합니다.
dapune 앱의 run 서버 명령이 구동될 수 있도록 installed apps list
처음에 dapune 앱을 추가하고요.
그 아래에 django-nextjs 앱도 추가합니다.
WSGI 애플리케이션 설정을 복사해서 ASGI 애플리케이션 설정도 추가합니다.
이 설정으로 ASGI 모드로 구동 시에 장고 애플리케이션의 진입점을 지정합니다.
이 설정을 복사하시고 나서 중간 경로에 반드시 WSGI가 아니라 ASGI로 변경해 주세요.
Django Next.js 커섬 설정은 Next.js 세팅스 사전에 합니다.
런 서버 로그를 보시면 다푸네 앱을 추가하면서 ASGI 모드로 장고 앱을 구동하려는데
ASGI 애플리케이션 설정이 잠시 없었던 타이밍이 있었습니다.
그때 장고 서버가 잠시 죽었었어요.
다시 런 서버 개발 서버를 실행해 주시면 이제 ASGI 모드로 다푸네를 통해 개발 서버가
구동됩니다. 실 서비스에서는 지유니콘과 유니콘 조합으로 ASGI 서버를 구동시킵니다.
Next.js에서는 빌드 파일 경로, 내부 API 엔드포인트 경로, 로고 이미지 경로,
그리고 개발 시에 자동 새로고침을 위한 웹소켓 요청에 대한 기본 URL들이 미리 정의되어
있습니다. 이 URL들에 대한 요청은 장고를 거치지 않고, ASGI 레벨에서 즉시
전달하도록 마이사이트에 asgi.py 소스 파일을 수정하겠습니다.
장고 Next.js, 장고 앱이 설치된 상황에서만 Next.js에 대한
라우팅 규칙을 추가합니다.
루트뷰를 추가하여 요청 시에 Next.js 서버에 같은 경로로 요청을 전달하고 그 응답을
받아 응답하도록 합니다.
Next.js 응답을 Django 뷰 함수에서 반환했잖아요
그러니 Django 미들웨어를 거쳐 응답하게 되고요 http://localhost:8000
주소로 접속해 보시면 이렇게 Next.js 페이지에 Django 디버그 툴바가 적용된
화면을 확인하실 수 있습니다
런 서버 로그를 보시면 이렇게 Next.js로 페이지 요청 외에 스태틱 리소스와 로그
이미지 그리고 웹소켓 요청이 전달되어 잘 처리되고 있음을 확인하실 수 있습니다
mysite의 asgi.py 경로의 파일을 열어보시면 이렇게 Django의 ASGI
애플리케이션을 그대로 애플리케이션 객체에 반영하여 서버가 구동되어 있습니다.
asgi.py 파일을 복사하겠고요.
ASGI 서버가 있고 그 위에 Django ASGI 애플리케이션이 구동됩니다.
Django Next.js 앱이 설치된 상황에서만 ASGI 서버 레벨에서 Next.js로
전달해야 할 요청들을 즉시 전달하도록 라우팅을 구성합니다.
HTTP 요청에 대해서도 Next.js 관련 URL에 대한 라우팅과 Django 서버의
라우팅, 이 규칙 두 가지를 두고요.
웹소켓 요청에 대해서는 Next.js URL로의 라우팅 딱 하나만 있습니다.
이는 개발 서버에서만 HMR, 즉 Hot Module Replacement를 위함인데요.
개발 서버에서만 Next.js 코드를 수정하면 웹소켓을 통해 변경이 전파되고 웹페이지
새로고침 없이도 웹블라우저 화면에 변경된 내역이 반영됩니다.
마이 사이트의 url 스파이 파일에 루트 뷰 함수를 추가하겠습니다
루트 뷰가 호출되면 렌더 Next.js 페이지 함수를 통해 Next.js 서버로 요청을
전달하고 그 응답 html을 뷰 응답으로 반환합니다
최상위 주소로 url 패턴으로 등록합니다 장고 서버가 받은 url 경로와 같은 경로로
Next.js 서버에 요청을 보냄을 기억해 주세요
Next.js 프로젝트에서 Next.config.mjs 파일을 수정해서 트레일링 슬래시
설정으로 참 설정을 추가합니다.
Django에서도 append 슬래시 설정이 default 참으로 요청 URL 끝에
슬래시를 붙이거든요.
Next.js에서도 동일하게 요청 URL 끝에 슬래시를 추가하도록 설정합니다.
Loclost 3000 페이지를 열어보시면 Next.js 서버로 직접 접속하여 그 응답을
보여주고 있고요
Loclost 8000 페이지를 접속해 보시면 Django 서버가 Loclost 3000
페이지에 접속하여 받은 응답에 Django 디버그 툴바를 추가하여 내려준 응답을 확인하실
수 있습니다
http://localhost:8000의 블로그 주소로 접속하시면 서버 사이드 렌더링 방식의
API 요청과 CSR 방식의 API 요청을 모두 수행하여 Next.js에서의 세션 인증을
활용한 API 요청 코드를 정리해 보겠습니다.
Django 서버에서는 CORS 관련 설정은 전혀 필요 없고요.
Django 기본의 세션 인증만 활성화된 상태입니다.
Next.js 프로젝트에서 http://localhost:3000의 블로그 요청을 지원하고
있습니다 같은 경로의 요청을 처리하는 뷰 함수를 블로그 앱에 구현하겠습니다
블로그의 urls.py 파일을 보시면 템플릿 뷰로 //blog// 요청을 처리하는 뷰가
구현되어 있네요 이 뷰는 제거하고 따로 인덱스 뷰 함수를 만들어 맵핑해 주겠습니다
인덱스 뷰 함수가 호출되면 블로그에 index.html 템플릿을 활용해서 응답을
생성했었죠.
http://localhost8000에 블로그 주소로 접속해 보시면 이렇게 블로그에
index.html 템플릿을 통한 응답이 확인됩니다.
인덱스 뷰 함수를 async 함수로 변경하고요.
Next.js 서버로 요청을 보내어 그 응답으로 뷰 응답을 하도록 합니다.
페이지 새로고침해 보시면 이렇게 Next.js에 블로그 경로의 응답이 반환됨을 확인하실 수
있습니다. Next.js 프로젝트에서 Whoami 컴포넌트 코드를 복사해서 적용하겠습니다.
CSR 방식의 API 호출과 SSR 방식의 API 호출이 모두 적용된 코드입니다
SSR 방식의 API 호출에서는 받은 요청의 헤더에서 쿠키 헤더를 뽑아서 API 호출 시에
쿠키로 활용합니다
CSR 방식의 API 호출에서는 CORS 설정도 없고요.
패치 API에서 config 설정도 없이 protocol host 포트 번호를 제거하고
호출합니다.
Django를 경유해서 Next.js 서버로 요청이 전달되기에 외부에는 Django 서버만
노출되고 단일 출처가 되기 때문입니다.
http://localhost:8000의 블로그 주소에서 새로고침해 보시면 이제 이렇게 두
개의 메시지가 보여짐을 확인하실 수 있습니다.
CSR 방식에서는 화면이 보여지고 나서 웹블라우저에서 API 호출 후에 메시지가 적용되기에
딜레이가 조금 있죠
하지만 SSR 방식에서는 Next.js 응답에서 이미 메시지를 확보한 상황이기 때문에
화면이 처음 보여질 때부터 메시지가 있습니다
django-nextjs 라이브러리에서는 Next.js 응답 HTML을 파싱하여 응답
HTML을 커스터마이징하는 기능을 제공해 줍니다.
Next.js에서는 두 가지 방식의 라우터를 지원하는데요.
응답 HTML 커스터마이징은 지금 우리가 사용하고 있는 pages 라우터만을 지원하고요.
최근에 Next.js에 추가된 앱 라우터는 지원하지 않습니다.
페이지스 라우터에서는 페이지스 밑에 _document.jsx 파일을 통해
레이아웃을 재정의할 수 있고요.
Django Next.js에서 요구하는 대로 body 태그 등의 아이디 속성을 추가해
줍니다. 그럼 Django Next.js 라이브러리에서 이 아이디들을 찾아서 응답 HTML
문자열을 파싱하여 커스터마이징 할 것입니다.
Django 템플릿에서는 Django Next.js에서 지원하는 부모 템플릿을
상속받습니다.
헤드와 바디블락을 지원하고요.
각 블록을 재정의하여 원하시는 대로 레이아웃을 변경하실 수 있습니다.
Bootstrap5 CSS를 추가해 봤고요.
장고 언더바 컨텐츠 블록을 추가로 정의하여 Next.js 응답에 이어서 장고 템플릿을 통해
HTML 컨텐츠를 추가할 수 있도록 했습니다.
장고 뷰에서는 renderNext.js 페이지 함수 호출 시에 템플릿 네임 속성으로 사용할
템플릿 경로를 지정하시고, context 속성으로 장고 템플릿 렌더링 시에 참조할 값들을
지정해 주시면 됩니다.
이 context 값은 Next.js 서버로 전달되는 것은 아니고요.
장고 템플릿 내에서만 사용됩니다.
그럼 이렇게 Next.js HTML 응답을 Django 딴에서 커스터마이징한 화면을
확인하실 수 있습니다.
이 기능을 활용하여 장고에서는 내비게이션 바 등의 페이지 레이아웃을 잡고,
Next.js에서는 컨텐츠 응답만 받아보기에 좋습니다.
Next.js 공식 문서를 보시면 이렇게 페이지스 라우터를 사용할 때 레이아웃을 재정의하는
방법을 안내하고 있습니다.
이 코드를 복사해서 페이지스에 underbar-document.jsx 경로에
복사하겠습니다.
JSX 확장자는 TypeScript를 사용할 때 확장자이고요 우리는
JavaScript를 사용하니까 JSX 확장자를 사용합니다
장고 Next.js 공식 문서에서는 응답 HTML 커스터마이징을 위해서는
Next.js 도큐멘트 파일에 이렇게 아이디를 추가해 달라고 합니다
코드를 복사해서 적용합니다.
http://localhost:8000의 블로그 페이지를 새로 고침하시고 브라우저 개발자
도구의 요소 탭에서 현재 DOM 요소를 확인해 보시면 변경한 대로 이렇게 ID 값을
확인하실 수 있습니다.
Next.js 서버에서 약속한 대로 HTML 응답을 주고 있으니 Django-Next.js
딴에서 Next.js 응답을 후 처리하여 HTML 응답을 커스터마이징 할 수 있습니다.
코어의 템플릿에 Next.js 언더바 베이스 점 HTML 경로에 Next.js 응답
커스터마이징을 위한 최상위 부모 템플릿을 생성하겠고요.
Bootstrap 5 CSS 스타일을 추가해 주고 기본 레이아웃을 구성해 주겠습니다.
그리고 Django 컨텐트 블록을 추가하여 Next.js 응답 외에도 Django 쪽에서
내용을 더 추가할 수 있도록 하겠습니다.
블로그의 index.html 템플릿에서 방금 정의한 부모 템플릿을 상속받고, 장고 콘텐츠
블록을 재정의하여 HTML로 간단한 alert 메시지를 추가합니다.
renderNext.js 페이지 함수 호출 시에 템플릿 네임 인자로 블로그의
index.html 템플릿을 지정하고, 템플릿에서 필요한 컨텍스트 데이터는 context
인자로 지정합니다.
페이지 새로고침하시면 이렇게 Next.js 응답에 Bootstrap 5 CSS를 추가하고
레이아웃을 적용하고 장고단에서 추가한 HTML 컨텐츠도 추가된 화면을 확인하실 수
있습니다.