회원가입 뷰는 CreateView 기반의 클래스 기반 뷰이고요.
완료 후에 이동할 주소는 부모가 되는 모델 폼 믹싱 클래스의 GetSuccessURL 메서드를 활용합니다.
이 메서드는 SuccessURL 속성이나 생성된 레코드의 GetAbsoluteURL 메서드만을 활용할 뿐이고요.
Next 이름의 PostData나 GetData를 활용하지 않습니다.
반면 로그인 뷰와 로그아웃 뷰는 Redirect URL Mixing 클래스를 상속받고 있죠. 
Redirect URL Mixing 클래스에서는 Next 이름의 PostData나 GetData를 완료 후에 이동할 주소로 활용합니다.
회원가입 뷰에서도 Redirect URL Mixing 클래스를 상속받으면요.
이 클래스를 상속받는 것만으로 Next 이름의 PostData나 GetData를 완료 후에 이동할 주소로 활용하게 됩니다.
레이아웃 템플릿에서 next 인자를 지원하는 링크에 next 인자를 현재 페이지 주소로 지정합니다.
회원가입 후에, 로그인 후에, 로그아웃 후에 현재 페이지로 이동해 달라는 설정이 되는 거죠. 
request 요청 객체의 path 속성은 현재 페이지 주소에서 queryString을 제외한 주소이고요.
getFullPath 메서드를 호출하시면 queryString을 포함한 전체 주소 문자열을 반환합니다. 
로그인 페이지에서 다시 로그인 버튼을 클릭하면 현재 로그인 페이지인데 넥스트 인자에도 로그인 페이지 주소가 지정되어 있습니다.
그럼 로그인에 성공했는데 또 다시 로그인 페이지로 이동을 하는 거죠.
로그인 후에 다시 로그인 페이지로 이동을 하는 것은 자연스럽지 않습니다.
url 템플릿 태그에서는 url 리버스 결과를 문자열로 저장할 수 있고요.
이 값을 활용해서 현재 페이지 주소가 로그인 페이지가 아닐 때에만 로그인 링크에 현재 페이지 주소를 next 인자로 추가하도록 합니다.
이제 로그인 페이지에서 다시 로그인 링크를 클릭해 봐도 next 인자가 주소에 붙지 않고요. 
로그인하면 프로필 페이지로 이동하게 됩니다.