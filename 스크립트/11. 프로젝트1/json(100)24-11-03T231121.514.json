지난 영상에 이어서 노트 수정 페이지에서 기존에 저장된 포트 항목들에 대해서 수정, 삭제
기능을 인라인 폼셋 팩토리를 통해 구현해 보겠습니다.
포토스 폼필드를 통해 수정 기능에서도 한 번에 여러 이미지 파일들을 업로드해서 추가로
저장할 수 있죠.
포토로그 앱의 Forms.py 파일의 일라인 폼셋 팩토리를 통해
PhotoUpdateFormset 클래스를 생성합니다.
부모 모델은 Note 모델이고요.
현대상 모델은 Photo 모델입니다.
Form 클래스는 Photo 모델에 대한 모델 폼이고요.
필드는 이미지 필드만 지정합니다.
이 폼셋을 통해 포토 추가 저장은 지원하지 않을 것이기에 익스트라 설정은 0으로
지정하고요. 삭제도 지원하도록 합니다.
노트 에디트 뷰에서 폼 인스턴스 이름이 헷갈리니 노트 언더바 폼으로 이름을 변경하겠고요.
포토 업데이트 폼셋도 적용하겠고요.
쿼리셋 인자로 수정 대상 포토 쿼리셋을 지정하고요.
인스턴스 인자로 부모 모델 인스턴스인 note 인스턴스를 지정합니다.
하나에 비해서 두 개의 폼을 사용하니까 서로 필드명이 겹치지 않도록 prefix도 서로
다르게 지정해 줍니다.
유효성 검사도 폼과 폼셋 모두에 대해 유효성 검사를 수행해 주고요 두 가지 모두에 대해서
유효성 검사를 통과하면 폼셋의 save 메서드를 호출하여 수정 혹은 삭제를 데이터베이스에
반영해 줍니다
템플릿 컨텍스트 데이터로 폼셋 이름으로 전달합니다.
krispy-form.html 템플릿은 폼만을 지원하고 있고요.
krispy-form-and-formset.html 템플릿 파일을 새로 만들어서 폼과
폼셋을 동시에 지원하도록 구현해 보겠습니다.
기본 코드는 krispy-form.html 템플릿을 복사하고요.
추가로 폼셋 인자를 전달해 줍니다.
언더바 크리스피 폼&폼셋.html 템플릿에서도 폼 값이 있을 때에 크리스피 템플릿 태그를
통해 렌더링하고 폼셋 값이 있을 때 크리스피 템플릿 태그를 통해 렌더링 되도록 합니다
그리고 폼과 폼셋은 하나의 폼 전성으로 전달되어야 합니다 그러니 태그가 따로 있어선 안
되고요 크리스피
폼에서도 HTML 폼 태그가 생성되어서는 안 되고, 크리스피 폼셋에서도 HTML 폼 태그가
생성되어서는 안 됩니다.
각각에 대해 HTML 폼 태그가 생성되지 않도록 하는 부분은 폼 클래스의 폼 헬퍼에서 폼
태그 속성을 거짓으로 설정하면 됩니다.
템플릿에서는 HTML 폼 태그를 직접 추가해 주겠습니다.
폼 액션 값이 있을 경우 액션 속성 값으로 적용하고요.
폼과 폼셋에서는 파일 업로드가 필요한 필드가 있을 경우 is-multipart 함수가 참을
반환하거든요.
그러니 둘 중에 하나로 참이라면 enc 타입 속성을 multipart 폼 데이터로 자동
지정하겠습니다. 폼 서브 및 버튼도 추가해주고요.
폼 서브 및 레이블 값이 있으면 서브 및 버튼에 레이블로 적용합니다.
crispy-form-and-formset.html 템플릿에서 include 시에도
form-submit-label 값을 명시적으로 전달합니다.
노트 에디트 뷰의 템플릿을 crispy-form-and-formset.html로
변경하고요. 페이지 새로고침하면 이렇게 폼셋을 통해 저장된 포토 항목에 대한 수정, 삭제
폼이 보여집니다.
페이지 소스보기 하시면 현 수정 폼 내에서 HTML 폼 태그가 3개 생성되었음을 확인하실
수 있고요. 이 중 폼 태그 2개는 제거되어야 합니다.
노트 생성과 수정에서 같은 폼 클래스를 사용하고 있죠.
노트 생성 시에는 Crispy를 통해 HTML 폼 태그가 생성되어야 하고요.
수정 시에는 HTML 폼 태그가 없어야 합니다.
폼 클래스 상속을 통해 수정을 위한 폼 클래스를 따로 만들어 봅시다.
기존 노트 폼 클래스의 이름을 note-create-form으로 변경합니다.
PyCharm의 리네임 기능을 활용하여 변경했습니다.
그럼 참조하고 있는 모든 코드에서 이름이 일괄 변경됩니다.
NoteCreateForm 클래스를 상속받은 NoteUpdateForm 클래스를
정의합니다.
NoteCreateForm에서 helper는 클래스 변수이기에 NoteUpdateForm
클래스에서는 helper 클래스 변수의 form 태그 속성만 변경할 수는 없습니다.
헬퍼 속성을 서로 다르게 가져가려면 헬퍼를 인스턴스 변수로 생성해야만 합니다.
note.createView 클래스에서 생성자를 추가하고요.
인스턴스 변수로 헬퍼를 생성합니다.
noteUpdateView 클래스에서도 생성자를 추가하고요.
부모의 생성자를 호출하면 helper 인스턴스 변수가 새롭게 생성이 될 것이고요.
helper의 form 태그 속성을 거짓으로 설정합니다.
그럼 noteCreateForm은 종전과 동일하게 동작을 하고요.
noteUpdateForm은 noteCreateForm과 form 태그만 생성하지 않는다는
것을 제외하고는 모든 동작이 동일합니다.
그리고 AddInput 메서드를 통해서 추가된 Submit 버튼이 있습니다.
이 버튼도 제거해야 할 텐데요.
AddInput 메서드 구현을 보시면 Inputs 리스트에 버튼을 추가하고 있죠.
그럼 NoteUpdateForm에서는 Inputs 리스트를 빈 리스트로 만들어서
Submit 버튼을 제거할 수 있습니다.
NoteEditView의 Form 클래스를 NoteUpdateForm 클래스로 변경합니다.
페이지 새로고침하시면 폼 부분의 Submit 버튼이 제거되었죠.
HTML 폼 태그도 같이 제거되었을 겁니다.
underbar-crispy-form-and-formset.html 템플릿에서 폼 태그의
NoValidate 속성을 빼먹었었네요.
추가해서 브라우저 유효성 검사를 꺼줍니다.
그리고 노트 생성 시에는 사진을 최소 1개를 필수로 받았지만, 노트 수정 시에는 사진
추가를 필수로 받지 않으려 합니다.
이를 구현하기 위해 포토스 폼필드의 required 속성을 참으로 지정하고요.
수정 폼에서는 required 속성을 거짓으로 변경합니다.
포토스 필드에 대한 사진 최소 한 개를 확인하는 코드는 clean__photos
메서드이죠.
clean__photos 메서드에서 포토스 필드의 required 플래그를 확인하여
required 플래그가 참일 때에만 업로드된 파일이 없는지를 확인하도록 변경합니다.
그럼 수정 시에는 포토스 폼필드에 대한 사진을 지정하지 않아도 유효성 검사를 통과합니다.
이제 폼셋에서 HTML 폼 태그를 제거해 줘야겠죠.
생성된 포토 업데이트 폼 클래스에 helper 속성을 추가하고요.
폼 태그 속성을 거짓으로 설정합니다.
폼 제출 버튼에 레이블이 제출로 되어 있네요.
폼 서브 및 레이블 값을 지정하여 저장하기로 변경해 보겠습니다.
그런데 레이블의 텍스트가 사라졌습니다.
Submit 버튼에 보시면 Form Submit Label 값을 Value 속성에 반영하는
코드가 누락되어 있었네요.
추가하고 새로고침하시면 Submit Button Label로 잘 적용되었습니다.
이제 삭제하고 싶은 Photo 항목을 체크하시고 저장하시면 해당 Photo 항목이
삭제되었음을 확인하실 수 있습니다.
참고로 이 폼셋에서 이미지가 보여지는 등의 UI를 변경하고자 하신다면 포토 일라인 폼을
통해서 이미지 폼필드에 대한 커스텀 위젯 구현을 통해 원하시는 UI로 변경하실 수 있습니다



1. 포토 수정 및 삭제 기능 구현
목표: Note 모델과 Photo 모델을 연결하여, 기존에 저장된 사진 항목들을 수정 및 삭제하는 기능을 구현합니다.
폼셋 사용: inlineformset_factory를 사용하여 PhotoUpdateFormset 클래스를 생성하고, 이를 통해 사진 수정 및 삭제를 지원합니다.
부모 모델: Note
자식 모델: Photo
extra=0: 새로 추가된 사진은 저장하지 않음.
can_delete=True: 사진 삭제 기능을 지원.
2. 노트 수정 뷰에서 폼셋 적용
뷰 수정: Note 모델의 기존 인스턴스를 가져와, 수정할 Photo 모델의 사진들을 수정할 수 있도록 PhotoUpdateFormset을 설정합니다.
prefix를 사용해 폼 이름이 겹치지 않도록 지정.
유효성 검사 후 save 메서드를 호출하여 데이터베이스에 반영.
3. 템플릿 수정
템플릿 파일 생성: 기존의 crispy-form.html을 복사하여 crispy-form-and-formset.html로 폼과 폼셋을 동시에 처리할 수 있도록 합니다.
파일 업로드 처리: is-multipart 메서드로 파일 업로드가 필요한 폼에 enctype="multipart/form-data"를 자동으로 설정.
폼 태그 처리: Crispy Forms를 사용해 폼을 렌더링하며, HTML 폼 태그를 직접 작성하여 제출 버튼과 레이블 값을 설정합니다.
4. 폼 클래스 수정
폼 클래스 분리: NoteCreateForm과 NoteUpdateForm으로 분리하여, 수정 폼에서는 form 태그가 생성되지 않도록 설정합니다.
NoteUpdateForm에서는 helper.form_tag = False로 설정하여 수정 폼에서 HTML 폼 태그가 생성되지 않도록 합니다.
NoteUpdateForm에서 inputs=[]로 제출 버튼을 제거합니다.
폼 헬퍼 설정: helper를 클래스 변수에서 인스턴스 변수로 변경하여 동적으로 폼 속성을 제어합니다.
5. 사진 필드 유효성 검사 수정
사진 필드: 노트 수정 시, 사진을 최소 1개 받도록 설정된 required 속성을 NoteUpdateForm에서는 False로 변경하여 사진을 추가하지 않아도 유효성 검사가 통과하도록 합니다.
clean_photos 메서드 수정: required=True일 때만 사진 파일이 없으면 유효성 검사를 실패하도록 처리합니다.
6. 폼셋에서 HTML 폼 태그 제거
폼셋 helper 추가: PhotoUpdateFormset에서 helper.form_tag = False로 설정하여 HTML 폼 태그가 생성되지 않도록 합니다.
Submit 버튼 레이블 수정: form-submit-label을 통해 제출 버튼의 레이블을 "저장하기"로 변경합니다.
7. 사진 삭제 기능
사진 삭제: 삭제할 Photo 항목에 대해 체크박스를 선택하고 저장 버튼을 누르면 해당 항목이 삭제되도록 처리됩니다.
8. UI 개선
UI 커스터마이징: Photo 모델의 이미지 필드를 커스텀 위젯으로 변경하여, 이미지 표시 방식이나 UI를 원하는 대로 수정할 수 있습니다.
요약
폼셋을 사용해 Note와 연결된 여러 사진을 수정하고 삭제하는 기능을 구현.
템플릿에서 폼과 폼셋을 동시에 처리하는 방식으로 수정하고, Crispy Forms를 사용하여 깔끔한 UI를 구현.
폼 클래스를 분리하여 수정 폼에서는 form 태그와 Submit 버튼을 제거.
유효성 검사에서 수정 시 사진을 필수로 받지 않도록 처리하고, 삭제 기능도 구현.
UI 개선을 위해 커스텀 위젯을 사용해 이미지 필드를 원하는 UI로 변경할 수 있음.