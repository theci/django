안녕하세요 이번 시간에는 노트 디테일 템플릿 내에서 댓글 목록을 구현하고 이 댓글 목록을 HTML 마크업를 통해 댓글 목록 부분만 새로고침하는 기능을 구현해 보겠습니다
노트 모델의 코멘트 모델은 외래키 관계로 맺어져 있고요 노트 모델 인스턴스의 comment related name을 통해서 노트의 댓글 목록을 조회하실 수 있습니다
코멘트 모델의 기본 정렬 방향을 기본 키 역순으로 지정해 주겠습니다.
코멘트 모델의 기본 키는 id 필드 이름의 정수 필드이죠.
기본 키 역순을 지정하시면 최신 댓글이 먼저 조회됩니다.
모델의 기본 정렬 방향을 지정해 주시면 매 쿼리셋마다 오더바이 정렬을 지정하지 않아도 되니 편리합니다. 
댓글 목록을 순회하며 댓글 HTML 마크업을 작성해 주겠습니다.
댓글에서 보여줄 항목들을 먼저 나열하겠고요.
이미지는 원형으로 보여주기 위해 rounded-circle 클래스를 지정했습니다
Flex Layout을 사용해서 레이아웃을 잡아주겠습니다
현재의 댓글 목록은 노트 디테일 페이지 응답에 같이 포함됩니다
댓글 목록을 새로고침 하려면 노트 디테일 페이지를 새로고침 해야 하는데요
댓글 새로고침 버튼을 추가하고 HTMX를 활용하여 댓글 목록 부분만 새로고침하는 기능을 구현해 보겠습니다
포틀로그 앱에 comment-list 이름의 뷰를 추가할 것이고요.
URL 패턴도 등록합니다.
댓글 목록은 소속된 노트 정보가 필요하니까요.
요청 URL에 노트의 기본 키도 추가해 줍니다.
리스트 뷰를 상속받아서 CommentListView 클래스를 정의합니다.
코멘트 모델에 대한 리스트 뷰이고요 템플릿
경로로는 포틀로그에 언더바 코멘트 리스트.html 템플릿 파일을 생성하겠고요
노트 디테일 점 HTML 템플릿에서 구현했던 코멘트 리스트 반복문 코드를 잘라내어 underbar-comment-list.html 템플릿으로 옮겨주겠습니다.
그리고 note-detail.html 템플릿에서는 underbar-comment-list.html 템플릿을 include합니다.
그럼 언더바 코멘트 리스트. html 템플릿은 노트 디테일 응답에서도 사용되고 댓글 목록 응답에서도 사용되어 동일한 댓글 목록 응답을 할 수 있게 됩니다.
htmx를 활용한 댓글 목록 응답에서 브라우저 캐싱 되지 않도록 hx-get-with-timestamp 속성을 추가하고요.
htmx 응답을 반영할 위치 지정을 위해 댓글 목록에 코멘트 리스트 아이디를 추가하고 hx타겟 속성으로도 지정해 줍니다.
새로고침 버튼 클릭 시에 댓글 새로고침을 할 테니 HX 트리거 속성에는 클릭을 지정하고요.
Refresh Comment List 이벤트가 발생했을 때에도 댓글 새로고침을 수행하겠습니다.
댓글 생성 혹은 수정 이후에 서버 단에서 Refresh Comment List 이벤트를 발생시켰었죠.
현재는 언더바 코멘트 폼 HTML 템플릿에서 이 이벤트를 받아서 댓글 폼 모달 창을 닫도록만 구현이 되어 있는데요.
댓글 새로고침 버튼에도 리프레쉬 코멘트 리스트 이벤트에 반응하도록 HX 트리거에 추가했으니 댓글이 생성 혹은 수정되면 댓글 폼 모달 창도 닫히고 댓글 목록도 자동으로 갱신될 것입니다. 
새로운 댓글을 생성하시고 저장하시면 모랄 창이 자동으로 닫히고 방금 저장한 댓글이 댓글 목록에 바로 추가되었습니다.
잘 동작하네요.
코멘트 리스트 뷰에서 지정 노트에 속한 댓글만 보여지도록 객체 쿼리셋 메서드를 재정의해서 조회 조건을 추가해줍니다.
이제 노트 단위로 댓글이 조회됩니다.
수행된 SQL 내역을 보시면 댓글 개수만큼 프로필 조회가 발생했음을 확인하실 수 있는데요.
이는 문제이죠.
댓글 쿼리셋에서 프로필 필드에 대한 즉시 로딩이 필요한데요.
note-detail.html 템플릿에서는 note.comment-set.all 코드로 댓글 쿼리셋을 생성했는데요.
장고 템플릿에서는 여기에 셀렉트 릴레이티드 코드를 추가할 수는 없습니다
이 코드를 view 단으로 옮겨서 즉시 로딩을 적용한 쿼리셋을 코멘트 리스트 이름으로 컨텍스트 데이터로 전달하겠습니다
그럼 이렇게 즉시 로딩이 join 쿼리로 수행이 됩니다
코멘트 리스트 view에도 프로필 필드에 대한 즉시 로딩 코드를 추가해 줍니다
노트 디테일 페이지에서 댓글 목록을 띄우실 때 두 가지 접근이 있을 수 있는데요.
방금처럼 처음에는 Django 템플릿을 통해 띄우고 그 이후에는 HTMX를 통해서 새로고침을 수행하시는 방법도 있고요.
혹은 처음부터 HTMX를 통해서 댓글 목록을 띄우실 수도 있습니다.
hx-trigger 속성에 load만 추가하시면 되죠.
보여질 컨텐츠가 댓글 목록일 경우에는 처음 방법인 장고 템플릿으로 댓글 목록을 띄우시고 새로고침 시에만 HTMX를 이용하시길 추천드립니다
왜냐하면 특정 페이지의 html 응답에 컨텐츠가 포함되어 있으면 검색엔진 최적화, 즉 검색 엔진 최적화에 유리하기 때문입니다
첫 HTML 응답에 컨텐츠가 없고, 별도의 JavaScript 요청을 통해서 나중에 컨텐츠가 화면에 반영되는 것은 검색 엔진 최적화에 불리합니다.
React에서도 Next.js와 같은 프레임워크를 많이 쓰는 이유가 이 이유 때문입니다.
React를 쓰면 기본적으로 페이지 초기 HTML 응답에서는 컨텐츠가 전혀 없거든요
리액트 프로그램 코드 응답만 있습니다
초기 페이지 로딩 이후에 자바스크립트를 통해서 컨텐츠를 요청하고 응답을 받아 화면을 그립니다 
그러니 리액트만 쓴 페이지는 검색 엔진 최적화에 불리합니다
그러니 리액트를 썼지만 페이지 초기 HTML 응답에 컨텐츠를 포함시켜 응답을 하고자 할 때에는 Next.js와 같은 프레임워크를 쓰는 것입니다.


이번 설명은 Django와 HTMX를 활용하여 노트의 댓글 목록을 동적으로 처리하는 방법을 다루고 있습니다. 전체적인 흐름은 댓글 목록을 구현하고, 이 목록을 HTML 마크업을 통해 새로고침하는 방식입니다. 주요 내용을 정리하면 다음과 같습니다:

1. 모델 구조 및 정렬 설정
노트 모델과 코멘트 모델이 외래키 관계로 연결됩니다.
댓글은 기본 키(id) 역순으로 정렬되도록 설정하여 최신 댓글이 먼저 보이도록 합니다.
댓글 모델에서 order_by 옵션을 설정하면 매번 쿼리셋에 order_by를 지정하지 않아도 됩니다.
2. 댓글 HTML 마크업
댓글 목록을 순회하며 HTML 마크업을 작성하고, rounded-circle 클래스를 사용하여 프로필 이미지를 원형으로 표시합니다.
Flex Layout을 사용하여 댓글 레이아웃을 구성합니다.
3. HTMX를 통한 댓글 목록 새로고침
댓글 목록은 노트 디테일 페이지와 댓글 목록 페이지 모두에서 사용될 수 있습니다.
HTMX를 사용하여 댓글 목록만 새로고침하는 기능을 구현합니다. 이를 위해 새로고침 버튼과 hx-get 요청을 설정하여, 버튼 클릭 시 댓글 목록을 동적으로 업데이트할 수 있습니다.
4. 뷰와 URL 설정
CommentListView 클래스를 생성하고, 댓글 목록을 반환하는 뷰를 정의합니다.
이 뷰는 Note 객체와 관련된 댓글만 반환하도록 설정하며, ListView를 상속하여 구현합니다.
URL 패턴을 등록하고, 노트의 기본 키를 URL에 포함시켜 특정 노트에 속한 댓글만 조회할 수 있도록 합니다.
5. 템플릿 처리
댓글 목록을 포함하는 HTML 마크업을 underbar-comment-list.html 템플릿 파일로 분리하여 재사용 가능하게 만듭니다.
note-detail.html 템플릿에서 underbar-comment-list.html을 {% include %} 문법으로 포함시켜 댓글 목록을 동적으로 가져옵니다.
hx-get을 사용하여 댓글 목록만 새로고침하고, hx-target 속성으로 comment-list 아이디를 지정하여 해당 영역만 업데이트되도록 합니다.
6. 댓글 목록 새로고침 트리거
댓글이 생성되거나 수정된 후 Refresh Comment List 이벤트를 발생시켜 댓글 목록을 새로고침하도록 구현합니다.
이 이벤트는 댓글 폼 모달 창을 닫는 기능과 댓글 목록 갱신을 동시에 수행하게 합니다.
7. 쿼리셋 최적화
댓글 목록을 조회할 때, 프로필 데이터가 필요하므로 select_related를 사용하여 프로필을 즉시 로딩합니다.
템플릿에서 select_related를 사용할 수 없기 때문에, 이를 뷰에서 처리하여 CommentListView에서 프로필을 함께 로딩하도록 설정합니다.
8. HTMX 사용 시 SEO 고려
댓글 목록을 처음부터 Django 템플릿을 통해 렌더링하고, 이후 댓글 목록만 HTMX를 통해 새로고침하는 방법을 추천합니다.
HTMX를 처음부터 사용할 경우, 검색 엔진 최적화(SEO)에 불리할 수 있습니다. 이는 페이지 초기 HTML 응답에 콘텐츠가 포함되지 않고, 자바스크립트로만 콘텐츠가 로딩되기 때문입니다.
Next.js 같은 프레임워크가 이를 해결하는 방법으로 사용됩니다. 페이지 초기 HTML 응답에 콘텐츠를 포함시켜 SEO를 고려한 방식입니다.
9. 구현 순서
댓글 목록을 처음 로딩할 때는 Django 템플릿을 사용하고, 이후 HTMX를 통해 댓글 목록을 새로고침하는 방식으로 구현합니다.
댓글 목록을 동적으로 갱신하는 버튼에 hx-trigger="click"을 추가하여 새로고침을 트리거합니다.
최종 구현 개요
모델: 노트와 댓글이 외래키로 연결되고, 댓글은 최신 순으로 정렬됩니다.
뷰: CommentListView에서 노트에 속한 댓글만 반환하고, 이를 템플릿으로 렌더링합니다.
템플릿: 댓글 목록을 underbar-comment-list.html로 분리하여 재사용 가능하게 만들고, hx-get을 통해 동적으로 새로고침합니다.
HTMX: 댓글 목록을 새로고침하는 버튼을 추가하고, hx-trigger를 설정하여 버튼 클릭 시 댓글 목록만 갱신합니다.
최적화: 프로필 데이터를 즉시 로딩하여 데이터베이스 쿼리 수를 최적화합니다.
이렇게 구현하면 댓글 목록이 처음에 로드될 때는 Django 템플릿을 통해 서버에서 전달되며, 이후에는 댓글 목록을 동적으로 새로고침할 수 있는 기능이 추가됩니다.