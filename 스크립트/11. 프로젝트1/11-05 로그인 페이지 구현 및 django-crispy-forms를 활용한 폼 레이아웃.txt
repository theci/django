django-crispy-forms 라이브 홀리드 활용해서 로그인 기능을 구현해 보겠습니다.
로그인 뷰는 장고 기본 앱 Auth 앱에서 이미 지원해 주고 있죠.
상속받아서 몇몇 설정을 커스텀 지정하겠고요.
유화될 패턴도 등록해 줍니다.
로그인 뷰에서는 인증을 처리하는 기본 폼 클래스로 Authentication 폼 클래스가 지정되어 있고요.
이 폼 클래스를 상속받아 Crispy 폼즈 관련 설정을 곧 추가하겠습니다.
로그인 뷰에서 폼 클래스를 변경하고요.
로그인 링크의 주소도 변경합니다.
템플릿에서 로그인 여부에 따라 로그인, 회원가입, 프로필, 로그아웃 링크를 노출하겠습니다.
로그인 페이지에 방문하시면 디폴트 설정에 템플릿이 없어서 아직 동작하지 않습니다.
로그인 뿐만 아니라 회원가입, 프로필 수정 기능 등에서 폼 템플릿이 여럿 필요할 텐데요.
Crispy 폼즈 라이브러리를 사용하면 폼 클래스에서 레이아웃 등의 모든 설정이 이루어지고 템플릿 단에서 Crispy 템플릿 태그만 호출만 하면 됩니다.
그러니 템플릿 파일은 하나만 만들고 이를 로그인, 회원가입, 프로필 수정 등에서 이 템플릿 파일을 같이 사용하도록 해 보겠습니다.
코어 밑에 템플릿 아래에 crispy-form.html 파일을 생성합니다.
crispy-form-tags를 로드하고, crispy-template-tag을 통해 form 인스턴스를 html로 렌더링합니다.
로그인 뷰에서 템플릿 경로를 지정해 주고요 페이지 새로 고침하시면 폼 렌더링이 확인됩니다
우리가 세팅스에서 Crispy 설정한 대로 Bootstrap 5 스타일로 렌더링이 되었을 텐데 현재 웹페이지에 Bootstrap 5 CSS가 아직 로딩되어 있지 않아요
그래서 Bootstrap 스타일로 폼이 아직 보여지지 않은 상황이고요 최상위 부모 템플릿을 상속받으면 부트스텝 5 CSS로 로딩이 될 것이고요.
컨텐드 블록에 폼 렌더링을 하고요.
페이지 새로고침하시면 Bootstrap 5 스타일의 폼이 확인됩니다.
Crispy Forms 라이브러리에서는 폼 헬퍼를 지원하죠.
폼 인스턴스에서 헬퍼 이름의 속성으로 폼 헬퍼 클래스의 인스턴스를 참조할 수 있도록 생성해줍니다. 
현재 폼 헬퍼 설정은 고정된 설정이니 클래스 변수 형태로 지정해도 충분합니다.
태그의 속성으로는 속성을 추가해서 브라우저의 기본 유효성 검사를 비활성화하고요.
태그의 관련 설정 지정이 필요하실 때에는 이 attribute 사전을 활용하시면 됩니다.
레이아웃 속성으로 폼필드 레이아웃을 지정하고요.
서브 및 버튼도 추가합니다.
Submit 버튼이 작게 보여지는데요.
Bootstrap 5에서 지원하는 W100 클래스명을 지정하시면 가로폭이 100%로 표현됩니다.
crispy 템플릿 태그에서는 첫 번째 인자로 form 인스턴스를 받고 두 번째 인자로 form helper 인스턴스를 받는데요.
form 인스턴스에서 helper 이름에 form helper 인스턴스가 있다 하면 두 번째 인자를 지정하지 않아도 자동으로 form helper 인스턴스를 사용합니다.
crispy.form.html 템플릿은 전체 레이아웃을 담는 템플릿으로 두고요.
form만 담는 underbar.crispy.form.html 템플릿을 따로 구현하여 include하는 형태로 구현하겠습니다.
form 레이아웃은 부트스트랩의 카드 레이아웃을 사용하겠고요.
폼 타이틀 값이 있다면 폼 헤더를 노출하도록 합니다.
언더바 크리스피 폼.html 템플릿 include 시에 이 템플릿에서 참조할 값들은 명시적으로 with 구문을 통해 지정해 주겠습니다.
그러면 템플릿 내에서 어떤 값들을 참조하는지 명확하게 확인할 수 있게 됩니다.
지정된 값 외의 다른 값들을 참조할 수 없도록 하려면 끝에 only 키워드를 붙여주세요.
로그인 뷰에서 폼 타이틀 값을 설정해 주고요.
웹 페이지 새로 고침하시면 지정 레이아웃으로 로그인 폼이 잘 보여지고요.
로그인해 보시면 로그인되어 디폴트 성공 주소인 프로필 페이지로 잘 이동함을 확인하실 수 있습니다.