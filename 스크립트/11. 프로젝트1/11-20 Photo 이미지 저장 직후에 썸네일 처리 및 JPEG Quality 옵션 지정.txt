현재 업로드되는 이미지는 업로드된 원본 이미지 그대로 저장되고 있는데요.
이미지 크기를 줄이고 JPG 품질 옵션도 지정하여 저장 용량을 더욱 줄여보겠습니다.
앞에서는 폼 내에서 이미지 변환을 했었는데요.
이번에는 모델 내에서 모델 저장 직전에 이미지 변환을 수행해 보겠습니다.
모델 저장 직전에 자동으로 호출될 함수를 구현하기 위해 Django Lifecycle Library
라이버리를 활용하겠습니다.
모델 클래스는 라이프사이클 모델 클래스를를 상속받거나 라이프사이클 모델 믹싱 클래스를
상속받아야만 장고 라이프사이클의 각 훅들이 각 시점에 맞춰 자동으로 호출됩니다.
상속받지 않으면 각 훅 함수들이 호출되지 않습니다.
제가 실습에서 훅 이름을 잘못 지정했었습니다.
저장 전에 호출되어야 하기에 beforeSaveHook으로 등록해 주세요.
beforeUpdateHook은 기존 레코드를 수정해서 저장할 때에만 호출되고요.
beforeCreateHook은 새 레코드를 생성하여 저장할 때에만 호출되고요.
beforeSaveHook은 기존 레코드를 수정할 때와 생성, 저장할 때 모두에서
호출됩니다. 새로운 파일을 저장할 때, 파이 경로가 바뀔 텐데요.
파이 저장 경로에 변화가 있을 때, 즉 새로운 파일을 저장할 때에만 이 훅이 호출되도록
합니다. 저장된 이미지 경로가 있을 때, Pillow 라이브러리로 이미지 파일을 열어서
최대 1024 픽셀 내에서 이미지 크기 조정을 하고요.
투명 채널이 있는 이미지일 경우, 투명 채널을 제거한 RGB 모드로 변환합니다.
투명을 원하는 색상으로 먼저 채우시고 나서 RGB 모드로 변환하셔도 좋습니다.
파일명에서 확장자를 제외한 파일명을 추출하고요.
확장자는 jpg로 지정합니다.
파이썬의 메모리 파일 객체의 jpg 포맷으로 이미지 파일을 저장하고요.
파일 시작 지점으로 커서를 옮겨둡니다.
새로운 파일명으로 새로운 파일 내용을 저장할 때에는 ImageField의 Save
Method를 활용합니다.
첫 번째 인자로 새로운 파일명, 두 번째 인자로 새로운 파일 내용, 세 번째 인자로 모델
인스턴스의 Save Method 자동 호출 여부입니다.
파일을 다시 업로드해 보시면 최대 1024 픽셀 크기로 이미지가 줄고 JPEG 포맷으로
저장되었습니다.
JPG 파일은 손실 압축 방식으로써 저장 시에 저장 품질을 지정할 수 있거든요.
60%로 지정해서 다시 이미지를 저장해 보겠습니다.
이미지 용량이 80KB에서 59KB로 줄어 저장되었지만 눈으로 보기에는 이미지는 큰 차이가
없습니다.