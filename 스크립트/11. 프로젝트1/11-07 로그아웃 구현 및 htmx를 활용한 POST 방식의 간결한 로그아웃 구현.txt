Logout 역시 OAuth 앱에서 Logout View를 지원해주고 있죠.
Import하고 상속받아서 몇몇 설정을 변경해서 Logout 기능을 구현해 보겠습니다.
Auth 앱의 로그아웃 뷰에서는 로그아웃 후에 이동할 디폴트 주소로서 next page
속성이나 Settings의 Logout Redirect URL 설정을 사용합니다.
Next Page 설정은 내부에서 URL 리버스도 자동으로 수행해 주고 있습니다.
로그아웃 후에 로그인 페이지로 자동 이동하도록 next page 속성으로 로그인 페이지
주소를 지정하겠습니다.
그리고 로그아웃 후에 로그아웃에 대한 성공 메시지를 남겨주기 위해 Dispatch 메서드를
재정의하겠습니다.
클래스 기반 뷰에서는 요청 처리의 시작에 Dispatch 메서드가 가장 먼저 호출되고요.
요청 메서드에 맞게 Get 메서드나 Post 메서드가 호출됩니다.
Django 4까지는 Get 요청과 Post 요청 모두에 대해 로그아웃을 지원하지만,
Django 5부터는 Post 요청을 통해서만 로그아웃을 지원합니다.
버전 4 까지만 get 메서드 호출 시에 post 메서드를 호출하고요.
버전 5 부터는 get 메서드가 제거되어 get 방식의 요청을 지원하지 않게 됩니다.
Dispatch 메서드를 재정의하면 어떤 메서드로 logout이 처리되더라도 logout
후에 수행할 동작을 지정할 수 있습니다.
부모의 Dispatch 메서드 호출 후에 logout에 대한 성공 메시지를 남기고 그
응답을 반환합니다.
URL 패턴도 등록하고 레이아웃 템플릿의 로그아웃 링크에도 반영합니다.
로그아웃 링크를 태그로 구현했으니 링크 클릭 시에 겟 요청으로 로그아웃 요청이 전달됩니다.
장고 5.0부터는 겟 방식은 지원하지 않으니 포스트 방식으로 로그아웃 요청이 전달될 수
있도록 HTMX를 통해 구현해 보겠습니다.
hx-post 속성으로 변경하면 로그아웃 요청이 포스트 방식으로 전달되고 그 응답은 로그인
페이지로의 이동 응답이겠고요.
로그인 페이지 내용이 그대로 현재 로그아웃 버튼 요소의 innerHTML 속성으로
반영됩니다. 그래서 로그아웃 버튼이 이렇게 크게 늘어난 상황입니다.
로그아웃 요청에 대한 응답을 바디 요소에 반영될 수 있도록 hx-target 속성을 바디로
지정합니다.
로그아웃을 해보시면 페이지 내용만 보면 로그인 페이지이죠.
그런데 웹브라우저의 페이지 주소를 보시면 로그아웃 버튼을 클릭했던 종전 페이지 주소인
프로필 페이지에 머물러 있습니다.
로그인 폼에서 폼 태그에는 액션 속성이 지정되어 있지 않아서 로그인 요청이 현재 페이지
주소로 전달되는데요
그럼 프로필 뷰로 로그인 요청이 전달되는 거잖아요
엉뚱한 뷰에서 로그인 요청을 받게 되고요 현재 로그아웃 상태이고 프로필 뷰에서는 로그인
required 장식자에 의해 랩핑되어 있으니 로그인 처리 없이 로그인 페이지로 이동하게
됩니다 웹브라우저의 현재 페이지 주소가 로그인 페이지 주소이죠.
로그인 시도를 해보면 로그인이 됩니다.
hx-target-body 설정을 통해 htmx 응답을 화면에 반영했지만 웹페이지 주소는
변경되지 않아서 발생한 문제이고요.
HTMX에서는 hx-push-urls 속성이 지원됩니다.
hx-push-urls true 속성을 지정하시면 htmx에서는 히스토리 API를 활용해서
HTMX 응답의 페이지 주소로 페이지 주소를 변경해 줍니다.
이제 로그아웃 버튼 클릭해 보시면 로그인 페이지 화면도 잘 보이고 페이지 주소도 로그인
페이지로 잘 바뀌어졌죠.
HTMX를 통해 로그아웃 POST 요청을 구현할 때 폼 태그나 자바스크립트 없이도 이렇게
간단하게 구현하실 수 있고요.
HTMX를 사용하지 않을 때와 A 태그를 활용한 로그아웃 링크와 비교해도 구형 코드의
차이가 크지 않습니다.