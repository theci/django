유저 모델과 1대1 관계의 프로필 모델을 추가하고, 유저 사진을 업로드 받는 아바타
필드를 ImageField 타입으로 추가하겠습니다.
유저 모델과의 관계를 외래키로 지정하지 않도록 주의해주세요.
외래키는 1대N 관계를 표현하며, 1to1 필드는 1대1 관계를 표현합니다.
ImageField 모델 필드는 Pillow Image 라이브러리에 의존성이 있기에,
Pillow 라이브러리가 설치되어 있지 않으면 이렇게 시스템 체크 시에 시스템 체크 에러가
발생하게 됩니다.
Pillow 라이브러리 설치하시면 개발 서버도 다시 잘 구동되고요.
Make Migrations 명령도 잘 동작하고, Migrate 명령까지 수행하여
데이터베이스에 반영합니다.
프로필 수정 기능을 제공할 텐데요.
프로필 수정에서는 아바타 필드만 입력 받겠습니다.
프로필 폼 모델 폼을 정의하고요.
메타 필드 속성으로 아바타 필드만 지정합니다.
프로필 수정 뷰는 업데이트 뷰, 클래스 기반 뷰를 상속 받고요.
모델은 프로필 모델, 폼 클래스 설정은 프로필 폼 클래스, 템플릿은
crispy-forms.html 템플릿을 지정하고요.
폼 타이틀 설정과 성공 URL 주소도 지정해 줍니다.
URL 패턴도 등록하고, 프로필 페이지에 프로필 주소 링크를 추가하고 프로필 수정 페이지로
이동해 보면 attribute 에러가 발생합니다.
업데이트 뷰 클래스 기반 뷰에서는 url-captured values 중에 k 혹은
slug 이름의 값을 전달받아 수정할 레코드를 조회하는데요.
프로필 수정 URL에서는 URL 캡쳐드 밸류스가 전혀 없죠.
프로필 수정에서는 수정할 대상은 고정되어 있습니다.
현재 로그인 유저의 프로필입니다.
URL을 통해 수정할 대상을 지정받을 필요가 전혀 없습니다.
프로필 대상을 조회하는 getObject 메서드를 재정의하여 수정 대상인 현재 유저의
프로필 인스턴스를 반환토록 합니다.
현재 유저의 프로필 레코드를 조회할 때 레코드가 없다면 does not exist 예외가
발생하거든요.
그때에는 None을 반환토독합니다.
getObject 메서드의 반환 값이 모델 폼 생성자의 인스턴스 키워드 인자가
전달되거든요. 모델 폼 생성자의 인스턴스 키워드 인자로 non이 지정되면 생성으로
동작합니다. 프로필 수정 페이지를 새로 고침하면 이제 프로필 수정 폼이 잘 뜨죠.
프로필 모델 클래스에서는 아바타 필드 외에도 필수 필드로 유저 메타 필드가 있습니다.
프로필 저장 시에 유저 외래키 필드를 지정하지 않는다면 데이터베이스를 통해
IntegrityError 예외가 발생할 것입니다.
FormValid 메서드를 재정의해서 프로필 모델 인스턴스를 데이터베이스에 저장하기 전에
유저 모델 필드의 값을 지정하고 저장하도록 합니다.
그럼 뷰 구현은 얼추 되었고요.
프로필 폼에서 아직 폼 헬퍼를 통한 레어 구현이 없었죠.
다른 폼 클래스와 마찬가지로 기본 구성으로 추가해줍니다.
프로필 수정 뷰에서는 수정 내역으로 저장을 완료한 후에 성공 메시지를 남깁니다.
프로필 수정 웹 페이지에서 사진 지정하시고 저장하시면 프로필이 잘 저장되었다고 메시지가
출력되네요. 파일 업로드가 잘 되었습니다.
파일 업로드 시에는 폼 태그에 ENC 타입 속성으로 멀티파트 폼 데이터 지정이
필요하잖아요.
그런데 폼 헬퍼에서는 ENC 타입 관련 설정을 하지 않았죠.
폼 헬퍼에서는 폼 필드에 파일 필드나 이미지 필드가 있으면 자동으로 ENC 타입 속성으로
멀티파트 폼 데이터를 추가해 줍니다.
그러니 폼 헬퍼를 사용하실 때에는 ENC 타입 속성에 대해서 신경 쓰지 않으셔도 됩니다.
저는 방금 profile.jpg 파일을 업로드했는데요.
파일이 프로젝트 루트 경로에 이렇게 저장되어 있습니다.
현재 세팅스에 미디어 관련 설정이 아직 안 되어 있어요.
세팅스에 미디어 설정이 없어도 이렇게 파일 저장은 되지만 파일은 프로젝트 루트 경로에 계속
쌓일 것이고요.
저장된 파일을 URL을 통해 현재 조회할 수는 없습니다.
세팅스에 미디어 URL 설정과 미디어 루트 설정을 추가합니다.
미디어 URL 설정은 이 설정으로 시작되는 URL 요청은 미디어 파일을 찾는 것으로
인지하여 지정 URL의 파일을 찾아 응답을 할 것이고요.
지정 URL의 파일을 찾아 응답을 하는 뷰와 URL 패턴은 아직 구현하지 않았습니다.
미디어 루트 설정은 미디어 파일이 저장된 루트 경로입니다.
미디어 루트 설정은 디폴트로 빈 문자열이거든요.
그러니 미지정 시에는 프로젝트 루트에 업로드된 파일이 저장되었던 것입니다
미디어 루트 설정을 프로젝트 루트 아래 미디어 파일 디렉토리에 저장하도록 하겠습니다
현재 데이터베이스는 SQLite이고요 db.sqlite 파일이 현 프로젝트의
데이터베이스이죠
파이참에서는 해당 파일을 더블클릭하시면 데이터 소스 연결 대화 상자가 뜨고요 연결 확인하고
OK 누르면 새 데이터 소스로 추가됩니다
Accounts 프로필 테이블을 조회해 보시면 방금 업로드한 파일에 대해서 아바타 컬럼에는
파일명만 저장되어 있습니다
이는 저장된 파일의 절대 경로가 아니죠
이 값은 미디어 루트 경로에 대한 상대 경로입니다
프로필 템플릿에서 저장된 아바타 필드의 URL을 출력해 보시면 이렇게 Settings에
미디어 URL 설정과 상대 경로가 조합된 URL이 출력됩니다
이미지 태그로 적용해 보시면 이미지가 출력되지 않죠?
해당 이미지 주소로 새 탭으로 열어보시면 이미지 응답이 아닌, 이렇게 Face Not
Found 404 HTML 응답을 받았습니다.
미디어 URL 설정인 미디어 슬러시 주소로 시작하는 이 요청을 처리하는 URL 패턴이 현재
프로젝트에 없습니다.
마이 사이트의 URL 스파이 파일에 미디어 파일을 서빙하는 URL 패턴을 추가해주겠습니다.
static 함수는 지정 url prefix로 시작하는 요청을 지정 경로의
directory 내에서 찾아서 응답하는 url pattern list를 반환합니다.
url pattern list를 반환하니 url patterns list를 확장, 확장하는
연산자를 이렇게 적용했습니다.
그리고 static 함수는 settings의 디버그 설정이 참일 때만 동작하고요.
거짓일 때에는 빈 리스트를 반환합니다.
그 이유는 static 함수는 개발 편의성을 위해 정적 파일 서빙 기능을 제공할
뿐이거든요. 그래서 실서비스 모드에서는 정적 파일 서빙 기능을 제공하지 않는 것입니다.
실 서비스에서는 정적 파일에 보다 포커스가 맞춰진 정적 파일 서비스나 정적 파일 서버를
활용하시게 될 것입니다.
하지만 장고의 정적 파일 서빙 기능을 활용하실 수도 있습니다.
참고로 스태틱 파일 서빙 기능도 세팅스의 디버그 설정이 참일 때만 동작하고요.
거짓 설정에서는 스태틱 파일 서빙 기능이 비활성화됩니다.
스태틱 파일 서빙 기능은 따로 URL 패턴으로 정의되지 않았고요.
광고 코어에 구현되어 있습니다.
미디어 파일을 조회하는 웹 페이지를 새로고침하면 이제 오류 메시지가 바뀌었죠
미디어 파일즈 폴더 아래에 profile.jpg 파일이 없다고 합니다
settings의 미디어 루트에 지정된 경로에서 파일을 찾고 있습니다
그런데 파일은 현재 프로젝트 루트에 있잖아요
이 파일만 미디어 파일즈 폴더 아래로 옮겨 주시면 됩니다
페이지 새로고침하시면 이제 미디어 파일 서빙이 잘 됩니다.
프로필 모델의 아바타 필드는 Blank True 설정이 되어 옵션 필드이죠.
그러니 유저에 따라 아바타 필드가 빈 문자 열일 수도 있습니다.
빈 문자 열일 때 .URL 속성에 접근하면 오류가 발생합니다.
그러니 아바타 필드에 저장된 경로 문자열이 있을 때, 즉 업로드된 파일이 있을 때에만
이미지를 보여주도록 합니다.
제가 업로드한 이미지가 커서 페이지 레이아웃을 넘어섰는데요.
부트스트랩 5에서 지원하는 라운디드 서클 클래스를 지정하시면 이미지가 원형으로 보여지고요.
이미지 플루이드 클래스를 지정하시면 이미지의 최대 크기가 100%로 지정되어 이미지가
아무리 커도 페이지 내 내에서만 보여지게 됩니다.
최대 크기를 25%로 지정해 보시면 이렇게 4분의 1 크기로 보여집니다.



1. 유저 모델과 1대1 관계의 프로필 모델 추가
프로필 모델 구현
User 모델과 1대1 관계인 Profile 모델을 추가합니다. (OneToOneField 사용)
Profile 모델에 아바타(ImageField) 필드를 추가하여 사용자 사진을 업로드 받을 수 있게 합니다.
외래 키(ForeignKey)가 아닌 1대1 관계(OneToOneField)를 사용하여 Profile과 User를 연결합니다.
Pillow 라이브러리 설치
ImageField는 Pillow 라이브러리에 의존성이 있기 때문에 설치가 필요합니다.
pip install Pillow 명령어로 설치 후, 서버를 다시 시작하고 makemigrations 및 migrate 명령을 실행하여 모델을 데이터베이스에 반영합니다.
2. 프로필 수정 기능 구현
프로필 폼 정의

프로필 수정 폼을 ProfileForm으로 정의하고, Meta 클래스에서 아바타 필드만 지정합니다.
프로필 수정 뷰 구현

클래스 기반 뷰(UpdateView)를 상속하여 프로필 수정 뷰를 구현합니다.
모델: Profile, 폼 클래스: ProfileForm, 템플릿: crispy-forms.html로 지정합니다.
폼 타이틀 및 성공 URL을 설정합니다.
URL 패턴 등록

urls.py에 프로필 수정 페이지의 URL 패턴을 추가합니다.
3. 프로필 수정 뷰에서 1대1 관계 처리
get_object 메서드 재정의
UpdateView에서 get_object 메서드를 재정의하여, 수정 대상인 현재 로그인한 사용자의 Profile 객체를 반환합니다.
Profile이 존재하지 않으면 None을 반환하여 새로운 Profile을 생성하도록 합니다.
프로필 모델 필드 처리
Profile 모델에는 User 외래키 필드가 필수이므로, form_valid 메서드를 재정의하여 프로필을 저장하기 전에 User 모델과 연결된 Profile 인스턴스를 지정합니다.
4. 프로필 수정 폼 구성
폼 헬퍼 추가
ProfileForm에 crispy-forms의 폼 헬퍼를 추가하여 스타일을 적용합니다.
성공 메시지 처리
프로필 수정이 완료된 후 성공 메시지를 표시하도록 설정합니다.
5. 파일 업로드 설정
멀티파트 폼 데이터 설정
파일 업로드 시, 폼 태그에 enctype="multipart/form-data" 속성을 추가해야 합니다. 하지만 crispy-forms를 사용할 경우 자동으로 처리됩니다.
파일 저장 및 확인
프로필 사진이 프로젝트 루트 경로에 저장됩니다. 이를 확인할 수 있습니다.
6. 미디어 파일 설정
미디어 URL과 루트 설정

settings.py에서 미디어 관련 설정을 추가합니다:
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' (미디어 파일이 저장될 경로 설정)
파일 서빙을 위한 URL 패턴 추가

urls.py에 미디어 파일을 서빙하기 위한 URL 패턴을 추가합니다:
python
코드 복사
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
파일 업로드 확인

Profile 모델의 avatar 필드에 업로드된 이미지가 media 폴더에 저장되며, 이미지 URL이 설정됩니다.
해당 URL을 통해 이미지를 불러올 수 있습니다.
7. 프로필 템플릿에서 이미지 출력
이미지 출력
프로필 템플릿에서 저장된 avatar 필드의 URL을 사용하여 이미지 태그를 출력합니다.
avatar가 비어 있는 경우 오류가 발생하지 않도록 조건문을 추가하여 처리합니다.
부트스트랩 5 스타일 적용
이미지를 원형으로 표시하려면 rounded-circle 클래스를 사용하고, 이미지 크기를 100%로 제한하려면 img-fluid 클래스를 사용합니다.
이미지 크기를 조절하려면 max-width를 설정합니다.
8. 디버깅 및 확인
404 오류 처리
미디어 파일을 요청할 때 404 오류가 발생하는 경우, MEDIA_URL 경로와 MEDIA_ROOT 설정이 올바르게 지정되었는지 확인합니다.
파일 경로 변경
media 폴더 내에 이미지 파일을 이동시키고, URL을 통해 제대로 서빙되는지 확인합니다.
9. 프로필 수정 페이지 최종 점검
프로필 수정 기능 점검
프로필 수정 페이지에서 아바타를 수정하고 저장한 후, 성공 메시지가 출력되는지 확인합니다.
이미지 표시 확인
프로필 이미지가 원형으로 출력되며, 페이지 레이아웃 내에서 크기가 조절되는지 확인합니다.
요약
프로필 모델 추가: User 모델과 1대1 관계를 설정하고, 아바타 필드를 ImageField로 추가.
프로필 수정 뷰: 클래스 기반 뷰를 사용하여 현재 로그인한 유저의 Profile을 수정하도록 구현.
파일 업로드 처리: 이미지 파일 업로드 시, enctype="multipart/form-data" 설정과 crispy-forms의 자동 처리.
미디어 파일 설정: MEDIA_URL과 MEDIA_ROOT 설정을 통해 미디어 파일을 서빙하고, URL 패턴을 추가하여 파일에 접근할 수 있도록 설정.
이미지 표시: 업로드된 이미지를 avatar 필드를 통해 템플릿에서 출력하고, 부트스트랩 클래스를 사용하여 스타일을 적용.