프로필 모델의 아바타 필드는 이미지 필드, 모델 필드입니다.이고요.
이를 통해 생성된 모델 폼의 폼필드에서는 업로드된 파일이 이미지인지만 검사하고요.
업로드된 원본 이미지 그대로 서버에 저장합니다.
제가 가로, 세로 4159 픽셀의 PNG 이미지를 업로드했고 용량은 735KB입니다.
원본 그대로 저장이 되어 있습니다.
유저는 엄청 큰 크기, 고용량의 이미지를 업로드할 수도 있습니다.
업로드하는 파일의 최대 허용 크기를 제한할 수도 있습니다만, 최대 허용 크기 범위 안에서 원본 그대로 저장하는 것은 변함이 없습니다.
포필 이미지는 되게 크게 보여줘봤자 512 픽셀은 넘지 않을 것이고요.
원본 그대로 저장하지 않고 JPEG 포맷으로 저장 품질을 낮춰 서비스에도 되게 충분합니다.
저장되는 이미지 크기를 줄이고 JPG 포맷으로 저장하면 이미지 크기가 대개 90% 이상 줄어듭니다. 
그럼 서버 스토리지도 아낄 수 있고, 유저의 데이터 소모도 줄이고, 이미지도 빨리 로딩 되기에 서비스가 빠르다 라고 느끼게 되겠죠.
프로필 폼에서 업로드된 파일에 대한 전처리 과정에서 Pillow를 활용하여 직접 이미지 썸네일 처리를 하고 JPG 포맷으로 변환을 한 후에 저장하도록 하겠습니다.
폼 클래스의 클린 메서드에서는 값에 대한 유효성 검사 및 값 변환의 역할도 하고 있죠.
cleanUnderbarAvatar 메서드를 구현합니다.
cleanUnderbar 데이터 사전에서 아바타 값을 조회합니다.
이 값은 Django의 업로드 파일 타입의 객체이고요.
부모 타입인 파일로 타입을 지정했습니다.
이미지 크기를 줄이고 JPG 변환도 한 이미지 데이터는 콘텐츠 파일 타입으로 저장해서 반환하겠습니다.
Pillow의 Image.open 메서드를 통해 업로드된 파일을 여실 수 있고요.
Thumbnail 메서드를 통해 튜플로 이미지의 최대 허용 가로, 세로 크기를 지정하여 썸네일 처리를 합니다.
썸네일 처리에서는 이미지 가로, 세로 비율은 지켜줍니다.
Pillow는 다양한 포맷의 이미지를 지원하는데요.
우리는 JPEG 포맷으로 이미지를 변환할 것이고요.
그러니 업로드된 파일명에서 확장자를 JPG로 바꾼 새로운 파일명이 필요합니다.
업로드된 파일명에서 확장자를 제외한 파일 경로를 추출하고요.
확장자를 추가해서 새로운 파일명을 만들어냅니다.
컨텐트 파일 객체의 이미지 데이터를 JPG 포맷으로 저장하고 반환합니다.
프로필 수정 페이지에서 다시 PNG 이미지를 업로드하면 이렇게 OS 에러가 발생했어요.
에러 메시지를 읽어보면 RGBA 모드의 이미지를 JPEG 포맷으로 저장할 수 없다는 오류입니다. 
PNG 파일은 투명 채널을 지원하거든요.
RGBA는 레드, 그린, 블루 그리고 투명 채널인 알파를 의미합니다.
JPEG는 투명을 지원하지 않으니 이렇게 오류가 발생했습니다.
그럼 RGBA 모드가 아니라 투명인 알파를 뺀 RGB 모드로 먼저 변환한 뒤에 JPG 포맷으로 저장을 하면 됩니다.
convert 메서드를 통해 RGB 모드로 변환된 새로운 이미지 객체를 저장하도록 합니다.
다시 프로필 수정해서 PNG 이미지를 업로드해 보면 이렇게 JPG 파일로 잘 저장이 되었고요. 
이미지 크기는 512 픽셀로 줄어들었고, 파일 포맷도 JPG이고요.
용량은 12.63KB로서 무려 98%나 이미지 크기를 줄였습니다.