수업 노트에 안내된 링크의 페이지에서 블로그 샘플 데이터를 다운받으실 수 있습니다.
이 압축 파일을 다운받아서 노트 데이터를 추가해 주세요.
노트 어드민에서 리스트 디스플레이 속성으로 타이틀 필드를 추가하여 이렇게 등록된 노트
제목을 확인했고요.
노트 모델에서 기본 정렬 옵션으로 기본 키에 대한 내림차순을 지정해 주겠습니다.
포틀로그 앱의 indexView 함수에서 노트 모델에 대한 코디셋을 생성하고요.
그대로 템플릿을 통해 HTML 응답을 렌더링합니다.
최상위 부모 템플릿에 타임라인 링크를 생성하고 포틀로그 인덱스 뷰를 통해 요청이 처리될 수
있도록 링크로 지정해 줍니다.
부트스트랩 5에서는 라이트 테마와 다크 테마를 지원하거든요.
다크 테마 사용을 위해 바디 태그에 데이터BS 테마 속성을 다크로 지정합니다.
그럼 이렇게 다크 테마가 적용이 됩니다.
부트스트랩 앱에서 한 행은 12개의 컬럼으로 구성되는데요.
브라우저 가로 크기가 1200 픽셀 이상인 상황에서는 3개의 컬럼을 차지토록 하면 한 행에
4개씩 보여지겠고요.
브라우저 가로 크기가 992 픽셀 이상인 상황에서는 4개의 컬럼을 차지토록 하면 한 행에
3개씩 보여지겠고요.
브라우저 가로 크기가 768 픽셀 이상인 상황에서는 6개 컬럼을 차지토록 하면 한 행에
2개씩 보여질 것입니다.
각 행간의 구별을 위해 마진탑을 4로 지정했고요.
카드 레이아웃을 사용하겠습니다.
카드 헤더에 노트 제목을 넣고요.
카드 바디에는 노트에 대한 포토 쿼리셋을 렌더링했습니다.
노트에 속한 포토 쿼디셋을 순회하며 등록된 이미지의 url을 렌더링하면 이미지 주소만
보여집니다.
Django 디버그 툴바로 수행된 쿼리 내역을 보시면 포토 개수만큼 추가 쿼리가 수행되어
n 플러스 원 문제가 발생했습니다.
인덱스 뷰에서 프리패치 릴레이티드를 통해 즉시 로딩을 수행해 줍니다.
그러면 이렇게 추가 쿼리 한 개로 현 노트에 속한 모든 포토가 조회됩니다.
노트의 작성자 유저명도 같이 렌더링하고 수행된 코디 내역을 보시면 역시 N플러스원 문제가
발생했습니다. 노트 모델의 외래키 필드인 Author 필드니까 select_related을
통해 즉시 로딩을 수행해 줍니다.
그러면 이렇게 조인 쿼리로 즉시 로딩이 수행되었음을 확인하실 수 있습니다.
태그로 이미지를 보여주겠고요.
이미지 플로이드 클래스를 지정하면 이미지의 최대 크기가 100%로 지정됩니다.
이미지가 크더라도 카드 바디 요소 안에 맞춰 보여지게 됩니다.
이미지 크기 자체가 줄어든 것은 아니고요.
큰 이미지를 작게 보여준 상황입니다.
템플릿 상황에 맞춰 이미지 크기를 줄여서 보여주려면 소울 썸네일과 같은 썸네일 생성
라이브러리를 사용하시면 됩니다.
노트 목록이니까 모든 이미지를 보여주기보다 노트별로 이미지를 하나씩만 보여주면 충분할 듯
한데요. 포토 쿼리셋의 퍼스트 메서드를 활용해서 첫 번째 포토만 조회해서 보여주면 이렇게
노트별로 이미지가 하나씩 보여지는데요.
수행되는 SQL 내역을 보시면 노트 개수만큼 포토 조회 쿼리가 수행되어 M++ 문제가
발생했음을 확인하실 수 있습니다.
인덱스 뷰 함수에서 프리패치 릴레이티드 시에 노트에 속한 모든 포토를 조회했기에 포토
언더바 셋 점 올 매설을 통해 노트에 속한 모든 포토를 조회하면 앞서 즉시 로딩된 내역을
그대로 사용하기에 추가 쿼리가 없지만 포토 셋 점 퍼스트 매설을 사용하면 이는 다른
쿼리이기에 즉시 로딩된 내역을 사용하지 않고 추가로 쿼리가 수행되게 됩니다
이때에는 즉시 로딩된 내역을 사용하기 위해 photoSet.all 메서드를 그대로 활용하고
인덱스 참조를 통해 첫 번째 포토 인스턴스를 조회하면 즉시 로딩된 내역을 그대로 사용하시게
되어 추가 쿼리 없이 노트별로 첫 번째 포토의 이미지만 화면에 보여집니다.