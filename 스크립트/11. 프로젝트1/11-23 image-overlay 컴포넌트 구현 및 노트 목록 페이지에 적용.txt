노트 목록에 현재의 부트스트랩 5의 카드 레이엇이 적용되어 있는데요 장고 컴포넌트 라이브러리 기반에서 이미지 오버레이 컴포넌트를 개발하여 이와 같이 이미지 위에 노트 제목과 작성자 아이디를 배치해 보겠습니다
소스 장고 컴포넌트 폴더에 이미지 언더바 오버레이 폴더를 만들고 같은 이름으로 파이썬 파일, html 파일, css 파일을 생성합니다.
컴포넌트 클래스를 상속받은 오버레이 클래스를 정리하고 레지스터 장식자를 통해 컴포넌트를 시스템에 등록합니다.
관련 템플릿 파일과 css 파일의 경로도 지정합니다.
이미지 오버레이 컴포넌트니까 클래스명도 이미지 오버레이 컴포넌트로 지정하겠고요 같은 클래스명으로 CSS 파일에서 스타일을 지정해 주겠습니다
이미지를 먼저 매치합니다하고 텍스트를 이어 매치합니다합니다
이미지 주소는 일단 기존 이미지의 주소를 복사해서 지정하고요.
스타일을 먼저 잡고 컴포넌트화 컴포넌트화 시키겠습니다.
노트 목록 템플릿인 index.html 템플릿에서 기존 카드 레이아웃은 제거하고요.
이미지 오브레이 컴포넌트를 렌더링해 보겠습니다.
그럼 이렇게 이미지가 먼저 크게 보여지고 아래에 텍스트가 작게 보이죠?
이 텍스트도 의미 있게 변경하고요.
이제 CSS로 스타일을 만들어 보겠습니다.
이미지 태그에 마우스가 올라오는 상황은 CSS에서 hover 선택자를 통해서 지정합니다.
Transition은 지정 시간 동안 스타일을 점진적으로 부드럽게 적용하는 것을 말합니다.
이미지 태그의 크기 변경에 대한 기본 트랜지션을 0.3초로 지정했고요.
컴포넌트의 마우스가 올라가면 이미지의 크기를 0.3초 동안 점진적으로 1.2배로 키웁니다.
컴포넌트에서 마우스가 내려가면 이미지 크기가 다시 0.3초 동안 원복됩니다.
이미지가 1.2배로 커지면서 이미지가 컴포넌트의 영역을 벗어나게 되는데요.
컴포넌트에 overflow, hidden 스타일을 적용하면 컴포넌트 영역을 벗어난 부분은 숨겨지게 됩니다.
오버레이는 이미지와 가로, 세로 크기를 동일하게 맞춰 겹쳐서 배치하겠고요.
상하, 좌우, 가운데 정렬을 위해 flex 레이아웃을 활용하겠습니다.
불투명도, 투명도를 1로 설정하면 해당 요소는 보이는 상황이고요.
투명도를 0으로 설정하면 완전 투명 상황으로 오버레이가 숨겨집니다.
웹페이지 새로고침하시면 이렇게 이미지 가운데에 오버레이 내 텍스트가 배치되었습니다.
오버레이의 배경색을 검정색으로 지정하고, 투명도는 50%로 지정합니다.
투명도를 0으로 설정하면 오버레이는 숨겨질 것이고요.
컴포넌트의 호버 상황에는 오버레이의 투명도를 1로 변경합니다.
그러면 컴포넌트의 마우스가 올려졌을 때에만 오버레이가 보여집니다.
이 오버레이가 조금 천천히 보여지도록 해보겠습니다.
투명도에 대한 트랜지션을 0.5초로 지정했습니다.
그럼 투명도가 0.5초 동안 서서히 적용됨을 확인하실 수 있습니다.
오버레이의 글자 색과 글자 크기도 지정해 줍니다.
이제 스타일 지정은 끝났습니다.
이제 컴포넌트에서 속성 값으로써 링크, 이미지 주소, 텍스트 등을 지원해 보겠습니다.
태그로 감싸서 href 값과 타겟 값이 있다면 각 속성명으로 태그 속성을 지정해 주겠고요.
이미지 주소는 이미지 주소 생성 시에 static, 템플릿 태그 등을 사용할 수 있기에 값 지정을 편리하게 하기 위해 슬롯으로 이미지 주소 지정을 지원하겠습니다.
텍스트 역시 텍스트 문자열 지정 시에 여러 템플릿 태그들이 사용될 수 있기에 슬롯으로 지정해서 값 지정이 편리할 수 있도록 합니다
텍스트 슬롯의 값이 지정되어 채워질 때에만 오버레이를 렌더링합니다
컴포넌트 클래스에서 객 컨텍스트 데이터 메서드를 재정의해서 속성 값을 지원하겠고요.
href 속성 값과 타겟 속성 값을 지원하고 그대로 컨텍스트 데이터로서 전달합니다.
아직 노트에 대한 디테일 페이지를 구현하지 않았으니 이동할 주소가 없어요.
HRF 속성 값은 슬러시로 일단 하드코딩하고 타겟 속성 값도 시험적으로 underscore blank로 지정하여 링크를 클릭하면 새 탭으로 뜨도록 합니다.
이미지 소스 슬롯과 텍스트 슬롯의 값도 지정해 줍니다.
그럼 이렇게 각 노트의 사진과 이미지가 이미지 overlay 컴포넌트로 잘 렌더링이 되어 표현되고 있습니다.
Bootstrap의 GridLayout에 맞춰 컬럼을 배치하려면 컬럼 클래스명 지정이 필요한데요.
컴포넌트에도 클래스 이름의 속성 값을 추가로 지원해 보겠습니다.
그럼 GetContextData 메서드에서 클래스 이름으로 키워드 인자를 받으려고 하면 클래스가 파이썬에서는 예약어이기 때문에 클래스 이름으로 변수 선언이 되지 않습니다.
이때에는 keyword arguments 사전으로 받아서 클래스 이름으로 속성 값을 조회하고 다른 변수명으로 속성 값을 저장하여 context 데이터로 전달하는 방법을 사용하시면 됩니다.
클래스는 파이썬 코드 내에서만 예약이 있기에 Django 템플릿 코드에서는 클래스 이름으로 값을 전달할 수 있습니다.
HTML 템플릿에서는 class 속성으로 class 값을 이렇게 지정하여 렌더링합니다.
그럼 이제 한 행에 여러 컬럼으로 노트들이 Image Overlay 컴포넌트로 표현되고 있습니다. 
그런데 각 이미지의 비율이 제각각이라서 레이아웃이 정돈되지 않은 모습입니다.
이미지가 모두 같은 비율이면 보기 좋을 듯 한데요.
인스타그램처럼 이미지를 업로드 받을 때부터 지정 비율로 동일하게 받으시는 방법도 있고요.
이미지를 저장할 때 지정 비율로 전처리해서 저장하는 방법도 있고요.
혹은 이미지가 보여질 때 서버에서 지정 비율로 이미지를 변환해서 서빙하는 방법도 있고요.
혹은 CSS를 통해 이미지를 지정 비율로 보여줄 수도 있습니다.
CSS로 이미지를 가로, 세로 1대1 비율로 보여주도록 해보겠습니다.
Bootstrap에서는 Ratio 클래스로 이를 지원합니다.
tag에 Ratio 클래스를 먼저 지정하고 Ratio-1x1을 지정하고 태그를 안에 넣으면 이미지를 1대1 비율로 보여주는데 대신 이미지가 찌그러져 보이는데요.
태그에 ObjectFitCover 클래스를 지정하면 이미지 요소가 자신의 컨테이너를 완전히 채우면서 비율을 유지하며 초과하는 부분을 잘라내고 가운데 부분을 1대1 비율로 보여주게 됩니다. 
border 클래스를 지정하여 외곽선을 추가하고요.
rounded 클래스를 지정하여 4개의 모서리를 둥글게 다듬습니다.