이번에는 노트 수정을 구현해 보겠습니다.
노트 생성에 사용했던 노트 폼, 폼클래스에서 Photos 폼필드를 추가했었죠.
그래서 사진 다중 추가만 가능하고요.
노트에 이미 추가된 포토 항목들에 대해서는 수정 혹은 삭제가 안 됩니다.
이를 하려면 일라인 폼셋 팩토리를 활용하시면 편리한데요.
이 부분은 다음 영상에서 다루겠고요 
이번 영상에서는 노트 생성 구현을 그대로 노트 수정 구현으로 적용해 보겠습니다
노트 생성 뷰는 CreateView를 통해서 구현했었죠
수정 뷰는 UpdateView 클래스를 통해서 구현을 시작해 보겠습니다
노트 CreateView와 동일하게 모델 속성, 폼 클래스 속성, 템플릿 네임 속성을 지정하고요 
폼 타이틀은 기록 수정으로 해야겠죠
성공 URL은 이제 노트에 대한 디테일 페이지가 구현되어 있고, 노트 모델의 getAbsoluteURL 메서드에서도 노트의 디테일 페이지 주소 문자열을 반환하고 있습니다. 
그러니 createView, updateView에서 success URL 속성 값이 없다면 자동으로 생성, 수정, 저장 후에 노트 디테일 페이지로 이동할 것입니다.
noteEditView 함수 생성하고요, URL 패턴도 등록해 줍니다.
note-detail.html 템플릿에서도 현 노트에 대한 수정 링크를 추가해줍니다.
페이지 새로고침하면 수정하기 버튼이 보여지고요.
수정하기 버튼은 노트 작성자에게만 노출도록 하겠습니다.
노트 수정 뷰도 노트 작성자에 한해서 요청이 처리되어야 하죠.
getQuerySet 메서드에서 현재 로그인 유저로 조회 조건을 추가하여 작성자가 아닌 유저가 노트 수정 페이지에 접근하면 404 응답을 하겠습니다.
수정 페이지를 열어보시면 이렇게 노트 수정 화면이 잘 보여지는데요.
노트 제목과 내용에 대해서는 수정이 잘 동작할 것이고요.
Photos 항목은 업로드한 이미지에 대한 유효성 검사는 동작합니다만, 수정 뷰에서 업로드한 이미지에 대해서 추가 저장을 아직 하지 않았기에 파일 저장은 아직 되지 않습니다.
무엇보다 기존 업로드한 포토 항목들에 대한 수정 혹은 삭제가 지원되지 않죠 기존 포토 항목들에 대한 수정 혹은 삭제를 위해서는 노트 폼, 폼 클래스와 더불어 일라인 폼셋 팩토리를 통해 추가로 폼셋 처리가 필요합니다
한 개의 폼과 한 개의 폼셋 처리를 하나의 뷰에서 처리해야 하니까 클래스 기반 뷰보다 함수 기반 뷰로 구현하시는 것이 코드 관리가 좀 더 용이합니다 
현재의 노트 업데이트 뷰 구현과 동일한 동작을 하는 함수 기반 뷰로 재구성해보겠습니다.
이렇게 노트 업데이트 뷰 클래스와 동일한 동작을 하는 노트 에디트 뷰 함수를 구현해 봤습니다 
노트 생성 뷰에서는 업로드된 이미지 파일들에 대한 추가 저장을 하는 코드가 있죠
이 코드를 복사해서 노트 에디트 뷰에도 적용해 주겠습니다
그럼 폼을 통해 지정한 이미지들이 지정 노트에 추가됩니다