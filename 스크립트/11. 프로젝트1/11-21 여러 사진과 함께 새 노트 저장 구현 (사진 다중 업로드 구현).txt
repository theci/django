안녕하세요
이번에는 새 노트를 생성 저장하는 노트 뉴뷰를 구현해 보겠습니다
여러 이미지를 업로드 받아서 저장하기 위해 인라인 폼셋 팩토리를 활용할 수도 있는데요
인라인 폼셋 팩토리를 사용하면 업로드 받을 이미지 개수만큼 폼필드를 만들어서 각 폼필드마다 일일이 사진을 하나씩 지정해 줘야 하는 번거로움이 있습니다
그래서 이번 실습에서는 하나의 폼필드에서 다수의 이미지 파일을 업로드 받아서 저장하는 방식으로 구현해 보겠습니다
노트 모델 폼 하나를 통해 새 노트 생성에 대한 모든 폼 필드들을 처리하겠습니다.
CreateView 클래스 기반 뷰를 하나 정리하고요.
노트 모델 지정하고요.
노트 폼 모델 폼은 곧 구현하겠습니다.
포톨로그 앱의 forms.py 경로에 noteform, modelform 클래스를 정의하고요.
note, model에서 author, 작성자 필드는 유저가 입력해서는 안되고, 서버단에서 코드를 통해 자동 지정되어야 하기에 form 필드로 지정해서는 안되고요.
createdat, updatedat 필드로 자동 생성 필드이죠.
그러니 title 필드와 content 필드만 유저로부터 입력을 받도록 합니다.
템플릿은 기존 Crispy Form.html 템플릿을 사용하겠습니다.
새 노트 생성 후에 노트 디테일 페이지로 이동하는 것이 자연스럽지만 아직 노트 디테일을 구현하지 않았죠.
그래서 지금은 인덱스 페이지로 이동을 시키겠고요.
Form 저장 후에 성공 메시지를 추가하기 위해 FormValid 메서드를 재정의합니다.
createView 클래스에 formValid 메서드 구현해 보시면 form.save 호출을 하고 반환 값을 object 멤버 변수에 저장을 하고 있네요.
getSuccess 유하될 메서드 호출해서 성공 유하될 주소를 계산하고 해당 주소로 이동을 합니다.
noteForm을 통해 title 필드와 content 필드만 유저로부터 입력을 받으니 필수 필드인 author 필드 값도 할당해 줍니다.
흐름이 한눈에 파악이 되도록 부모의 폰빌리드 메서드를 호출하지 않고 직접 성공 URL을 계산하고 이동 응답하도록 하겠습니다.
url 패턴에 note-new 뷰 함수를 등록하고요.
최상위 부모 템플릿인 core 앱 내에 base.html 템플릿에서 새 노트 링크도 적용해줍니다.
웹페이지 새로고침하시면 새 기록 링크가 동작하죠.
이렇게 새 기록 입력 폼이 뜹니다.
note-form 폼 클래스의 폼 헬퍼를 통해 기본 레이아웃을 구성해줍니다.
노트 폼 클래스에 사진 폼필드를 추가합니다.
이렇게 이미지 필드 폼필드를 추가하면 이미지를 한 장씩만 업로드 받고요.
이미지 하나에 대한 유효성 검사만 수행합니다.
폼필드니까 유효성 검사까지만 수행하고 저장은 지원해 주지 않죠.
우리가 클린드 언더바 데이터 사전 값을 참조해서 직접 구현해 줘야만 합니다.
하나의 폼필드에서 여러 개의 이미지 파일 업로드를 지원하기 위해 ImageField 폼필드를 상속받은 MultipleImageField 폼필드 클래스를 새롭게 정의하고요.
위젯도 새롭게 정의할 MultipleFileInput 클래스로 지정합니다.
클리어볼 파일 인풋 위젯은 이미지 필드 폼필드의 디폴트 위젯이고요.
allowMultipleSelected 속성이 디폴트로 거짓으로 지정되어 있습니다.
이 속성을 참으로 지정해 주시면 위젯 렌더링 시에 멀티플 속성이 자동으로 추가됩니다.
인풋 타입 파일 요소에서 멀티플 속성이 있으면 브라우저에서 이미지 파일을 한 번에 여러 개 지정해서 업로드할 수 있습니다.
브라우저 새로고침하시고 포토스 요소를 보시면 이렇게 멀티플 속성이 추가되어 있음을 확인하실 수 있고요. 
이미지 파일도 이렇게 여러 개 지정할 수 있습니다.
이미지 파일을 하나 선택하고 폼 제출을 해보시면 등록된 파일이 없습니다.
인코딩 형식을 확인하세요라는 유효성 검사 에러 메시지를 받습니다.
분명 파일을 제출했는데 왜 이런 오류가 발생하는 것일까요?
블라우저 단에서는 Multiple 속성 지정을 통해 다수의 이미지 파일을 서버로 전달하지만, 
다수 이미지 파일을 받아서 처리하는 Multiple Image Field 폼필드에서는 단일 이미지 파일에 대해서만 유효성 검사를 수행할 수 있을 뿐, 여러 이미지 파일에 대해서 유효성 검사를 수행하는 기능은 없습니다.
Multiple Image Field Form Field의 유효성 검사 및 값 변환 함수인 Clean Method에서는 전달받은 값이 단일 파일인 줄 알고 처리하려고 했는데 파일 리스트로 값을 받으니 예상했던 파일 타입과 달라서 이미지 파일에 대한 유효성 검사 자체를
시도조차 못하고 실패한 상황입니다.
멀티플 이미지 필드 클래스에 클린 메서드를 제정해야 합니다.
그리고 부모의 클린 메서드는 단일 파일에 대한 유효성 검사가 구현되어 있거든요.
그러니 아직 부모의 클린 메서드를 호출하진 마시고요.
이렇게 함수로 잠시 지정해 두시고요.
formField 값이 List라면 이 List는 이미지 파일 리스트입니다.
리스트에서 파일을 하나씩 꺼내요.
개별 클린 함수를 적용하고 그 반환 값으로 리스트를 구성해서 반환하고요.
리스트가 아니라면 단일 파일일 테니 클린 함수를 적용하고 반환값을 반환합니다.
현재 상황에서는 데이터 값은 항상 리스트일 것입니다.
웹페이지에서 다시 이미지를 여러 지정해서 업로드하시면 이번에는 유효성 검사 에러가 발생하지 않습니다.
Multiple Image Field 폼필드에서 오류 없이 잘 처리된 상황이에요.
이제 Note Form 클래스에서 Photos 필드에 대한 유효성 검사 및 값 변환 함수 CleanPhotos 메서드를 구현해서 Form 유효성 검사 단계에서 업로드된 이미지 파일들에 대해서 이미지 크기 조정 및 JPG 변환을 수행하겠습니다.
이를 폼 유효성 검사 단계에서 수행하는 이유는 이미지 변환에 실패하면 유효성 검사 에러를 응답하기 위함이고요.
유효성 검사 이후에 이미지 변환을 했는데 만약 실패한다면 유저에게 에러 피드백을 주기 이미 늦은 거죠. 
유효성 검사 단계에서 이미지 변환까지 모두 수행하고 유효성 검사를 통과한 이후에는 파일 저장만 수행하겠습니다.
클린 언더바 데이터 사전에서 포토스 필드 값을 꺼내고요.
이는 파일 리스트입니다.
노트 저장에서 최소 1개의 이미지는 받도록 유효성 검사 로직을 추가합니다.
업로드된 이미지가 있을 경우 콘솔 창에 출력도록 하고 여러 이미지를 업로드해 보시면 이렇게 파일 리스트가 확인됩니다.
현재 포토 모델에서는 저장 전에 이미지 변환을 해주는데요.
이미지 변환 로직을 별도 함수로 빼서 이미지 변환 로직을 폼에서도 호출할 수 있도록 하겠습니다. 
인자로 원본 파일 객체와 이미지 가로 세로 픽셀 크기를 바꾸어 변환된 이미지를 메모리 파일 객체에 저장하고 반환합니다.
JPG 저장 품질도 인자로 받도록 하고 디폴트 값은 80%로 지정했습니다.
80% 정도면 적절한 타협점 같습니다.
BeforeSaveHook에서도 이 MakeThumbBook 클래스 함수를 호출하여 이미지 변환을 처리도록 합니다.
개발 서버에서 오류가 발생했는데요.
컨텐트 파일을 django core files 경로에서 임포트 할 수 없다고 합니다.
파이참에서 추천해 준 대로 임포트를 했는데요.
컨텐트 파일은 이 경로가 아니라 django core files base 경로에서 임포트 하셔야 합니다.
어드민에서 이미지 파일을 다시 업로드해 보시면 jpg 키 에러가 발생하네요.
이는 MakeSumMethod 내에서 jpg 저장 시에 jpg 포맷명을 jpeg로 지정하지 않아서이고요.
수정한 후에 다시 이미지 파일을 업로드해 보시면 이미지 변환이 잘 동작합니다.
이미지가 JPG 파일이고 이미지 크기가 1024 픽셀 이하면 이미지 변환이 필요 없잖아요?
그러니 이미지 가로 크기가 1024 픽셀 이상이거나 이미지 파일 확장자가 JPG가 아닐 경우에만 포토 모델 인스턴스 저장 직전에 이미지 변환을 수행하도록 하겠습니다.
pillow 이미지 객체의 size 속성은 정수 타입으로서 이미지의 byte 크기를 나타내고요. 
이미지 가로 크기는 width 속성이고, 세로 크기는 height 속성입니다.
makethumb 함수는 class 함수로서 photo 클래스를 통해 직접 호출할 수 있습니다. 
이제 NoteForm 클래스에서 값 변환 시에 개별 파일마다 호출하여 이미지 변환된 파일 객체로 새로운 리스트를 구성하겠고요.
MakeThumbMethod 호출 시에 이미지 가로, 세로 크기 지정도 필요하잖아요.
이 부분은 Default 인자로 지정해서 포토 모델 내에서만 크기를 지정하도록 하겠습니다.
이제 NoteForm 클래스를 통해 처리된 이미지 파일들은 이미지 변환까지 모두 수행됩니다. 
포토스 필드는 폼 필드인 모델로부터 자동 생성된 필드가 아니죠
그러니 관련 모델로의 자동 저장이 없습니다
노트 크레이트 뷰에서 유효성 검사 후에 노트 저장하고 나서 이미지 리스트를 꺼내어 포토 모델 인스턴스로 저장하도록 하겠습니다
파일 리스트를 인자로 받아 새로운 포토 레코드를 생성하는 로직은 Photo 모델 내에 createPhotos 클래스 함수로 구현하겠습니다
부모가 될 노트 모델 인스턴스를 인자로 바꾸어 노트 레코드와 외래키 관계를 맺으려면 노트 레코드는 반드시 저장이 되어 기본키로 할당된 상태여야 하거든요.
그러니 기본키가 없는 노트의 경우에는 ValueError 예외를 발생시킵니다.
인자로 전달받은 파일 리스트를 순회하며 새로운 포토 모델 인스턴스를 생성하고요.
ImageField의 save 메서드를 통해 파일 시스템에 이미지 파일을 저장하고요.
bulk create 함수를 통해 다수의 포토 인스턴스들을 하나의 쿼리로 데이터베이스에 저장합니다.
웹페이지 새로고침하시고, 제목, 내용 지정하시고, 이미지 파일도 여러 지정하시어 저장해 보시면, 이번에는 Attribute Error가 발생합니다.
에러 메세지를 읽어보면, 논 객체에는 언더바 속성이 없다고 합니다.
현재 요청내역대로 노트와 포트까지 모두 저장이 된 상황이고요.
오류가 발생한 부분은 Get Success URL 메서드입니다.
구현 코드를 보시면 Success URL의 속성 값이 있을 경우 self.object 모델 인스턴스의 필드 값들을 사전 객체로 참조하여 문자열을 조합하고 있네요.
그런데 이 object 멤버 변수가 non이라서 발생한 오류입니다.
오브젝트 멤버 변수는 CreateView의 formValid 기본 구현에서 form.Save 메서드를 호출하고 관련 모델 인스턴스를 오브젝트 멤버 변수로 저장하는 코드가 있거든요
그런데 우리는 CreateView의 formValid 메서드를 호출하지 않고 이를 직접 구현하고 오브젝트 멤버 변수 할 땅도 없었죠
그러니 오브젝트 멤버 변수가 기본 값인 논인 상황입니다
관련 모델 인스턴스를 오브젝트 멤버 변수로 저장토록 하시고 다시 동작을 확인해 보시면 새 기록을 저장했습니다 라는 성공 메시지가 떴고요.
어드민을 통해 노트와 포토 내역을 조회해 보시면 새로운 노트와 여러 사진 파일들이 잘 저장되었음을 확인하실 수 있습니다.



1. 노트 모델 및 폼 구성
노트 모델:
title과 content 필드는 사용자가 입력합니다.
author 필드는 서버 측에서 자동 지정됩니다 (사용자가 입력하지 않음).
created_at과 updated_at 필드는 자동 생성됩니다.
노트 폼:
title과 content만 유저 입력을 받도록 설정.
이미지는 하나의 폼 필드에서 여러 파일을 받을 수 있도록 처리.
MultipleImageField라는 커스텀 폼 필드를 만들어 다수의 이미지 파일을 처리합니다.
2. 폼 클래스 및 인라인 폼셋 대체
기존 방식: 인라인 폼셋 팩토리를 사용하면 이미지 파일을 하나씩 지정해야 하므로 번거로움이 있음.
새로운 방식: 하나의 폼 필드에서 여러 이미지를 한 번에 업로드 받는 방식으로 구현.
3. 폼 필드 구현
MultipleImageField: 기존의 ImageField를 상속받아 다수의 이미지 파일을 처리할 수 있는 폼 필드를 구현.
위젯 구현: MultipleFileInput 클래스를 만들어서 이미지 파일을 한 번에 여러 개 업로드할 수 있도록 multiple 속성을 추가.
폼 유효성 검사: 여러 이미지를 업로드 받으면 clean 메서드에서 파일 리스트를 순차적으로 검사하고, 각 이미지에 대해 유효성 검사 및 변환을 수행합니다.
4. 이미지 변환
이미지 변환 기능 추가:
이미지 파일 크기 조정 및 JPG 변환을 폼에서 처리.
유효성 검사 후에 이미지 변환을 시도하며, 변환에 실패할 경우 에러를 반환하도록 처리.
이미지 변환 로직:
변환 로직을 별도의 함수로 분리하여 MakeThumbBook 클래스를 통해 처리.
가로 1024픽셀 이상이거나 JPG가 아닌 파일만 변환하도록 조건 추가.
5. 노트 및 이미지 파일 저장
Note와 Photo 모델 저장:
폼 유효성 검사를 통과한 후, 업로드된 이미지 파일을 Photo 모델로 저장합니다.
Photo 모델에 이미지를 저장하기 위해 createPhotos라는 클래스를 생성하여 여러 이미지를 한 번에 저장합니다.
bulk_create를 사용하여 다수의 이미지를 효율적으로 저장합니다.
6. 새 노트 생성 뷰 (CreateView)
CreateView 구현:
CreateView 클래스를 사용하여 새로운 노트를 생성하는 뷰를 구현.
form_valid 메서드를 재정의하여 노트를 저장한 후 이미지 파일을 Photo 모델로 저장합니다.
저장 후에는 get_success_url을 통해 성공 페이지로 리다이렉션합니다.
7. 템플릿 구현
폼 템플릿: crispy_forms를 사용하여 폼을 렌더링하고, 이미지 파일을 업로드할 수 있는 multiple 속성을 가진 input 요소를 추가합니다.
성공 메시지 처리: 노트가 저장되면 "새 기록이 저장되었습니다"라는 성공 메시지를 표시하고, 이후 인덱스 페이지로 리다이렉트합니다.
8. 폼 필드 유효성 검사
파일 리스트 검사: 폼 필드에서 받은 파일 리스트에 대해 유효성 검사를 수행하고, 각 이미지에 대해 크기 조정 및 포맷 변환을 처리합니다.
클린 메서드: MultipleImageField 폼 필드의 clean 메서드를 커스터마이즈하여 여러 이미지를 처리하도록 개선.
9. 에러 처리
이미지 저장 오류: 이미지 변환 또는 파일 저장에서 오류가 발생할 경우 에러 메시지를 제공하고, 이를 폼에서 처리합니다.
컨텐츠 파일 경로 수정: django.core.files 경로로 임포트 문제를 수정하여 에러를 해결합니다.
10. 성공 URL 및 리다이렉션
get_success_url: CreateView의 form_valid 메서드에서 노트를 저장하고 성공 URL을 계산하여 리다이렉션합니다.
오브젝트 저장: form_valid에서 self.object가 None으로 초기화되어 있어, 이를 명시적으로 저장하고 처리 후 성공 URL을 반환하도록 수정.
11. 테스트 및 디버깅
이미지 업로드 및 저장 테스트:
여러 이미지를 업로드하고, 저장 후 Photo 모델에서 이미지를 확인합니다.
노트와 이미지 파일들이 잘 저장되었음을 확인합니다.
에러 해결:
AttributeError 및 ValueError 등의 오류를 수정하여 정상적으로 동작하도록 합니다.
이미지 변환 및 저장 로직을 다시 점검하여 모든 과정이 순차적으로 진행되도록 수정합니다.
12. 최종 결과
새 노트를 생성하면서 여러 이미지를 한 번에 업로드하고, 이미지 변환과 저장이 잘 이루어집니다.
노트와 이미지 파일들은 각각 Note와 Photo 모델에 저장되며, 관련 정보가 어드민에서 확인 가능합니다.
요약
노트 모델 및 폼 설정: 제목, 내용, 이미지 업로드 필드를 설정하여 폼을 구성.
MultipleImageField와 이미지 위젯: 여러 이미지를 한 번에 업로드할 수 있도록 폼 필드를 커스터마이즈.
이미지 변환: 폼 유효성 검사 단계에서 이미지 크기 조정 및 포맷 변환을 처리.
노트와 이미지 저장: Photo 모델을 사용하여 여러 이미지를 한 번에 저장.
뷰 및 템플릿: CreateView를 사용하여 새 노트를 생성하고, 성공 후 리다이렉션.
에러 처리 및 디버깅: 이미지 저장 및 변환에서 발생한 오류를 해결하고 정상 동작을 확인.