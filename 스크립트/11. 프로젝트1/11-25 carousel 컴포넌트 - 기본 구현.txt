현재 이미지가 세로로 나열되어 있는데요.
Django 컴포넌트 라이벌을 통해 캐럿셀 컴포넌트를 개발하여 여러 개의 이미지를 슬라이드 쇼 인터페이스로 보여주겠습니다.
좌우에 다음 이전 버튼도 제공하고요.
스와이프 액션으로 이미지를 넘길 수 있도록 하고요.
하단에 현재 이미지의 인덱스로 표시합니다.
이는 부트스트랩 5에서 제공하는 carousel 기능을 활용해서 컴포넌트를 구성해 보겠습니다.
note-detail.html 템플릿에서 carousel 컴포넌트를 사용하겠습니다.
이미지 목록은 포토 코디셋에 있으니 포토리스트 이름의 속성 값으로 전달하겠고요.
각각의 포토에서 이미지 속성에 url 속성에 이미지 주소가 있음을 attributeName 속성 값으로 전달하겠습니다.
그럼 carousel component에서 알아서 이미지를 보여줄 것입니다.
carousel component는 파이썬 파일, html 파일, css 파일, javascript 파일이 모두 필요합니다.
4개의 빔 파일을 생성해 주시고요.
파이썬 파일에서 carousel component 클래스를 정의하고 의존하는 html, css, javascript 파일 경로를 지정합니다.
속성 값으로는 PhotoList와 AttributeName을 지원하겠고요 PhotoList 속성 값은 필수 속성 값으로서 디폴트 인자를 지정하지 않겠습니다
PhotoList 속성 값이 만약 이미지 주소 문자열로 구성된 리스트의 경우에는 AttributeName 지정이 필요 없으니 AttributeName 속성 값에 대한 디폴트 값을 지정하여 Option 속성 값으로 사용하겠습니다
attributeName 속성값은 마침표를 구분자로 해서 리스트로 변환하고요.
각 포토마다 속성값 리스트로 이미지 URL 문자의 값을 참조하여 리스트를 구성하고 컨텍스트 데이터로 전달합니다.
페이지 새로고침하면 Carousel로 등록되지 않은 컴포넌트라고 하는데요.
앞서서 캐로셀 클래스 코드에서 등록 장식자에 컴포넌트 이름을 엉뚱하게 지정했었습니다.
컴포넌트 이름을 Carousel로 수정하고 새로고침하시면 웹페이지에 오류가 없죠.
Carousel HTML 템플릿이 아직 빈 파일이기에 Carousel이 아직 보여지지 않은 것일 뿐 Carousel 클래스는 오류 없이 동작하고 있습니다.
Carousel HTML 템플릿에서 컴포넌트로부터 전달받은 이미지 URL 리스트를 순회 돌며 이미지를 보여주면 이미지가 이렇게 잘 보여집니다.
Bootstrap 5에서는 Carousel 클래스를 지정하고 CarouselInner 클래스로 Carousel 항목들을 감싸고요.
각각의 Carousel 항목들은 CarouselItem 클래스로 감쌉니다.
처음 노출할 항목에 active 클래스를 지정하면 그 항목부터 보여집니다.
첫 번째 항목부터 보여줄 것이기에 첫 번째 항목에만 active 클래스를 지정합니다.
캐로셀의 이전, 다음 버튼은 코드가 조금 긴데요.
Bootstrap 사이트에서 복사해 보겠습니다.
Bootstrap 공식 사이트 접속하시고요.
상단 검색 버튼 클릭하시고, 캐로셀로 검색하시면, 캐로셀의 How It Works 문서가 있습니다. 열어주세요.
페이지 스크롤 조금 내려 보시면, 이전, 다음 버튼에 대한 HTML 코드가 있습니다.
이를 복사해서 캐로셀 컴포넌트에 적용합니다.
페이지 새로고침하시면 이전, 다음 버튼이 보여지는데요
클릭하면 동작하지 않습니다
이전, 다음 버튼에서는 데이터 data-bs 타겟 속성으로 캐롯셀 요소의 아이디를 지정해 줘야만 하는데요 
그런데 현재 엉뚱한 아이디가 지정되어 있죠
그래서 이전, 다음 버튼이 동작하지 않은 것입니다 임의로 캐러셀에 아이디를 동일하게 부여하고요 
페이지 새로고침하여 캐러셀 동작을 확인해 보면 이전, 다음 버튼이 잘 동작합니다
각 이미지의 비율이 달라서 캐러셀 크기가 들쑥날쑥해지네요.
공식 문서에서 스크롤을 조금 내려 보면 인디케이터 예시가 있습니다.
캐러셀 인디케이터스 항목을 복사해서 적용합니다.
여기에도 데이터BS 타겟 속성으로 캐러셀 아이디를 지정하죠.
아이디를 맞춰줍니다.
캐러셀 인디케이터스 내에서 버튼이 이미지 개수만큼 반복됩니다.
그러니 이미지 URL 리스트를 순회하며 이미지 개수만큼 버튼을 렌더링 하겠고요 
첫 번째 항목에만 액티브 클래스를 지정하고요 각 버튼에는 data-bs 슬라이드2 속성으로 0부터 1씩 증가하는 인덱스를 지정해 줘야만 합니다.
장고 템플릿 문법에서 for 반복문에서는 for loop.counter 값을 통해 반복문 내에서 매 순회시마다 0부터 1씩 증가하는 값을 참조할 수 있고요.
1부터 1씩 증가하는 값이 필요하시다면 for loop.counter 값을 참조하시면 됩니다. 
페이지 새로고침하시면 이미지 하단에 현재 이미지 인덱스가 Bootstrap 기본 스타일로 보여지고 있습니다.
이 Carousel Indicators 부분을 CSS로 커스텀하실 수 있습니다.
Carousel 컴포넌트의 CSS 파일을 열어주시고요.
Carousel 컴포넌트의 Carousel Indicators의 버튼 항목들에 대해서 가로, 세로 크기를 동일하게 지정하고, 보도레디어스, 경계 모서리 스타일을 50%로 주시면 12픽셀 지름의 원으로 스타일이 변경됩니다.
그리고 각 이미지는 이렇게 마우스로 드래그가 가능한데요.
CSS로 이미지 드래그를 비활성화 시킬 수 있습니다.
이제 이미지가 드래그 되지 않습니다.
현재 캐러셀 컴포넌트에는 이미의 아이디로 고정되어 있습니다.
캐롯셀 컴포넌트가 한 페이지 내에서 여러 번 사용될 수도 있을 텐데요.
모든 캐러셀 컴포넌트가 같은 아이디를 가지고 있을 경우 이전, 다음 액션이 첫 번째 캐러셀 컴포넌트를 통해서만 동작하게 될 것입니다.
캐러셀 컴포넌트마다 아이디를 서로 다르게 지정해 줘야만 하는데요.
그런데 매번 수동으로 아이디를 지정할 수는 없겠죠?
자동으로 난수로 아이디를 생성해서 지정해주면 좋을 듯 합니다.
Carousel Python 클래스에서 난수를 생성하여 컨텍스트 데이터로 전달할 수 있겠고요. 
지금은 난수 아이디를 생성해주는 커스텀 템플릿 태그 generateUID4를 개발해서 활용해 보겠습니다.
generateUID4 템플릿 태그가 난수 아이디를 생성해 준다면 그 아이디를 이렇게 지정만 해주면 되겠죠.
이 템플릿 태그는 UUID _ 태그스 이름으로 구현하겠고요.
미리 로드해 주겠습니다.
Django 템플릿 태그는 반드시 Django 앱 내에 템플릿 태그스 이름의 폴더에 구현해야만 합니다.
그 Django 앱이 Installed Apps List에 등록되어 있다면 Django 템플릿 내에서 로드할 수 있습니다.
코어 앱의 템플릿 태그스 디렉토리에 uuid_tags.py 이름의 새 파일을 생성합니다.
이 파일명으로 템플릿에서 로드하는 거예요.
generate__uid4 함수를 정의하고 simple 태그 장식자를 통해 custom template 태그로 등록합니다.
호출되면 uid4 함수를 통해 32글자 난수 uid 문자열을 반환하겠습니다.
값 확인을 위해 템플릿 내에서 랜덤 아이디 값을 찍어보겠고요.
페이지 새로고침하면 uuid-tags가 등록되지 않은 태그 라이브러리이라고 하네요.
uuid-tags.py 파일 생성 후에 장고 개발 서버가 재시작된 적이 없죠.
수동으로 개발 서버를 재시작시켜줍니다.
그럼 이렇게 랜덤 아이디 값이 확인되고요.
페이지 새로고침할 때마다 매번 다른 아이디가 생성됩니다.
generate_uid4 템플릿 태그의 인자를 지원해 보겠습니다.
최대 길이 인자 length를 받아서 지정 길이만큼 잘라서 반환하겠고요.
그럼 length=8을 지정하면 랜덤ID는 8글자로 생성됩니다.
그리고 prefix 인자를 지원해 보겠습니다.
prefix 인자가 지정되면 랜덤ID 앞에 prefix 문자열을 붙여서 반환합니다.
페이지 새로고침하시면 지정된 프리픽스가 적용된 랜덤ID를 확인하실 수 있습니다.
캐로셀 템플릿에서 랜덤ID 확인용으로 추가한 코드는 제거합니다.



1. 슬라이드쇼 인터페이스 구현
목표: 여러 이미지를 슬라이드쇼 형태로 보여주기 위해 Bootstrap 5의 carousel 컴포넌트를 활용합니다.
이미지들에 좌우 버튼, 스와이프 액션 등을 제공하여 사용자에게 직관적인 인터페이스를 제공합니다.
하단에는 현재 이미지의 인덱스를 표시합니다.
2. 템플릿 구성
사용할 템플릿: note-detail.html 템플릿에서 캐로셀을 사용합니다.
사진 목록: Photo 객체 리스트를 PhotoList라는 속성 값으로 전달하여, 이미지 URL을 AttributeName 속성으로 연결합니다.
필요한 파일들: 파이썬 파일, HTML 파일, CSS 파일, JavaScript 파일 4개가 필요합니다.
파이썬 파일: Carousel 컴포넌트 클래스 정의.
HTML 파일: Bootstrap Carousel 구조를 정의.
CSS 파일: 스타일을 수정하여 슬라이드쇼를 최적화.
JavaScript 파일: 스와이프 및 버튼 동작을 처리.
3. Carousel 컴포넌트 구현
Python 파일:

Carousel 클래스를 생성하고, PhotoList와 AttributeName을 속성 값으로 받도록 합니다.
PhotoList는 필수 속성이고, AttributeName은 옵션으로 설정합니다.
AttributeName 속성 값은 .(점)을 기준으로 나누어 리스트로 변환하여, 각 포토 객체에서 이미지 URL을 참조합니다.
HTML 템플릿:

carousel을 사용하여 이미지들을 슬라이드쇼로 표시합니다.
각 이미지 항목은 carousel-item 클래스로 감싸고, 첫 번째 항목에만 active 클래스를 추가하여 처음에 보이도록 합니다.
이전/다음 버튼을 추가하여 사용자가 슬라이드를 제어할 수 있도록 합니다.
이미지 인덱스를 하단에 표시하기 위해 인디케이터를 사용합니다.
4. 이전/다음 버튼 적용
Bootstrap에서 제공하는 Carousel HTML 코드를 참고하여, data-bs-target 속성으로 Carousel 아이디를 지정합니다.
페이지에서 이전/다음 버튼이 잘 동작하지 않는 경우:
이유: 버튼의 data-bs-target 속성에 잘못된 아이디가 설정되어 있기 때문입니다.
해결 방법: Carousel의 ID를 임의로 지정하여 버튼이 올바르게 동작하도록 합니다.
5. 이미지 크기와 비율 문제 해결
문제: 각 이미지의 비율이 다르므로 Carousel의 크기가 들쑥날쑥해집니다.
해결 방법:
Bootstrap 5의 Carousel 인디케이터를 활용하여 인디케이터를 추가하고, 각 버튼에 이미지 개수만큼 인디케이터를 렌더링합니다.
이미지의 비율을 일정하게 맞추기 위해 CSS로 커스터마이징합니다.
6. 캐러셀 인디케이터와 버튼 스타일링
인디케이터 스타일링: 인디케이터를 원형으로 보이도록 하기 위해 border-radius: 50%로 설정하고, 크기를 일정하게 맞춥니다.
드래그 비활성화: 이미지를 드래그할 수 없게 하기 위해 draggable="false"를 CSS로 설정합니다.
7. 동적으로 고유한 ID 생성
문제: 여러 Carousel이 하나의 페이지에 있을 경우, 각 Carousel의 id가 동일하면 동작하지 않습니다.
해결 방법:
각 Carousel에 고유한 ID를 자동으로 부여합니다.
이를 위해 UUID를 사용하여 난수 아이디를 생성하는 템플릿 태그 generateUID4를 작성합니다.
generateUID4 템플릿 태그는 length와 prefix를 인자로 받아서 고유한 ID를 생성합니다.
8. Custom Template Tag 구현
템플릿 태그 구현: Django 템플릿 태그는 django.template.Library를 이용해 정의하고, 이를 템플릿에서 로드하여 사용할 수 있습니다.
uuid_tags.py 파일을 core/templatetags/ 디렉토리에 생성하고, generateUID4 함수를 작성합니다.
이 템플릿 태그를 사용하여 랜덤 ID를 생성하고, 이를 Carousel 컴포넌트에 적용합니다.
9. 최종 결과 확인
페이지 새로 고침: 랜덤으로 생성된 ID가 각 Carousel에 적용되어, 여러 Carousel이 동일 페이지에 있을 때도 각자 독립적으로 동작합니다.
UI 확인: 캐로셀의 이전/다음 버튼과 인디케이터가 잘 동작하고, 각 이미지가 슬라이드쇼 형태로 잘 보여집니다.
10. 최종 조정
CSS나 JavaScript로 필요한 추가 스타일링을 통해 최종적으로 Carousel의 기능을 완성합니다.
이미지 URL 리스트나 Carousel ID 관련 문제를 해결하여 완전한 슬라이드쇼 기능을 구현합니다.
