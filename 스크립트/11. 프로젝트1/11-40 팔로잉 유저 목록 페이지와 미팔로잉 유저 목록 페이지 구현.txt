안녕하세요 이번 시간에는 현재 로그인 유저의 팔로잉 유저 목록과 아직 팔로잉 하지 않는 유저 목록을 확인할 수 있는 페이지를 구현해 보겠습니다
팔로잉 유저 목록 페이지를 통해 팔로잉 유저를 손쉽게 확인할 수 있고 언파일도 할 수 있고요 
아직 팔로잉 하지 않는 유저 목록 페이지를 통해 새로운 유저를 찾아서 손쉽게 팔로잉 할 수 있게 됩니다
포트폴리오 앱에서 팔로잉 유저 리스트 뷰와 디스커버 유저 리스트 뷰를 통해 구현해 주겠습니다
각 뷰에서는 팔로잉 관계 파악이 필요하기 때문에 로그인이 필수예요
그래서 로그인 required 장식자를 적용해 주고요 최상위 부모 템플릿에 두 페이지의 링크를 추가하겠고요
아직 뷰 구현이 없어서 반환 값이 없기에 페이지에 방문하면 ValueError 예외가 발생합니다 
현재 요청 유저의 팔로잉 유저를 조회하는 쿼리셋은 요청 유저의 전체 팔로잉 유저 쿼리셋에서 현 요청 유저는 제외하면 됩니다
그리고 템플릿 내에서 각 유저의 아바타 이미지도 보여줄 것이기에 프로필 필드에 대해서도 즉시 로딩을 수행해 줍니다
템플릿 응답은 포톨로그의 userlist.html 템플릿을 통해 응답을 하겠습니다.
현재 요청 유저가 미 팔로잉, 즉 팔로잉하지 않은 유저를 조회하는 쿼리셋은 요청 유저의 전체 팔로잉 유저를 제외하고요.
추가로 요청 유저까지 제외하면 됩니다.
위 팔로잉 유저 리스트 뷰 응답과 비교해서 다른 것은 유저 목록과 팔로잉 여부만 다르니까요
템플릿 응답은 위와 동일하게 포토로그의 userlist.html 템플릿을 사용하겠고요 유저 리스트 html 템플릿을 두 케이스를 모두 커버하도록 구성하겠습니다
UserList.html 템플릿에서 UserList 쿼리셋을 그대로 출력해 보겠고요.
그러면 팔로잉 페이지에서의 팔로잉 중인 유저명을 확인하실 수 있고, 찾기 페이지에서는 아직 팔로잉하지 않은 유저명을 확인하실 수 있습니다.
userlist.html 템플릿의 레이아웃을 구성해 보겠습니다.
Bootstrap의 그리드 레이아웃을 활용하겠고요.
각 유저는 카드 레이아웃으로 정보를 표현하겠습니다.
각 유저마다 보여지는 데이터의 길이가 달라서 각 카드의 세로 크기가 다를 수 있는데요.
H100 클래스를 지정하면 한 행에서의 카드 레이아웃의 세로 길이가 서로 달라도 긴 쪽으로 동일하게 맞춰집니다.
카드 헤더에 유저의 아바타 이미지와 유저명을 보여주겠고요.
아바타 이미지가 등록되지 않은 유저일 경우 아이콘 폰트로 대신 보여주겠습니다.
유저명 텍스트에는 유저 페이지 링크로 걸어줍니다.
카드 바디에는 그 유저의 자기소개를 보여주면 좋을 듯합니다.
자기소개 필드는 유저 모델이나 프로필 모델에 아직 없어요.
자기소개 필드를 추가하신 후에 이 위치에 한번 노출시켜 보세요.
카드 푸터에는 팔로잉 버튼을 노출하겠습니다.
뷰로부터 팔로잉 여부인 isFollower 플래그 인자를 전달받아서 플래그 값에 따라서 팔로잉 버튼을 보여주면 됩니다.
그런데 이 팔로잉 버튼은 우리가 포톨로그에 underbar-user-follow.html 템플릿에 이미 구현을 다 해두었었죠.
이 템플릿을 include 하고요.
isFollower 인자와 userName 인자를 전달해 줍니다.
그럼 이렇게 팔로잉 유저 목록과 아직 팔로잉하지 않은 유저 목록을 확인하실 수 있고요
아직 팔로잉하지 않은 유저 4를 팔로잉할 수 있고요 클릭하면 페이지 새로고침 없이 htmx를 통해서 팔로잉 처리가 됩니다
페이지 새로고침하시면 팔로잉하지 않은 유저 목록에서 유저 4는 빠졌고요
팔로잉 유저 목록에서 유저 4를 확인하실 수 있습니다
이번에는 유저 2를 언팔하고요 아직 팔로잉하지 않은 유저 목록에 가보시면 유저 2를 확인하실 수 있습니다




이번 시간에 다룬 내용은 팔로잉 유저 목록과 팔로잉하지 않은 유저 목록을 확인하고 관리할 수 있는 페이지를 구현하는 방법입니다. 
구현 과정은 크게 팔로잉 유저 리스트와 디스커버리 유저 리스트 뷰를 통해 이루어지며, 각 페이지에서 팔로잉/언팔로잉을 동적으로 처리할 수 있습니다. 아래는 구현 흐름을 정리한 내용입니다.

1. 로그인한 사용자만 접근 가능
팔로잉 유저 목록 및 팔로잉하지 않은 유저 목록은 로그인한 유저만 조회할 수 있습니다.
LoginRequiredMixin 장식자를 이용하여 로그인되지 않은 사용자가 접근할 수 없도록 합니다.
2. 팔로잉 유저 목록 조회
로그인한 요청 유저의 팔로잉 유저를 조회하는 쿼리셋을 작성합니다.
요청 유저의 팔로잉 유저 쿼리셋에서 자기 자신을 제외합니다.
팔로잉 유저 목록 페이지에서는 이 쿼리셋을 userlist.html 템플릿으로 전달하여 표시합니다.
프로필 필드(예: 아바타 이미지)를 즉시 로딩(select_related)하여 효율적으로 조회합니다.
3. 팔로잉하지 않은 유저 목록 조회
요청 유저가 팔로우하지 않은 유저들을 조회하는 쿼리셋을 작성합니다.
요청 유저의 팔로잉 목록을 제외한 유저들을 쿼리로 필터링하고, 요청 유저 자신도 제외합니다.
이 쿼리셋도 마찬가지로 userlist.html 템플릿으로 전달하여 표시합니다.
4. 공통 템플릿 userlist.html
userlist.html 템플릿에서 두 페이지의 유저 목록을 동일한 방식으로 출력합니다.
팔로잉 유저 목록에서는 팔로잉 중인 유저들만, 디스커버리 유저 목록에서는 아직 팔로우하지 않은 유저들을 보여줍니다.
유저는 카드 레이아웃으로 표현되며, 각 유저의 아바타 이미지, 이름, 자기소개 등을 보여줍니다.
카드 하단에 팔로잉 버튼을 추가하고, 팔로잉 여부에 따라 버튼의 상태가 바뀌게 합니다.
5. 레이아웃 구성
Bootstrap의 그리드 시스템을 사용하여 유저 카드 레이아웃을 구성합니다.
각 카드의 세로 길이는 h-100 클래스를 사용하여 높이를 동일하게 맞춥니다.
카드에는 다음과 같은 정보가 표시됩니다:
카드 헤더: 유저의 아바타 이미지와 유저명
카드 바디: 유저의 자기소개 (추후 필드 추가 가능)
카드 푸터: 팔로잉 버튼
6. 팔로잉 버튼 처리
각 유저 카드에서 팔로잉 여부에 따라 팔로잉 버튼을 표시합니다.
underbar-user-follow.html 템플릿을 include하여 팔로잉/언팔로잉 버튼을 재사용합니다.
이 버튼은 클릭 시 HTMX를 사용하여 페이지 새로고침 없이 팔로잉 처리됩니다.
팔로잉 처리 후, 팔로잉하지 않은 유저 목록에서 해당 유저는 사라지고, 팔로잉 유저 목록에 추가됩니다.
7. HTMX로 팔로잉/언팔로잉 처리
팔로잉 버튼을 클릭하면 HTMX를 사용하여 페이지 새로고침 없이 팔로잉 처리가 이루어집니다.
팔로잉 버튼을 클릭하면 해당 유저가 팔로잉 상태로 변경되고, 목록이 즉시 갱신됩니다.
예를 들어, 팔로잉하지 않은 유저 4를 팔로우하면, 팔로잉 유저 목록에 추가되고 팔로잉하지 않은 유저 목록에서는 사라집니다.
8. 언팔로우 처리
언팔로우 버튼을 클릭하면, 해당 유저가 팔로잉 유저 목록에서 사라지고, 팔로잉하지 않은 유저 목록에 다시 나타납니다.
9. 기타 세부사항
프로필 정보가 없는 유저의 경우, 아바타 이미지를 기본 아이콘 폰트로 대체하여 표시합니다.
유저의 자기소개 필드는 프로필 모델에 추가하여 표시할 수 있습니다.
최종 흐름 요약
뷰:
FollowingUserListView: 요청 유저의 팔로잉 유저 목록을 조회하여 반환.
DiscoverUserListView: 요청 유저가 팔로우하지 않은 유저 목록을 조회하여 반환.
템플릿:
userlist.html: 팔로잉 유저와 팔로우하지 않은 유저 목록을 동일한 형식으로 출력.
팔로잉/언팔로잉 버튼은 underbar-user-follow.html 템플릿을 통해 구현.
HTMX:
팔로잉/언팔로잉 버튼 클릭 시, HTMX로 페이지 새로고침 없이 목록을 갱신.
핵심 기술
Django 뷰와 템플릿을 사용하여 유저 목록을 표시하고, HTMX를 이용하여 동적으로 팔로잉 처리를 구현합니다.
Bootstrap 그리드 시스템과 카드 레이아웃을 활용하여 UI를 구성하고, 프로필 필드를 즉시 로딩하여 성능을 최적화합니다.
이렇게 구현하면, 사용자는 팔로잉 유저와 팔로우하지 않은 유저 목록을 쉽게 관리할 수 있고, 팔로잉 상태 변경을 실시간으로 반영할 수 있습니다.