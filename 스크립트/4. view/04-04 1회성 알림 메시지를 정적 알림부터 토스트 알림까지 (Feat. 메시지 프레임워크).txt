이번 시간에는 메시지 프레임워크에 대해서 살펴보겠습니다.
시작하기에 앞서 myjango04 프로젝트 폴더를 새롭게 만들어주시고요.
가상환경 생성, 활성화, 라이벌리 설치 그리고 장고 프로젝트 생성, 마이그레이션 수행, 슈퍼유저 생성, 개발 서버 구동까지 해주시고 
그리고 requirement.txt 파일 생성 및 장고 라이벌리 등록 파이참을 통해 여셨다면 가상환경 확인, 블랙 설치 및 옵션 활성화
그리고 장고 지원 설정을 꼭 확인해주세요.
그리고 코어 앱을 새롭게 만들어 주시고요.
코어 앱을 통해 타 앱에서 사용할 수 있는 공용 기능을 구현을 해보겠습니다.
코어 앱에 urls.py 파일 생성해 주시고요.
mysite의 urls 에서 인클루드 해주시고요.
INSTALLED 앱에다가 코어 앱을 등록해 주세요.
장고의 메시지스 기본 앱에서는 이와 같은 일회성 메세지를 저장하고 소비하는 기반을 제공해줍니다. 
메시지 레벨에서는 디버그, 정보, 성공, 경고, 오류 이렇게 5단계가 있는데요.
이 레벨에 맞춰서 뷰에서 요청을 처리하고 유저에게 일회성 메시지를 보여주고 싶을 때 
그 메시지 성격에 맞게 레벨을 지정하고 저장하시면 이와 같이 유저에게 보여줄 수 있게 됩니다
메시지는 뷰를 통해 저장하고 템플릿을 통해 메시지를 소비합니다
뷰에서는 원하는 레벨에 맞춰서 api를 호출하고요 첫번째 인자로 리퀘스트 인자 두번째 인자로 남길 메시지를 문자로 남길 수 있습니다 
메시지는 쿠키 혹은 세션에 저장하기 때문에 리퀘스트 객체가 인자로 꼭 필요하고요 
뷰 요청을 처리하면서 유저에게 남길 메시지를 이렇게 여러개 등록할 수 있습니다
코어 앱에서 인덱스 앱을 하나 만들겠습니다
그리고 인덱스 HTML 템플릿을 렌더링 하겠습니다
코어 앱에서 템플릿스 코어에 인덱스 HTML 파일을 만들어줍니다
느낌 표현하시고 탭을 누르시면 기본 HTML이 생성이 되겠구요
그냥 코어라고만 써주겠습니다
urspy 에서 패턴을 등록을 해야 되겠죠
이렇게 패턴도 등록하시고 코어 주소로 들어가시면 이렇게 나옵니다
메세지스를 이렇게 임포트 하시고요 당구에 컨트리뷰에 메시지스고요 여기에 디버그 메세지 에러 메세지까지 추가를 해봤습니다
템플릿단에서 메시지스에 대해서 if 조건원을 써주시고요 저장하고 새로고침 해보겠습니다
그러면 등록된 메시지가 있다고 나오죠
만약 템플릿 단에서 지원되지 않는 값이라면 아마 거짓 판정이 되어서 이 메시지가 출력이 안되었을 겁니다 
뷰 단에서 메시지를 등록했기 때문에 메시지가 여기에 보여지는 거죠
자 그러면 for message in messages 라고 쓰시고요
그리고 div 해서 message.level 태그 이렇게 쓰시고 message.message라고 쓰겠습니다
저장하시고 새로 고침하시면 이렇게 메시지가 보여지죠
메시지가 두 번 보여지고 있는데요
그 이유는 메시지를 노출하기 전에 indexview함수가 한번 호출이 되면서 이렇게 메시지가 쌓였구요 
방금 새로 고침하면서 indexview가 한번 더 수행되면서 메시지가 한번 더 쌓여서 그렇습니다
그런데 디버그 메시지는 보여지고 있지 않죠?
그 이유는 잔고 프로젝트 기본 설정으로 Info 레벨 이상의 메시지만 처리도록 설정이 되어있어서 그렇습니다
이 메시지에다가 Bootstrap5 스타일을 한번 입혀보겠습니다
cdnjs.com에 라이벌리지에 Bootstrap 주소로 들어가시면은 cdn 버전의 Bootstrap 주소를 얻으실 수 있겠구요
우리는 여기에서 밑에서 네번째에 있는 css 주소만 카피해서 템플릿에다가 링크 태그 쓰시고 이렇게 추가하겠습니다
템플릿에서 새로 고침하시면은 스타일이 약간 바뀌었죠
div 컨테이너로 한번 감싸주겠습니다
새로 고침하시면 살짝 가운데로 오죠 메시지 안에 있는 div에서 클래스 네임으로 alert alert-info 라고 해보겠습니다
하시고 새로고침 해보시면은 인포와 인포가 글자가 같죠
그리고 여기에 글자가 같습니다
이 부분을 우리가 메시지의 레벨 태그로 바꿔 보실 수 있고요 error인 경우 클래스 네임을 다르게 지정하실 수 있겠죠
디버그 레벨에 대해서 레벨 태그가 디버그로 출력이 되고 Error에 대한 레벨 태그가 Error로 출력되는 것은 각각의 레벨에 대한 디폴트 태그가 이렇게 설정이 되어 있기 때문입니다
레벨과 태그는 서로 다른 개념입니다
앞선 실습에서 디버그 메세지는 처리가 안되어 있었죠
그 이유는 디폴트로 인포 레벨 미만의 메시지는 무시가 되고 있다고 말씀을 드렸는데요
그 설정 코드를 한번 살펴보겠습니다 메시지 앱에 상수를 정의한 소스 파일을 보면은 각각의 레벨에 대해서 숫자가 정의되어 있는데요
디버그는 10, 인포는 20, 성공는 25, 워닝은 30, 에러는 40입니다
레벨별로 숫자가 할당되어 레벨에 대한 대소 비교가 가능해집니다
메시지를 처리하는 베이스 스토리지라는 구현이 있습니다
여기에 보시면 새로운 메시지가 추가가 될 때에 지정 레벨 이하의 메시지는 즉시 리턴에서 무시하도록 되어 있겠고요 
이 레벨 이상일 경우에만 메시지를 저장하도록 되어 있습니다
자 그럼 이 레벨은 이 베이스 스토이지의 레벨이라는 속성이 되겠구요
이 속성은 프로퍼티를 통해서 값을 얻어올 때는 언더바 언더바 레벨이라는 함수를 호출하도록 되어 있습니다 
이 함수가 호출이 될 때 처음 레벨을 얻어올 때는 settings에 message_underbar_level이라는 값이 있으면 가져오고 없으면은 import을 사용하도록 했죠
그래서 이 부분이 디폴트도 import_level 미만의 메시지는 무시하는 그런 설정이 되겠습니다 
디버그 레벨을 사용하고 싶으실 경우 장고 프로젝트 기본에는 이 설정이 없는데
우디(Woody) 프로젝트에는 이 레벨을 디버그로 설정하시면 이제 디버그 레벨 메시지도 처리가 됩니다
앞서 보신 세팅스를 우디 프로젝트에다가 적용을 해보겠습니다
제일 아래에다가 추가하시고 페이지를 새로 고침 해보겠습니다
디버그 메시지도 출력이 되고 있습니다 앞서서 Bootstrap 5 스타일에 alert 스타일을 적용했었죠
그래서 이와 같이 적용을 하면은 웹페이지 이렇게 보여집니다
그런데 alert debug와 alert error라는 스타일은 bootstrap 5에서 지원하지 않습니다
Bootstrap 5의 Alert 공식 문서를 보면 여러 개의 Alert 스타일이 있는데 Alert Success, Warning, Info 는 있죠
그 외에 Dark, Light 그리고 Danger, Secondary, Primary 가 있습니다 
원하시는 대로 이 레벨 태그에 맞춰서 매칭을 해주시면 되는데요
일단 저는 레벨 태그가 디버그일 때는 alert-secondary 스타일로 한번 적용을 해보겠구요 
레벨 태그가 error인 경우에는 alert-danger 스타일로 한번 적용을 해보겠습니다 
그럼 실제 코드가 이렇게 될 거에요
클래스명으로 alert라는 클래스명을 기본 지정해 줬구요
장고 템플릿에 if 문법을 통해서 메시지의 level 태그가 debug면 alert-secondary 다음에 메시지의 level 태그가 error면
alert-danger 그 외에는 level 태그 값으로 alert 스타일을 꾸몄습니다
이를 수행하면 아래와 같이 디버그 레벨 메시지와 에러 레벨 메시지까지 모두 잘 출력이 됨을 확인하실 수 있습니다
자 인덱스 더 매치 템의 템플릿에다가 적용을 한번 해보겠습니다
자 이렇게 적용하시고요
페이지 새로 고침 하시면 디버그 메시지부터 에러 메시지까지 모두 정확하게 잘 출력이 됨을 확인하실 수 있습니다
이번에는 django-bootstrap-5를 한번 써보겠습니다
이 이름의 rivalry를 설치하신 후에 installed-apps에다가 django-bootstrap-5라는 앱만 추가해 주시면 설치가 끝나구요 
이 앱을 통해서 bootstrap-messages라는 템플릿 태그가 지원이 되고 있어요
bootstrap-messages라는 템플릿 태그를 사용할 템플릿단에서 load-django-bootstrap-5를 써 주시면요 Python의 import랑 역할이 똑같습니다
로드하시면 템플릿 태그를 쓸 준비가 되신 거고요
이 앱에서 지원하는 여러가지 템플릿 태그 중에 Bootstrap CSS, Bootstrap JavaScript라는 템플릿 태그를 호출하시면 기본 설정으로
CDN 버전의 Bootstrap 5 CSS 태그와 CDN버전의
bootstrap-5-javascript 태그가 이 위치에 자동으로 추가됩니다.
Bootstrap 5 CDN 주소를 복사하기 위해서 매번 검색을 하실 필요 없이 이것만 추가해 주시면 된다는
bootstep5 alert 스타일로 메시지를 노출하고자 할 때에 Bootstrap 언더바
메시지 쓰다는 템플릿 태그만 호출해 주시면 끝나요
그러면 이와 같은 html 코드가 자동으로 생성이 되구요
실제 웹페이지에 보시면은 이와 같이 보여지고요 지정 메시지를 이렇게 닫는 기능은
bootstrap 5 자바스크립트의 기능이 되겠습니다
적용을 해보죠 먼저 라이벌리 추가하기 위해서 requirements.txt에 장고
bootstrap 5 라고 써주겠습니다
그리고 버전이 23.3 버전이네요.
23.3 버전을 써주고요.
설치를 하겠습니다.
우리 Settings 에서 Installed Apps 에다가 django-bootstrap-5
Bootstrap 5 라고 추가를 해주시고요.
template 단에서 최상단에서 load django-bootstrap-5를 써주시고
css는 이 부분을 제거하시고 bootstrap-css 그리고
bootstrap-javascript를 써주시고요
메시지 노출을 위해서 bootstrap-messages 라고 쓰시고 이 부분은
삭제하겠습니다
그리고 새로 고침하시면 이렇게 똑같이 나오고요
그리고 X 눌러서 삭제하실 수 있고 소스 보기에 보시면 이렇게 CDN 버전의
bootstrap.css와 CDN 버전의 bootstrap.javascript가 추가된
것을 확인하실 수 있습니다
현재는 메시지가 이렇게 정적으로 보여지고 있는데요
Bootstrap 5에 Toast API를 활용을 해볼 수 있습니다
Toast를 사용하면 화면의 우 상단에 메시지가 보여지고 일정 시간이 지나면 메시지가
자동으로 삭제가 됩니다
이걸 사용하시려면 JavaScript 호출이 필요하고요 부트스트랩에 있는 Toast API를
직접 호출해서 .show 호출이 필요합니다.
슬라이드 하단에 링크를 클릭하시면 부트스트랩 5 Toast 이 공식 문서를 확인하실 수
있습니다. 여기 보시면 다양하게 부트스트랩 예시가 있겠구요.
버튼을 클릭하면은 우 하단에 이렇게 토스트 박스가 보여지고 있죠
그리고 여러 개의 메시지를 쌓는 방법도 이렇게 나와 있습니다
예시 코드를 그대로 가져와서 잔고의 메시지 수와 이렇게 한번 합쳐봤습니다
메시지의 레벨 태그별로 인포일때 스타일, 성공일때 스타일, 워닝일때 스타일, 에러일때
스타일 그 외의 스타일에 대해서 이렇게 다 지정을 했구요
이렇게 박스가 만들어지고요 스택형으로 메시지가 쌓여서 보여질 수 있도록 이렇게 Toast
컨테이너를 사용을 했고요 그리고 Top 0, End 0을 통해서 우상단에 보여지도록
했습니다 바로 이어서 스크립트 태그 사용을 했구요
div 바로 다음에 스크립트죠
그러면 이 스크립트에서 해당 위에 있는 DOM 요소 접근을 위해서는 일반적으로 해당
DOM에 아이디나 클래스명을 통해서 접근을 하는데 이 div 바로 다음에 스크립트가 있기
때문에 자바스크립트에서 document.currentScript 그리고 previous
element 이라고 해주시면은 스크립트 바로 위에 있는 DOM 요소를 바로 얻으실 수
있습니다 이렇게 Toast 컨테이너를 얻어와서요 Bootstrap에 Toast API를
사용을 하려면 Bootstrap에 JavaScript 라이브러리가 다 로딩이 이루어져야
호출할 수 있겠죠
그래서 이벤트 리스너를 통해서 현재 페이지에 컨텐츠가 다 로딩이 된 이후에 함수호추를
통해서 해당 토스트 컨테이너에 있는 모든 토스트 즉 이 클래스명 토스트죠
모든 토스트를 다 순회 돌면서요 각각의 토스트에 대해서 이 토스트 API를 적용해서
show를 해주면은 이와 같이 화면 우상단에 토스트 메시지가 보여지게 됩니다
슬라이드 하단에 소스 코드를 준비해 놓고요 링크를 클릭하시면 이렇게 소스 코드를 확인하실
수 있습니다 그러면 이 코드를 복사하시는데 템플리스에서 파일명은 underbar
messages as toast.html 이라고 하겠습니다
앞에 언더바를 붙인 이유는 이 템플릿 파일이 뷰에 의해서 직접적으로 사용이 되는 것이
아니라 템플릿에 의해서 인클루드 되는 사용되어지는 그런 템플릿심을 보여주기 위해서 제가
underbar 라고 붙였습니다
자 소스코드 복사해서 붙여 넣으시구요
기존 코드 삭제하시고 include 해주겠습니다
새로 고치 마시면 이렇게 화면이 잘 표시가 되구요
시간이 지나면 이렇게 사라집니다
자 이번에는 토스트 메세지를 보여주기 위해서 Bootstrap 5 외에 toastifyjs
라는 라이브롤리를 사용을 해보겠습니다
이 라이브러리를 사용하시면은 HTML 마크업 없이 그냥 Toastify.js라는 이 API만
호출해 주시면은 이렇게 화면에 출력이 되고요.
어 자바스크립트만으로 이 메시지에 대한 유지 시간 등을 이렇게 지정을 해 줄 수 있게
됩니다. 그러면 이 부분을 우리 메시지스에 적용을 한다면 즉 보여줄 메시지가 있을 때
스크립트 태그를 우리가 잔고 템플릿단에서 이렇게 생성을 해줄 수 있습니다
즉 자바스크립트 코드를 동적으로 생성한 거죠
이 부분이 수행이 되면 오른쪽과 같이 이렇게 보여집니다
토스티파이 함수가 메시지의 개수만큼 이렇게 함수 호출이 이루어지는 거예요
그러면 화면에는 이렇게 보여지게 됩니다
슬라이드 하단에 소스코드 링크가 있습니다
이 CSS와 JavaScript 코드를 복사해서 여기 아래에 붙여주고요
이 코드를 복사하고 자 이 부분은 이제 주석 처리하고요 하고 이렇게 코드를 붙여 놓고
그리고 우리 페이지에서 새로고침을 해 보겠습니다
자 그러면 이렇게 토스티 파일을 통해서 이렇게 메시지가 보여지고 있고요
페이지 소스 보기를 해보시면은 자 이렇게 장고 템플릿 엔진을 통해서 자바스크립트 코드가
만들어졌음을 확인하실 수 있습니다
자 이렇게 토스트 메시지는 출력이 되었는데 이 박스 스타일을 조금 바꿔 보겠습니다
footstep5의 alert 스타일을 한번 따라서 해 보겠구요
얘가 같이 보여지는데 우리가 토스티파이 메세지를 생성할 때에 클래스 네임을 지정할 수
있어요 그래서 하이픈 빼기 레벨 태그로 이렇게 지정할 수 있는데 Bootstrap 5
alert 스타일에서 글자 색과 배경색 그리고 border에 대한 스타일을 이렇게 복사를
해왔습니다 이 스타일을 적용해 주시고 이렇게 클래스 네임을 적용해 주시면 이렇게
자바스크립트 코드가 생성이 돼요
그래서 기존 레벨 태그를 그대로 쓰더라도 이렇게 스타일이 잘 적용이 되어서 보여지고
있습니다 자 이 부분도 실습을 한번 해보겠습니다
두번째 구역 스타일 태그를 하나를 복사해와서 이렇게 붙여넣습니다
그리고 이 클래스 네임에서 duration 다음에 위에 콤마 잘 보시고요 그리고 저장하시고
새로고침 해보시면 이렇게 bootstrap 5 스타일로 나온 걸 확인하실 수 있고요
자 혹시 이 토스트 메시지가 안 보이시는 분들은 페이지 소스보기 하신 다음에요 디버깅
하신다고 이 템플릿 코드만 봐서는 잘 모릅니다
실제 생성된 코드를 보시고요 여기에서 뭐 콤마나 이런 값들이 올바로 잘 들어가 있는지 한번
확인해 보시고 여기에서 확인한 후에 템플릿 코드를 보시고 수정하시는 게 올바른 방법이에요
그 다음에는 잘 눈에 안 보이시면은 꼭 브라우저의 개발자 도구의 콘솔 창을 열어서 빨간색
에러가 발생하지 않았는지 한번 보시고 에러 한번 보시고 검색도 한번 해보시고 잘
모르시겠으면 질문을 남겨주세요
앞선 방법은 장고 템플릿 코드와 자바스크립트가 강하게 결합된 방식입니다.
React나 Vue를 접목하실 때에는 이러한 접근이 조금 번거로울 수 있습니다.
메시지 목록만 템플릿에 따로 정리하고 이를 JavaScript 코드로 읽어서 처리도록
해보겠습니다. 장고 템플릿에서는 JSON 스크립트 템플릿 태그를 지원해 줍니다.
지정 객체를 JSON 문자열로 변경해 주거든요.
이 messages 값을 제이손 스크립트를 통해서 제이손 변환을 시도하면 타입 에러가 발생합니다.
오늘 메세지를 읽어보니 PerfectStorageType에 대해서는 JSON 문자열로 변경할
룰이 정의가 되어 있지 않다고 하네요.
그래서 변환이 가능한 타입인 리스트와 사전으로 먼저 변환을 하기 위해서 messages_
리스트라는 컨텍스트 프로세서를 이렇게 정의를 하겠습니다
컨텍스트 프로세서는 리퀘스트 인자를 받는 하나의 함수이고요 반환 값으로 템플릿에서 사용할
값의 목록을 사전으로 반환합니다
이 함수는 제가 코어 밑에 있는 context-processors.py에 정의를 해뒀구요
이 context-processors 등록을 위해서 settings-templates에서
options-context-processors에다가 이 경로를 지정하시면은 매 템플릿이
렌더링이 될 때마다 매번 호출이 되어서 여기에서 반환된 값을 템플릿에서 사용하실 수 있게
됩니다 그리고 레이지 메시지 메세지스 언더바를 리스트하는 함수를 하나 만들었는데요 이 함수에서
바로 getMessages 호출을 통해서 messages 목록을 얻어오면요 템플릿 단에서 메시지를
소비하는 코드가 없어도 컨텍스트 프로세서에서 메시지를 먼저 소비해 버립니다.
Django 템플릿에서는 인자 없는 함수를 호출할 수 있기 때문에 아래 메시지 리스트 함수에서
사전을 만들 때 메시지 목록을 가져오는 것이 아니라 이렇게 함수를 만들어서 리턴을 하면요
템플릿 안에서 이 메시지 쓸 리스트에 접근을 할 때에 이 대상이 여기에서 반환된 함수이기
때문에 이 시점에 이 함수가 호출이 되어서 메시지를 가져오게 됩니다
함수가 호출되는 시점에 메시지 목록을 가져와서 각각의 메시지를 돌면서 JSON 변환이
가능한 타입인 리스트와 사전 그리고 문자 타입으로 이렇게 변환해서 리턴을 합니다
그러면 json_script라는 템플릿 필터에 의해서 json 변환이 이루어지고요
aria와 같이 JSON 문자열로 변환이 되고 여기에 지정한 id로 script 태그가
만들어지게 됩니다
자 슬라이드 하단에 소스코드 링크가 있구요
여기에 제공되는 코드를 제가 코어 밑에 있는 Context Processor 파일에다가
등록을 하고 Settings에서 Template에서 Options에 Context
Processor 제일 끝에다가 코어 앱에 있는 Context Processor에
Messages Underbar List라고 이렇게 추가를 해주겠습니다
그러면 모든 장고 템플릿을 렌더링 할 때마다 여기에 지정된 모든 함수들이 호출이 되면서
여기에 반환 값들을 모아서 템플릿 렌더링 시에 활용을 하고요 디버그에 가보시면은 이렇게
디버그 여부 그리고 SQL Query 같은 값들로 제공이 되네요
그리고 리퀘스트에 가보시면은 이렇게 리퀘스트 값을 확인할 수 있도록 반환해 주고요 다음에
Auth에 가보면은 유저와 퍼미션을 확인할 수 있도록 이렇게 주고요 다음에 메시지스에
가보면 이렇게 메세지스와 디폴트 메시지 레벨스라는 것도 주고 있네요
자 이제 인덱터 매치 테멸에서 아래에 있는 if는 일단은 지우겠습니다
메시지 리스트 제이손 스크립트에 메시지 리스트라고 지정하고 아 end if 안지웠네요
새로 고쳐보겠습니다
화면에 보여지는 것은 없지만 소스복에 보시면 이렇게 제 손으로 메시지 목록이 준비된 것을
확인하실 수 있습니다
앞서 정의한 메시지 목록의 스크립트 아이디는 메시지 리스트였죠?
아이디니까 앞에 샤프를 붙여주시고 해당 DOM을 조회해서 내부 문자열을 얻어오기 위해
.txt 컨텐츠를 하시면은 내부 JSON 문자열이고요 자바스크립트 객체화 시키기 위해
JSON.path를 하시면은 메시지 목록이 나옵니다
자 슬라이드 하단에 링크가 있고요 이 코드를 한번 이 바로 아래에서 이렇게 수행을
해보겠습니다
브라우저 개발자 도구의 콘솔을 열고 새로 고침하시면 이렇게 메시지가 출력이 되고 있어요
자 그럼 이어서 토스티 파이로 처리가 될 수 있도록 이 코드로 이렇게 적용을 하겠습니다
그리고 새로 고침하시면 이렇게 메시지가 잘 노출됨을 확인하실 수 있겠구요 생성된 HTML
코드를 보시면 메시지 목록과 이렇게 자바스크립트가 잘 분리된 것을 확인하실 수 있습니다
메세지 스토이지는 총 3가지를 지원해주고 있습니다.
세션 스토이지, 쿠키 스토이지, 펄백 스토이지가 되겠구요.
세션 스토리지는 모든 메세지를 세션에 다 저장합니다.
그래서 저장할 수 있는 용량의 제한이 없습니다.
세션 스토이지가 허락하는 만큼 저장을 할 수 있겠구요
쿠키 스토리지는 이제 쿠키에 저장을 합니다
그런데 쿠키에 저장하면 누군가 조작을 할 수도 있죠
그래서 조작 방지를 위해서 비밀 해시도 서명된다고 하고요 저장된 총 메시지가 2KB가
넘으면은 오래된 메시지가 제거된다고 합니다
세 번째 Fallback 스토리지가 우리 프로젝트의 디폴트로 활성화되어 있습니다
쿠키 저장소를 먼저 사용하고요 먼저 사용하고 저장된 메시지가 2KB를 넘을 경우
Session 저장소를 사용하도록 되어 있습니다



이 내용은 Django의 메시지 프레임워크와 이를 활용한 다양한 방법들에 대한 설명입니다. 핵심적인 부분을 정리해 보겠습니다.

1. Django 프로젝트 설정
새로운 myjango04 프로젝트 폴더 생성 후, 가상환경을 만들고 활성화한 뒤, 필요한 라이브러리 설치 (requirements.txt, Django 설치 등).
Django 프로젝트를 생성하고 초기 마이그레이션 및 슈퍼유저 생성 후 개발 서버 구동.
core 앱을 만들어 공용 기능을 구현하고, 이를 프로젝트의 urls.py에 등록.
2. 메시지 프레임워크 설정
Django의 메시지 프레임워크는 사용자의 요청을 처리하는 뷰에서 일회성 메시지를 저장하고 이를 템플릿에서 소비하는 구조입니다.
메시지의 레벨은 디버그, 정보, 성공, 경고, 오류로 나뉘며, 메시지 레벨에 맞는 정보를 표시할 수 있습니다.
뷰에서 메시지를 저장하고, 템플릿에서 이를 소비합니다.
3. 메시지 저장 및 표시
메시지는 request 객체를 통해 저장되고, 기본적으로 세션이나 쿠키에 저장됩니다.
메시지를 여러 개 저장할 수 있으며, messages를 사용하여 저장하고, 템플릿에서 이를 출력하는 방식으로 구현합니다.
예를 들어, message.debug(), message.info(), message.success(), message.warning(), message.error()와 같은 메서드를 사용하여 메시지를 저장합니다.
템플릿에서는 for message in messages로 메시지를 출력하고, 레벨에 맞는 스타일을 적용할 수 있습니다.
4. 메시지 레벨 및 설정
메시지의 레벨은 디폴트로 Info 레벨 이상만 처리되며, 디버그 메시지는 기본 설정으로 표시되지 않습니다.
settings.py에서 MESSAGE_LEVEL을 DEBUG로 설정하면 디버그 메시지도 표시됩니다.
메시지 레벨에 따라 숫자 값이 설정되어, 낮은 레벨의 메시지는 무시되고, 높은 레벨의 메시지만 처리됩니다.
디버그: 10
정보: 20
성공: 25
경고: 30
오류: 40
5. Bootstrap 5 스타일 적용
메시지 출력 시 Bootstrap 5의 스타일을 적용하여, alert 클래스를 활용해 메시지를 시각적으로 구분합니다.
alert-success, alert-warning, alert-danger 등 클래스를 메시지 레벨에 맞춰 적용합니다.
CDN을 사용하여 Bootstrap CSS 및 JS를 템플릿에 추가하고, alert 스타일을 사용하여 메시지를 표시합니다.
6. Toast 메시지
Toast는 화면의 상단에 잠시 동안 나타나고 사라지는 메시지입니다. 이를 위해 Bootstrap 5의 Toast API를 활용할 수 있습니다.
Toastify.js와 같은 라이브러리를 사용하면, 더 간편하게 토스트 메시지를 구현할 수 있으며, 메시지의 지속 시간 등을 설정할 수 있습니다.
토스트 메시지는 화면의 우측 상단에 표시되며, 자동으로 사라지거나 사용자가 닫을 수 있도록 설정됩니다.
7. Context Processor
Context Processor를 활용하여 모든 템플릿에서 사용할 메시지 목록을 사전에 준비할 수 있습니다.
JSON 형식으로 메시지 목록을 변환하여, 템플릿에서 자바스크립트로 처리할 수 있습니다.
context_processors.py에서 메시지 목록을 반환하는 함수를 정의하고, 이를 settings.py의 TEMPLATES 옵션에 등록합니다.
템플릿에서 json_script 태그를 사용하여 메시지 목록을 JavaScript 객체로 변환하고, 이를 기반으로 메시지를 표시합니다.
8. 메시지 스토리지 종류
Django 메시지 프레임워크는 3가지 스토리지 방식을 지원합니다:
세션 스토리지: 모든 메시지를 세션에 저장합니다. 저장 용량에 제한이 없습니다.
쿠키 스토리지: 메시지를 쿠키에 저장하며, 2KB를 초과하면 오래된 메시지가 제거됩니다.
Fallback 스토리지: 기본 설정이며, 쿠키에 저장된 메시지가 2KB를 넘으면 세션 스토리지로 대체됩니다.
실습 과정:
장고 메시지 프레임워크 활용: 뷰에서 messages 모듈을 사용하여 메시지를 등록하고, 템플릿에서 이를 출력하는 실습.
Bootstrap 5 적용: 메시지 레벨에 맞는 스타일을 alert 클래스로 적용하여 시각적으로 구분.
Toast 메시지 사용: Bootstrap Toast나 Toastify.js를 사용하여, 화면 우상단에 잠시 나타나는 메시지 구현.
Context Processor 및 JSON 활용: 메시지 목록을 Context Processor로 처리하여 템플릿에서 JavaScript로 읽어오기.
이 정리를 통해 Django에서 메시지 시스템을 설정하고 활용하는 방법을 잘 이해할 수 있을 것입니다.