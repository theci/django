안녕하세요 이번에는 다음 강의를 진행하기 전에 핫트랙 앱을 준비해 보겠습니다.
mydjango03 프로젝트에서 사용하던 핫트랙 앱을 mydjango04 프로젝트에서 사용하기 위해 핫트랙
앱을 복사해 보겠습니다.
장구 앱은 이렇게 손쉽게 다른 프로젝트로 옮길 수 있으며 라이브 올리기도 가능합니다.
mydjango04 경로에서 아래 명령을 실행해주세요.
mydjango03 핫트랙 프로젝트의 핫트랙 디엑토리를 현재 경로로 복사하는 명령입니다.
파워셸과 맥 리눅스에서의 명령이 다르니 구별하여 입력하시면 핫트랙 폴더가 복사됩니다
혹은 윈도우 탐색기를 통해 복사하셔도 좋습니다
mydjango 04 경로에서 파워셀 명령을 보겠습니다
카피 아이템 명령을 통해서 복사하실 수 있겠고요 그리고 폴더를 복사할 것이기 때문에 이제
리커시브 옵션을 주고요 복사할 경로는 상위 경로에 mydjango 03의 핫트랙에 핫트랙이라는
폴더를 어디로 복사할 것이냐 데스티네이션으로 복사할 대상 경로 즉 현재 경로를 주시면은
이렇게 핫트랙 폴더가 잘 잘 복사되었음을 확인하실 수 있습니다
현재 mydjango 공사 경로에 있습니다
맥리눅스 환경에서는 카피 명령을 활용해서 파일이나 폴더를 복사할 수 있고요 -R
옵션을 붙이시면 리커시브, 재기적으로 폴더를 복사하실 수 있습니다
mydjango 공사 기준으로 상위 폴더에 mydjango03 핫트랙이라는 폴더가 있고 그 아래에 있는
핫트랙이라는 폴더를 현재 경로로 복사하겠습니다.
여기다 치시고 ls 하시면 핫트랙 폴더가 있고 이렇게 핫트랙 폴더가 잘 복사되었음을 확인하실
수 있습니다. 복사한 핫트랙 앱을 프로젝트에 등록하고 마이그레이션을을 수행해 보겠습니다.
settings.INSTALLED_APPS에 핫트랙 앱을 등록하고 mysite에
urls.py 파일에 hottrack.urls 패턴을 등록하고 최상위 주소에 대한 요청은
slushy-hottrack-slushy 주소로 이동토록 변경하겠습니다.
최상위 주소에 대한 다른 URL 패턴들은 모두 제거합니다.
그리고 의존성이 있는 라이벌리들도 추가해 줍니다.
request pillow pandas-라이브러리 입니다.
이제 핫트랙 복사가 끝났습니다.
python manage.py migrate 핫트랙 명령으로 핫트랙 앱에 대한 마이그레이션을
수행하면 데이터베이스의 song 모델에 대한 데이터베이스 테이블이 생성이 됩니다.
핫트랙 앱에 구현한 커스텀 명령인 load melon songs 명령을 수행하면 외부
json 데이터를 로딩하여 데이터베이스에 추가합니다.
개발 서버가 정상 구동 중인지 확인하고 localhost 8000 주소로 접속하시면
slushy-hottrack-slushy 주소로 자동 이동 되구요.
페이지에 배꼽에 대한 정보가 보여지며 장부 관리자 페이지도 접속하시면 이전에 구현했던
update-like-count-action 명령도 잘 동작함을 확인하실 수 있습니다.
mysite에 settings.py 파일을 열어주시고요.
그리고 여기에 하트웹 앱을 추가합니다.
mysite에 urls.py 파일을 여신 다음에 핫트웨크 프리픽스에 대해서
핫트웨크.urls를 인클루드 해주시고요
그리고 최상위 주소 요청에 대해서 슬래시 핫트웨크 슬래시 주소도 이동토록 처리를
해주겠습니다 그리고 requirements.txt 파일을 여셔가지고요 의존성 있는
라이벌리들도 추가를 해주겠습니다
pip install -r requirements.txt 명령을 통해서 방금 추가한
라이벌리드를 설치를 해줍니다.
이제 python-manage-by-migrate 하초의 명령을 통해서 데이터베이스
테이블을 생성을 해주고요.
loadmellonsongs 명령을 통해서 외부 JSON 데이터를 로딩하여 데이터베이스에
추가를 해주겠습니다
그리고 개발 서버를 가동해 주시고요
localhost 8000 주소로 이동하시면 핫트랙 페이지로 이동하신 걸 확인하실 수
있고요 어드밈 페이지에 방문하시면 이렇게 songs 항목이 있고 이렇게 데이터들이 다
로딩이 되어 있으며 이렇게 지정된 지정 곡에 대해서 update like count 명령을
통해서 이렇게 명령도 잘 동작함을 확인하실 수 있습니다
앞서 Django 디버그 툴바에 대해서 다뤘었습니다.
My Django 공사 프로젝트에도 Django 디버그 툴바 라이브홀리를 적용해주세요.
디버그 환경에서 InstalledAppsList와 Middleware 설정을 추가해주시고
INTERNAL_IPS 설정에 127.0.0.1 주소도 추가해주세요.
그리고 MySite의 urls.py 파일에 debug-toolbar.urls 패턴을
등록하시면 Django 디버그 툴바 적용이 끝납니다.
프로젝트에도 등록을 해보겠습니다
Requirements.txt 파일에다가 장고 디버그 툴바를 추가해 주시고요
4.2.0 버전이 최신 버전이네요
이렇게 추가를 하겠고요 그리고 InstalledApps에서 디버그 환경에서
InstalledApps 제일 뒤에다가 디버그 툴바를 추가해 주겠고요 Middleware
항목도 디버그 환경에서 가장 처음에다가 디버그 툴바를 넣을 것이기 때문에 이와 같이 인서트
코드를 쓰셔도 되겠고요 혹은 이렇게 리스트와 리스트를 더하면 두개의 리스트가 이어진 새로운
리스트가 만들어지는 것이거든요
이렇게 적용을 하셔도 되겠습니다
그리고 장고 디버그 툴바와 관련된 설정 중에 Internal IPS 설정을 쓰죠
이 설정은 장고 디버그 툴바만의 설정은 아니고요 장고 기본에서도 사용하는 설정입니다
이제 mysite의 urls에서 settings에 디버그 값이 참일때에만 url
patterns 끝에다가 append, 즉 추가를 해주는데 underbar,
underbar, debug, underbar, underbar 슬러시 주소를 뒤에 있는
이 패턴에다가 붙여주는 거고요 문자열로 지정합니다
settings 임포트는 항상 장고 콤프의 settings를 임포트 하시면은 장고 기본의 디폴트 settings와
우리 프로젝트에 있는 세팅스가 합쳐진, 머지된 세팅스 값을 얻어 오실 수 있습니다 장고
디버그 툴바 적용이 끝났고요
페이지 새로 고침 하시면 이렇게 장고 디버그 툴바를 확인하실 수 있습니다.


이번 강의에서는 핫트랙 앱을 기존 프로젝트에서 새 프로젝트로 복사하여 사용하고, 추가적으로 Django Debug Toolbar를 설정하는 과정을 설명했습니다. 아래에 단계별로 정리한 내용입니다:

1. 핫트랙 앱 복사 및 설정
핫트랙 앱 복사

mydjango03 프로젝트에서 사용하던 핫트랙 앱을 mydjango04 프로젝트로 복사합니다.
복사 명령 (Windows / macOS / Linux):
Windows PowerShell:
powershell
코드 복사
Copy-Item -Recurse "경로\to\mydjango03\hottrack" -Destination "현재 경로"
macOS / Linux:
bash
코드 복사
cp -R ../mydjango03/hottrack ./  
또는 윈도우 탐색기를 통해 수동으로 복사할 수도 있습니다.
핫트랙 앱 등록

mydjango04/settings.py 파일에서 핫트랙 앱을 INSTALLED_APPS에 추가:
python
코드 복사
INSTALLED_APPS = [
    ...
    'hottrack',
]
URLs 등록

mydjango04/urls.py 파일에서 핫트랙 URL을 설정:
python
코드 복사
from django.urls import include, path

urlpatterns = [
    path('hottrack/', include('hottrack.urls')),
]
의존성 라이브러리 추가

requirements.txt에 의존성 추가:
text
코드 복사
pillow
pandas
pip install -r requirements.txt 명령을 통해 라이브러리 설치.
마이그레이션 및 데이터 로딩

python manage.py migrate 명령을 실행하여 데이터베이스 테이블을 생성.
커스텀 명령 load_melon_songs를 통해 외부 JSON 데이터를 로딩하여 데이터베이스에 추가:
bash
코드 복사
python manage.py load_melon_songs
서버 확인

개발 서버 실행 후 localhost:8000 주소로 접속하여, 핫트랙 페이지가 잘 로드되는지 확인.
Django 관리자 페이지에서도 songs 모델에 데이터가 잘 로드되었는지 확인.
2. Django Debug Toolbar 설정
라이브러리 설치

requirements.txt에 Django Debug Toolbar 추가:
text
코드 복사
django-debug-toolbar==4.2.0
INSTALLED_APPS 및 MIDDLEWARE 설정

settings.py 파일에서 Debug Toolbar를 INSTALLED_APPS와 MIDDLEWARE에 추가:
python
코드 복사
INSTALLED_APPS = [
    ...
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    ...
]
INTERNAL_IPS 설정

settings.py에서 INTERNAL_IPS 설정 추가:
python
코드 복사
INTERNAL_IPS = [
    '127.0.0.1',
]
URLs 설정

urls.py에서 디버그 툴바 URL을 추가:
python
코드 복사
from django.conf import settings
from django.urls import include, path

if settings.DEBUG:
    urlpatterns += [
        path('__debug__/', include('debug_toolbar.urls')),
    ]
디버그 툴바 확인

서버를 실행하고 페이지를 새로 고침하면, Django Debug Toolbar가 페이지 하단에 표시됩니다.
이 툴바를 통해 SQL 쿼리, 요청 정보 등 디버깅 정보를 확인할 수 있습니다.
3. 요약
핫트랙 앱 복사: 기존 프로젝트의 핫트랙 앱을 새로운 프로젝트로 복사하고, 필요한 설정 (INSTALLED_APPS, urls.py, 마이그레이션 등)을 적용하여 정상적으로 동작하도록 설정.
Django Debug Toolbar: 디버그 환경에서 SQL 쿼리, 요청 시간 등의 정보를 쉽게 확인할 수 있도록 Django Debug Toolbar를 설치하고 설정.
이 과정을 통해 새로운 Django 프로젝트에서 기존 앱을 복사하고 설정하는 방법과, 디버그 툴을 활용하여 개발 환경을 효율적으로 관리할 수 있는 방법을 배울 수 있습니다.