안녕하세요. 이번 시간에는 장고 기본 클래스 기반 뷰 API 중에 Generic
DateView에 대해서 살펴보겠습니다.
Generic DateView는 모델의 날짜 필드를 기준으로 목록을 구성하는 다양한 방법을
제공해 줍니다.
일곱 가지 제네릭 데이 뷰가 있습니다.
모두 페이징 처리는 기본 지원하고요.
조회 기준 값으로 사용하는 각 인자들은 URL 캡쳐드 밸루스나 쿼리 파라메타의 값을
참조합니다. Year ArchiveView는 특정 해의 목록 및 그 해의 월 단위 날짜 목록을
제공합니다. 월 단위 날짜 목록은 월별 목록 페이지에 대한 링크 생성에 사용할 수
있습니다. 2열 인자를 참조합니다.
Month ArchiveView는 특정 달의 목록 및 그 달의 일 단위 날짜 목록을
제공합니다. 일 단위 날짜 목록은 일별 목록 페이지에 대한 링크 생성에 사용할 수
있습니다. 2열 Month 인자를 참조합니다.
Day ArchiveView는 특정 일의 목록을 제공합니다.
Year, Month,Day 인자를 참조합니다.
Today ArchiveView는 데이 아카이브 뷰 기반에서 동작화되, 조회 날짜가 오늘 날짜로 강제
지정되고 나머지는 동일합니다.
사용하는 인자가 없습니다.
Week ArchiveView는 특정 주의 목록을 제공합니다.
year, week 인자를 참조합니다.
ArchiveIndexView는 yearArchiveView와는 다르게 특정 해의 목록이
아닌 전체 목록을 지정 날짜 필드 역순으로 정렬된 목록을 제공합니다.
날짜 목록은 원하는 간격으로 생성하실 수 있습니다.
디폴트로 year이며 month, day, week를 지정할 수 있습니다.
마지막으로 DateDetailView는 해,월,일 조회 조건을 DetailView의 PK
혹은 Slug 조회 조건에 추가합니다.
이를 통해 조회 URL에 해,월,일이 추가되어 PK 혹은 Slug만 포함된 URL보다
SEO, 즉 검색엔진 최적화에 유리한 URL을 생성할 수 있습니다.
세 가지 공통 옵션이 있습니다.
첫 번째, Allow Future 옵션은 디폴트로 Pulse입니다.
Pulse로 지정될 경우 조회 조건에 오늘 날짜 혹은 현재 시각 이하 조건이 추가됩니다.
두 번째, Allow Empty 옵션은 디폴트로 Pulse입니다.
Pulse로 지정될 경우 빈 리스트 응답에서 404 응답을 하며 True로 지정될 경우에는
빈 리스트에서도 정상 응답합니다.
세 번째 fascinatedBy 옵션은 default로 None입니다.
DateDetailView는 목록 초의 뷰가 아니므로 이 옵션이 지원되지 않습니다.
YearArchiveView는 특정 해의 목록과 그 해의 월, 단위, 날짜 목록을
제공합니다.
YearArchiveView를 상속받은 SongYearArchiveView 클래스를
정의하고 Model 클래스 변수로 Song 모델을 지정했습니다.
날짜 필드 설정은 조회할 날짜 필드 설정인데요.
release date 필드를 지정했습니다.
year 설정은 3개의 영역을 순차적으로 찾습니다.
첫 번째로 클래스의 이열 속성에서 찾고, 값이 non이 아니라면 그 값을 사용하고,
non일 경우, 두 번째로 url-captured values에서 이열 인자를 찾습니다.
값이 있다면 그 값을 사용하고, 값이 없다면 세 번째로 Query 파라메타에서 이열 인자를
찾습니다. 마지막까지 이열 인자를 찾지 못할 경우, HTTP 404 예외를 발생시킵니다.
이어 린자를 찾으면 그 해 범위에서 AllowFuture 옵션이 거짓일 경우 오늘 이하
범위를 제한하여 DateField 역순으로 정렬된 코디셋을 생성하고 날짜 목록 코디셋도
생성합니다.
MakeObjectList 속성은 디폴트로 거짓입니다.
거짓일 경우 데이터가 있는 날짜 목록만 제공하고 템플릿에 Song List 이름의 빈
코디셋을 제공합니다.
예시 코드에서는 목록을 보여주기 위해 참으로 설정했습니다.
이 옵션은 이열 아카이브 뷰에서만 지원되며, 다른 아카이브 뷰에서는 이 옵션이 없으며,
모두 정상 SongList 코디셋을 제공합니다.
아래 화면에서는 데이터가 있는 지난해 다음의 링크를 생성했으며 곡 목록을 내림차순으로
보여줬습니다.
그리고 데이터가 있는 날짜 목록을 오른쪽에 보여줬습니다.
슬라이드 하단에 소스코드 링크가 있습니다.
소스코드를 참고해서 이어 아카이브 뷰 부터 구현을 해보겠습니다.
하드웨어 밑에 views.py 이고요.
song 이어 아카이브 뷰에서 이 세 줄을 먼저 적용을 하겠습니다.
2열 아카이브 뷰는 장고의 제네릭 뷰스에 2열 아카이브 뷰를 임포트 해 주시고요 2열
아카이브 뷰에 최소한의 설정이 되겠습니다
속 모델에 대한 목록이고요 조회할 필드명은 releaseDateField를 사용하겠습니다
releaseDateField는 모델에서 데이트 필드로 되어 있습니다
url 패턴즈에도 song-archive-view를 등록을 해 주겠습니다
archives로 시작하고 그리고 int 타입의 연도가 오면은
song-archive-view.as-view를 이렇게 쓰겠고요 그리고 name 인자로
song-archive-year이라고 지정하겠습니다
웹브라우저도 핫트랙에 archives에 2023으로 들어가시면 이와 같은 템플릿을 찾을 수
없다라는 오류가 발생합니다
song-archive.html 템플릿 파일을 생성해 주겠습니다.
슬라이드 하단에 안내해 드린 링크를 통해서 이 소스 코드를 확인하실 수 있겠고요.
소스 코드를 붙여넣기 했습니다
이 세 번째 줄에 있는 Extends라는 장고 템플릿 문법은 상속 문법입니다
우리가 하나의 부모 템플릿을 정해서 여러 템플릿에 걸쳐서 중복되는 레이아웃 코드가 있잖아요
부모 템플릿 하나에다 구현해 두고 이 부모를 상속을 받은 자식 템플릿은 부모가 정의한 모든
레이아웃을 그대로 이어받습니다
자식 템플릿은 부모가 정의한 블록이 있습니다.
그 블록에 대해서 재정의해서 컨텐츠만 변경해서 사용할 수 있는 템플릿에서 중복을 최소화
시킬 수 있는 기능이 장고의 템플릿 상속 기능이 되겠습니다.
이 base.html 파일도 복사해서 하트웨어 밑에 템플릿 밑에 하트웨어 밑에
base.html 경로로 이렇게 생성을 해주세요
그리고 새로고침 하시면은 만 세 번째 줄쯤에 가시면은 코드를 일단은 comment라는
이름의 템플릿 태그가 여러 줄 주석 문법입니다
이거 새로 고침하시면 나오죠.
현재 이열 아카이브 뷰를 구현했고요.
이어서 먼스 아카이브 뷰를 구현할 텐데 그 페이지로 가는 링크를 만들어주기 위한
코드인데요. 현재 먼스 기능이 없으니까 코드를 주석 처리했고요.
그냥 년과 월만 보여주도록 2023년에 데이터가 있는 월만 보여줍니다.
현재 데이터로는 10월부터 12월까지는 데이터가 없나 봐요.
곡 목록을 보고 싶습니다.
Make Object List 하는 설정이 Default 거짓인데 True도 해주시면
템플릿 속 리스트가 현재 비어져 있었는데 True도 해주시면 속 리스트에 코디셋이 다
들어있습니다.
그래서 2023년의 모든 곡들을 이렇게 조회했고요.
2023년에 데이터가 있는 월 목록도 이렇게 보여줬고요.
그리고 2월 아카이브 뷰에서는 PreviousYear, NextYear이라는 date
객체도 지원을 해줍니다
그래서 PreviousYear은 현재 년 기준으로 작년이죠
PreviousYear이 숫자로 그냥 2022라는 숫자가 아니라 데이트 객체입니다
2022년 1월 1일의 정보를 가지고 있고요 PreviousYear.Year로 해당 연도를
참조하실 수 있고요 URL이란 이름의 장고 템플릿 태그가 있겠고요 여기에
url 패턴의 이름이 song-archive-year 이었죠
그 이름을 똑같이 주고 path-router의 인자로서 정수 인자가 하나 필요했잖아요
그 인자를 하나 이렇게 제공해 주시면 url 템플릿 태그가 url 문자를 자동으로 생성을
해줍니다 이 기능이 장고의 URL 리버스 기능이고요.
이후 챕터에서 좀 더 자세히 다룰 수 있도록 하겠습니다.
작년 데이터가 있을 경우에 작년 링크를 제공하고요.
내년 데이터가 있을 경우에 내년 링크를 제공합니다.
그럼 2020을 누르면 21년이 Previous Year를 통해서 보여준 거고,
2023년은 Next Year를 통해서 보여준 거고, 이어서 Month Archive
View를 살펴보겠습니다
Month Archive View는 특정 월의 목록이고요 그 월의 일 단위 날짜 목록을
제공을 해줍니다
날짜 목록을 순회해서 일별로 이렇게 레이블을 보여줬고요 그리고 Object List
순회에서 그 월에 속한 공목록을 보여주고 있습니다
monthArchiveView 클래스를 상속받은 songMonthArchiveView
클래스를 정리했고, song 모델에 대해서 처리할 것이며, 날짜 필터링은
releaseDate 필드에 대해서 수행할 것이고요.
monthFormat이라는 속성도 지원을 합니다.
이 속성은 %m으로 지정을 했는데요.
월에 대한 포맷으로서 숫자와 알파벳을 지원해줍니다
저는 숫자로 처리하기 위해서 %m을 지정했어요
그러면 url에서 이렇게 2022 슬러시 05 혹은 5 를 통해서 2022년 5월 페이지를
조회할 수 있는 것이고요.
속성을 통해서 이율과 먼스를 먼저 찾습니다.
속성에 지정하면 완전 고정이 되는 거고요.
url-captured-value나 query-parameter에서 이율과 먼스 값도
참조합니다. 이렇게 적용을 하시면 요청에 따라서 year과 month 값을 가변적으로
처리를 하실 수 있게 되는 거죠
song-archive-month.html 경로가 디폴트로 사용이 됩니다
이 경로를 그대로 사용하겠고요
song-archive-month.html 템플릿과 비교해서 year 대신 month가
사용된 것만 다를 뿐 나머지 구조는 똑같습니다.
제가 노란색으로 표시해 놓은 부분이 year 대신 month만 적용해 주시면 돼요.
현재 이 날짜 목록에는 링크가 안 잡혀 있는데요.
다음에 있는 데이 아카이브 뷰를 구현하면 이 날짜에 대해서도 링크를 제공할 수 있으니까
그때 이 하단에 한 줄 주석 처리해 놓은 코드를 적용을 하셔가지고 여기에 링크를 적용하실
수 있겠습니다
song-month-archive-view 코드를 복사해서 그대로 붙여넣고요
month-archive-view 클래스를 임포트를 해줍니다
urls.py에서 이 코드를 그대로 복사해서 붙여넣겠고요 아카이브스 숫자만 왔을 때는 이열로
판단해서 song-ear-archive-view 통해서 처리를 하고요 아카이브스 다음에
숫자 슬러시, 숫자 슬러시 요청에서는 Month Archive View를 통해서 처리를
하겠습니다
웹브라우저에서 하트랙의 아카이브 수에 2022-05로 요청하시면 템플릿을 찾을 수 없다는
오류가 발생합니다 안내해 드린 소스코드를 복사하셔서 적용해 주시고 새로 고침하시면 이렇게
화면이 렌더링이 되고요 월 단위로 보여지고 있음을 확인하실 수 있습니다
그리고 song-archive.html 템플릿에서 주석으로 해 놓은 부분이 있죠
이 부분을 풀어 주겠습니다
그리고 이 코드 한 줄을 주석을 해 주고요
월별 날짜 목록에다가 이제 링크를 적용해 주시는 겁니다
그러면 2023으로 접근해 보시면 이렇게 링크가 잡혀 있죠
클릭하시면 1월이 보여지게 되겠고요 이번에는
Day Archive View가 되겠습니다.
특정 일에 대한 목록이 되겠고요.
URL 패턴에서 Year, Month, Day 세 개를 받았습니다.
우리가 앞서 살펴봤던 커스텀 컨버터 예시의 URL 패턴과 우리가 지금 사용할 url 패턴이
중복된 패턴이기 때문에 앞서 구현했던 이 패턴을 주석을 처리해서 제거를 해주겠습니다
SongDateArchiveView는 day-archiveView 클래스를 상속을 받고요
song-model에 대해서 처리하고요 릴리즈 날짜를 필드를 통해서 필터링하고 정렬해서
이 화면을 처리합니다.
데이 아카이브 뷰도 월 인자를 사용하기 때문에 month 포맷 지정이 필요하겠고요.
숫자 포맷 지정을 위해서 %m을 지정하겠습니다.
이렇게 말하시면, 기본적인 뷰 구현이 끝났고, 템플릿도 앞서 살펴봤던
song-archive-year.html 혹은 month.html 템플릿과 거의 구조가
같은데요.
year, month 대신에 day가 지원이 됩니다.
날짜를 통해서 보여지기 때문에 더 이상 세부 필터링 기준이 없습니다.
그 대신, 지난달, 다음달에 대한 컨텍스트 데이터를 지원해 줘요 Previous
Month, NextMonth가 제공이 됩니다
지난달, 다음달에 대한 링크를 이렇게 보여줄 수 있게 됩니다
SongDateArchiveView 코드를 복사해서 여기 붙여 놓고요 import로
해주고요.
urlspy에서도 이 코드를 복사해서 그대로 붙여넣겠습니다.
요청 주소가 archives에 숫자 슬러시, 숫자 슬러시, 숫자 슬러시라는 요청이 오면
송데이 아카이브 뷰 클래스를 통해서 요청을 처리하는 거죠
첫 번째는 이열로, 두 번째는 먼스로, 세 번째는 데이,
url-captured-values로 전달이 됩니다
그리고 이 아카이브스의 릴리즈 데이트, 이 패턴과 이 패턴이 중복되기 때문에 앞에 있는
패턴을 제거해 주셔야만 뒤에 있는 이 패턴에 의해서 요청이 처리되거든요
이렇게 하시고, 하트랙의 Archives에 2022-05-02 주소로 요청하시면
song-archive-date.htm의 템플릿이 없다는 오류가 발생합니다
이 부분도 제가 제공해 드렸던 코드를 복사하셔서요 이렇게 적용하시고 새로고침해 보시면
화면이 나오죠 5월 2일 기준으로 곡이 있는 그 전날은 4월 5일이고요 5월 2일 기준으로
곡이 있는 그 이웃날은 6월 7일이네요
지난달과 다음달에 대한 링크도 이렇게 제공을 해 주실 수 있게 됩니다
현재 월목록에서 각 일자에 대한 링크가 없잖아요
링크를 만들어 주겠습니다
song-archive-html 템플릿 상에서 하단에 여기 있는 A 링크 복사해서
month로 와서요.
이 부분은 그냥 지울게요.
지우고 붙여 놓습니다.
그리고 현재 코드에서 여기를 song-archive-day, urls에서
song-archive-day죠. 인자로 year, month, day 세 개가 필요하니까
여기도 year, month, day까지 지정해 주시고요.
여기는 일자까지 해서 d1이라고 써주시고 새로 고침하시면 링크가 만들어지고 클릭하면 5월
2일 데이터가 보여지고 있습니다.



이번 강의에서는 장고의 Generic DateView에 대해 다뤘습니다. Generic DateView는 날짜 필드를 기준으로 데이터를 목록화하는 뷰로, 여러 종류의 아카이브 뷰를 제공합니다. 주요 내용은 다음과 같습니다.

1. Generic DateView의 종류
장고의 Generic DateView에는 다음과 같은 7가지 뷰가 있습니다:

YearArchiveView: 특정 해의 목록과 그 해의 월별 날짜 목록을 제공합니다.
MonthArchiveView: 특정 달의 목록과 해당 달의 일별 날짜 목록을 제공합니다.
DayArchiveView: 특정 일의 목록을 제공합니다.
TodayArchiveView: 조회 날짜가 오늘인 데이터를 제공합니다.
WeekArchiveView: 특정 주의 목록을 제공합니다.
ArchiveIndexView: 전체 목록을 날짜 필드를 기준으로 역순 정렬하여 제공합니다.
DateDetailView: 해, 월, 일 정보와 함께 상세 정보를 제공합니다.

2. 공통 옵션
모든 Generic DateView에서는 아래와 같은 공통 옵션을 지원합니다:

AllowFuture: 기본값은 False. 날짜가 미래인 데이터를 허용할지 여부를 결정합니다.
AllowEmpty: 기본값은 False. 빈 데이터 리스트에 대해 404 오류를 발생시킬지, 아니면 빈 리스트를 반환할지 결정합니다.
fascinatedBy: None이 기본값으로, DateDetailView에서만 유효하며 목록 뷰에는 사용되지 않습니다.

3. YearArchiveView
YearArchiveView는 특정 해의 데이터를 조회하는 뷰입니다. 예를 들어, 특정 해에 발매된 곡들을 조회하는 경우 사용됩니다. 
이 뷰는 release_date와 같은 날짜 필드를 기준으로 데이터를 필터링합니다.
from django.views.generic.dates import YearArchiveView
from .models import Song

class SongYearArchiveView(YearArchiveView):
    model = Song
    date_field = 'release_date'
    queryset = Song.objects.all()


URL 패턴 설정:
urls.py에서 year를 캡쳐해서 YearArchiveView를 호출합니다.
urlpatterns = [
    path('archives/<int:year>/', SongYearArchiveView.as_view(), name='song-archive-year'),
]

템플릿: song-archive.html 템플릿을 생성하고, 기본적인 템플릿 상속을 사용하여 중복을 최소화합니다.

4. MonthArchiveView
MonthArchiveView는 특정 월의 데이터를 조회하는 뷰입니다. 예를 들어, 2022년 5월의 곡들을 조회할 때 사용됩니다.

from django.views.generic.dates import MonthArchiveView

class SongMonthArchiveView(MonthArchiveView):
    model = Song
    date_field = 'release_date'
    month_format = '%m'  # 월을 숫자로 표시

URL 패턴 설정:
urlpatterns = [
    path('archives/<int:year>/<int:month>/', SongMonthArchiveView.as_view(), name='song-archive-month'),
]

템플릿: song-archive-month.html 템플릿을 사용하며, 여기서는 월별 곡 목록을 표시하고, 각 날짜로 링크를 연결할 수 있습니다.

5. DayArchiveView
DayArchiveView는 특정 일자의 데이터를 조회하는 뷰입니다. 예를 들어, 2022년 5월 2일에 발매된 곡들을 조회할 때 사용됩니다.

from django.views.generic.dates import DayArchiveView

class SongDayArchiveView(DayArchiveView):
    model = Song
    date_field = 'release_date'
    month_format = '%m'  # 월을 숫자로 표시

URL 패턴 설정:
urlpatterns = [
    path('archives/<int:year>/<int:month>/<int:day>/', SongDayArchiveView.as_view(), name='song-archive-day'),
]

템플릿: song-archive-day.html 템플릿을 사용하여 해당 일자의 곡 목록을 표시하고, PreviousMonth, NextMonth 등의 날짜 네비게이션 링크를 제공할 수 있습니다.

6. Pagination
Generic DateView는 기본적으로 페이징 처리를 지원합니다. 결과 목록이 길어질 경우, 페이지를 나누어 표시할 수 있습니다.

7. MakeObjectList
MakeObjectList 속성은 기본값이 False로 설정되어 있습니다. 
이 옵션이 True로 설정되면, 데이터가 있는 날짜 목록을 제공하고 템플릿에서 목록을 표시할 수 있습니다. 
예시에서는 이를 True로 설정하여 곡 목록을 페이지에 표시했습니다.

8. URL 템플릿 태그 활용
장고의 URL 템플릿 태그를 사용하여, PreviousYear, NextYear, PreviousMonth, NextMonth 등의 링크를 동적으로 생성할 수 있습니다. 
이 기능을 활용하면 유연한 내비게이션을 제공할 수 있습니다.

예시:
{% url 'song-archive-year' year=previous_year %}

9. 예시 구현
강의에서는 SongYearArchiveView, SongMonthArchiveView, SongDayArchiveView 등의 클래스를 정의하여 각 연도, 월, 일에 해당하는 곡 목록을 제공하는 기능을 구현했습니다. 
URL 패턴 설정과 템플릿에서 각 날짜에 대한 링크를 동적으로 생성하고, 이전/다음 링크를 제공하여 사용자가 원하는 날짜로 쉽게 이동할 수 있도록 했습니다.

요약
Generic DateView는 날짜 필드를 기준으로 데이터를 리스트 형식으로 제공하는 뷰입니다.
연도, 월, 일, 주별로 아카이브 뷰를 제공하며, 기본적인 페이징 처리도 지원합니다.
URL 템플릿 태그를 활용하여 동적인 링크 생성을 할 수 있으며, MakeObjectList, AllowFuture와 같은 다양한 옵션을 통해 데이터 조회 방식을 세밀하게 조정할 수 있습니다.
각 아카이브 뷰는 기본적으로 템플릿 상속을 활용하여 효율적으로 관리할 수 있습니다.
이 내용들을 바탕으로 다양한 날짜 기반의 데이터 조회를 구현할 수 있습니다.