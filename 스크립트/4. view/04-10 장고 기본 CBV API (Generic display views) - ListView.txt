ListView 활용 예시를 살펴보겠습니다.
ListView는 한 개 모델에 List Template 응답을 지원합니다.
기본 목록 조회의 뷰를 함수 기반 뷰로 만들어 봤습니다.
SongListView가 호출되면 기본 모델 쿼리셋을 생성하고 HotTrack 밑에
song__list.html 템플릿을 활용해서 템플릿 응답을 생성하고 응답합니다.
템플릿명은 song-model이 속한 앱이름 밑에 모델명 소문자
(모델명 소문자)_list.html 포맷으로 구성했습니다.
템플릿 내에서 참조하는 QuerySet의 이름은 song_list로 정했으며,
모델명 소문자 underbar_list 포맷입니다.
ListView 클래스의 모델인자로서 song 클래스를 지정한 song_detail_view
클래스가 있습니다.
이 클래스의 as_view 호출을 통해 생성된 SongListView는 앞서 보신
song-list-view 함수와 동일한 동작을 합니다.
디폴트 경로로써 앱 이름 밑에 모델명 소문자 underbar-list.html 경로를
찾습니다. 그리고 템플릿 내에서 참조하는 코디셋의 이름은
object-underbar-list 이름이 기본 제공되며 추가로 모델명 소문자
underbar-list 이름이 제공됩니다.
ListView에서 템플릿 경로를 변경하는 방법은 DetailView 클래스와 동일합니다.
다만, 디폴트 템플릭 경로만 다릅니다.
ListView에서는 (앱이름)/(모델명 소문자)_list.html
경로이며 DetailView에서는 앱 이름 밑에 모델명 소문자 detail.html
경로입니다.
ListView에서 쿼리셋 템플릿 참조 이름을 변경하는 방법은 DetailView 클래스와
동일합니다. 다만 디폴트 이름만 다릅니다.
ListView에서 모델명 소문자 underbar_list라는 이름으로 템플릿에서 코디셋을
참조할 수 있으며 DetailView에서는 모델명 소문자 이름으로 템플릿에서 조회된 모델
인스턴스를 조회할 수 있습니다.
ListView에서의 컨텍스트 데이터 지정도 앞서 언급했던 템플릿 뷰에서의 내용과
동일합니다. 현재의 인덱스 뷰를 리스트 뷰 클래스를 활용해서 재구현을 해보겠습니다.
추석인 부분은 다 제거를 하겠구요.
송 모델에 대한 기본 코디셋이 있고 UR의 캡쳐드 밸류가 있다면 그 값을 통해서 기본
필터링을 하고요 그리고 Query라는 이름에 Query Parameter가 있다 하면은
Query 인자를 활용해서 추가 필터링을 합니다 사용할 템플릿은 이 이름은 모델명 소문자
underbar-list.html 이름이 아니니까 ListView 클래스에서도 커스텀
지정이 필요하겠고요
그리고 ContextData의 이름 같은 경우에는 이 모델명소문자 underbar_list
이름이니까 ListView의 기본 이름을 그대로 활용하는 거고요 Query라는 이 컨텍스트
데이터는 추가 지정이 필요한 상황입니다.
IndexView 클래스를 이렇게 주석을 처리하겠고요.
Index함수는 ListView를 통해서 기본 구현을 일단 해주고요.
서버 잘 돌고 있고요.
새로 고침을 하면은 템플릿을 못 찾는다고 나오죠.
디폴트로는 앱 이름 밑에 모델명 소문자 underbar_list.html 파일을 찾는데 이
파일이 없죠?
우리는 이 이름으로 해주시면은 템플릿 파일을 찾게 됩니다.
앙뮤 검색했을 때 검색어 필터링 해주는 기능이 필요해요 이 기능을 구현하려면 검색어가 매
뷰 요청마다 바뀔 수 있고 매 뷰 요청마다 바뀌는 값에 기반해서 코디셋을 변경해야 되는
거니까 GetUnderBar 코디셋 메소드를 재정의해서 구현을 합니다
그러면은 그냥 ListView.AsView 이 함수를 통해서 생성되는 이 함수로는 메소드
재정의를 못해요
이렇게 ListView 클래스를 상속받은 클래스를 하나 만들고요 이 클래스로부터
AsView 호출을 통해서 View 함수를 만들고 이 값들은 이렇게 넘겨주죠
개코디셋! 메소드를 재정의할 수 있습니다
이렇게 그래서 부모의 get 코디셋을 호출해서 기본 코디셋을 받아내고 우리가 정의한 get
코디셋 메소드에서 우리가 원하는 대로 코디셋에 대해서 추가적인 처리를 해 줄 수 있는
겁니다 코디라는 인자는 함수 기반 뷰에서는 이렇게 받았었는데요
클래스 기반 뷰에서 리퀘스트는 self에 있습니다
self.request 가 되겠구요
이렇게 값을 받아와서 이 query가 있다면은 이렇게 필터링을 수행을 해주는 거죠 추가로
release date에 대한 필터 같은 경우에는 이 값이 url captured
value니까 url
captured value는 self.keyword argument에 있습니다
그래서 이 값을 이렇게 조회해서 값을 가져오고요 url captured value에 저
값이 없다면은 none을 가져올 거고요 이렇게 부조건을 체크해서 코디셋 필터링을 하고
검색어가 있다면 검색어 필터링을 수행하고 리턴이 됩니다
이제 새로 고침 해보시면은 악뮤 노래만 나오게 되겠구요
템플릿에서도 검색어가 나오네요
인덱스 매치 테매를 가보시면은 퀘스트를 통해서 검색어의 기본값을 채워주는 부분 있네요
이렇게 지정했기 때문에 우리가 함수 기반 뷰에서 처럼 렌더 시에 query라는 이름의
컨텍스트 데이터를 넘기지 않아도 현재의 이 코드만으로 앞서 구현한 index 뷰 함수와
동일한 동작의 클래스 기반 뷰를 만들어 본 것입니다.
이번에는 페이징 지원에 대해서 살펴보겠습니다.
뷰 호출 시에 페이지 번호를 지정하는 방법은 query 파라메터로 지정하는 방법과 url
captured value로 지정하는 방법이 있습니다.
SongListView 함수에서 두가지 인자를 모두 지원하도록 페이지 인자를 받고 페이지
인자가 없으면 QueryParameter에서 조회하여 요청받은 페이지 번호를 처리합니다
ListView에서는 이 부분이 내부에 이미 구현되어 있습니다 장고에서는 Paginator
클래스가 제공됩니다.
페이징을 처리할 기본 코디셋과 페이지 크기를 지정하고 원하는 페이지 번호로 조회하여 페이지
오브젝트를 생성합니다.
페이지 오브젝트를 통해 페이징 처리된 코디셋을 참조할 수 있고, 이전 페이지 개수, 다음
페이지 번호, 전체 페이지 번호 등의 속성을 지원받습니다.
함수 기반 뷰에서는 직접 페이지네이터 인스턴스를 생성해서 페이징 처리를 해줘야 하며 리스트
뷰에서는 페이지네이트 바이 속성에 페이지 크기만 지정하면 내부에서 자동으로 페이징 처리를
해줍니다 페이징이 적용되면 템플릿에 isunderbar.paginated 즉 페이징 여부와
페이지네이터 인스턴스 그리고 pageunderbar.obj 인스턴스를 추가로 지원합니다
페이지 언더바 오브젝트 인스턴스를 통해 페이징 내비게이션을 수행을 할 수 있습니다.
인덱스 뷰 클래스 기반 뷰에다가 페이징 처리를 해보겠습니다.
여기에 검색어는 지우시고요.
요청해 보면은 모든 노래가 다 조회가 되겠고요.
여기에다가 페이지 네이션 by 10 이라고 주시면은 한 페이지에 10개씩 보여주겠다는
의미가 되겠고요.
새로 고침해 보시면은 이렇게 10개만 보여지고 있습니다
여기에다가 query 파라메타로 페이지 2라고 주시면은 이 페이지가 보여지고요 그리고
11페이지 없는 페이지에 가보면은 이렇게 페이지 not found 404 응답을 확인을
하실 수 있습니다 슬라이드 하단에 제공해 드린 링크를 확인하시면 이 소스 코드를 확인하실
수 있겠구요 화면 하단에 페이지 네비게이션 부분이 없습니다
그 부분을 이 코드를 통해서 채우실 수 있겠구요
이 코드를 하트윅 밑에 템플릿 밑에 하트윅 밑에
underbar-page-nation.html 파일로 만드시고 붙여넣겠습니다
그러면 페이지 오브젝트 값으로 이전 페이지가 있으면은 처음으로 링크 혹은 이전 페이지
링크를 보여주고요 그리고 현재 페이지 번호 전체 페이지 숫자 보여주고 다음 페이지가
있으면은 다음 페이지 링크 그리고 마지막 페이지로 가는 링크를 보여주도록 했습니다
인덱스 html 에서 송 리스트 부분도 있고 하나의 로우가 끝나고 나서 그 다음에 인클루드
하트에게 언더바 페이지 내셈 html 이구요
이 템플릿에서 사용할 컨텍스트 데이터는 페이지 오브젝트 였죠
그것만 넘겨주고 5호니 까지 지정하겠습니다
새로 고침 해보시면은 이렇게 하단에 페이지 내비게이션이 나옵니다
스타일링은 사용하시는 CSS 프레임워크에 맞게 스타일링 해주실 수 있겠구요
링크가 동작하는지만 보겠습니다
다음 페이지 하시면 이 페이지구요 마지막으로 하면 마지막 페이지로 이렇게 이동도 합니다
처음으로도 이동하겠구요
우리는 django-bootstrap-5가 설치되어 있습니다
django-bootstrap-5-rivalry에서도 pagination 관련된 템플릿
태그를 지원해주거든요
그걸 사용하기 위해서 index.html 템플릿 상단에 load
django-bootstrap-5 라고 해주겠구요
우리가 방금 사용했던 pagination 코드는 추적 처리 해주시고
bootstrap-pagination이라는 템플릿 태그가 지원됩니다
이렇게만 하시고 저장하시고 새로 고침 해보시면은 이런 오류가 발생해요
bootstrap-pagination 에서는 필요한 인자인 페이지를 받지 못했다.
발참에서 이 템플릿 태그에 대해서 커맨드나 컨트롤키 누르고 클릭하시면 해당 코드 구현체로
갑니다. 페이지라는 이름의 인자가 꼭 필요하네요.
그쵸? 우리는 페이지 obj라는 이름의 페이지 오브젝트가 있죠.
그래서 여기에 페이지 오브젝트를 진행해 주시면 이렇게 오류 없이 수행되고 페이지 하단에
페이지 내비게이션이 나오게 됩니다.
이 페이지 네비게이션에서 상하 마진도 없고 왼쪽 정렬이죠
bootstrap 5 css 프레머그 사용하고 있으니까 bootstrap 5 에서
지원해주는 상하 마진을 5만큼 주고요 그리고 flex layout 쓰고 컨텐츠 정렬을
센터로 지정해 주시면 이렇게 스타일이 입혀지게 됩니다
커스텀 믹싱 클래스로 재사용성을 높여 보겠습니다
인덱스 뷰 클래스에서 검색어 값을 추출하는 코드와 필터링을 수행하는 코드를 분리하겠습니다.
Get 요청 처리의 시작 지점에서 Query Parameter, Query 값을 조회하여
인스턴스 변수로 저장합니다.
Get Query Set Method에서는 Query 속성을 체크해서 필터링만 수행하면
되는 것이고요.
추가 Context Data로 Query 값을 넘기기 위해 Get Context Data
Method도 제정했습니다.
검색어를 저장하고 추가 컨텍스트 데이터 값으로 저장하는 부분은 다른 리스트 뷰에서도
동일하게 사용될 수 있는 코드입니다.
QuerySetFiltering 부분은 매 뷰마다 다르게 정의되어야 하는 부분이구요.
검색어 저장과 추가 컨텍스트 데이터 저장하는 부분을 SearchQueryMixin
클래스로 이렇게 정의하실 수 있습니다 그러면
인덱스 뷰 클래스에서 SearchQueryMixing 클래스를 상속만 받으면 검색어 저장과
추가 컨텍스 데이터로 저장되는 기능을 제공받게 되는 것입니다
인덱스 뷰에서는 검색어 속성만을 체크해서 QuerySet 필터링만 구현해주면 됩니다
인덱스 뷰 클래스가 더 깔끔해졌고 각 부분의 역할이 명확해져
코드의 가독성과 유지 보수성이 향상되었습니다


이번 강의에서는 ListView와 관련된 다양한 기능들을 활용하여 Django 프로젝트에서 리스트 뷰를 구현하는 방법을 다루었습니다. 주요 내용은 ListView 클래스를 사용한 기본 목록 조회, 검색 필터링, 페이징 처리, 템플릿 구성 등입니다. 아래는 주요 내용을 단계별로 정리한 것입니다.

1. ListView 기본 구현
ListView는 모델 데이터를 리스트 형식으로 조회하고 템플릿을 통해 응답을 반환하는 클래스입니다.
ListView를 사용하면 기본적으로 모델에 대한 쿼리셋을 생성하고, 특정 템플릿을 사용하여 결과를 보여줍니다.
템플릿 경로는 앱 이름 + 모델 이름 소문자 + _list.html 형식으로 자동으로 설정됩니다.
기본적으로 템플릿에서 쿼리셋은 object_list라는 이름으로 참조됩니다. 다른 이름으로 참조하려면 context_object_name 속성을 사용하여 변경할 수 있습니다.

기본 구현 예시
class SongListView(ListView):
    model = Song
    template_name = 'hottrack/song_list.html'
    context_object_name = 'song_list'
템플릿에서 song_list라는 이름으로 모델 데이터를 사용할 수 있습니다.


2. 템플릿 및 쿼리셋 참조
기본적으로 ListView는 _list.html 템플릿 파일을 찾습니다.
템플릿 내에서 쿼리셋 데이터를 사용할 때는 기본적으로 object_list라는 이름을 사용하지만, context_object_name 속성을 통해 이를 변경할 수 있습니다.

예시:
context_object_name = 'song_list'
템플릿에서 song_list로 쿼리셋 데이터를 참조할 수 있습니다.

3. ListView에서 템플릿 경로 변경
기본적으로 ListView는 앱 이름/model_name_list.html 경로를 찾지만, 이를 template_name 속성을 사용하여 커스터마이즈 할 수 있습니다.

4. 검색어 필터링
ListView에서 쿼리 매개변수(query parameter)를 활용해 필터링을 구현할 수 있습니다.
get_queryset 메소드를 오버라이드하여 검색어나 URL에서 캡처한 값을 기반으로 쿼리셋 필터링을 처리합니다.

예시:
class SongListView(ListView):
    model = Song
    template_name = 'hottrack/song_list.html'
    
    def get_queryset(self):
        queryset = Song.objects.all()
        
        query = self.request.GET.get('query')
        if query:
            queryset = queryset.filter(name__icontains=query)
        
        return queryset
이 예시에서는 검색어를 query라는 이름으로 받아서 필터링을 수행합니다. 검색어가 있을 경우 해당 이름을 포함하는 곡들을 조회합니다.

5. 페이징 처리
ListView에서 기본적으로 페이징 기능을 지원합니다.
paginate_by 속성을 설정하면 한 페이지에 표시할 객체의 수를 지정할 수 있습니다.

예시:
class SongListView(ListView):
    model = Song
    template_name = 'hottrack/song_list.html'
    paginate_by = 10
이 속성을 설정하면 페이지네이션 처리가 자동으로 이루어집니다.

템플릿에서 페이징 네비게이션을 추가하려면 is_paginated와 page_obj를 사용할 수 있습니다.

예시 (템플릿):
{% if is_paginated %}
    <div class="pagination">
        {% if page_obj.has_previous %}
            <a href="?page=1">&laquo; 처음</a>
            <a href="?page={{ page_obj.previous_page_number }}">이전</a>
        {% endif %}
        <span class="current">Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}</span>
        {% if page_obj.has_next %}
            <a href="?page={{ page_obj.next_page_number }}">다음</a>
            <a href="?page={{ page_obj.paginator.num_pages }}">마지막</a>
        {% endif %}
    </div>
{% endif %}


6. ListView에서 커스터마이징: get_context_data와 get_queryset 재정의
get_context_data 메소드를 오버라이드하여 추가적인 컨텍스트 데이터를 템플릿에 전달할 수 있습니다.
검색어와 같은 추가적인 데이터를 컨텍스트에 추가하고 싶다면, get_context_data를 재정의하여 처리할 수 있습니다.

예시:
class SongListView(ListView):
    model = Song
    template_name = 'hottrack/song_list.html'
    paginate_by = 10
    
    def get_queryset(self):
        queryset = Song.objects.all()
        query = self.request.GET.get('query')
        if query:
            queryset = queryset.filter(name__icontains=query)
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['query'] = self.request.GET.get('query', '')
        return context
템플릿에서 query를 사용하여 검색어를 표시할 수 있습니다.

7. 믹스인(Mixin) 활용
검색어 필터링과 같은 기능은 여러 뷰에서 반복될 수 있기 때문에 이를 Mixin으로 분리하여 재사용성을 높일 수 있습니다.
SearchQueryMixin 클래스를 작성하여 검색어 필터링 및 추가적인 컨텍스트 데이터 처리를 공통 기능으로 분리할 수 있습니다.

예시:
class SearchQueryMixin:
    def get_search_query(self):
        return self.request.GET.get('query', '')

    def get_queryset(self):
        queryset = Song.objects.all()
        query = self.get_search_query()
        if query:
            queryset = queryset.filter(name__icontains=query)
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['query'] = self.get_search_query()
        return context

class SongListView(SearchQueryMixin, ListView):
    model = Song
    template_name = 'hottrack/song_list.html'
    paginate_by = 10
이렇게 작성하면 검색어 필터링과 검색어를 컨텍스트 데이터로 넘겨주는 작업을 재사용할 수 있습니다.

8. Bootstrap 5와 Pagination
Bootstrap 5를 사용하여 페이징 네비게이션을 더 보기 좋게 스타일링할 수 있습니다.

django-bootstrap-5 라이브러리를 사용하면 pagination을 쉽게 적용할 수 있으며, 
bootstrap-pagination 템플릿 태그를 활용하면 간단히 스타일링된 페이징 네비게이션을 구현할 수 있습니다.

예시 (템플릿):
{% load bootstrap5 %}
{% bootstrap_pagination page_obj %}

9. 결론
ListView를 활용하면 Django에서 목록 조회 기능을 간편하게 구현할 수 있으며, 검색, 필터링, 페이징 기능을 쉽게 추가할 수 있습니다.
get_queryset과 get_context_data를 오버라이드하여 쿼리셋 필터링과 추가적인 데이터 처리를 할 수 있으며, SearchQueryMixin을 사용하여 반복되는 코드를 재사용할 수 있습니다.
Bootstrap과 같은 CSS 프레임워크를 사용하여 페이지네이션을 스타일링할 수 있으며, django-bootstrap-5 라이브러리를 활용하면 더 쉽게 페이징 네비게이션을 구현할 수 있습니다.
이 과정을 통해 ListView의 기본 동작을 이해하고, 검색어 필터링, 페이징 등을 추가하여 좀 더 실용적인 리스트 뷰를 만들 수 있습니다.