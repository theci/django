안녕하세요. 이번 시간에는 URL Reverse를 통한 유연한 URL 문자열 생성입니다.
대부분의 웹 프레임워크에서는 URL 문자열을 직접 조립합니다.
이 과정에서 실수가 발생할 수 있고요.
이러한 실수는 URL을 직접 방문해서 404, Face Not Found 화면을 보기
전까지는 발견하기 어렵습니다.
그런데 장고의 URL Reverse 기능을 활용해서 URL 문자열을 조립하면 응답을
생성하는 과정에서 URL을 조립하게 되고, 조립 과정에서 발생하는 오류를 즉시 인지할 수
있게 됩니다. 장고 어드민 페이지는 관리자만 접속할 수 있어야 하며, 관리자가 아니라면
관리자 로그인 접속조차 허용하지 않아야 합니다.
외부 유저에게 공개된 장고 서버에는 어드민 앱을 비활성화하거나 외부 네트워크로부터의 접속을
차단하는 방법이 가장 안전하겠지만, 최소한의 대처로써 slushy-admin-slushy
주소를 다른 주소로 변경하는 방법이 권장됩니다.
slush admin slush 주소를 변경하시려면 mysite의 urls.py 파일에서
admin 앱의 url prefix 주소만 변경해 주시면 됩니다.
장고 admin 앱 안에서는 모든 URL 주소가 하드코딩되어 있지 않고 URL
Reverse 기능을 활용하여 동적으로 URL을 계산하기 때문에 손쉽게 주소를 변경하실 수
있습니다. 장고에서 URL Reverse를 사용하는 방식은 여러 이점을 제공합니다.
첫 번째로 가독성이 높아집니다.
URL 패턴 이름을 통해 어떤 뷰와 연결되는지 명확하게 알 수 있습니다.
이는 코드를 읽고 이해하는데 도움이 됩니다.
두 번째, 유지보수성이 향상됩니다.
URL 라우트 주소가 변경되어도 URL 패턴 이름이 같다면 그 이름을 참조하는 모든 코드가
자동으로 최신 상태로 업데이트 됩니다.
이로 인해 코드를 유지하고 관리하는 데에 드는 노력이 줄어듭니다.
세 번째, 타입 안정성이 강화됩니다.
장고는 URL 패턴 매칭에 대한 오류를 검사하므로 잘못된 URL을 만들 위험이 크게
줄어듭니다. 이는 프로그램의 전체적인 안정성과 신뢰성을 높여줍니다.
URL Reverse는 여러 프로젝트에 의해 사용되어지는 장고 앱 라이브러리에게
필수입니다.
프로젝트에 따라 URL 프리픽스를 유연하게 지정할 수 있거든요.
URL Reverse를 적용할 때, 각 URL 패턴의 이름이 중복되지 않도록 관리하는 것이
중요합니다. 장고의 URL Dispatcher는 요청된 URL 패턴을 찾기 위해 URL
Patterns List를 역순으로 순서대로 확인합니다.
같은 이름의 URL 패턴이 두 개 있다면, 리스트 상에서 뒤에 위치한 URL 패턴에 대해
우선 매칭을 시도하고, URL 패턴 이름이 겹치더라도 사용되는
인자의 패턴이 다르거나, 인자 개수가 다르다면 서로 다른 패턴으로써 사용될 수 있습니다.
한 앱 내에서 경로 이름이 겹치는 것은 쉽게 알아차릴 수 있지만, 서로 다른 앱들
사이에서는 이를 파악하기 어렵습니다.
예를 들어, 핫트랙 앱과 블로그 앱에 post__detail이라는 같은 이름과 패턴에
URL 패턴이 있다면 URL Reverse 시에 이 중 하나의 URL 패턴만 사용될 수
있습니다. 이러한 문제를 해결하기 위해 장고는 URL 패턴를 분리할 수 있는 이름 공간을
제공합니다. URL 패턴즈를 정의하는 코드에 app_name을 설정하여 이름 공간을
지정할 수 있습니다.
대부분 앱의 이름을 그대로 사용합니다.
또한 한 앱 내에서 여러 개의 URL 패턴들을 트리 구조로 가질 수 있으며 각각에 대해
별도의 앱 네임을 설정할 수 있습니다.
만약 앱 네임을 설정하지 않았다면 URL Reverse를 할 때 URL 패턴의 이름만
지정하면 되고요.
앱 네임을 설정한 경우에는 URL Reverse를 사용할 때마다 반드시 앱 네임을 함께
지정해야 URL Reverse가 제대로 동작합니다.
핫트랙의 urlspy 파일에서 url-patterns-list 설정과 함께 앱 네임은
핫트랙 설정을 했습니다.
이제 이 url-patterns에 대한 URL Reverse를 시도할 때에는 핫트랙 콜론
네임 스페이스를 필히 지정해야만 합니다.
그리고 urlpatterns에서는 각각의 url 패턴에 대해서 인덱스 네임,
SongDetailName, SongDetailName 이렇게 지정했습니다.
SongDetail이라는 같은 이름의 URL 패턴이 있는데요.
둘 다 정수 인자를 한 개씩 받는다는 점은 같지만, 인자 이름이 다른 부분이 있습니다.
그래서 인자 이름을 다르게 지정을 해서 URL Reverse를 수행한다면, 둘 다 사용이
될 수 있습니다.
장고에서는 URL reverse를 수행하는 가장 저수준의 함수는 reverse라는 함수가
되겠습니다.
Reverse 호출 시에 그냥 index라고만 지정하시면요, 네임스페이스를 지정하지 않았기
때문에 하트웹의 URL 패턴즈에는 매칭되지 않습니다.
아래와 같이 appName이 지정한 이 네임스페이스를 쓰시고 콜론을 쓰셔야만이 핫트랙의
Index라는 이름으로 이렇게 매칭을 시도해서 URL Reverse에 성공하면 슬러시,
핫트랙, 슬러시라는 URL이 계산되는 것이고요 그리고 핫트랙, 콜론, song, detail이라고
쓰고 인자를 지정하지 않으면 송, 디테일, 송, 디테일 두 개의 URL 패턴에 대해서 둘
다 숫자 패턴의 문자열을 한 개씩 요구하고 있습니다
그런데 하나도 지정하지 않았으니까 필요한 인자 수를 충족하지 않았기 때문에 No
Reverse Match 예외가 발생하고요 송 디텔이라고 쓰시고 인자로 숫자 1개를
지정했습니다 이렇게 지정하시면 이 두 개 중에 뒤에 있는 패턴에 매칭이 됩니다
장고의 URL 디스패처는 URL 매칭을 시도할 때 뒤에서부터 순차적으로 적용을 시도하거든요
뒤에 있는 송 디테일에 대해서 먼저 매칭을 시도하게 되고 이 숫자 패턴이 여기에 부합이
되기 때문에 URL Reverse를 통해서 계산된 주소는 핫트랙, 멜론, -, 멜론
UID, 슬러시가 될 것이고요
문자열이 아닌 숫자로 지정하시더라도 URL 패칭을 시도할 때에는 숫자는 문자열로 자동
변환되어 매칭을 시도하기 때문에 둘 다 동작합니다
그리고 송 디테일 시에 키워드 인자를 통해서 사전 형식으로 인자를 지정하실 수도
있는데 각각의 값에 대해서 이름을 지정하잖아요
PK란 이름으로 100이라고 지정하고 멜론 UID란 이름으로 멜론 UID를
지정하시게 되면 이때 PK를 지정했을 때에는 이 이름에 매칭이 되어서 PK 100은 슬러시
핫트랙 슬러시 100 슬러시라는 주소가 계산이 되는 거고요
Melon UID로 지정하시면 이렇게 주소가 계산이 됩니다
그리고 song-detail이라는 이 URL 패턴은 int, 즉 숫자 포맷의 문자열만
받도록 되어 있는데, abc라고 쓰시면 숫자 패턴의 문자열이 아니죠.
abc는 숫자 패턴이 아니기 때문에 no-reverse-match 예외가 발생합니다.
두 개 외에 song-detail이라는 이름의 URL 패턴이 없으니까 더 이상 매칭을
시도할 패턴이 없잖아요
그래서 No Reverse Match 예외가 발생하는 거고요 그리고
song-archive-day인데 여기 패턴에 song-archive-day라는 URL
패턴이 있고 인자 세 개를 받도록 되어 있다면 이와 같이 URL 문자열이 완성이 됩니다
URL Reverse를 지원하는 4개의 함수에 대해서 살펴보겠습니다.
그 첫 번째로 URL reverse의 기본 함수인 reverse라는 함수입니다.
Reverse는 URL 패턴명을 이용해서 관련 URL 문자열을 반환합니다.
URL Reverse에 성공하면 URL 문자열을 반환하고 실패하면 No Reverse
Match 예외를 발생시킵니다.
두번째로, resolve_underbar_url 함수는 Reverse 함수를 랩핑하여
편의성을 강화시켰습니다.
Reverse의 ARGS, KWARGS 인자 지정이 보다 간결해졌고요.
모델 인스턴스를 인자로 전달하면, 해당 모델의 GetAbsoluteURL 메서드를 호출해서
URL 계산에 위임하여 반환값을 반환합니다.
대개 모델 클래스의 GetAbsoluteURL 메서드는 Reverse 함수 호출을 통해
구현하고요.
Resolve URL 함수는 인자에 슬래시가 포함된 경우, 이는 URL 패턴명이 아닌
URL 문자열로 판단하여 URL Reverse를 수행하지 않고 인자를 주소로 판단해서
그대로 반환합니다.
인자에 Slush가 포함되지 않은 경우에는 URL Reverse를 수행하고 성공하면 페이지
이동, 실패하면 No Reverse Match 예외를 발생하고요.
세 번째로 Vue에서 페이지 이동 응답을 할 때에 손쉽게 사용할 수 있는
redirect라는 함수가 있습니다.
redirect 함수는 Resolve URL 함수를 랩핑해서 문자열을 반환하는 것이 아니라
HTTP 리스펀스를 반환합니다.
그래서 Vue 함수에서 값을 반환할 때에 사용을 하실 수 있고요.
마지막 네 번째로, 장고 템플릿에서 URL이라는 이름의 템플릿 태그가 있습니다
장고 템플릿 태그는 파이썬에서의 함수와 비슷하다고 보시면 되는데요
단, 그 템플릿 태그를 사용하고 인자를 지정할 때 소관로를 사용하지 않고 각 인자마다
중간에 콤마 구분자를 쓰지 않고 그냥 띄어쓰기를 사용합니다
핫트랙 앱에 URL Reverse를 적용해봅시다.
슬라이드 하단의 커밋 링크에서 변경내역을 확인하실 수 있으니 살펴보시고 차근차근
변경해주세요. 주요 변경내역 첫 번째로 mysite의 urls.py 파일에서 최상위 주소
요청에 대해 // 주소로 이동 시에 URL Reverse가 적용되도록 URL 인자 대신에
패턴네임 인자로 변경합니다.
두번째로 songModel 클래스의 getAbsoluteURL 메서드에서
namespace를 지정하고 songDetail을 songDetail로 변경합니다.
불필요한 URL 패턴명을 제거하고 다른 songDetail과 인자 구성이 다르기에 공존이
가능합니다. 세 번째로 여러 템플릿에 걸쳐 URL 템플릿 태그를 통해 링크를
생성했었습니다.
모든 링크를 찾아서 네임스페이스를 추가해줍니다.
이후 새롭게 생성되는 장고 앱에서는 장고 앱을 생성하자마자 앱 네임까지 지정하시기를
권장드립니다. 한 모델 인스턴스에 대한 디테일 URL 주소를 계산하는 것은 빈번하고 그
주소 계산을 매번 하는 것도 중복입니다.
모델 인스턴스에 대한 디테일 URL 계산이니 이를 모델 클래스의 메서드로 URL
Reverse를 수행하는 코드를 두고 이렇게 호출토록 해서 코드를 보다 간결하게 구현할 수
있습니다. 이는 ResolveURL 함수의 첫 번째 인자가 GetAbsoluteURL의
속성이 있다면, 이 속성을 호출하여 반환값을 즉시 반환토록 구현되어 있고, Redirect
함수에서는 ResolveURL을 사용하는 덕분에 이런 코드가 가능합니다.
저는 모델에 대한 디테일 뷰를 구현하면 그 즉시 모델에 getAbsoluteURL 메서드를
구현해줍니다 뷰에서 생성, 수정 후에 디테일 주소로 이동하는 것은 자연스러운 시나리오인데요
클래스 기반 뷰인 CreateView와 UpdateView에서는 생성, 수정 요청을 처리한
후에 이동할 주소로서 모델에 getAbsoluteURL 메서드가 있다면 호출하여 그 주소로
이동합니다 한 모델에 대한 디테일 뷰를 구현하신 후에 그 즉시 getAbsoluteURL
메서드를 구현하신다면 CreateView, updateView 활용 시에도 별도로
successURL 속성 혹은 getSuccessURL 메서드를 구현하지 않아도 디테일
주소로 자동 이동하게 됩니다.
디테일 URL 주소로 이동함을 명시적으로 보여주기 위해 getSuccessURL 메서드를
구현하는 접근도 좋습니다.



이 강의에서는 Django의 URL Reverse 기능을 사용하여 URL 문자열을 유연하게 생성하는 방법에 대해 설명하고 있습니다. 주요 내용은 다음과 같습니다.

1. URL Reverse 기능의 장점
가독성: URL 패턴 이름을 통해 어떤 뷰와 연결되는지 쉽게 알 수 있어 코드 이해가 쉬워집니다.
유지보수성: URL 패턴이 변경되더라도, URL Reverse를 사용하면 코드 내의 모든 참조가 자동으로 업데이트됩니다.
타입 안정성: 잘못된 URL이 생성되면 Django가 오류를 미리 감지하여 프로그램의 신뢰성을 높여줍니다.

2. Django Admin 주소 변경
Django 관리자 페이지는 보안상 외부에 노출되지 않아야 하므로, slushy-admin-slushy 같은 기본 주소를 다른 주소로 변경하는 것이 좋습니다.
이를 위해 urls.py에서 admin.site.urls의 URL 패턴을 바꾸면 됩니다. reverse()를 통해 URL을 동적으로 생성하므로, URL 패턴 변경 시 오류를 미리 확인할 수 있습니다.

3. URL Reverse 사용법
URL Reverse는 URL 패턴 이름을 이용해 동적으로 URL을 생성하는 방법입니다. 이를 사용하면 URL을 하드코딩하지 않아도 되고, 실수를 줄일 수 있습니다.
reverse() 함수를 통해 패턴 이름을 기준으로 URL을 생성할 수 있습니다.

4. URL 패턴 이름 공간 (Namespace)
동일한 URL 패턴 이름을 다른 앱에서 사용할 수 있도록 네임스페이스를 지정할 수 있습니다.
app_name을 설정하여 reverse() 호출 시, 네임스페이스를 포함한 URL을 정확하게 참조할 수 있습니다. 
예를 들어, hottracks:song_detail처럼 네임스페이스와 패턴 이름을 함께 사용해야 합니다.

5. 인자 처리
URL 패턴에 인자가 필요한 경우, reverse() 함수에 해당 인자를 넘겨서 URL을 생성할 수 있습니다.
인자 이름을 다르게 지정하여 중복된 URL 패턴이 있더라도 구분할 수 있습니다.

6. Django의 다양한 URL 함수
reverse(): URL 패턴명으로 URL 문자열을 반환합니다.
resolve_url(): URL 문자열이나 패턴명을 인자로 받아 URL Reverse를 수행합니다.
redirect(): URL로 페이지를 리디렉션하는 HTTP 응답을 반환합니다.
url 템플릿 태그: Django 템플릿에서 URL을 동적으로 생성하는 데 사용됩니다.

7. 모델에서의 URL Reverse
모델 인스턴스에 대해 자주 필요한 디테일 URL을 계산할 때, get_absolute_url() 메서드를 정의하여 URL Reverse를 수행할 수 있습니다. 이 방법을 사용하면 뷰에서 get_absolute_url()을 호출하여 디테일 페이지로 쉽게 이동할 수 있습니다.
클래스 기반 뷰인 CreateView와 UpdateView에서는 get_absolute_url()을 활용하여 생성 및 수정 후 디테일 페이지로 자동으로 리디렉션할 수 있습니다.

8. 실습: 핫트랙 앱의 URL Reverse
urls.py 파일에서 reverse()를 사용하여 URL 패턴 이름을 인자로 사용하는 방식으로 URL을 생성합니다.
모델 클래스에서 get_absolute_url() 메서드를 정의하여 모델에 대한 URL을 계산하고, resolve_url() 또는 redirect() 함수와 함께 사용할 수 있습니다.

9. Django의 URL Reverse 기능의 활용
새로운 Django 앱에서는 앱 이름을 app_name으로 지정하고, URL Reverse를 적용하여 코드의 일관성을 유지할 수 있습니다.
모델에 대한 디테일 URL을 get_absolute_url() 메서드를 통해 처리하면, 뷰에서 디테일 URL을 쉽게 가져올 수 있어 코드가 간결해집니다.

10. 정리
URL Reverse를 활용하면 코드의 유지보수성이 향상되고, URL이 변경되더라도 안전하게 관리할 수 있습니다.
URL 패턴 이름, 네임스페이스, 인자 등 다양한 방식으로 URL을 동적으로 처리할 수 있으며, 이를 통해 Django 프로젝트의 안정성과 효율성을 높일 수 있습니다.


