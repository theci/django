안녕하세요 이번 시간에는 Generic Display View에 대해서 살펴보겠습니다.
Built-in class 기반뷰 API 중에 두 번째 카테고리로 Generic
Display View가 있으며 Detail View와 List View가 있습니다.
첫 번째로 Detail View 활용 예시입니다.
Detail View는 한 개의 모델에 한 개의 객체에 대한 템플릿 응답을 지원하고
있습니다. 기본 조회 뷰를 함수 기반뷰로 만들어봤습니다.
URL로부터 PK 이름의 인자를 전달받아 SongDetailView를 호출하면
GetObject404를 통해 PK 필드에 대해 인자로 받은 PK 값으로 Song
Instance를 조회하고 하단 밑에 SongUnderbarDetail.html 템플릿을
활용해서 템플릿 응답을 생성하고 응답합니다.
사용할 템플릿 명은 Song 모델이 속한 앱 이름 밑에 모델명 소문자
UnderbarDetail.html 포맷으로 구성했습니다.
템플릿 내에서 참조하는 song 인스턴스의 이름은 song으로 정했으며 모델명
소문자 포맷으로 정했습니다.
Detail 클래스에서 모델인자로서 song 클래스를 지정한 song-detail-view
클래스가 있습니다.
이 클래스의 as-view 호출을 통해 생성된 song-detail-view는 앞서 보신
song-detail 클래스와 동일한 동작을 합니다.
디테일 뷰에서는 템플릿 디폴트 경로로써 에비던트 슬러시 모델명 소문자 언더바 디테일 점
html 경로를 찾습니다
앞서 보신 이 뷰에 이 템플릿 이름과 같죠
그리고 조회된 인스턴스 템플릿 천조 이름은 오브젝트 이름이 기본 제공되고요 추가로 모델명
소문자 형식의 이름이 제공됩니다
앞서 보신 이 song의 이름과 같습니다
그리고 가져올 pk 즉 Captured value의 이름은 디폴트로 PK거든요?
SongDetailView에서도 PK 인자를 받아서 PK필드에 대해서 PK값으로 조회를
합니다. 이와 동일한 방식으로 DetailView에서도 PK값을 읽어내어서 모델 인스턴스를
조회합니다.
이번에는 템플릿 경로를 변경해 보겠습니다.
SongDetail 함수 기반 뷰에서는 렌더 함수의 템플릿 네임 키워드 인자로 사용할
템플릿 경로를 지정합니다.
Detail 뷰에서는 템플릿 네임 속성이 될 수 있도록 Detail 뷰 클래스를 상속받은
템플릿 네임 클래스 변수나 as_view 함수 출시의 템플릿 네임 인자로 사용할 템플릿
경로를 지정합니다.
이 방식은 사용할 템플릿 경로가 고정일 때 유용하고요 만약 동적으로
뷰 요청에 따라 사용할 템플릿 경로가 변경되어야 한다면 get_,
template_, names, method를 재정의하여 리스트 포맷으로
사용할 템플릿 경로 문자의 후보들을 다수 지정할 수 있습니다
대개 리스트에서는 1개 템플릿 경로만 지정합니다
이번에는 조이된 인스턴스 템플릿 참조 이름을 변경해 보겠습니다.
SongDetail 함수 기반 view에서는 랜더 함수에 Context 키워드 인자로 값을
넘길 때 임의로 이름을 지정할 수 있습니다.
DetailView에서는 Context Object Name 속성이 될 수 있도록
DetailView 클래스를 상속받은 Context Object Name 클래스 변수나
AsView 함수 출시에 Context Object Name 인자로 사용할 이름을
지정합니다. 템플릿 경로와 마찬가지로 특별한 이유가 없다면 디폴트 이름을 사용하시길
추천드립니다.
이번에는 pk 역할로의 url captured values로부터 가져올 각 이름을 변경해
보겠습니다. url 패턴에서 pk 역할로써 song id를 지정했다면 SongDetail
View에서는 Song ID 인자를 받게 되고 이 값으로 PK 필드에 대해서 조회를
수행합니다. DetailView에서는 PK 역할로서 가져올 인자 이름을 PK UR 대
키워드 아귀먼트 인자를 통해 변경하실 수 있습니다.
관례로서 PK 역할의 URL 캡쳐드 밸류수의 이름은 PK 이름을 그대로 사용하시면 기존
클래스 기반뷰 코드들을 큰 변경 없이 활용할 수 있으니 이 설정을 가급적 그대로 쓰시기를
권장드립니다.
DetailView에서는 PK필드 혹은 Slug 필드로만 조회를 수행합니다.
URL의 Captured Values에 PK이름의 인자가 있다면 PK필드로 조회를 하고
Slug이름의 인자가 있다면 Slug필드로 조회를 수행합니다.
PKUR의 KeywordArguments 속성과 유사한 SlugUR의
KeywordArguments 속성 값이 Slug 값으로 제공됩니다.
PK와 Slug가 아닌 이외의 조건의 조회가 필요하시다면 get_object 메서드를
재정의해서 원하는 형태의 조회를 수행하실 수 있습니다.
이번에는 커스텀 컨텍스트 데이터를 지정하는 방법은 간략하게만 언급하겠습니다.
이미 템플릿 뷰에서 언급했었던 내용이기 때문입니다.
디테일 뷰를 포함한 거의 모든 장고 기본 클래스 기반 뷰는 템플릿 뷰를 상속 받았기 때문에
Extract Context를 통해서 정적인 데이터를 지정하실 수 있으며 Get
Context Data Method 재정의를 통해서 뷰 호출 시점에 결정되는 데이터를
지정하실 수 있습니다.
이번에는 조회 쿼리셋을 변경하는 방법에 대해서 살펴보겠습니다.
장고의 모든 클래스 기반 뷰에서는 쿼리셋 속성으로 고정 코드 셋을 지정 받으며 get 쿼리셋
메소드에서 쿼리셋 속성 값을 참조하고 그 클래스 기반 뷰에서 사용할 쿼리셋을 반환합니다.
그러니 1번, 3번의 경우처럼 고정 쿼리셋이라면 쿼리셋 인자로 활용될 수 있도록 값을
지정해 주시고 검색 필터링이나 요청 유저에 따른 필터링이 필요할 때에는
get_code_set 메서드를 재정의해서 구현하실 수 있습니다.
이번 예시의 경우 고정 쿼리셋으로도 해결할 수 있기 때문에 get_code_set 예시로는
적절하지 않습니다.
pk 필드로 song 노래를 한 곡 조회하는 예시를 살펴보겠습니다.
pk 이름으로 urlCapturedValue 인자를 전달합니다.
그러면 DetailView로부터 생성된 SongDetailView에서는 PK필드에 대해서
전달받은 PK값으로 데이터베이스 조회를 수행합니다.
조회된 SongModelInstance는 디폴트로 HotTrack 밑에
song-detail.html 경로의 템플릿을 찾고 HotTrack 밑에 템플릿 밑에
HotTrack 밑에 song_detail.html 경로에 그 파일이 있으니
이 템플릿 파일을 사용합니다.
songunderbar.detail.html 템플릿은 앞서 만든 HotTrack 밑에
index.html 파일의 레이아웃을 그대로 가져와서 노래 내역을 보여주는 부분만 변경해서
보여주겠습니다.
슬라이드 하단에 템플릿 코드가 있으니 복사해서 사용해주세요.
그리고 HotTrack 밑에 underbar.detail.html 템플릿 파일에 멜론 유튜브
링크 외에 디테일 링크를 추가해줍니다.
Slushy Artwork Slushy Song.pk Slushy 포맷에 문자열을 직접
조합해서 링크를 만듭니다.
이후 URL Reverse를 익히게 되면 이 부분을 URL Reverse를 사용하여
장고에게 URL 조합을 맡기도록 변경해 보겠습니다.
슬라이드 하단에 링크를 클릭하시면 이 페이지가 나옵니다
하트웨이 밑에 view.spy 파일을 먼저 여신 다음에 view 코드를 먼저 추가해
주겠습니다
index 함수가 있고 그 밑에다가 song-detail-view 함수는
detail-view 클래스 기반 view에 as view 호출을 통해서 view 함수를
만들고요 이때 모델 인자로 song-model 클래스를 지정을 해 주겠습니다
자 이렇게 구현하는 것이 가장 기본적인 형태의 디테일 뷰 구현이 되겠습니다
그리고 핫트랙 밑에 있는 urls.py 파일을 여신 다음에 인트 타입으로 pk가 오면은 그리고
슬러쉬로 끝나면은 뷰 함수는 뷰스의 song detail이라는 뷰 함수가 호출이 되도록
해줄 거에요 이렇게 하고 개발 서버가 구동 중이시면은 로컬에서 8000 핫트랙에 1로
접근하시면은 이렇게 이 슬롯이 주소로 바뀌면서 핫트랙 밑에 있는
song-detail.html 템플릿 파일을 찾습니다
현재 이 상황에서는 우리가 이미 PK가 1 이잖아요
1인 PK에 대해서 데이터베이스 조회가 이미 이루어졌고 이 템플릿을 찾아서 응답을 만들려는
상황입니다 그러면 템플릿 파일만 있으면은 이 응답이 만들어지는 거죠
이 경로에 템플릿 파일은 어디에 만들어 주냐면
앱과 관련된 템플릿 파일이기 때문에 하트웨이 밑에 템플릿스 라는 이 경로에서 그 밑에다가
templates 밑에 하트웨이 밑에 song-detail.html 템플릿 파일을 만들어주는 거죠
이렇게 하시고 새로 고침해 보시면은 이렇게 응답이 오죠
underbar-song.html 파일은 index.html 파일에서 여러 개의 송
리스트를 돌면서 각 곡마다의 정보를 보여주는 거죠
이 템플릿에서 멜론 링크 유튜브 링크 등이 있는데 여기 추가로 이렇게 디테일로 가는 주소를
버튼 그룹 아래에다가 넣어 주겠습니다
하트엑슬러시라는 주소로 가면 추가로 디테일이라는 링크가 잡혔죠 클릭하면 1번으로 가고
클릭하면 2번으로 가고 클릭하면 이렇게 3번으로 갑니다
이 템플릿 파일을 구성을 해 주겠습니다
song-details.html 파일인데요
이대로 적용해 주시면 되는데 이 파일은 index.html 저기 index.html에 있는
레이아웃을 그대로 쓴 겁니다
그래서 이 index.html 파일을 그대로 복사하셔가지고 song_details.html
템플릿에 그대로 붙여넣어 봅니다
붙여넣고 한번 새로 고침 해보시면은 이렇게 나오죠
하나의 song 세부 내역이 없습니다
왜냐하면 보여주는 코드가 없으니까 그렇고요 이 부분에서 song list가 없죠
그러니까 이 부분에 컨텐츠가 없는 거고요
나머지의 코드는 그대로 활용을 하겠습니다
언더바 song.html에서 메인 부분의 코드만 복사하셔서 메인을 지우고 이렇게 메인을
바꿉니다 song의 cover url 이미지 보여주고 노래 곡명, 앨범명, 아티스트 명,
장르, 출시일, 좋아요
수 그리고 멜론 링크, 유튜브 링크 그리고 가사, 라인프렉스를 지정하시면은 각각의 문단이
p 태그로 처리가 됨을 확인하실 수 있겠고요 여기에 br을 붙여주시면 각각의 개행이 br
태그로 처리됨을 확인하실 수 있습니다
현재 이 페이지에서 검색을 하면 현재 페이지 주소에 검색 요청이 전달이 됩니다
그런데 song detail view에서는 이러한 검색 기능이 없죠
이러한 검색 요청은 index view에서 지원을 하고 있습니다
현재의 이 화면에서 검색 요청은 indexview에서 처리할 수 있도록 요청의 주소를
변경을 해줘야 됩니다.
song_detail.html 템플릿에서 form 태그가 있는데
action의 주소가 현재 입력된 값을 전송할 주소인데 비어있기 때문에 현재 웹페이지
주소로 요청을 보낸 거고요.
이 주소를 이렇게 이렇게 핫트랙스이라고 써주시면은 이 url 패턴을 기반해서 인덱스 뷰가
호출이 되는 거죠.
세로고침 한번 해주시고요.
그러면 현재 이 폼테이그의 액션이 슬러시 핫트랙 슬러시로 변경된 걸 확인하실 수 있고 이제
악뮤를 검색해 보시면 악뮤가 검색이 되고 인덱스페이지로 이렇게 전환이 되었음을 확인하실 수
있습니다. 이어서 pk가 아닌 slug로 조회를 해보겠는데요.
슬러그 성격은 아니지만 디테일 뷰에 슬러그 관련 속성을 활용하여 멜론_UID라고
하는 song 모델의 유니크 필드를 통해서 조회를 해볼 수 있도록 하겠습니다
멜론 언더바 UID 필드는 숫자로만 구성된 숫자 열인데요 song.pk라는 값도 기본 키도
숫자로만 구성이 되어 있으니까 서로 이제 포맷이 구별이 안 갑니다
pk와 멜론 UID 방식 둘 다 를 사용하기 위해서 멜론 UID 앞에다가 멜론 하이픈
이라는 문자에 한번 붙였어요
두 개를 쓰도록 하고요 핫트랙스의 urls.py 에서 기존의 pk 를 통한 song detail
view 호출 이 패턴에서 멜론 하이픈 그리고 숫자가 오고 슬러시도 끝나는 이 패턴에
대해서 숫자 부분을 멜론 UID라는 이름의 값으로 뽑아서
Song_DetailView를 호출할 때에 인자로 넘기도록 하겠습니다.
DetailView에서는 PK라는 이름의 UIDCaptureValue나 Slug라는 이름의
UIDCaptureValue가 있으면 PK나 Slug 값을 관련 모델 인스턴스 조회에
사용하는데요. PK 컬럼명이 아닌 다른 이름으로 조회하는 옵션은 없구요.
슬러그 필드에 대해서는 어떤 필드로 조회할 것인지 해당 조회하는 필드명을 지정해 줄 수
있고 그리고 관련 조회를 위해서 UR의 captured value로부터 어떤 이름의 값을
가져올 것인지 이렇게 지정을 해 줄 수 있습니다
두 개 설정을 넣어주시고 나서 슬러쉬 핫트랙 슬러쉬 페이지에 가보시면은 두번째
디테일이 있습니다
이 디테일 링크는 여기 두번째 A 링크를 통해서 표현이 되는 것이고요
이 버튼들을 클릭해서 각각 멜론 UID로 조회한 송 디테일 페이지를 확인하실 수 있습니다
먼저 핫트랙에 urspy 파일을 열어주시고요
여기에서 패스는 route 주소는 melon-int 패턴인데 값은 멜론 UID 값으로
캡쳐하겠습니다
캡쳐해서 뷰는 뷰스의 song-detail 함수를 호출하도록 하겠습니다
그러면 song-detail 함수는 PK라는 이름의 인자가 넘어갈 수도 있고 혹은 멜론
언더바 UID라는 이름의 인자가 넘어갈 수 있어요
중의 하나가 넘어가서 SongUnderbarDetailView 함수가 호출이 됩니다
현재의 뷰함수 구현에서는 PK 혹은 Slug라는 이름의 UIDCaptured Value
인자만 처리하도록 되어 있고 melonUid라는 이름의 인자는 현재의 뷰 구성에는 처리하지
못합니다 그래서 슬러그 언더바 필드 라는 인자가 지원이 되구요
디폴트로 슬러그 입니다
그리고 슬러그 url 키워드 아귀멘트도 디폴트가 슬러그에요
url 에서는 멜론 언더바 uid 라는 값으로 캡쳐해서 전달되는 거니까 여기는 이렇게 바꿔
주겠구요 송 모델에서는 melon_underbar_uid라고 하는 유니크 필드가 있죠
송 관련 테이블에서 멜론 UID 값은 그 테이블 내에서 유니크함을 데이터베이스로부터
보장받고 있어요
유니크하니까 디테일 뷰에서 사용할 수 있는 겁니다
슬러그 필드에서 방금 봤던 필드명으로 이렇게 수정을 해주시면 이제
song-detail-view는 pk라는 인자가 전달되거나 혹은
melon-underbar-uid라는 이름의 인자가 전달되면 조회도 수행하고요 slug라는
값은 지원하지 않습니다
왜냐하면 slug 대신에 melon-uid 값도 처리하도록 이렇게 설정을 바꿨기 때문이죠
멜론 언더바 UID라고 쓰고 디폴트 2라고 쓰겠습니다 쓰시고 새로 고침하시면 두번째 링크가
생겼죠 악뮤 페이지 한번 열어보고 정국 그리고 뉴진스 페이지로 열어보겠습니다
악뮤의 페이지 멜론 UID 값이구요 정국의 페이지 그리고 뉴진스의 페이지 이렇게 송 디테일
뷰는 하나의 주소만을 가지는 것이 아니라 여러 개의 주소를 가지는 뷰를 구현하실 수 있고요
기존의 PK를 지원하는 이 주소도 여전히 지원을 해주고 있습니다
이번에는 URL 캡쳐드 밸루스에서 PK 슬러그 뿐만 아니라 멜론 UID까지 지원하는 방법에
대해서 살펴보겠습니다.
디테일 뷰를 상속받은 새로운 클래스를 만들고요.
GetObject Method 제정을 통해 멜론 UID 값이 URL 캡쳐드 밸류에 있을
경우에 멜론 UID 필드로 조회하고 해당 값이 없으면 GetObject의 기본 동작으로
수행토록 해서 pk 혹은 슬러그 값으로 인스턴스 조회를 하겠습니다
그러면 디테일 뷰를 상속받은 새로운 클래스를 만들고요 모델 클래스 변수만 정해줬죠
앞서 정의한 슬러그 관련 설정은 넣지 않았습니다 그러면
현재의 이 클래스에서는 PK 혹은 slug에 대해서 조회를 수행하는 거죠
이번에는 디테일 뷰에서 URL 캡쳐드 밸류스로부터 PK 혹은 Slug 값 뿐만 아니라 Melon
UID 값까지 모두 지원하도록 구성해 보겠습니다
getObject 기본 구현에서는 pk 값과 slug 값에 대해서만 조회를 지원하는데요
getObject 메소드 재정의을 통해 url.captured.values에서
Melon.uid 값부터 체크하고 Melon.uid 값이 있다면 Melon.uid 값으로
조회를 하고 melon.uid 값이 없다면 getObject 기본 구현으로 조회를 하여
pk 혹은 slug 값으로 조회가 되도록 합니다
하트랙 밑에 view.spy 파일을 여시고요
SongDetailView 함수를 DetailView 클래스로부터 바로 만들지 않고 별도의
클래스를 만든 다음에 그 클래스로부터 SongDetailView 함수를 만들도록 하겠습니다
SongDetailView 클래스를 만들었고요
이제 SongDetailView 클래스로부터 SongDetailView 함수를 만들고요
AsView에 지정했던 인자들은 제거하고 여기 SongDetailView 클래스로
옮기겠습니다
SongDetailView 클래스에서는 PK 인자와 Slug 인자를 그대로 사용하고 멜론
언더바 UID 인자를 추가로 사용하려는 거죠
그렇기 때문에 Slug 관련 설정은 지우시고 getObject 라는 메소드를 재정의해서
멜론 uid 인자가 있으면 사용하고 없으면은 기본 구현으로 동작하도록 할 거에요
그래서 코드셋 값이 없다 하면은 코드셋 이 값은 get 코드셋 메서드 호출해서 기본
쿼리셋을 가져오구요
이 쿼리셋을 통해서 모델 인스턴스를 조회를 할 것입니다
이 코드는 getObject의 기본 구현을 보시면 쿼리셋 인자에 따라서
GetCodyset을 호출해서 기본 쿼리셋을 만드는 게 있죠
이 코드를 가져온 것이구요
이 method, get_underbar_codyset는 이 코드로 가보시면 이 쿼리셋이라는
속성값이 없다면 모델 클래스를 통해서 기본 모델 쿼리셋을 생성을 하는 거고요 모델이
지정되어 있지 않다면 그 클래스 기반 뷰에 지정되어 있지 않다면 해당이 오류를 발생시키도록
되어 있고 쿼리셋 속성이 지정되어 있다면 이 로직을 타지 않고 그 지정된 쿼리셋을 활용해서
이렇게 반환토록 구현이 되어 있습니다
URL Captured Value는 클래스 기반뷰에서
self.keywordarguments라는 사전에 저장이 되어 있습니다
이 사전에서 melon-uid라는 값이 있다면 만약에 값이 없다면 none이라는 값일
거에요 값이 있다면 데이터베이스 조회를 하고 없으면 404 오류를 발생시킬 거에요
그걸 좀 쉽게 알 수 있도록 도와주는 장고 GetObject.or.404 이구요
여기에 쿼리셋을 지정할 수 있습니다
그리고 멜론 UID 필드에 대해서 해당 song 모델의 멜론 UID 필드에 대해서 이 멜론
UID 값으로 조회를 해서 값이 있다면 모델 인스턴스가 반환될 것이고 없다면 404 예외를
발생시킬 겁니다
songDetailView 클래스의 GetObject 구현이 끝났고 밑에 1번과 2번을
열어보시면 PK를 통한 조회와 멜론 UID를 통한 조회가 둘 다 잘 동작함을 확인하실 수
있구요 추가로 슬러그 인자가 있다면 슬러그 인자에 대해서도 이 뷰 클래스는 지원하고
있겠구요 URM 맵핑에서만 슬러그가 있다면 슬러그 필드에 대해서 조회를 수행합니다