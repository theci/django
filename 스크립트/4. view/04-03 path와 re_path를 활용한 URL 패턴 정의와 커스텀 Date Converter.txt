안녕하세요 이번 시간에는 패스와 Path Converter를 통한 url 패턴 정의입니다
패스는 자주 사용하는 정규표현식을 컨버터로 등록해 두고 별칭으로 컨버터를 사용합니다
기본 지원되는 별칭은 int, uuid, slug, path, str 입니다
adi 패스에는 정규표현식을 직접 지정할 수 있어서 다양한 url 패턴을 등록할 수 있지만
매번 정규표현식을 지정하는 것은 번거로울 수 있습니다 자주 사용하시는 정규표현식 패턴이
있다면 커스텀 컨버터로 등록하여 사용하실 수 있어요
패스에 보시면 INT라고 하는 별칭을 쓰고 인자 이름을 PK로 썼습니다
이 패스와 똑같이 RE 패스를 사용하시려면 이렇게 정규표현식을 직접 사용하는 거에요
INT에 대응되는 정규표현식은 역슬래시 딥 플러스입니다
uuid 컨버터를 사용하는 것이고요
view 함수에는 uuid라는 이름으로 인자를 넘기려고 합니다
uuid 같은 경우에는 정규표현식이 아주 복잡합니다
uuid를 사용하실 때에는 Path Converter를 통해서 정규표현식을 지정하는 것보다 이렇게 컨버터를
사용하시는 방식이 쉽죠
Slug의 경우에도 Slug 컨버터가 있겠고요 Slug라는 이름으로 view함수에 인자를
넘기려고 합니다
Slug에 대응되는 정규표현식은 이와 같습니다
이제 Path의 경우에도 정규표현식은 이와 같구요 그리고 str의 경우에도 정규표현식은 이와 같습니다 
정규표현식 예시를 몇가지 간단히 살펴보겠습니다
정규표현식에서 대갈로드 쓰면은 한글자의 위치에 올 수 있는 후보문자들을 나열할 수 있습니다
한자리에 올 수 있는 문자열로서 0, 1, 2, 3, 4, 5, 6, 7, 8, 9를
나열한 것이고요.
순서는 상관없습니다.
아래와 같이 쓰신다면 0이나 1 혹은 2부터 4까지입니다.
2, 3, 4가 될 것이고요.
5부터 9까지입니다.
이 숫자들은 연속된 숫자이기 때문에 0부터 9까지 라고 쓰실 수 있겠구요
0부터 9까지는 이미 예약된 숫자가 있습니다
역슬래시 d구요
역슬러시 d 자체가 하나의 패턴이므로 이렇게 대관로를 생략하고 역슬러시 d 라고 쓰실 수
있겠구요 역슬러시와 D는 별개의 문자로서 처리가 되어야 합니다.
숫자 열 앞에 r을 붙이시면 로우의 의미가 되겠구요
이렇게 쓰시면 오른쪽과 같이 역슬래시를 Escape 해서 별개의 문자로서 처리하실 수
있습니다.
파이썬에서는 여러분들이 r을 빼고 그냥 역슬래시 d라고 쓰셔도 처리를 해주는데요 앞에 r을
붙이시는 것이 좀 더 명확한 표현이 되겠습니다
이어서 반복 횟수를 지정할 수 있는데요 그냥 하나의 패턴을 쓰신다면 1회 반복을 의미하는
것이고요. 숫자를 쓰시면 해당 문자가 연속해서 몇 번 반복되는지 지정하는 것입니다.
1을 쓰시면 안 쓰셔도 1회 반복이기 때문에 굳이 쓸 필요는 없겠죠.
2를 쓰시면 2회 반복이며 2,4라고 쓰시면 2회 혹은 3회 혹은 4회를 지정하는 것입니다
물음표를 쓰시면 0회 혹은 1회를 의미하는 것이며 이 경우에는 0회 이상 반복을 의미하고요
이 경우에는 1회 이상 반복을 의미합니다
이어서 두자리 숫자 포맷의 문자열은 이렇게 한글자에 대한 패턴, 한글자에 대한 패턴을
이어서 쓰실 수도 있겠고 모두 숫자니까 0부터 9, 0부터 9, 혹은 역슬래시 D 혹은 역슬러시 D, 역슬러시
D, 역슬러시 D, 역슬러시 D 두개가 반복되니까 중갈로 2로 쓰실 수 있습니다
한자리 혹은 두자리 숫자 포맷의 문자 열이라면은 얘와 같이 쓰시면은 앞선 문자가 물음표면은
0회 혹은 1회죠
없을 수도 있고 있을 수도 있고 뒤에 있는 문자는 항상 있는 거예요
그러니까 한자리 혹은 두자리가 되겠고요 이걸 줄여서 이렇게 쓰시고 줄여서 이렇게 쓰고
중갈로 쓰실 때는 1, 2라고 쓰실 수 있겠습니다
3자리 숫자도 역슬러시 d, 역슬러시 d, 역슬러시 d 이렇게 쓰실 수 있겠고 연속적으로
3번 반복되니까 중갈로 3을 쓰는 거고요 4자리 숫자는 이렇게 문자열로서 1, 2, 3,
4, 5, 6, 7, 8, 9, 10, 11, 12 문자열 즉 5를 나타낸다면 이렇게
써보실 수 있습니다 패턴이 하나의 패턴 또는 2개의 패턴 또는 3개의 패턴 이거든요
이 중에 첫번째 패턴은 1부터 9까지 의미하는 부분이 되겠구요
두번째 패턴은 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9까지의 패턴을
의미하는 것이고 세번째 패턴은 1 1 1 2 까지 커버하는 거죠
자 이번에는 휴대폰 번호 포맷의 문자를 조금 러프하게 지정해 본 예시입니다.
010으로 시작을 하겠구요.
그 다음에 오는 번호가 0인 경우는 저는 별로 못 본 것 같아요.
그래서 010이 이어서 1부터 9까지의 문자가 올 수 있고 연속해서 0부터 9까지의 문자가
7번 올 수 있다라고 이렇게 패턴을 정리했구요.
알파벳 소문자 한 글자에 대한 패턴을 정리한다면 a 부터 g 까지 순서대로 나열할 수
있겠고 그리고 이를 묶어서 a 부터 g 까지 라고 이렇게 사용을 합니다 알파벳 대문자는
나열하시고 대문자 a 부터 대문자 g 까지 쓰실 수 있겠고 알파벳 대소문자를 모두 커버하는
패턴은 소문자 a 부터 소문자 g 그리고 대문자 a 부터 대문자 g 이를 추각해서 이렇게
패턴을 정의할 수 있습니다
URL 캡처드 밸류의 타입인데요 우리가 패스나 알리 패스에서 이렇게 패턴을 지정해서 URL
문자열로부터 값을 뽑아서 뷰 함수에 전달하는 값을 URL 캡쳐드 밸류라고 합니다
ArrayPath의 함수는 정규표현식 패턴에 매칭된 문자열을 view함수의 인자로 그대로
전달합니다. 그렇기 때문에 ArrayPath에서의 urlCapturedValue는 항상
문자열입니다. 그에 만해, Path함수는 PathConverter를 통해서 값을 변환한
후에 view함수의 인자로 전달하기 때문에 사용한 Converter 종류에 따라 타입이
달라져요. 인티저 컨버터의 경우에는 뷰 함수에 값을 넘기기 전에 정수도 변환을 하겠구요
UUID 컨버터의 경우에는 뷰 함수에 값을 넘기기 전에 UUID 인스턴스도 변환합니다 스윙
컨버터는 별도 변환 없이 그대로 전달합니다
앞선 예시를 보시면은 패스에서는 int 컨버터를 사용했기 때문에 뷰1이라는 뷰가 호출될
때에는 pk값은 정수이고요 아이디 패스
암수에서는 이와 동일한 패턴을 지정했지만 아이디 패스는 패턴 매칭만 하고 값을 그대로 전달하기
때문에 뷰2가 호출이 될 때에는 pk는 문자입니다
패스에서 UUID 컨버터를 사용하면은 뷰3가 호출이 될 때에는 이 인자는 UUID
타입이구요 아이디 패스에서 UUID 패턴을 정리해서 뷰4가 호출이 될 때에는 이 UUID
값은 문자일입니다 엄격하게 패턴을 지정한다면 불필요한 뷰 호출을 줄일 수 있습니다
우리가 앞서 구현한 cover png view가 있습니다
이 view에 대한 패턴을 정의할 때에 pk에 대해서 str Converter를 지정했어요
pk는 숫자인데 문자열 패턴이기 때문에 숫자가 아닌 경우에도 이와 같이 매칭이 됩니다
물론 뷰에서 404 오류가 발생할 테지만 모든 미드웨어가 호출되고 뷰가 호출되고
데이터베이스까지 조회하고 나서야 404 오디오 응답을 하게 되는 거죠
이는 서버 리소스 낭비가 될 수 있고요 그리고 뷰 인자를 그대로 로우 SQL 쿼리 작성에
사용할 때 예상치 못한 쿼리로 SQL 인젝션 공격에 노출될 수도 있습니다
PK는 숫자이기 때문에 정수 패턴을 넣어주는 거죠
자 이와 같이 패턴을 정의하시면 숫자 패턴이 아닌 경우에는 이 패턴에 매칭되지 않고 이후
패턴을 이어서 검사하게 됩니다
숫자 패턴인 경우에만 커버 PNG 뷰가 호출이 되는 거예요
커스텀 컨버터 예시입니다
데이트 컨버터라고 이름을 지어봤겠구요
하나의 요청이 핫트랙 아카이브 2022 슬러시 03 슬러시 04 요청이 오면 2022년
3월 14일에 릴리즈된 노래의 목록을 보려고 합니다
일반적으로는 이와 같이 우리가 패스트 정리할 때에 정수패턴으로 year 정수패턴으로
month 정수패턴으로 day 이렇게 3개의 인자를 받아서 view함수에 넘겨가지고요
그리고 쿼리셋에서 year, month, day 이 3개의 값을 가지고 쿼리셋에 사용을
하게 되는데요 이러한 경우, 2023년 12월 32일과 같은 요청도 우리 DB에는 없을
거예요. 이런 요청도 매칭이 되어서 관련 뷰가 호출이 되고 데이터베이스도 조회가 되고
그런데 관련 데이터는 없는 거죠.
엄격하게 패턴을 지정하면 불필요한 요청을 사전에 걸러낼 수 있겠구요
컨버터를 적절하게 활용하시면 적절한 타입의 인자를 받을 수 있습니다
Date Converter라는 걸 하나 만들어 봤구요
커스텀 컨버터를 만드시면은 regex라는 패턴으로 이 컨버터에서 사용할 정규표현식 패턴을
정의합니다 그럼 이 패턴을 연월일이기 때문에 이와 같이 정수 네 글자 슬러시 정수 한 글자
혹은 두 글자 그리고 정수 한 글자 혹은 두 글자 이렇게 지정이 된다면 99월 같은 것도
지정이 되죠 가급적 엄격하게 패턴을 지정하시면 좋습니다
그래서 연도인 경우에는 딥에 있는 범위를 엄격하게 해주시면 좋구요
이것도 일단 2099년까지 매칭이 됩니다만 좀 더 신경 쓰시면 엄격하게 넣을 수 있겠죠
5월의 경우에는 1 2 3 4 5 6 7 8 9 혹은 0 1부터 0 9 10, 11,
12까지 그리고 날짜인 경우에는 1부터 9, 01부터 09 그리고 10부터 30까지 그리고
31까지 매칭이 되도록 이렇게 정규표현식을 만들어 봤습니다
자 그러면 이 패턴이 매칭이 되면은 view 함수에 넘기기 전에
toUnderbarPython 이라는 함수가 호출이 되어서 이 함수가 반환된 값을 쓸
뷰함수의 인자로 넘기거든요?
value 단위 문자열은은 이 패턴에 매칭이 된 문자열이에요
그래서 2023.12.2호 혹은 이 경우라면은 문자열로 2022.0.3.1.4라는 문자열이
올 것이고요 그래서 구분자인 슬러쉬로 스플릿을 한 다음에 정수로 변경을 해서 개별 변수에
저장을 했습니다
그리고 데이트를 통해서 데이트 인스턴스를 반환하는 거죠
자 우리가 만든 Custom Converter가 사용되기 위해서는 등록 과정이 필요하겠구요
해당 컨버터를 어떠한 이름으로 사용하겠다라고 등록인데 이 코드가 호출이 되어야 되거든요
그래야 등록이 되기 때문에 그래서 우리 urls에서 이 컨버터를 import만
해주겠습니다
import만 해주시면은 register 컨버터를 통해서 등록이 됩니다
그러면 우리 패스에서 사용을 할 때에 여기에 지정한 데이트 데이트로 지정해서 해당 컨버터를
사용하실 수 있겠구요
이와 같은 요청이 오면은 2022년 3월 14일에 값을 가지는 데이트 인스턴스가 해당 뷰도
호출이 됩니다 자 현재의 핫트랙 앱에서는 인덱스 뷰는 아무것도 없는 주소일 때 호출이 되죠
그래서 리퀘스트 인자 하나만 받았었는데 제가 이 IndexView를 하나 더 매칭을 했어요
그러면 아무것도 없는 상황에서도 IndexView가 호출이 되고 이 패턴에 매칭이 될 때도
호출이 되죠
이때에는 ReleaseDate라는 인자가 전달이 되는 겁니다
그럼 IndexView는 인자가 없는 경우도 있고 있는 경우도 있으니까 이 두 가지를 다
커버하기 위해서 Default인자, None을 이렇게 할당을 했습니다
그러면 이 경우에는 릴리즈 데이트는 none일 것이고요
이 경우에는 릴리즈 데이트의 값이 있겠죠
릴리즈 데이트의 값이 있을 때 우리가 쿼리셋을 활용해서 필터를 할 수 있는 것입니다
슬라이드 하단에 소스코드 링크가 있습니다
페이지를 열면 이렇게 보이실 것이고요 핫트랙 밑에 converters.py에 이 코드를
적용을 해주세요 저는 현재 이렇게 복사를 해뒀고요 핫트랙에 urls.py 에서 import 을
해서 등록을 해주겠습니다
현재 이 코드는 사용하지 않기 때문에 이렇게 경고가 보여지고 있지만 noqa 라고
붙여주시면은 이 부분은 무시가 됩니다
추가로 route 룰을 지정해 주겠습니다
자 view는 views에 index view를 호출을 할텐데 컨버터의 이름은 Date
였죠 view함수에 전달한 인자는 release date 라고 하겠습니다 쓰고 슬러시까지
자 그러면 요청을 한번 해보면요 제가 하트랙에 아카이브에 2022 슬러시 03 슬러시 14
라고 했으면 이렇게 하고 새로 고침 하니까 인덱스 뷰에서는 이 이름의 키워드 인자를 현재
못 받는다 라는 오류가 발생을 했어요
인덱스 뷰에서 인자를 받도록 처리를 해주겠습니다
이렇게 임포트로 해주시구요
2인자가 있을 수도 있고 없을 수도 있죠.
40인자로 지정해 주겠습니다.
릴리즈 데이트가 있으면 코리셋에서 릴리즈 데이트라는 필드가 여기 있어요
데이트 필드입니다
데이트 필드이기 때문에 이렇게 데이트 객체로 바로 코리셋을 작성할 수 있는 겁니다
새로 고침해보시면 이렇게 여자아이들의 톰보이 이 노래만 2022년 3월 14일 이더라구요
이렇게 확인하실 수 있습니다


이번 시간에서는 URL 패턴 정의와 Path Converter를 활용하는 방법에 대해 설명하셨습니다. 주요 내용은 자주 사용하는 정규 표현식을 커스텀 컨버터로 등록하여 URL 패턴을 정의하는 방식입니다. 이를 통해 URL에서 캡처된 값을 뷰 함수에 적절한 타입으로 전달할 수 있습니다. 아래에 주요 개념을 정리해드리겠습니다.

1. 기본 Path Converter
Django는 URL 패턴에서 다양한 컨버터를 제공하여 정규표현식을 관리할 수 있습니다. 기본적으로 제공되는 컨버터는 다음과 같습니다:

int: 정수 타입
uuid: UUID 타입
slug: 슬러그 문자열
path: 경로 문자열
str: 문자열
이들을 사용하면 복잡한 정규 표현식을 직접 작성할 필요 없이 간단하게 URL을 정의할 수 있습니다. 예를 들어, int를 사용하면 정수형 데이터를 뷰 함수로 전달할 수 있습니다.

2. Path에 정규표현식 적용하기
패스를 사용할 때 기본적인 정규 표현식도 지정할 수 있습니다. 예를 들어, INT 별칭은 \d+와 동일한 정규 표현식으로 작동합니다. 하지만, 매번 정규 표현식을 직접 입력하는 것은 번거롭기 때문에 자주 사용하는 정규 표현식을 커스텀 컨버터로 등록해 두면 편리합니다.

3. 정규표현식 사용 예시
정규 표현식에서 다양한 패턴을 작성할 수 있습니다. 몇 가지 예시를 들면:

[0-9]: 한 자리 숫자
[2-4]: 숫자 2, 3, 4
\d: 숫자 한 자리를 의미하는 예약어
\d{2,4}: 두 자리에서 네 자리까지의 숫자
[A-Za-z]: 알파벳 소문자, 대문자 범위
4. URL 캡처된 값
URL 패턴에서 매칭되는 값을 URL 캡처드 밸류라고 하며, Path와 Aliased Path에서는 컨버터를 사용하여 캡처된 값을 뷰 함수에 전달합니다. Path에서는 값을 변환하여 전달하는 반면, str이나 slug와 같은 경우는 문자열로 그대로 전달됩니다.

5. 커스텀 컨버터 만들기
커스텀 컨버터를 만들면 특정한 형식에 맞는 URL 패턴을 정의하고 이를 뷰 함수에서 사용할 수 있습니다. 예를 들어, 날짜를 처리하는 DateConverter를 만든다면, 이를 통해 2022/03/14와 같은 형식으로 날짜를 URL에서 받아올 수 있습니다.

1) 커스텀 컨버터 예시 (DateConverter)
python
코드 복사
import re
from django.urls import register_converter

class DateConverter:
    regex = r'(?P<year>\d{4})/(?P<month>\d{2})/(?P<day>\d{2})'

    def to_python(self, value):
        year, month, day = map(int, value.split('/'))
        return datetime.date(year, month, day)

    def to_url(self, value):
        return value.strftime('%Y/%m/%d')

register_converter(DateConverter, 'date')
이와 같은 커스텀 컨버터를 작성하여 urls.py에 등록하고, URL 패턴에 사용할 수 있습니다.

2) URL 패턴 사용 예시
python
코드 복사
from django.urls import path
from . import views

urlpatterns = [
    path('archive/<date:release_date>/', views.index, name='archive_index'),
]
6. 뷰 함수에서 인자 처리
뷰 함수에서는 URL에서 전달된 값을 인자로 받습니다. 예를 들어, release_date를 받으면 이를 DateConverter를 통해 변환하여 datetime.date 객체로 사용할 수 있습니다.

1) 뷰 함수 예시
python
코드 복사
from django.shortcuts import render
from .models import Song

def index(request, release_date=None):
    if release_date:
        songs = Song.objects.filter(release_date=release_date)
    else:
        songs = Song.objects.all()
    return render(request, 'index.html', {'songs': songs})
이와 같이 release_date가 None인 경우와 날짜가 주어진 경우를 처리할 수 있습니다.

7. URL 캡처된 값의 타입
Path에서 정규 표현식을 사용한 값은 변환 후 뷰 함수로 전달됩니다. 예를 들어 int는 정수, uuid는 UUID 타입으로 전달됩니다.
Aliased Path는 정규 표현식을 사용하지 않고 문자열 그대로 전달됩니다.
8. 불필요한 요청 필터링
엄격하게 URL 패턴을 정의하면 불필요한 요청을 미리 차단할 수 있습니다. 예를 들어, 2023/02/30 같은 날짜는 유효하지 않음을 패턴으로 정의하여 잘못된 요청을 처리할 수 있습니다.

9. 결론
URL 패턴을 정의할 때, Path Converter와 커스텀 컨버터를 사용하여 코드의 재사용성을 높이고, 정규 표현식을 효율적으로 관리할 수 있습니다. 
이를 통해 서버 리소스를 절약하고, 예상치 못한 오류나 보안 문제를 줄일 수 있습니다.