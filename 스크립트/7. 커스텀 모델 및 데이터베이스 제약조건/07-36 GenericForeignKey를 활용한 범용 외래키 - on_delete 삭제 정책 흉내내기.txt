GenericForeignKey에서는 삭제 정책은 Cascade 하나로만 동작합니다.
삭제 정책을 지정하는 설정 자체가 없습니다.
ForeignKey와 마찬가지로 부모에 대해 삭제를 시도하면 관련 자식부터 먼저 삭제하고
부모가 삭제됩니다.
웹로그의 PostModel 인스턴스를 하나 획득하고요 그 포스팅에 속한 댓글 목록을 먼저
조회하고 댓글 개수도 확인을 해봅니다
이제 PostModel 인스턴스를 삭제하면 그 포스트에 속한 댓글부터 먼저 삭제하고 그리고
포스트가 삭제됨을 확인하실 수 있고요 Post.delete 메서드는 삭제된 레코드 개수를
반환하는데요 총 6개가 삭제되었고 웹로그의 Comment 레코드가 5개, Post 레코드가
1개 삭제되었다고 합니다
GenericForeignKey에 대해 다른 on-delete 정책을 흉내 내어
보겠습니다.
PostModel에 대한 외래키 필드의 on-delete 정책을 Models의 Set 5도
지정하면, 포스팅 삭제 시에 관련 댓글의 외래키 값을 5로 변경하고 나서 변경에 성공하면
포스팅을 삭제합니다.
데이터베이스 외래키 제약 조건이 걸려 있을 경우, 만약 기본 키가 5인 포스팅이 없다면
데이터베이스 오류가 발생할 것입니다.
이를 GenericForeignKey에서 흉내 내어 보겠습니다.
포스팅 삭제 시점을 탐지하기 위해 프리딜리트 시그널을 활용해서 지정 함수가 호출되도록
합니다. 포스팅을 삭제하기 전에 관련 댓글의 외래키 값을 5로 변경합니다.
GenericForeignKey에서는 데이터베이스 외래키 제약 조건을 걸 수 없기 때문에
기본 키가 5인 포스팅이 없더라도 데이터베이스 오류가 발생하지 않습니다.
하지만 외래키를 변경하기 전에 애플리케이션 단에서 코디셋으로 미리 확인을 해 볼 수
있겠죠. 이처럼 프리딜리트 시그널이나 포스트 딜리트 시그널을 활용해서 삭제 전후에 원하는
작업을 수행할 수 있습니다.
해당 함수는 코디셋을 통한 삭제에서도 호출이 되는데요.
대량의 레코드를 삭제할 때 레코드마다 해당 함수가 호출이 되므로 성능 문제가 발생할 수
있음에 유의해 주세요.
웹로그의 Models.py 파일에서 포스트 모델에 대한 프리딜리트 시그널을 사용하겠습니다.
sender 인자로 시그널을 받을 모델 클래스를 지정합니다.
함수 인자는 시그널 종류에 따라 다른데요, 인스턴스 인자는 관련 모델 인스턴스입니다.
포스팅이 삭제되면, 관련 댓글의 미래킷 값을 5로 변경해 줍니다.
장고셀을 구동하시고, 웹로그에 포스트 모델의 인스턴스를 하나 생성해 주시고요,
post.delete를 호출하여 post 레코드 삭제를 시도합니다
그럼 관련 댓글들의 외래 키 값을 5로 변경하는 쿼리가 수행되고요 기존 외래 키 값을 가진
댓글들을 삭제하는 쿼리로 수행됩니다
하지만 기존 외래 키 값을 가지는 댓글들은 없으니 실제로 삭제되는 댓글은 없습니다 삭제된
레코드는 총 한 개, post뿐이라고 합니다