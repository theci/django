OneToOneField는 이전에 살펴본 모델스의 외래키와 매우 비슷합니다
데이터베이스에서는 같은 외래키 컬럼을 사용하지만 OneToOneField는 고유성을
보장하는 유니크 제약 조건이 추가된다는 차이가 있습니다
OneToOneField에서는 RelatedName 설정과 RelatedCodeName
설정을 디폴트로 모델명 소문자를 사용하는데요 유저 모델과 관계를 맺는 프로필 이름의 모델은
이 프로필 모델이 유일할 것이므로 RelatedName, RelatedCodename
설정에 앱 이름을 추가하지 않고 default 그대로 사용하겠습니다.
유저 모델을 통해 이렇게 RelatedCodename을 사용하실 수 있겠고요.
포인트가 100점 이상인 유저를 조회하는 코디셋입니다.
새로운 프로필을 생성하는 방법은 외래키 모델 필드와 유사합니다.
다만 1대1 관계로 인해 유니크 제약 사항이 적용되어 있어 이미 적용된 1대1 관계에
대해서 다른 프로필과 관계를 맺으려고 하면 관계가 맺어지지 않고 이렇게 예외가 발생합니다.
유저의 프로필 조회는 해당 관계 필드 속성에 접근하면 데이터베이스 조회가 발생하고, 관련
프로필이 있다면 프로필 모델 인스턴스가 생성되고, 관련 프로필이 없다면
DoesNotExist 예외가 발생합니다.
RelatedObject DoesNotExist 예외는 프로필 모델에
DoesNotExist 예외를 상속받은 예외 클래스입니다.
아래에서 모델 매니저의 .get 메서드를 통한 조회에서도 지정 조건의 레코드를 찾지 못하면
doesNotExist 예외가 발생합니다.
향후 유저 프로필을 생성하는 뷰 코드에서 관련 프로필이 없는 상황에 대한 예외 처리 시에는
profile.doesNotExist 예외를 잡아서 처리하시면 됩니다.
프로필 모델에 포인트 필드를 추가하고 유저 외래키 필드에 RelatedName 설정과
RelatedCodename 설정을 추가합니다.
모델의 변경내역을 데이터베이스에 반영하기 위해 make-migrations 명령으로
마이그레이션 파일을 생성해주시고 migrate 명령으로 데이터베이스에 반영해주세요.
showmigrations accounts 명령으로 Accounts 앱 내의 마이그레이션
내역을 보시면 0002 마이그레이션이 있고요.
프로필 테이블 생성은 0002 마이그레이션에서 이루어졌었습니다.
SQL migrate 명령으로 0002 마이그레이션에 대한 SQL 수행내역을 살펴보시면요.
Accounts Profile Database 테이블 생성 시에 프로필 모델의 User
Model 필드를 OneToOne 필드로 정의했었으니, User ID 외래키 필드에 대한
유니크 제약 조건이 추가되어 있음을 확인하실 수 있습니다.
장고 셀을 여시고요, User 모델 인스턴스를 하나 생성하고, 관련 프로필을 조회해
봅니다. 현재 User Model 인스턴스와 관계를 맺은 프로필이 없다면, 이렇게
Related Object Does Not Exist 예외가 발생합니다.
프로필 모델을 통해 생성된 쿼리셋에서 유저 웰의 키 모델 필드를 통해서 프로필을 조회하실
수도 있고요. 웰의 키 컬럼을 통해서 웰의 키 값을 지정하여 프로필을 조회하실 수도
있습니다. 새로운 프로필 생성 시에는 모델 필드에 값을 할당하고 세이브 메서드를 호출하여
저장을 시도하실 수 있고요.
이렇게 유저 모델 인스턴스의 프로필 속성으로도 동일하게 프로필을 조회하실 수 있습니다.
이미 프로필과 관계를 맺은 유저와 새로운 프로필 관계 맺기를 시도해 보겠습니다.
Save 메서드를 호출하고 INSERT 쿼리를 통해 데이터베이스에 저장할 때
데이터베이스의 유니크 제약 사항이 위배되어 IntegrateError 예외가 발생했네요.
한 유저 프로필의 포인트를 200점으로 변경하고요.
유저 모델의 코디셋에서 related 코디넴을 통해 100 이상의 포인트를 가진 유저를
조회하는 코디셋은 이렇게 작성합니다.