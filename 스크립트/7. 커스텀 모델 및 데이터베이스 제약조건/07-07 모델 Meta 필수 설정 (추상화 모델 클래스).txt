Post 모델과 Comment 모델에는 Created At Field와
Updated At Field가 동일하게 정의되어 있습니다.
다른 모델 클래스에서도 Created At, Updated At Field가 필요할 때
코드를 그대로 복붙해서 정의해야 할까요?
모델 필드 외에도 동일한 메서드들이 여러 클래스에 걸쳐 정의될 수 있습니다.
이렇게 여러 모델 클래스에 걸쳐 반복되는 필드나 메서드가 있으면 추상화 모델 클래스 상속을
통해 반복을 제거하실 수 있습니다.
파이썬은 다중 상속을 지원하기 때문에 여러 추상화 모델 클래스를 상속 받으실 수도 있고요.
추상화 모델 클래스로 만들려면 메타의 abstract 설정을 참으로 설정해 주세요.
추상화 모델 클래스는 상속 전용 클래스가 되며, 마이그레이션 대상에서 제외되어 데이터베이스
테이블을 생성하지 않습니다.
추상화 모델 클래스에 반복되는 모델 필드와 메서드를 정의하고, 포스트 모델과 코멘트
모델에서는 상속만 받으면 됩니다.
이제 포스트와 코멘트 모델은 추상화 모델 클래스에 정의된 Created At 필드와
Updated At 필드 정의를 가지게 됩니다.
코드 중복을 줄이면서도 모델들은 이전과 동일하게 동작합니다.
블로그 앱의 모델 스파이에 이렇게 코멘트 모델을 새롭게 추가를 했고요 Post 모델의
CreatedAtField 그리고 UpdatedAtField가 코멘트 모델에도 필요해서
그대로 복사해서 붙여넣었습니다
AccessLog 모델 클래스, Article 모델 클래스, Review 모델 클래스에도
필요해서 이렇게 복붙을 했습니다 생성 시각과 수정 시각은 거의 모든 모델에 필요할 수가
있죠. 이렇게 같은 모델 필드 혹은 같은 모델 메서드가 여러 모델 클래스에 반복적으로
필요할 수가 있습니다.
그때마다 코드를 이렇게 복불해서 쓰기보다 새로운 모델 클래스를 생성을 해주고요.
이 모델 클래스에 반복되는 모델 필드나 혹은 모델 메서드를 적용을 해 두시고 이 모델
클래스 단독으로 사용할 것이 아니라 상속을 목적으로 사용할 것이기 때문에 클래스 메타에서
Abstract 설정을 참으로 지정을 하겠습니다
CreatedField 그리고 UpdatedField가 필요한 모델에서는
TimeStamped 모델이라는 클래스를 상속만 받으시면 됩니다
이렇게 Post 모델에서도 TimeStamped 모델의 상속을 받으면 반복되는 필드 정의나
반복되는 메서드 정의를 이렇게 줄이실 수 있습니다
Comment 모델에서도 AccessLog도 Article 모델에서도 이렇게 상속을 받고
Review에서도 상속을 받는데 파이썬 클래스는 다중 상속을 지원하기 때문에 이렇게 여러
추상화 모델 클래스를 상속을 받는 형태로 구현을 하실 수 있겠고요 Make
Migrations Blog 명령을 통해 마이그레이션 파일을 생성을 하는데 Auto Now
Add 참이 지정된 Created의 필드에 한해서만 디폴트 값을 요구하고 있습니다
일회성 디폴트 값을 적용하기 위해서 1번을 선택하겠고요 데이터 타임 필드이기 때문에 추가
안내 메세지가 나오네요.
timeZone.now라는 값을 입력을 하려면 그냥 엔터 키만 입력을 해도 된다라고 디폴트
값이 자동으로 제시가 되고 있죠.
timeZone.now 하셔도 되고 그냥 엔터 치겠습니다.
그리고 Created it 필드가 또 물어보죠.
1번 엔터, 1번 엔터, 엔터.
AccessLog에 대해서 CreatedAppField, ArticleReview라는 모델
클래스에 대해서도 이렇게 적용이 되겠고요 새롭게 생성된 11번 마이그레이션 파일을
열어보시면 이렇게 AccessLog에 대해서 Article 모델에 대해서 리뷰에 대해서
이렇게 추가가 되고 있음을 확인하실 수 있겠고요 그리고 Comment 모델에 대해서도
새로운 데이터베이스 테이블이 생성이 될 때에도 CreatedAppField와
UpdatedAppField가 추가가 됨을 확인하실 수 있습니다
파이썬 manage.py, SQL Migrate 블로그의 0011 명령으로 SQL 내역을
살펴보시면 블로그의 Access Log 데이터베이스 테이블에 Created의 컬럼이 추가가
될 때에 디폴트 값으로 현재 시각이 자동으로 이렇게 입력이 되겠고요 Updated 필드의
경우에는 따로 디폴트 값을 지정하지 않았지만 이렇게 현재 시각이 자동으로 지정이 됨을
확인을 하실 수 있습니다
파이썬 매니지파이 마이그레이트 블로그 명령을 통해서 이렇게 데이터베이스에 적용을 했고요
파이참의 데이터베이스 패널에서 새로고침을 한번 하시면 블로그에 Comment
Database 테이블도 생성이 되었고 Created at, Updated at 컬럼도
추가가 되었으며 타임 스탬프드 모델 클래스를 상속받은 다른 모델의 테이블에서도
Created at 컬럼과 Updated at 컬럼이 마이그레이트를 수행한 시각으로 컬럼이
추가되었음을 확인하실 수 있습니다


이번 강의에서는 Django 모델에서 중복되는 필드와 메서드를 추상화하여 코드 중복을 줄이는 방법에 대해 다뤘습니다. 핵심 내용은 다음과 같습니다:

1. 반복되는 필드와 메서드의 추상화
Post 모델과 Comment 모델을 예로 들어, Created At과 Updated At 필드가 반복적으로 정의되어 있다는 점을 지적했습니다.
여러 모델 클래스에서 동일한 필드나 메서드가 반복될 때, 이를 매번 복사해서 사용하는 대신, 추상화 모델 클래스를 만들면 코드 중복을 줄일 수 있습니다.
2. 추상화 모델 클래스 활용
**추상화 모델 클래스 (Abstract Model Class)**는 여러 모델에서 공통적으로 사용되는 필드나 메서드를 정의할 수 있는 클래스입니다.
이 클래스는 데이터베이스에 테이블로 생성되지 않으며, 다른 모델이 상속해서 사용할 수 있는 용도로만 존재합니다.
모델 클래스의 Meta 내부에 abstract = True를 설정하면 해당 클래스는 데이터베이스 테이블을 생성하지 않으며, 상속 전용으로 사용됩니다.
3. 구현 방법
예를 들어, Created At과 Updated At 필드를 가진 TimeStamped라는 추상화 모델 클래스를 만들고, 이를 다른 모델들이 상속받도록 합니다.
이렇게 하면 각 모델에서 반복적으로 Created At, Updated At 필드를 정의할 필요 없이, TimeStamped 클래스만 상속받으면 됩니다.
4. 다중 상속 지원
파이썬은 다중 상속을 지원하므로, 여러 추상화 모델 클래스를 동시에 상속받을 수 있습니다. 예를 들어, Post, Comment, AccessLog, Article, Review 모델이 TimeStamped를 상속받을 수 있습니다.
5. 마이그레이션 파일 생성 및 적용
추상화 모델 클래스를 상속받는 모델들에 대해 마이그레이션 파일을 생성하고, 마이그레이션을 통해 데이터베이스에 Created At과 Updated At 컬럼을 추가합니다.
AutoNowAdd를 사용하여 Created At 필드에 현재 시각이 자동으로 저장되도록 설정할 수 있습니다.
마이그레이션 시, Created At 필드는 기본값으로 현재 시각이 자동 지정되며, Updated At 필드는 수정 시점에 자동으로 갱신되도록 설정할 수 있습니다.
6. 실제 예시
TimeStamped 모델을 상속한 모델들(Post, Comment, AccessLog, Article, Review)에서 Created At과 Updated At 필드를 자동으로 적용할 수 있습니다.
마이그레이션 파일을 확인하면 각 모델에 대해 Created At과 Updated At 컬럼이 추가된 것을 볼 수 있습니다.
7. 실행 과정
마이그레이션을 통해 데이터베이스에 컬럼을 추가한 후, 실제로 테이블이 생성되고 Created At과 Updated At 컬럼에 현재 시각이 자동으로 삽입되는지 확인할 수 있습니다.
데이터베이스에서 각 테이블을 새로고침하면, 해당 컬럼들이 잘 추가된 것을 확인할 수 있습니다.
8. 정리
추상화 모델 클래스를 활용하여 반복되는 필드나 메서드를 정의하면, 코드 중복을 줄이고 유지보수를 쉽게 할 수 있습니다.
여러 모델에 공통 필드가 필요할 때, 이를 하나의 추상화된 클래스에 정의하고 상속받아 사용하면 코드가 깔끔해지고 효율적으로 관리할 수 있습니다.
이 강의를 통해 Django 모델에서 중복되는 필드를 추상화하여 코드 중복을 줄이고, 유지보수를 용이하게 하는 방법을 배울 수 있었습니다.