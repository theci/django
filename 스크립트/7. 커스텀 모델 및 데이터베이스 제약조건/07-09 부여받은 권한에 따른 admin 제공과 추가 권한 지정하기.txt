장고는 기본 앱을 통해 인증과 권한 시스템을 제공하고 있습니다.
각 모델마다 디폴트 권한으로서 추가, 수정, 삭제, 조회 권한이 지원됩니다.
모델에 대한 추가 권한은 모델 클래스의 메타의 Permissions List 설정을 통해 추가하며, 각 권한에 대한 코드네임과 네임 속성으로 구성합니다.
마이그레이션을 통해 퍼미션 모델에 auth_permissions 데이터베이스 테이블에 레코드가 자동 추가되며 해당 마이그레이션을 롤백 하더라도 이미 추가된 퍼미션 레코드는 삭제되지 않습니다.
유저 단위 혹은 그룹 단위로 권한을 부여할 수 있습니다.
특정 유저에게 권한을 부여하면 그 유저만 해당 권한을 가지며, 특정 그룹에게 권한을 부여하면 그 그룹 내 모든 유저가 해당 권한을 가지게 됩니다.
파이썬 코드를 통해 권한을 부여하거나 제거하실 수 있고요.
어드민 장고 앱을 통해서 유저 그룹마다 권한을 부여하거나 제거하는 UI가 제공됩니다.
유저 모델 인스턴스의 is_superuser 플래그가 설정된 SuperUser는 권한 부여 없이도 모든 권한을 가지며, 미인증 유저는 모든 권한이 없습니다.
is_staff 플래그가 설정된 Steph 유저는 어드민 페이지에 접속은 할 수 있으나, 그 유저가 가진 권한만큼 어드민 기능이 제공됩니다.
블로그 앱에 포스트 모델에 대한 추가 권한이 없으면 어드민 앱에서 블로그 앱에 포스트 모델에 대한 추가 기능이 제공되지 않습니다.
장고 기본에서는 모델 단위로의 권한만을 지원하며 레코드 단위로 권한을 부여하시려면 장고 가디언 라이브러리를 살펴보시고요.
로직을 통한 복잡한 권한 룰 구성이 필요하시면 Django Rules 라이브러리를 살펴보세요.
뷰에서 login_required 데코레이터는 인증 여부만을 검사합니다.
이후 권한 체크는 뷰에서 별도의 로직을 통해 이루어지게 되는데요.
장고 기본의 권한 시스템을 활용하면 별도로 권한 시스템을 구축하고 매 뷰 함수에서 권한 확인을 위해 로직을 구성하지 않아도 permission_required 데코레이터를 통해 요청 유저가 해당 권한이 있는지만 확인하여 간결하게 권한 체크를 할 수 있습니다.
요청 유저가 권한이 없다면 기본 동작으로 로그인 페이지로 이동을 시키고요.
레이즈 익셉션 설정을 하면 로그인 페이지 이동 없이 403 forbidden 응답을 합니다. 
프리미엄 콘텐츠 조회 권한이 없다면 프리미엄 안내 페이지로 이동토록 하려 합니다.
미인증 유저는 모든 권한이 없으므로 프리미엄 컨텐츠 조회 권한 여부에서는 항상 권한 없음으로 체크됩니다.
프리미엄 콘텐츠 조회 권한이 없는 인증 유저에게만 프리미엄 안내 페이지로 안내하기 위해 로그인 리콰이어드 장식자로 먼저 인증 여부를 확인합니다.
Permission Required 장식자로 블로그에 view__premium__post 권한 여부를 확인하고, 
권한이 없다면 로그인 URL 인자로 지정된 프리미엄 안내 페이지 주소로 안내를 하고, 권한이 있다면 postpremiumdetailview가 호출되어 요청을 처리하게 됩니다.
데이터베이스 테이블 내역을 보시면, Auth 언더바 퍼미션 데이터베이스 테이블이 있습니다.
테이블 내역을 보시면 각 모델 클래스에 대해서 Add, Change, Delete, View 권한이 디폴트로 지정되어 있음을 확인하실 수 있습니다.
현재의 어드밈 페이지가 영문으로 보여지고 있는데요
프로젝트 세팅스에서 랭귀지 코드 설정을 통해서 기본 언어 설정을 한국어로 변경을 하겠습니다 
새로고침 하시면 이제 한글로 보여지는 문자 열들이 있죠
여기에서 사용자들 안에 들어가셔서 일반 유저를 보시면 유저별로 이렇게 여러 개의 권한을 부여하실 수도 있겠고요 
그리고 그룹에서 보시면 그룹마다도 이렇게 권한을 여러 개 부여할 수 있음을 확인하실 수 있습니다 
현재의 셀렉트박스에서는 윈도우에서는 키를 누르고 여러 개의 항목을 선택하실 수 있겠고요 
맥에서는 키를 누른 상태에서 마우스 클릭하시면 여러 개의 항목을 선택하실 수 있습니다
블로그 앱의 포스트 모델에 대해서 현재 추가, 변경, 삭제, 조회란은 4개의 디폴트 권한만 지정이 되어 있는데요 커스텀 권한을 추가해 보겠습니다 
포스트 모델의 메타 설정에서요 permissions란 이름의 리스트를 정의하시고 새롭게 추가할 권한의 코드네임과 레이블명을 추가합니다
파이썬 manage.py Make Migrations 블로그 명령을 수행하시고요
Migrate 블로그 명령을 수행합니다
auth_permissions 데이터베이스 테이블 내역을 살펴보시면 이렇게 새로운 퍼미션으로써 코드네임 뷰 프리미엄 포스트, 네임으로써 프리미엄 컨텐츠를 볼 수 있음이라는 레코드가 추가되었음을 확인하실 수 있겠고요 
Admin 페이지에서도 새로고침, 새로고침해 보시면은 이렇게 기본 4개의 권한 외에 추가한 커스텀 권한이 추가되어 있음을 확인하실 수 있습니다 
장고 쉘을 통해 새로운 유저를 하나 생성을 해 보겠고요 유저 모델
클래스는 Accounts 앱에 있는 유저 모델 클래스죠 
user.object.createUser라는 메서드가 지원이 되겠고요 
여기에 유저 네임으로써는 user1, 암호로는 qwer1234로 지정을 해 보겠습니다
이렇게 유저를 생성을 하겠고요 이 값을 참으로 만들어 주고요 그리고 다시 저장을 해 주겠습니다 
그리고 어드밀에서 새로고침 하시면은 유저 1이 나오고요
암호화된 암호가 있고 유저 1이 있고요
현재 이 유저 1은 스태프 권한 권한은 있기 때문에 어드밀 사이트에 로그인은 가능하지만 부여된 권한이 하나도 없기 때문에 어드민을 통해서 제공되는 기능이 하나도 없을 것입니다 
크롬에 시크릿 창을 띄우고요 
방금 생성한 유저 계정으로 로그인을 해보겠습니다 유저 1, 유저는 스태프 유저이기 때문에 어드민 페이지에 이렇게 로그인은 가능하지만 현재 제공되는 기능이 없습니다
부여된 권한이 하나도 없기 때문이에요
그런데 유저 1에 대해서 CanView 포스팅이라는 포스팅 조회 권한을 부여해 보겠습니다
선택하시고 저장하시고요 유저 1, 브라우저에 가서 새로고침하시면 이렇게 부여된 권한에 맞춰 Admin 기능을 적용받게 됩니다
블로그 앱의 포스팅 모델에 대해서 수정이나 추가, 삭제 기능은 사용할 수 없죠
블로그 앱의 Views.py 내에서는 Post Underbar Detail View가 구현이 되어 있고 아직 Login Required 장식자나 Permission Required 장식자가 적용되어 있지 않습니다
즉, Post Detail View가 호출되기 위해서 인증 여부 확인이나 권한 체크는 아직 없다는 거죠 
포스트 디테일 뷰에 대한 URL 패턴을 보시면 문자열 패턴의 Slug를 통해서 포스트 디테일 뷰가 호출이 되네요
어드밀에서 포스팅 목록에서 저는 현재 한 개의 포스팅이 등록이 되어 있겠고요
Slug는 값이 이렇게 지정이 되어 있습니다
이 값을 복사해서 로클로스트8000 블로그에 Slug 이렇게 요청을 하시면 이렇게 조회가 되죠 이 주소 그대로 user1user로 요청을 해 보겠습니다
Post Detail View에서는 login_required 장식자를 통해 인증 여부만을 확인하니까 
이렇게 로그인 페이지 이동 없이 정상 응답을 받고 있습니다.
Post Detail View에 permission_required 장식자를 적용하고, Post Detail View가 호출되기 위해서는 블로그에 뷰 포스트 권한이 필요함을 명시하겠습니다.
유저 1 유저로 로그인된 브라우저에서 새로고침을 하시면 유저 1 유저는 블로그에 뷰 포스트 권한이 있기 때문에 Permission Required 장식자에 의해 로그인 페이지로 이동하지 않고 페이지가 정상적으로 보여집니다.
포스트 디테일 뷰에 대해서 블로그에 뷰 프리미엄 포스트 권한 권한을 체크하도록 변경하면 
유저 1 유저로 로그인된 브라우저에서 새로고침을 하면 유저 1 유저는 해당 권한이 없기 때문에 Permission Required 장식자에 의해 로그인 페이지로 이동을 합니다
유저1에게 블로그에 뷰 프리미엄 포스트 권한을 부여하고 저장합니다 
유저1로 로그인된 브라우저에서 다시 포스트 디테일 페이지에 방문을 하면 이번에는 해당 권한이 있기에 페이지 이동 없이 페이지가 정상적으로 보여짐을 확인하실 수 있습니다
뷰 프리미엄 포스트 권한을 제거하고요 프리미엄 유저 가이드 뷰 뷰 함수를 추가하고요 블로그의 URL 스파이에 URL 패턴도 이렇게 등록을 해 주겠습니다 
포스트 디테일 뷰에서는 뷰 포스트 권한을 체크하도록 하고요 
포스트 프리미엄 디테일 뷰 함수 함수를 추가해서 이 뷰에서는 뷰 프리미엄 포스트 권한을 체크하고 해당 권한이 없으면은 블로그의 프리미엄 유저 가이드 페이지로 페이지로 이동을 하도록 이렇게 설정을 해 주겠습니다 
포스트 프리미엄 디테일 뷰에 대한 URL 패턴도 이렇게 추가를 해줍니다
처음에 위치한 포스트 디테일 뷰에 대한 문자열 패턴이 아래 패턴과 겹치므로 모두 호출 낼 수 있도록 순서를 조정하겠습니다
유저1로 로그인된 브라우저에서 포스트 디테일 페이지에 방문을 하면 블로그에 뷰 포스트 권한이 있으므로 뷰 응답을 받고요 
포스트 프리미엄 디테일 페이지에 방문을 하면 블로그에 뷰 프리미엄 포스트 권한이 없으므로 Vue 응답이 아닌 로그인 URL에 지정한 프리미엄 유저 가이드 페이지로 자동 이동을 합니다.