admin 페이지에서 필터, 사이드바를 활성화하려면 모델 어드민의 list_filter
속성에 필터에 사용될 모델의 필드 이름들을 지정해야 합니다
이를 통해 사용자는 특정 필드에 대한 조건을 설정하여 특정 값이나 범위에 따라 원하는
레코드를 쉽게 찾을 수 있습니다.
리스트 필터 속성에 장르와 릴리즈 날짜 필드를 지정했다면 이는 사용자가 장르와 발매
날짜를 기준으로 곡 목록을 필터링 할 수 있음을 의미합니다.
사용자는 특정 장르의 곡목 보고나 특정 기간에 발매된 곡들을 검색할 수 있습니다.
각 필터의 선택지는 field 타입과 값에 맞춰 동적으로 생성됩니다.
release date 필드는 데이트 타임 필드 타입이고요.
데이트 타임 필드는 선택지가 고정되어 있습니다.
오늘, 지난 7일, 이번 달, 이번에 선택지만 제공됩니다.
제가 2023년에 이번에 필터를 선택하고, 장르에서 발라드를 선택하고, 검색어를 사랑으로
선택하면 위와 같은 url이 만들어지고, 검색이 수행되며 아래 쿼리로 동작합니다.
사랑 검색어는 search fields 속성에 지정한 대로 동작하고요, 장르 필드에
대해서는 선택한 발라드와 일치 여부를 확인하고, release date 필드에 대해서는
2023년도임을 확인하고 있습니다.
만약 2024년에 이번에 필터를 선택하신다면 2024년에 발매된 곡만 검색할 것이고요
현재 데이터베이스에는 2024년도 곡이 없기 때문에 빈 목록이 보여질 것입니다
SongAdmin 클래스에 이미 리스트 필터 설정이 적용되어 있습니다
그래서 화면 우측에 장르 필드와 release date 필드에 대해서 필터 옵션이 제공되고
있네요 장르 필드는 문자열 필드이기에 장르 컬럼에 있는 모든 값들로 자동으로 선택지가
만들어지고요.
릴리즈 데이트 필드는 데이트 타임 필드이기에 고정된 선택지로 보여지고 있습니다.
현재 2024년에 영상을 촬영하고 있으니 이번에 필터를 적용하면 2024년도 구글 검색 결과을
URL을 통해서 확인하실 수 있습니다.
수행되는 SQL 쿼리 내역에서도 2024년도 곡만의 검색함을 확인하실 수 있고요 원하는
연도의 곡을 필터링하는 기능은 기본 리스트 필터에서는 제공되지 않습니다
앞선 내용에서 release date 필드의 경우 오늘, 지난 7일, 이번 달, 이전에
필터 옵션만 제공되었었는데요
커스텀 리스트 필터를 통해 발매일의 연도를 선택해서 조회할 수 있도록 해보겠습니다
SimpleListFilter 클래스를 상속받는 CustomListFilter 클래스를
만들고요 Lookups
메서드를 재정의해서 필터 목록을 만들고 QuerySet 메서드를 재정의해서 QuerySet
필터링을 수행합니다
QuerySet 메서드 내에서는 self.value 메서드 호출을 통해 현재 필터 값을
문자열로 조회할 수 있고요 이 문자열 값을 적절히 분기해서 처리하여 목적에 맞게
QuerySet 필터링을 수행합니다
속 모델의 Release Date 필드에서 연도를 내짐차 순으로 뽑으려면 데이터베이스 함수
Extract Year를 통해 연도만 뽑아내고요 Distinct를 통해 중복을 제거합니다
그럼 데이터베이스로부터 중복이 제거된 발매일의 연도만 내짐차 순으로 이렇게 조회할 수
있습니다
SongAdmin의 list 필터 속성에 방금 정의한 releaseDateFilter
클래스를 등록하면 아래와 같이 필터 목록을 확인하실 수 있고요.
각 연도에 맞게 조회가 됨을 확인하실 수 있습니다.
슬라이드 하단의 안내된 링크에서 ReleaseDateFilter 전체 소스 코드를 확인하실
수 있습니다 핫트랙 폴더에 filterspy 파일을 생성하시고 심플 리스트 필터를 상속받은
ReleaseDateFilter 클래스를 생성해 주세요
lookups 메서드와 쿼리셋 메서드를 재정의합니다
쿼리셋 메서드에서 현재 필터 값을 조회하여 밸류 변수에 담습니다.
필터 값이 없다면 None 값을 가지며, 필터 값이 있다면 문자열 타입입니다.
lookups 메서드에서는 필터 선택지 목록을 값과 레이블 쌍으로 반환합니다.
샘플로 옵션 1, 옵션 2, 옵션 3를 만들어 보겠습니다.
song-admin 클래스의 list 필터 속성에서 releaseDate 지정을 제거하고
방금 생성한 releaseDateFilter 클래스를 지정합니다.
페이지를 새로 고침하니 title 속성이 누락되었다는 에러가 뜨네요.
title 속성과 parameterName 속성을 지정해 주겠습니다.
페이지를 새로 고침하니 페이지가 보여지고요.
발매일 필터에 옵션1, 옵션2, 옵션3 선택지가 보여집니다.
각 옵션 링크를 클릭하면 파라메타 네임 설정으로 지정한 이름으로 쿼리 파라메타가 잘
전달되고 있습니다.
그런데, 보여지는 목록에는 변화가 없죠.
이는 쿼리셋 메서드에서 필터 값에 따른 쿼리셋 필터를 수행하지 않았기 때문입니다.
쿼리셋 메서드 내에서 필터 값이 옵션 1일 때에만 2023년도 곡만 보여주도록 해
보겠습니다. 이제 옵션 1을 선택하시면 2023년도 곡만 보여집니다.
장고 셀을 구동해서 속 모델의 releaseDate에서 연도만 내림차 순으로 조회하는
쿼리셋을 작성해 보겠습니다.
releaseDate 필드만 조회하면 DateTime 객체로 조회가 됩니다.
그런데 우리는 연도만 필요하죠.
ExtractYear 데이터베이스 함수를 통해 데이터베이스로부터 연도만 조회합니다.
쿼리셋의 annotate method을 통해 데이터베이스에서 계산된 필드를 추가할 수
있습니다. 연도만 뽑아낸 값을 이열 필드에 맵핑합니다.
이열 필드 내림자 순으로 정렬하고요.
중복값도 제거토록 데이터베이스에 요청합니다.
이렇게 발매일의 연도 목록을
내림자 순으로 구했습니다.
이 코드를 lookups 메서드에 적용해 보겠습니다.
ipython shell의 history 매직 커맨드로 실행한 코드 목록을 확인하실 수
있습니다. 방금 실행한 코드를 복사하고요.
lookups 메서드에 붙여넣기 합니다.
연도 목록을 이열리스트 변수에 저장합니다.
레이블이 없는 숫자 목록을 반환하니 타입 에러가 발생하네요
필터 값, 레이블 문자열 세트로 리스트를 구성해서 반환하겠습니다
페이지를 새로 고침하니 이렇게 발매일 연도로 구성된 필터 목록이 뜨네요
그런데 클릭해봐도 연도 필터링이 되지 않습니다
쿼리셋 메서드에서 연도 필터 값을 처리해봅시다 입력된 필터 값이 있는 경우라면 이 값은
연도 문자열일 것입니다
이 값을 그대로 쿼리셋에 활용합니다 연도에 맞게 필터링이 수행됩니다
연도로만 필터링하니 좀 아쉽네요
이번 달 발매곡을 조회할 수 있도록 이번 달 옵션을 추가해 보겠습니다
두 개의 리스트를 만들고 첫 번째 리스트에서는 고정 항목을 정의하고 두 번째 리스트에서는
동적 항목을 정의해서 두 리스트를 이은 리스트를 반환하겠습니다
페이지를 새로 고침하고 이번 달 필터를 선택하니 ValueError 예외가 발생합니다.
코리셋 메서드 내에서 thisMonth 문자열이 releaseDate의 이열 필드에 대한
값 비교에 사용되었기 때문입니다.
해당 로직은 연도 문자열에 대해서만 처리되도록 하고, thisMonth 문자열에 대해서는
따로 처리를 해줘야겠죠.
필터 값이 thisMonth 문자열일 경우에는 현재 시각의 이열, month를 알아내어
코리셋에 적용하도록 합니다.
페이지를 새로 고침하니 오류 없이 잘 수행이 되네요
SQL 패널에서 수행된 쿼리를 보면 releaseDateField에 대해 이번 달 조건으로
쿼리가 수행되었음을 확인하실 수 있습니다
releaseDateFilter 클래스의 title 속성을 하드코딩으로 문자열을
지정했는데요 이 속성성을 속성 모델의 releaseDateField에 verboseName
속성 값을 참조해서 지정하실 수 있습니다
모델 클래스에는 언더바 메타 속성이 있고 getField 메서드를 통해 특정 모델 필드를
가져와서 보버스네임 속성을 참조합니다.
현재는 releaseDate 필드에 verboseName이 지정되어 있지 않지만 verboseName을
지정하시면 지정한 대로 필터 제목으로 보여집니다.