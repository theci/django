커스텀 관계 모델의 또 다른 예시를 살펴보겠습니다.
학생, 과목, 수강신청 모델입니다.
한 학생이 여러 과목을 수강할 수 있고, 하나의 과목에는 여러 학생이 있을 수 있습니다.
그러니 Many-to-Many 관계도 맺을 수 있고요.
수강 신청 관계에서는 수강 연도와 학기 필드가 필요하므로 이렇게 커스텀 관계모델을
정의해서 Many-to-Many 관계를 맺어줍니다.
슬라이드 하단에 모델 코드 페이지 링크와 샘플 픽셀 데이터 페이지 링크가 있습니다.
새로운 장고 앱 School을 생성하시고, 로드 데이터 명령으로 샘플 데이터를
데이터베이스에 한 번에 저장하실 수 있습니다.
각 관계 필드에는 의미에 맞게 RelatedName 설정과 RelatedCodename
설정을 지정했습니다.
관계를 활용해서 이렇게 조건에 맞는 수강생 목록 및 과목 목록 등을 조회하실 수 있습니다.
수강신청 모델도 장고 모델이니, 수강 신청 장고 모델 주도로 다양한 조회 및 처리를 하실
수 있습니다. 먼저 School 장고 앱을 생성하시고요.
현 장고 프로젝트에 School 앱을 등록을 합니다.
school-lab에 model-spy 파일을 여시고요.
model 코드를 복사해서 붙여넣기 해주세요.
make-migrations school 명령과 migrate school 명령으로
migration 파일 생성 및 데이터베이스에 반영을 합니다.
picture 데이터도 복사해서요.
school 디렉토리 밑에 picture.json 파일로 저장을 해주세요.
Picture 파일에 저장할 모델 경로와 기본 키 그리고 필드명들이 나열되어 있습니다.
파이썬 manage.py 파이 로드 데이터의 Picture 경로 명령으로 데이터베이스에 저장합니다.
저장하신 후에 데이터베이스 탭에서 새로 고침하시면 새롭게 생성된 School 각종
데이터베이스 테이블을 확인하실 수 있습니다.
장고 셀을 여시고요.
student 모델로 학생 목록을 조회해 봅니다.
코디셋 내역에 학생 이름이 같이 출력되면 좋겠네요.
student 모델 클래스에 dunder dunder str 메서드 구현이 없으니 추가해 주시고요.
subject 모델 클래스에도 추가하시고, 장고 셀을 다시 열어 주세요.
학생 목록을 다시 조회해 보니 코디셋 내역에 학생 이름도 같이 잘 출력이 되고 있습니다.
특정 과목의 수강생 목록을 이렇게 조회해 볼 수 있겠고요.
과목명에 특정 단어가 있는 과목을 수강하는 학생 목록도 이렇게 손쉽게 조회할 수 있습니다.
Subject Model Instance를 통해 특정 과목의 전체 수강생 목록을 조회할 수
있고, 특정 수강신청 연도를 조회 조건으로 줄 수도 있습니다.
Student Model Instance를 통해서도 전체 수강신청 내역을 조회할 수 있고,
특정 수강신청 연도의 수강신청 내역을 조회할 수도 있습니다.
특정 연도의 수강생 목록을 조회해 봤고요.
2022년도에 수강신청이 있었던 과목들을 대상으로 과목별 수강신청 학생 수를 카운트하고요.
과목명과 수강신청 학생 수를 사전으로 이렇게 이렇게 뽑으실 수도 있습니다.
커스텀 관계 저장 예시입니다.
한 학생이 있고요.
이 학생 인스턴스를 통해 수강 과목을 추가하려 합니다.
수강 신청을 할 학생 인스턴스와 과목 인스턴스를 먼저 생성합니다.
학생의 subjectSetField를 통해 수강신청 과목을 추가할 수 있습니다.
단순히 과목 인스턴스를 add하면 IntegrityError 예외가 발생합니다.
오류 메시지를 보면 필수 컬럼에 null이 지정되었다고 합니다.
ManyToManyField에 add() 메서드를 호출하면 관계 필드만 저장할 뿐 다른
필드에 대해서는 값을 지정하지 않습니다.
그러니 수강연도 컬럼은 null로 학기 컬럼은 빈 문자열로서 인서트 코디가 수행이
되었었네요. 관계 모델에 필수 필드가 있을 때에는 add() 메서드에
through_defaults 인자를 통해 필드 값을 지정해 줍니다.
수강 신청 연도와 학기 필드 값을 지정해서 addMethod를 호출하면 이렇게 관계가
저장됩니다. 즉, 수강 신청 데이터가 저장된 것이죠.
관계 모델을 통해서도 이렇게 관계를 저장하실 수 있습니다.
수강 신청 모델 인스턴스를 생성하면 그것만으로 수강 신청이 된 것입니다.
수강 신청을 할 학생 모델 인스턴스 하나와 과목 모델 인스턴스 하나를 생성합니다.
이 학생의 수강 신청 목록을 보니 이 학생은 장고 계유와 웹 개발 기초 과목은 수강하지
않았네요. 수강 신청해 보겠습니다.
Subject 모델 StudentSetField에 설정한 RelatedName을 통해서
ManyToMany 관계를 추가합니다.
IntegrateError 예외가 발생했네요.
Scroll을 올려서 수행된 코드를 확인해 봅시다.
지정 관계에 MayToMany 관계가 매져져 있는지 확인 과정이 있었고요.
관계가 아직 안 매져 있으니 Insert 코디를 통해 관계를 매지려 했네요.
non-null column인 이 열에 null이 지정되어 오류가 발생했습니다.
관계 지정 시에 이 열 값을 지정하지 않아서 그렇습니다.
non-null violation 예외가 먼저 발생했고, 이 예외가 integrity
error 예외로 전파되었습니다.
add method 호출 시에 throughDefault 인자로 같이 저장할 필드 값을
지정할 수 있습니다.
이열과 term을 지정해 주면 관계 저장에 성공하고요.
즉, 수강 신청 데이터를 저장한 거죠.
수강 신청 모델을 통해서도 이렇게 수강 신청 데이터를 저장할 수 있습니다.
방금 저장한 수강 신청 내역과 동일하게 지정하면 유일성 제약 조건 위배로 인해
Integrity Error 예외가 발생합니다.
같은 년도 학기, 학생, 과목에 대해서는 중복해서 수강 신청을 할 수 없도록 수강 신청
모델에 유일성 제약 조건을 걸어뒀기 때문이죠.
장고 모델에서는 유효성 검사 기능을 제공해 주고 있죠.
수강 신청 모델 인스턴스를 생성하는 즉시 저장을 시도하지 않고 풀 클린 메서드를 호출해서
유효성 검사를 먼저 수행하면 이렇게 유일성 제약 조건 위배를 장고 애플리케이션 단에서
빠르게 체크하여 수강 신청을 신청한 유저에게 빠르게 피드백을 줄 수 있습니다.
이렇게 유효성 검사 결과를 피드백 주는 부분은 뒤에 장고 폼에서 다루겠습니다.




학생, 과목, 수강신청 모델을 사용하여 Many-to-Many 관계를 처리하는 커스텀 관계 모델의 예시를 살펴보겠습니다. 이 모델에서는 한 학생이 여러 과목을 수강할 수 있고, 하나의 과목에도 여러 학생이 수강할 수 있습니다. 여기서 수강 신청에 대한 추가 정보인 수강 연도와 학기 필드가 필요하기 때문에, 이를 관리하기 위한 커스텀 관계 모델을 사용합니다.

모델 정의
**학생(Student)**과 과목(Subject) 모델은 각각 여러 과목과 학생 간의 Many-to-Many 관계를 설정합니다.
이 관계를 커스텀 모델인 **수강 신청(CourseEnrollment)**을 통해 관리하며, 이 모델에는 수강 연도와 학기라는 추가 필드가 포함됩니다.
ManyToManyField의 through 속성을 사용하여 커스텀 관계 모델을 지정합니다. 이를 통해 추가 필드도 함께 저장할 수 있습니다.
모델 및 마이그레이션
School 앱 생성: Django에서 School 앱을 생성하고, 필요한 모델들을 정의한 후 makemigrations 및 migrate 명령어를 사용하여 데이터베이스에 반영합니다.
데이터 로드: picture.json 파일에 정의된 데이터를 데이터베이스에 로드하여 샘플 데이터를 추가할 수 있습니다.
관계 조회
Student와 Subject 모델 간의 관계를 정의한 후, Django의 ORM을 활용하여 수강생 목록, 특정 과목을 수강하는 학생 목록 등을 쉽게 조회할 수 있습니다.
예를 들어, 특정 과목을 수강하는 학생들을 조회하거나, 특정 수강 신청 연도를 기준으로 수강생 목록을 필터링할 수 있습니다.
관계 저장
add() 메서드 사용: ManyToManyField의 add() 메서드를 사용하여 학생과 과목의 관계를 추가할 수 있습니다. 하지만, add() 메서드는 관계 필드만 저장하고, 다른 필드(수강 연도, 학기 등)는 저장하지 않으므로, through_defaults 인자를 통해 추가 필드를 지정해야 합니다.
수강 신청 모델 사용: 커스텀 관계 모델을 통해 직접 관계를 추가할 수도 있습니다. CourseEnrollment 모델 인스턴스를 생성하고, 이를 통해 학생과 과목의 수강 신청을 관리합니다.
오류 및 예외 처리
IntegrityError 예외가 발생할 수 있는데, 이는 수강 신청 관계를 추가할 때 필수 필드인 수강 연도나 학기 컬럼에 값이 지정되지 않아서 발생합니다. 이를 방지하기 위해, add() 메서드 호출 시 through_defaults로 필수 필드를 지정해야 합니다.
유일성 제약 조건: 수강 신청 모델에는 유일성 제약 조건을 설정하여 같은 학생이 동일한 과목에 대해 같은 연도와 학기에서 중복 신청할 수 없도록 합니다. 중복된 수강 신청을 시도하면 IntegrityError가 발생합니다.
유효성 검사: full_clean() 메서드를 사용하여 수강 신청 데이터에 대해 유효성 검사를 수행할 수 있습니다. 이를 통해, 애플리케이션 레벨에서 유효성 검사 결과를 빠르게 피드백 받을 수 있습니다.
요약
커스텀 관계 모델을 사용하여 ManyToManyField 관계에 추가 필드를 저장하고, 필수 필드 및 유일성 제약 조건을 관리합니다.
add() 메서드를 사용할 때는 필수 필드를 함께 저장해야 하며, through_defaults 인자를 활용하여 이를 처리할 수 있습니다.
full_clean()을 활용하여 유효성 검사를 미리 수행함으로써 데이터의 무결성을 보장할 수 있습니다.