안녕하세요. 이번 시간에는 장고 어드민 앱에서 제공하는 UI를 통해 데이터 관리하는
방법에 대해서 살펴보겠습니다.
어드민 앱에서는 앱의 admin.py 파일에서 모델 클래스를 어드민에 등록하는 것만으로
지정 모델 클래스의 데이터를 관리할 수 있는 생성, 조회, 수정, 삭제 웹 UI를 제공받을
수 있습니다.
HTML, CSS, JavaScript 개발 없이도 파이썬 코드만으로 목록 컬럼명 지정,
페이징, 검색, 필터링 옵션 등의 다양한 커스터마이징을 지원합니다.
여러 레코드를 선택하여 한 번에 삭제 액션을 수행할 수도 있고 커스텀 액션을 파이썬
코드만으로 구현하여 여러 레코드의 데이터를 엑셀 파일로 다운받거나 메일 발송을 요청하는
등의 다양한 액션을 추가할 수도 있습니다.
어드민에서 제공하는 URL 외에도 추가 URL을 등록해서 커스텀 뷰를 통해 통계 등 원하는
작업을 수행하는 페이지 개발도 가능합니다.
모델 클래스를 어드민에 등록하는 것만으로 손쉽게 시작하실 수 있습니다.
모델을 어드민에 등록하는 방법은 총 3가지입니다.
설명하기에 앞서 장고는 사이트 프레임워크를 통해 하나의 장고 서비스에서 여러 도메인을
각각의 사이트와 연결하여 사이트별로 데이터베이스 레코드를 분리하고, 같은 모델이라 할지라도
사이트에 따라 어드밋 설정을 다르게 적용할 수 있습니다.
기본 설정으로 디폴트 사이트가 하나 있습니다.
대개의 서비스에서는 한 개의 디폴트 사이트만 운영합니다.
첫 번째 방법으로 admin.site.register 함수를 호출하여 등록할 때 첫 번째
인자로 등록할 모델 클래스를 넘겨줍니다
그러면 지정 모델 클래스에 대해 기본 모델 어드민 설정으로 동작합니다
각 모델 클래스마다 지정한 모델 어드민 클래스를 통해 동작을 커스터마이징 할 수 있습니다
두 번째 방법으로 모델 어드민 클래스를 상속받은 커스텀 클래스를 정의하시고
admin.site.register 함수의 두 번째 인자로 커스텀한 모델 어드민 클래스를
지정합니다 커스텀 모델 어드민 클래스를 통해 지정 모델에서의 어드민 동작을 커스터마이징
하실 수 있습니다
세 번째 방법은 두 번째 방법과 동일하지만 장식자를 활용한 방법입니다
내부에서 디폴트 사이트에 대한 등록을 수행하고요 장식자를 활용하면 모델 어드민 클래스
정의와 모델 등록이 하나의 클래스로 정의가 되니까 가독성이 좋습니다.
저는 주로 세 번째 방법을 많이 사용하며, 사이트는 non 인자를 명시한 것은 사이트
인자를 지원함을 보여주기 위한 의도였을 뿐, 실제 개발에서는 거의 사용하지 않습니다.
각 모델 클래스마다 어드민 등록은 1회만 가능하며, 중복 등록은 지원하지 않습니다.
이미 어드민에 등록된 모델 클래스에 다른 모델 어드민으로 등록하려면,
admin.site.unregister 함수를 통해 등록 해제를 먼저 수행하신 후에
등록하셔야 합니다.
혹은 그 모델에 대한 proxy 모델을 만드시고, proxy 모델을 통해 같은 데이터에
대해 추가 모델 어드민을 등록하실 수 있습니다.
관리자 페이지에서는 로그인 유저가 가진 권한에 따라 기능을 제공해줍니다.
장고 모델은 디폴트로 4가지 권한을 가집니다.
추가, 수정, 삭제, 조회 권한이고요.
유저나 그룹 단위로 권한을 부여할 수 있습니다.
Admin에서는 해당 모델에 대한 조회 권한이 있어야 목록 페이지를 볼 수 있고요
해당 모델에 대한 추가 권한이 있어야 추가 페이지가 제공되고요 해당 모델에 대한 수정
권한이 있어야 수정 페이지가 제공되고 해당 모델에 대한 삭제 권한이 있어야 삭제 페이지가
제공됩니다. 각 권한은 각 모델에 대한 마이그레이션이 수행되는 시점에 Auth
Underbar Permission Database 테이블에 자동 추가되고요.
Auth 앱의 Permission Model Class로 조회할 수 있습니다.
Model Class 메타의 Permissions 설정을 통해 각 모델에 대한 추가 권한을
설정할 수도 있고요.
추가 권한을 설정한 후에 마이그레이션 과정을 거치면 Auth_
Permission Database 테이블에 추가 권한이 추가됩니다 유저 모델에는 로그인
허용 여부인 isActive 플래그가 있고요 어드민 페이지 접속 허용 여부인 isStaff
플래그 그리고 슈퍼 유저 여부인 isSuperUser 플래그가 있습니다
isStaff 플래그가 설정된 유저는 admin 페이지에 접속할 수 있지만 그 유저가 가진
권한에 맞춰 기능을 제공받고요.
아무런 권한을 가지지 않은 스태프 유저는 admin 페이지에 접속만 할 수 있을 뿐 아무런
기능도 제공받지 못합니다.
슈퍼 유저는 권한 부여에 상관없이 모든 권한이 있는 것으로 처리됩니다.
읽기 전용 모델을 운영할 때에는 사용자가 해당 모델에 대해 추가 수정 또는 삭제를 할 수
없도록 해야 할 것입니다.
사용자별로 추가 수정 삭제 권한을 부여하지 않는 방법도 있지만, 슈퍼 유저는 별도의 권한
부여 없이도 모든 권한을 갖고 있는 것으로 처리되기 때문에 이 방법만으로는 충분하지 않을
수 있습니다.
따라서 모델 어드민 클래스에서 권한을 확인하는 메서드들을 재정리해서 해당 권한을 비활성화해
볼 수 있겠습니다.
모델 어드민에서는 추가 권한 체크는 hasAddPermission 메서드를 통해
이루어지며, 수정 권한 체크는 hasChangePermission 메서드, 삭제 권한
체크는 hasDeletePermission 메서드, 조회 권한 체크는
hasViewPermission 메서드를 통해 이루어집니다.
이 중에 추가 수정 삭제에 대한 메서드에서 권한 확인 없이 거짓을 즉시 반하도록 합니다
이렇게 하면 슈퍼 유저라 할지라도 해당 모델에 대해 추가 수정 삭제를 할 수 없게 됩니다
핫트랙 앱의 속 모델에 대한 어드민 페이지에서 추가 기능도 현재 동작하고요 수정 기능도
동작하고 삭제 기능도 동작을 합니다
admin 페이지에서 song 모델에 대한 추가, 수정, 삭제의 기능을 비활성화 시키기
위해 song-admin 클래스에서 hasAddPermission 메서드 및
hasChangePermission, hasDeletePermission 메서드도
재정의하겠습니다.
hasAddPermission 메서드에서 거짓을 반환하면 admin 페이지에서 현재 모든
권한을 가진 슈퍼 유저임에도 추가 권한이 없어서 song 추가 버튼이 제거됨을 확인하실 수
있습니다. HasChangePermission 메서드에서 거짓을 반환하면 어드민 페이지에서
현재 모든 권한을 가진 슈퍼 유저임에도 수정 권한이 없어서 수정 폼이 아닌 내역이 조회됨을
확인하실 수 있습니다.
해제, 딜리트, 퍼미션 메서드에서 거짓을 반환하면 admin 페이지에서 현재 모든 권한을
가진 슈퍼 유저임에도 삭제 권한이 없어서 삭제 버튼이 제거됨을 확인하실 수 있습니다.
관리자 페이지의 모델 목록 페이지에서 기본적으로 각 모델 인스턴스는 하나의 컬럼으로
표시됩니다. 이 컬럼에 표시되는 값은 모델 클래스의 __str__ 메서드에서 반환하는
문자열입니다. 이 문자열은 목록 뿐만 아니라 drop-down, select-box
등에서도 모델 인스턴스를 대표하는 값으로 사용됩니다.
모델 클래스의 str 메서드는 문자열로 모델 클래스명 갈로, 기본 키, 형식의 문자열을
반환하는데, 이를 재정리하면 원하는 형태의 문자열로 표시할 수 있습니다.
여러 컬럼을 표시하려면 ModelAdmin 클래스의 list_display
속성을 설정해야 합니다.
ListUnderbarDisplay에는 모델의 필드명, 혹은 속성 이름, 혹은 인자가 없는
메서드명, 또는 ModelAdmin에 정의된 메서드명을 지정할 수 있습니다.
모델 어드밋 메서드를 지정할 때에는 해당 메서드가 모델 인스턴스를 인자로 받을 수 있어야
합니다. 목록 페이지에서 각 모델 인스턴스마다 이
메서드들이 호출되어 반환 값이 각 컬럼에 표시됩니다.
각 컬럼에서 HTML을 표현 코드 할 때에는 각 함수에서 HTML 문자열을 반환하시면
됩니다. 이때 HTML 문자열을 직접 조합하지 마시고 반드시 format-html 메서드를
활용해서 안전하게 조합해 주세요.
목록에 표시되는 필드명은 모델 필드에 정의된 verbose name을 따르며, 메서드에 대한 컬럼명은
admin.display 장식자의 description 인자를 통해 설정할 수 있습니다.
관리자 페이지의 모델 목록에서는 기본적으로 첫 번째 컬럼의 수정 페이지로 이동하는 링크가
자동으로 설정됩니다.
만약 두 번째나 세 번째 컬럼 등에 이 링크를 적용하고 싶다면
ListDisplayLinks 속성을 사용하여 설정할 수 있습니다
이때 ListDisplayLinks에 지정하는 필드명은 반드시 ListDisplay 설정에
포함된 필드명이어야 합니다
관리자 페이지에서 목록 검색 기능을 활성화하려면 SearchFields 속성에 검색에
사용될 모델의 필드 이름들을 지정해야 합니다
이때 지정한 필드들은 OR 조건으로 연결되어 검색이 이루어집니다.
그리고 필드 이름 앞에 붙는 기호에 따라 검색 방식이 달라집니다.
기본 설정은 iContains 룩업을 사용하는데, 이는 대소문자 구분 없이 해당 문자일이
필드에 포함되어 있는지를 확인합니다.
필드 이름 앞에 caret 기호를 붙이면 I start with lookup이 적용되어
필드 값이 특정 문자열로 시작하는지를 검사하고요.
필드 이름 앞에 등호를 붙이면 I exact lookup이 적용되어 필드 값이 특정
문자열과 대소문자 구별 없이 정확하게 일치하는지를 검사합니다.
이렇게 다양한 lookup 옵션을 통해 장고 리밍에서 유연하게 데이터를 검색할 수
있습니다.
PostgreSQL에서는 기본 설정으로 대소문자를 구별하고요 MySQL에서는
대소문자를 구별하지 않습니다
그래서 Foursquare SQL에서는 대소문자를 구별하지 않고 조회하기 위해 Upper
Database 함수가 사용되었고 MySQL에서는 사용되지 않았습니다
Admin에서의 검색은 GetSearchResults 메서드를 통해 구현되었습니다
검색 동작을 직접 코드를 통해 구현하시려면 get_search_results 메서드를
재정의해주세요.
하트랙 앱의 SongAdmin 페이지에 들어가시면 현재 검색창이 활성화되어 있습니다.
이는 SongAdmin 클래스에 이미 SearchFields 설정이 적용되어 있기
때문입니다.
검색어를 입력하시고 검색을 하시면 주소 표시줄에 Q라는 이름의 Query 파라메타로 요청이
전달됨을 확인하실 수 있습니다.
장고 디버그 툴바의 SQL 패널을 통해 수행되는 코디 내역을 확인해 보시면 Search
Fields 설정에 명시한 Name, Artist Name, AlbumName 필드에
대해 OR 조건으로 문자열 포함을 체크함을 확인하실 수 있습니다
설정에 명시한 필드명 앞에 캐롯을 사용하면 지정 문자열 포함이 아닌 대소문자 구별 없이
지정 문자열로 시작하는지를 검사하고요
필드명 앞에 등호를 사용하면 지정 문자열과 대소문자 구별 없이 문자열이 일치하는지를
검사합니다
일반적으로 문자열 포함 여부를 확인하므로 캐롯과 등호를 제거하겠습니다