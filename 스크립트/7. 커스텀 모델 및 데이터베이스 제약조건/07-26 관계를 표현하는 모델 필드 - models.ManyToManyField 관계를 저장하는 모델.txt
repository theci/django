ManyToManyField를 추가하고 마이그레이션을 하면 장고는 관계를 저장하는
테이블을 자동으로 생성합니다.
관계 테이블 자동 생성을 위해서는 관계에 사용하는 두 모델 모두 장고 마이그레이션 기능으로
관리하는 상황이어야 합니다.
어느 한쪽이라도 장고 마이그레이션 관리 대상이 아니라면 관계 테이블을 직접 생성해 주셔야
합니다. default 관계 테이블은 기본 키인 id 컬럼과 양쪽 모델에 대한 외래키 컬럼
2개, 이렇게 3개 컬럼으로 구성됩니다.
생성된 데이터베이스 테이블은 중복 관계 저장을 막기 위해 유니크 제약 조건이 추가되어
있으며, 각 모델에 대한 외래키 관계로 인해 외래키 제약 조건 및 외래키 인덱스도
추가됩니다. 이 데이터베이스 테이블 내역은 기본키가 6인 post에 기본키가 10인 태그가
등록되어 있구요 기본키가 1인 post에 기본키가 11인 태그가 등록되어 있음을 보여줍니다
두 모델 간의 관계 저장 외에도 관계에 대해서, 관계를 맺은 시각 등 추가로 저장할
데이터가 있다면 커스텀 관계 모델을 고려해 보실 수 있습니다
두 모델 간에 ManyToMany 관계에 대한 Custom 관계 모델을 지정하려면 두
모델에 대한 관계 모델을 먼저 정의하시고, ManyToManyField의 Through
설정으로 관계 모델을 지정합니다.
관계 모델에는 반드시 관계를 맺을 두 모델에 대한 외래키 필드가 정의되어 있어야 하고요.
두 개의 외래키 필드 외에 추가로 필요한 모델 필드를 정의하시면 되는데요.
그럼 관계를 저장할 때, 외래키 필드 두 개 외에도 추가 필드에 대해서도 반드시 값이
지정되어야 할 것입니다.
add method에서는 ThroughUnderbarDefault 인자를 통해 추가 필드에
대한 값을 지정하실 수 있습니다.
getOrCreateMethod 호출 시에는 default 인자를 통해 추가 필드에 대한
값을 지정하실 수 있습니다.
그런데 관계 모델의 추가 필드들에게 default 값 지정이 가능하다면 addMethod
호출 시에 throughDefault 인자를 반드시 지정하지 않아도 관계 저장이
가능해집니다. 그럼 두 개의 외래키 필드만 필수 필드가 됩니다.
그럼 AddMethod 호출 코드가 보다 간결해질 수 있기에 외래키 외의 모델 필드에
대해서 디폴트 값 지정을 추천드리고요 추가 필드에 대한 값 지정이 필요하실 때에만
ThroughDefault를 통해 각 필드의 값을 지정하시면 됩니다
커스텀 관계 모델에서는 외래키 관계 필드 외에 추가 필드가 있을 수 있으므로
AddMethod 호출을 통한 Insert Query에 유니크 제약 조건에 추가된 필드
외에 추가 필드 값이 더 지정될 수 있죠.
그래서 Insert Query에 충돌 무시 조건을 추가할 수가 없습니다.
그래서 먼저 Select Query로 관계 지정 여부를 확인한 후에 아직 관계가 맺어지지
않은 경우에만 Insert Query를 수행합니다.
add method를 사용하지 않고 관계 모델을 통해 관계를 저장하실 수도 있습니다.
get while create method를 통해 해당 관계가 없다면 관계가 저장되도록
하시면 되고요.
관계 확인 없이 저장을 시도하실 경우 유일성 제약 조건 위반으로 인해 integrate
error 오류가 발생할 수 있습니다.
ManyToManyField를 추가할 때 Through 설정과 함께
ThroughUnderbarField 설정도 같이 추가해 주세요.
관계 모델에 정의된 모델 필드 중에 ManyToManyField 관계에 사용할 외래키
필드명 2개를 지정합니다.
이때 지정 순서가 중요한데요.
반드시 ManyToManyField, ModelField가 정의된 모델 필드명을 먼저 써
주세요. 현재 관계 모델의 필드 구성에서는 ThroughUnderbarFields 설정을
하지 않아도 외래키 필드를 자동으로 찾습니다만, 명시적으로 지정해 주겠습니다.
디폴트 관계 테이블을 운영하다가 중간에 커스텀 관계 모델을 두는 방식으로 변경한다면, 이때
단순히 MakeMigrations 명령 후에 Migrate 명령을 수행하면 이와 같은
오류가 발생합니다.
장고의 migration 기능은 마법이 아니며 모델의 히스토리를 관리하기 위한 편리한
도구에 불과합니다.
상황에 따라 makemigrations 명령과 migrate 명령어를 단순히 기계적으로
실행하는 것만으로는 충분하지 않을 수 있습니다.
바로 지금처럼요.
복잡한 데이터베이스 변경이 필요한 상황에서는 migration 과정을 세심하게 고려하고
사용해야만 합니다.
우리는 단순히 관계 모델만을 지정했지만 데이터베이스 측면에서 보면 디폴트 관계
데이터베이스와의 외래키 관계도 제거해야 되고, 관계 데이터도 처리해야 하는 등 상황이
복잡하거든요.