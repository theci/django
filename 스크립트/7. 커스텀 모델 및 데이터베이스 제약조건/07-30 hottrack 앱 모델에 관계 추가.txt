안녕하세요. 이번 시간에는 Hottrack 앱에 아티스트, 앨범, 장르 모델을 추가하고 송 모델과
관계도 추가하고요.
변경된 모델 내역에 맞춰 샘플 데이터 추가 스크립트도 수정해 보겠습니다.
관계 필드 실습을 위해 핫트랙 앱의 관계를 조금 복잡하게 변경하려 합니다.
이전에는 송 모델 뿐이었는데요.
아티스트, 앨범, 장르 모델을 만들고 관계를 정의하겠습니다.
앨범과 송 모델은 1대 N의 관계, 아티스트와 송도 1대 N의 관계, 장르와 송은 M대
N의 관계로 정의했습니다.
실습을 간결하게 진행하기 위해, 핫트랙 앱의 모든 데이터를 제거하고, 마이그레이션을
초기화한 뒤, 다시 마이그레이션 파일을 생성하겠습니다.
순서대로 실습해 보겠습니다.
슬라이드 하단의 링크를 통해 이 커밋 페이지를 확인하실 수 있습니다.
Hottrack 앱에 마이그레이션을 롤백하기 전에 song 모델에 대한
Hottrack-song 테이블을 데이터베이스 툴로 접속해서 데이터를 먼저 삭제하겠습니다
그냥 Hottrack 앱에 마이그레이션을 롤백하면 데이터도 같이 삭제되는 것 아니냐 라고
생각하실 수도 있겠지만 Hottrack 앱에 마이그레이션을 지금 롤백하면 롤백에 실패합니다
Hottrack의 마이그레이션 중에 롤백을 하면 슬러그 컬럼의 길이를 다시 50으로
변경하게 되는데요.
테이블에 있는 데이터 중에 슬러그 값이 길이 50을 넘는 데이터가 있어서
PostgreSQL 데이터베이스에서 슬러그 컬럼 길이 변경에 실패하기 때문입니다.
Hottrack 송 테이블을 선택하고 전체 데이터를 삭제합니다.
혹은 쿼리 콘솔을 열어서 직접 삭제 쿼리를 실행하실 수도 있습니다.
Hottrack 송 테이블 데이터를 모두 삭제했으니 Hottrack 앱의 모든
마이그레이션을 롤백하겠습니다.
롤백했고요. 해당 마이그레이션 파일을 모두 삭제하고 재생성할게요.
커밋 페이지에서 코드를 복사할 텐데요.
먼저 models.py 파일부터 복사하겠습니다.
models.py 파일의 view 파일 링크를 통해 모델 전체 코드를 복사해서 통으로
붙여넣기 하겠습니다.
모델 코드를 붙여 넣었고요 아티스트 모델, 앨범 모델, 그리고 장르 모델이 있고요 장르
모델의 네임 필드는 대문자로 변환하여 유일성 제약 조건을 추가했습니다
속 모델에서는 Melon UID 필드를 제거하고 기본 키인 ID 필드를 Melon UID
역할로 사용하겠고요
앨범 모델과 아티스트 모델에서도 기본 키인 ID 필드를 Melon UID 역할로
사용하겠습니다 앨범 언더바 네임 문자열 필드는 제거하고, 앨범 외래키 필드로 바꾸고요.
아티스트 언더바 네임 문자열 필드도 제거하고, 아티스트 외래키 필드로 바꾸고요.
장르 문자열 필드도 제거하고, 장르 set manyto many 필드로 바꿉니다.
Admin.py 파일도 뷰 파일 링크를 통해 전체 소스 코드를 복사해서 붙여넣기
해주겠고요.
admin.py 파일 복사했고요.
load_melon_songs 파일 복사해야겠네요.
파일을 복사해서 붙여넣기 해줍니다.
melon chart url 경로에 파일 문서 포맷이 조금 바뀌었습니다.
앨범명과 가수명 컬럼명을 영문으로 바꾸고, 앨범과 가수에 대한 melon uid 컬럼을
추가했어요. 그리고 장르 컬럼은 배열로 바꿨습니다.
로드 멜론 송즈 명령 인자로 멜론 차트 URL 인자를 받을 수 있도록 하고, 지정되지
않으면 디폴트 주소를 사용하도록 설정했습니다.
멜론 차트 URL 옵션을 받아서 URL 요청해서 읽어내고요.
JSON 디코딩을 통해 개체화를 시킵니다.
create foreign data 함수에서는 로딩한 데이터를 기반으로 가수 앨범 장르
레코드를 생성합니다.
데이터베이스에 저장된 아티스트 앨범 장르를 먼저 조회하고요.
데이터베이스에 없는 아티스트 앨범 장르만 생성하도록 명령을 구성했습니다.
song 레코드 생성에 필요한 레코드를 다 생성했습니다.
데이터베이스에 없는 song만 생성하도록 명령을 구성하고요.
song 모델의 id 필드는 Melon new ID 값입니다.
아티스트와 앨범 외래키 필드에 대해 아티스트 모델 인스턴스와 앨범 모델 인스턴스를 지정하지
않고, 외래키 필드명을 알고 있다면, 외래키 값으로 할당할 수 있습니다.
made to many 필드를 비롯한 모든 관계는 해당 모델 인스턴스가 저장되어야만,
외래키 관계를 통해 그 관계를 저장할 수 있습니다.
개별 속 모델 인스턴스마다 save() 메서드를
호출하는 것은 성능 저하를 일으키니까 호출하지 않고요.
아래에 bulk create 호출 후에 장르를 지정할 수 있도록 언더바 장르 name
list라는 임의변수에 장르 리스트를 임시 저장해 둡니다.
파이썬은 어떤 객체든 임의 이름으로 속성을 생성할 수 있습니다.
bulk create로 호출하여 송 리스트의 모든 송 인스턴스를 데이터베이스에 저장한 후에
_genre_name_list 값을 읽어서 장르 관계를 맺어줍니다.
그럼 loadmelons-songs 파일은 적용을 했고요.
0001 migration 파일은 make-migrations 명령으로 생성할 거니까
스킵하고요.
models.py 파일도 적용했고, underbar.song.html 템플릿 파일을
적용해야겠네요.
_song.html 템플릿을 복사해서 그대로 적용을 해줍니다.
제거된 artistName 부분을 artist 외래키를 참조하도록 변경하고요.
song 모델에서 melon-uid 필드를 제거하고 기본 키를 그 역할을 없앴으니까
melon-uid 값으로 요청을 받는 url 패턴은 제거할 것입니다.
그러니 해당 링크도 제거해줍니다.
SongDetailHTML 템플릿에서도 앨범 언더바 네임, 아티스트 언더바 네임 참조
부분을 앨범과 아티스트 외래키 참조로 변경해 줍니다
hottrack의 urls.py 파일에서 melon-uid 인자를 통한 SongDetail
요청을 더 이상 지원하지 않을 것이니 해당 url 패턴도 제거하고요
SongDetailView에서도 MelonUID 인자 지원을 위한 get_object 재정의
함수가 더 이상 필요 없으니 제거합니다.
좋아요 수를 크롤링하는 getLikeCount 유틸리티 함수에서는 인자 리스트의 타입이
문자열에서 숫자로 변경되었고요.
그에 맞춰 문자열 변환 코드를 추가했습니다.
뷰의 코드렛에서도 제거된 ArtistName, AlbumName, 문자열 필드에 대한 조회
조건을 Artist 외래키, Album 외래키를 참조하도록 변경해 줍니다
뷰 파일 복사해서 그대로 적용을 해 줄게요
이제 핫트랙 앱에 대한 최초 마이그레이션 파일을 생성해 줍니다
앨범 모델 생성, 아티스트 모델 생성, 장르 모델 생성, 송 모델 생성이 있겠고요 장르
모델에 네임 필드에 대한 유니크 제약 조건도 추가가 되고요 그리고 핫트랙 앱에 슬러그
필드에 대한 인덱스도 추가가 되네요
마이그레이트 핫트랙 명령으로 마이그레이션을 적용해 주시고 로드 멜론 송스 명령으로 샘플
데이터도 추가해 줍니다
데이터베이스 탭에서 새로고침하시면 추가된 핫트랙 테이블을 확인하실 수 있고요 아티스트,
앨범, 송 테이블에서는 멜론에서의 아이디가 데이터베이스 기본키로 지정되어 있음을 확인하실
수 있습니다 아티스트 외래키와 앨범 외래키에 대해서는 이렇게 외래키 값이 잘 저장되어
있네요 송과 장르에 대한 관계도 이렇게 잘 저장되어 있습니다 장고 개발 서버를 띄우시고
hottrack 페이지로 접속해 보시면 우리가 방금 추가한 데이터로 페이지가 서비스가 되고
있고요. 각 링크도 잘 동작하고 있습니다.
어드밋 페이지에도 접속해 보시고요.
기능들이 잘 동작하고 있는데 검색을 해보니까 이렇게 필러 에러가 발생하고 있네요.
어드밍 검색에서 필드 에러가 발생했고, 외래키에 대해서는 iContains 룩업을 지원하지
않는다고 합니다.
어드밍 검색이니, Search Fields 설정을 확인해 봅니다.
설정에 아티스트, 앨범 외래키가 적용되어 있네요.
iContains Lookup을 위해 해당 외래키의 문자열 필드로 변경해 줄게요.
새로고침 하시니 검색도 잘 동작합니다.
좋아요 숫자 갱신 명령도 확인해 보니 잘 동작하고 있네요.




이번 시간에는 Hottrack 앱에 아티스트, 앨범, 장르 모델을 추가하고, 기존의 송(Song) 모델과 관계를 설정하는 방법을 다뤘습니다. 관계 필드를 추가하고, 샘플 데이터 추가 스크립트를 수정하는 과정도 함께 진행되었습니다. 전체적인 흐름을 요약하면 다음과 같습니다.

1. 모델 추가 및 관계 설정
아티스트(Artist), 앨범(Album), 장르(Genre) 모델을 추가하고, 송(Song) 모델과 관계를 설정했습니다.
앨범과 송: 1:N 관계
아티스트와 송: 1:N 관계
장르와 송: M:N 관계
각 모델 간의 관계를 외래키(ForeignKey)와 다대다 관계(ManyToManyField)로 정의했습니다.
2. 마이그레이션 롤백 및 초기화
송 테이블의 데이터 삭제: Hottrack 앱의 송 테이블에 있는 데이터를 삭제한 후 마이그레이션을 롤백했습니다. PostgreSQL에서 슬러그 컬럼 길이 변경 시 발생할 수 있는 오류를 피하기 위해 데이터를 먼저 삭제한 후 롤백했습니다.
마이그레이션 파일 초기화: 마이그레이션을 롤백한 후, 모든 마이그레이션 파일을 삭제하고 재생성하여 모델 변경 사항을 데이터베이스에 반영했습니다.
3. 모델 코드 수정
기본 키: Melon UID 필드를 기본 키로 사용하고, 각 모델에서 ID 필드를 기본 키로 지정하여 역할을 변경했습니다.
앨범과 아티스트 외래키 필드 추가: 앨범 이름과 아티스트 이름 필드를 외래키로 변경하여, 관계를 명확히 했습니다.
장르: 장르는 ManyToManyField로 변경하여 다대다 관계를 설정했습니다.
유니크 제약 조건: 장르 모델의 name 필드에 유일성 제약 조건을 추가하여 중복된 장르명이 등록되지 않도록 했습니다.
4. 샘플 데이터 추가 및 로드 스크립트 수정
load_melon_songs: 멜론 차트 URL을 받아 데이터를 로드하고, JSON 데이터를 디코딩하여 아티스트, 앨범, 장르 레코드를 생성하는 로직을 구현했습니다.
데이터베이스에 존재하지 않는 아티스트, 앨범, 장르만 새로 생성하도록 하여 중복 데이터를 방지했습니다.
송 레코드 생성 시, 각 송과 연결되는 아티스트, 앨범, 장르와의 관계를 설정했습니다.
5. 템플릿 및 URL 수정
템플릿 수정: 앨범명, 아티스트명, 장르에 대한 정보를 외래키 관계로 변경하여, 모델의 변경 사항을 반영했습니다.
URL 수정: 더 이상 melon-uid 인자를 통해 SongDetail을 요청하지 않으므로 관련 URL 패턴을 제거하고, 뷰에서 해당 기능을 삭제했습니다.
6. 마이그레이션 및 데이터베이스 반영
마이그레이션: make-migrations와 migrate 명령을 사용하여 마이그레이션 파일을 생성하고 적용했습니다.
샘플 데이터 로드: load_melon_songs 명령을 통해 샘플 데이터를 데이터베이스에 추가했습니다.
7. 관리자 페이지 및 검색 오류 해결
검색 오류 해결: 관리자 페이지에서 외래키에 대해 iContains 룩업을 사용하려면 외래키 필드를 문자열 필드로 변경해야 합니다. 이를 해결하고, 검색 기능이 제대로 동작하도록 수정했습니다.
8. 결과 확인
데이터베이스: 마이그레이션 후 데이터베이스에서 아티스트, 앨범, 송 모델을 확인하고, 외래키 관계가 제대로 저장되었음을 확인했습니다.
Django 서버: 장고 개발 서버를 실행하여 페이지가 정상적으로 서비스되고 있음을 확인했습니다. 각 링크와 기능이 잘 동작합니다.
요약
모델 변경: 아티스트, 앨범, 장르 모델을 추가하고, 송 모델과의 관계를 정의했습니다.
마이그레이션 초기화 및 수정: 기존 마이그레이션 파일을 롤백하고, 새롭게 마이그레이션을 생성하여 데이터베이스에 반영했습니다.
샘플 데이터 로드: 멜론 차트 데이터를 로드하여 샘플 데이터를 추가하고, 외래키 관계를 통해 데이터를 연결했습니다.
검색 오류 수정: 관리자 페이지에서 검색 시 발생한 오류를 해결하고, 정상적으로 검색 기능을 복원했습니다.