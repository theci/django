related_name 설정과 세트로 역방향 쿼리 이름, related 쿼리네임 설정이
있습니다 이는 쿼리 작성에서 역방향 관계를 참조할 때 사용하는 이름입니다
모델의 외래키 필드에 relatedName 설정과 related 쿼리네임 설정이 없다면
역방향 쿼리 이름으로서 모델명 소문자가 사용됩니다
유저 모델의 쿼리셋에서 모델명 소문자인 포스트를 통해 포스팅의 제목에 대한 쿼리를 작성하실
수 있구요. 웹앱 필드에 related 네임 설정만 있고 related 쿼리네임 설정이 없다면
related 네임 설정이 related 쿼리네임 설정으로써 사용됩니다.
그런데 장고 기본 앱의 코드에서는 Related Codename 설정을 단수형으로 쓰기
때문에 BlogPost _ Set 이름은 Related Codename
이름으로는 적절하지 않은 것 같네요.
related_name 설정과 Related Codename 설정도 같이 지정을 합니다.
related_code_name 인자는 abidm을 포함해서 단수형으로 지정하구요
related_name 속성은 abidm-modelClassName-set 포맷으로
설정하시고 related_code_name 속성은 abidm-modelClassName
포맷으로 설정하시기를 권장드립니다
추상화 모델 클래스에서는 related 네임 설정과 마찬가지로 related 쿼리네임에도 포맷
문자열 문법을 적용하여 상속받는 모델 클래스에 맞게 이름이 지정될 수 있도록 해주세요.
블로그 앱과 샵 앱에 포스트 모델에 유저 모델에 대한 외래키 필드에 related 쿼리네임
설정을 추가합니다.
장고 쉘을 열어주시고, 유저 모델을 통한 쿼리셀에서 역방향 쿼리 이름을 통해 블로그 포스팅
제목에 제목이 포함된 글을 쓴 유저 목록을 조회하는 쿼리셀을 이렇게 만들어 볼 수
있겠습니다. 유저 모델 쿼리셋에서 블로그 이름만 Shop으로 바꿔 수행해 보니 필드 에러가
발생하네요. 샵 앱에 포스트 모델에는 title 필드가 없기 때문입니다.
title 필드명을 메시지로 변경해서 다시 수행해 보면 잘 동작합니다.
메레키(meraki) 모델 필드를 가진 코멘트 모델 인스턴스를 생성하고 저장하는 세 가지의 시입니다.
첫 번째로 comment 인스턴스를 생성할 때, 외래키 모델 필드로 관련 모델 인스턴스를
지정하고 .save
메서드를 호출하여 저장합니다.
생성된 모델 인스턴스에서 외래키 모델 필드의 모델 인스턴스를 지정하실 수도 있고요,
외래키 데이터베이스 컬럼명으로 외래키 값을 지정할 수도 있습니다.
외래키 지정 시에 모델 인스턴스를 활용하면 코드가 더 읽기 쉬워지고 이해하기 쉬워집니다.
외래 키 값을 직접 지정하면 관련 모델 인스턴스를 조회하지 않아도 외래 키 관계를 지정할
수 있지만 코드에서 외래 키 값만 보고 대상이 무엇인지 즉시 이해하기 어려울 수 있습니다.
두 번째는 코멘트 모델의 모델 매니저를 통해 create 메서드를 호출해서 저장할 수
있겠고요. create 메서드는 내부에서 모델 인스턴스를 생성하고 save 메서드를
호출해서 저장하기에 첫 번째 방법과 동일한 방법입니다.
세 번째로 관계 매니저의 create 메서드를 호출해서 저장할 수 있습니다.
지정 포스팅에 속한 댓글 목록으로써 댓글을 생성한다는 의미이니 포스트 인자를 지정하지
않아도 자동으로 지정됩니다.
여러 모델 인스턴스의 외래 키를 일괄 변경하는 4가지 방법을 살펴보겠습니다.
첫 번째 방법은 모델 인스턴스를 순회하며 외래키를 변경하고, 각 모델 인스턴스별로 save
method를 호출하여 저장합니다.
모델 인스턴스 개수만큼 업데이트 쿼리가 수행되고, 전체 필드에 대해서 업데이트 쿼리가
수행되기에 아주 비효율적입니다.
두 번째 방법은 첫 번째 방법에서 저장할 때 updateFields 인자를 지정하여
postField만 업데이트합니다.
이는 댓글 개수만큼 업데이트 쿼리가 수행되기에 비효율적이지만, 외래키 필드만 업데이트하기에
덜 비효율적입니다.
세 번째 방법은 쿼리셋의 업데이트 메서드를 통해 외래키를 일괄 변경하는 방법입니다.
이는 하나의 업데이트 쿼리로 수행되기에 효율적입니다.
네번째 방법은, 외래키를 변경할 모델 인스턴스의 PK를 알고 있을 때,
underbulkbyId 를 통해 조회하고, QuerySet의 Update 메서드를
통해 외래키를 일괄 변경하는 방법입니다.
이 역시 하나의 업데이트 쿼리로 수행되기에 효율적인 방법입니다.




Django의 관계 필드와 관련 설정
related_name 설정

외래키 필드에서 related_name을 설정하면, 해당 외래키 관계의 역방향 쿼리 이름을 지정할 수 있습니다.
기본적으로 역방향 쿼리 이름은 모델명 소문자에 _set을 붙인 형태로 자동 생성됩니다.
related_name을 설정하면 해당 역방향 이름으로 관련 객체를 조회할 수 있습니다.
예시: Post 모델의 user 필드에 related_name='posts'를 설정하면, User 모델 인스턴스에서 user.posts.all()로 관련 포스트를 조회할 수 있습니다.
related_query_name 설정

related_query_name은 related_name과 비슷하지만, 역방향 쿼리를 통해 필터링할 때 사용하는 이름을 설정합니다.
기본값은 related_name과 동일하지만, 명시적으로 설정하면 쿼리에서 이 이름을 사용할 수 있습니다.
related_name과 related_query_name의 차이

related_name: 역방향 관계를 통해 객체를 조회할 때 사용할 이름을 설정.
related_query_name: 역방향 관계로 필터링할 때 사용할 쿼리 이름을 설정.
예를 들어, related_name='posts'와 related_query_name='blog_posts'를 설정하면,

User.posts.all()으로 역방향 조회 가능,
User.objects.filter(blog_posts__title='example')으로 필터링이 가능해집니다.
추상화 모델에서의 related_name과 related_query_name

추상화 모델에서 related_name과 related_query_name은 포맷 문자열을 사용할 수 있습니다. 예를 들어, related_name='%app_label%_%class_name%-set'과 같이 설정하여 상속받는 모델에 맞게 자동으로 이름을 생성할 수 있습니다.
외래키 필드에서 related_name 설정이 없다면

역방향 관계 이름은 기본적으로 모델명 소문자에 _set이 붙은 형태로 자동 생성됩니다.
외래키 필드에 외래 모델을 저장하는 방법

외래키 필드는 외래 모델 인스턴스를 저장하거나 외래키 값만 지정하여 저장할 수 있습니다.
예시:
모델 인스턴스 생성 시 외래 모델 인스턴스를 지정하고 .save() 호출.
모델 매니저의 create() 메서드를 사용해 인스턴스 생성 및 저장.
관계 매니저의 create() 메서드를 사용하여 지정된 모델에 속한 인스턴스를 생성.
외래키 값 일괄 변경 방법

여러 모델 인스턴스의 외래키 값을 변경하는 방법:
각 모델 인스턴스를 순회하며 외래키 변경 후 save() 호출 (비효율적).
update_fields를 지정해 필드만 업데이트 (다소 효율적).
쿼리셋의 update() 메서드를 사용하여 일괄 업데이트 (효율적).
bulk_update()를 사용하여 모델 인스턴스를 한 번에 업데이트 (효율적).
결론
**related_name**과 **related_query_name**은 관계 필드에서 역방향 쿼리와 필터링을 직관적으로 할 수 있게 도와주는 설정입니다.
외래키를 사용할 때는 관계 설정을 명확히 하여 쿼리 작성과 코드 가독성을 향상시킬 수 있습니다.
외래키 값을 일괄 변경할 때는 update()와 bulk_update()를 사용하여 성능을 최적화할 수 있습니다.