Fluxy 모델을 사용하면 기존 모델의 데이터와 테이블을 그대로 유지하면서 확장된 기능을
가진 새로운 모델 클래스를 정의할 수 있습니다.
하나의 예로써, User 모델을 기반으로 SuperUser Fluxy 모델을
정의했습니다. 이 proxy 모델은 데이터베이스 마이그레이션을 할 때 새로운 테이블을
생성하지 않고요, 유저 모델의 코드와 데이터베이스 테이블을 그대로 사용합니다.
SuperUser 모델 클래스는 슈퍼 유저만을 위한 도메인 로직을 구현합니다.
슈퍼 유저만을 조회하고, 저장할 때에는 자동으로 SuperUser 플래그를 설정하여
저장합니다. 관리자 페이지에서 proxy 모델은 특히 유용합니다.
장고 Admin에서는 모델 한 개당 한 개의 모델 어드민만을 등록할 수 있거든요
그런데 프록시 모델을 통해 슈퍼 유저에 특화된 관리자를 추가할 수 있습니다
프록시 모델의 다른 예로는 일반 고객 모델을 확장한 VIP 고객 모델, 제품 모델을 확장한
할인 제품 모델 등이 있습니다
유저 모델 클래스를 추가하기에 앞서 파이썬 manage.py ShowMigrations 명령으로
현재 마이그레이션 적용 현황을 확인을 해 보겠고요.
Auth 앱에 대해서 0012 마이그레이션까지 현재 적용이 되어 있습니다.
Auth 앱은 장고 기본에서 지원해주는 장고 앱이고요.
User 모델 클래스를 지원을 하고 있어요.
우리가 커스텀 유저 모델 클래스를 정의해서 우리 프로젝트에서 사용하기 위해서는 이 Auth
앱의 마이그레이션을 롤백하고 커스텀 유저 모델 클래스를 정의한 후에 다시 마이그레이트
과정이 필요합니다.
파이썬 manage.py 마이그레이트 Auth의 제로라는 명령을 통해서 Auth 앱과 관련된
마이그레이션들을 다 롤백을 했습니다.
파이썬 매니지파이 start 앱 Account 명령으로 새로운 장고 앱, Accounts 앱을
만들어 주시고 Settings에 Installed Apps에다가 Accounts 앱을
등록을 합니다 각 앱 이름 끝에 콤마를 꼭 추가를 해 주시고요
Accounts 앱 모델 스파이에서 Custom User Model 클래스를 정의하겠습니다
Custom User Model Class는 모델 클래스를 상속을 받기보다 Abstract
User라는 이름의 추상화 모델 클래스가 있습니다
이 Abstract User에서는 장고 유저 모델의 기본이 모두 구현이 되어 있습니다
이를 상속받는 것만으로 이 User Model Class는 현재 프로젝트에서 정상 동작을
하고요 필요하시다면 이 User Model Class에서 모델 필드를 추가하실 수도 있겠고
메서드를 추가하실 수도 있습니다. 추가하실 수도 있습니다
이 Custom User Model 클래스를 현재 프로젝트에서 사용하기 위해서는
settings에서요 Auth User Model이라는 설정을 추가해 주시는데 Accounts 앱의
User Model 클래스를 현재 장고 프로젝트의 유저 모델로써 사용을 하겠다라고 이렇게
꼭 설정을 넣어 주셔야 됩니다
이 설정이 없으면 Accounts 앱의 유저가 아닌 Auth 앱에 있는 User Model
클래스를 현재 프로젝트의 유저 모델로써 사용을 하게 됩니다
Make Migrations Account 명령을 통해서 Accounts 앱에 대한 새로운
Migration 파일을 생성해 주시고요.
Python manage Migrate 명령을 수행해 주시면 Accounts 앱에
Migration을 포함해서 모든 Migration들이 이렇게 의존성에 맞춰서 동작을 함을
확인하실 수 있겠고요.
현재 데이터베이스에서는 우리가 앞서 생성했던 블로그 앱의 데이터는 모두 삭제가 되었습니다
장고 프로젝트에서는 CustomUser 모델 클래스를 커스텀하게 되는데요 프로젝트 초반에
CustomUser 모델 클래스를 정리해서 이렇게 등록을 하시고 프로젝트를 시작하시기를
추천드립니다 파이썬 manage.py create-superuser 명령으로 새로운 슈퍼 유저
계정을 생성을 해주시고요
데이터베이스 패널에서 새로고침을 하시면은 account에 user라는 새로운 테이블이
생성이 되어 있을 겁니다
ID 1에는 우리가 마이그레이션 과정에서 생성하는 유저 계정이 있는 것이고요
두 번째는 방금 create-superuser 명령으로 생성한 슈퍼 유저가 있습니다
파이썬 매니지 파일 런 서버 명령으로 장고 개발 서버를 띄우신 다음에 어드민 주소로
들어가시고 생성하신 슈퍼 유저 계정으로 로그인을 해주세요
현재 어드민에서는 유저는 없고 그룹만 존재합니다
우리가 새롭게 만든 이 유저 모델을 어드민에 등록을 한 적이 없기 때문이에요
Accounts에 admin.py에서 유저 모델을 임포트하시고 유저 모델을 어드민에 등록을
합니다 소스 파일 저장하시고 새로고침 하시면 Accounts 앱에 대해서 이렇게 User
Model에 대한 어드민 페이지를 확인을 하실 수 있습니다
User Model 클래스는 어드민에 이미 등록이 되어 있습니다
새로운 모델을 어드민을 만들고 이렇게 User Model 클래스를 어드민에 재등록하려고 하면
이와 같이 이미 등록이 되어 있다는 예외가 발생합니다
이 코드는 일단 주석 처리 하겠고요 개발 서버도 재시작을 시켜 주겠습니다
모델스.py에서 유저 모델 클래스를 상속받은 새로운 모델 클래스를 정의하는데 이 모델
클래스는 Proxy 설정을 해줍니다
Super User라는 모델은 유저 모델의 모든 설정을 그대로 사용할 수 있겠고요
데이터베이스 테이블도 유저 모델의 데이터베이스 테이블을 사용하게 됩니다
admin.py에서 SuperUserModel 클래스를 임포트 하시고요 아래 하단의 코드를
주석을 푸시고 이제 SuperUser 모델에 대해서 SuperUserAdmin을 이렇게
등록을 하시면 오류 없이 수행이 되겠고요 어드민을 새로고침 하시면은 Users와 함께
SuperUsers도 확인하실 수 있습니다
근데 SuperUsers에 들어가 보면 Superuser가 아닌 일반 유저도 이렇게 목록에
보여지고 있죠
Superuser 모델에 대한 Custom Model Manager를 만들어서요 기본
쿼리셋에서 IsSuperuser 플래그를 체크를 하도록 하겠습니다
Superuser 매니저는 모델스의 매니저 클래스를 상속을 받고요 객체 쿼리셋 메서드를
재정의해서 기본 조회 조건을 변경하겠습니다
이때 isSuperUser 플래그 참조건을 추가하겠습니다
object라는 이름으로 이렇게 매니저를 만들어 주시면요 SuperUsers 모델에 대해서는
항상 조회를 할 때 isSuperUser 플래그를 확인을 하게 됩니다
소스파이 저장하시고 새로 고침하시면 이렇게 SuperUsers만 필터링이 되어서 보여지게
되겠고요 슈퍼유저 모델 클래스에서 save 메서드를 재정의하시고 부모 클래스에 save
메서드를 호출하기 전에 isSuperUser 플래그를 참으로 지정하시면 슈퍼 유저 모델을
통한 인스턴스 저장에서는 isSuperUser 플래그가 항상 참으로 저장이 됩니다