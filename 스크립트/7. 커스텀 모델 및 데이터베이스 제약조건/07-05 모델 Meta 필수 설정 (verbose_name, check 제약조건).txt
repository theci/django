안녕하세요 이번 시간에는 모델의 메타 필수 설정에 대해서 살펴보겠습니다
메타 설정을 통해 관련 데이터베이스 테이블의 이름, 모델의 디폴트 정렬, 관리자
인터페이스에서의 표시 이름 등을 설정할 수 있습니다
주요 메타 설정에 대해서 살펴보겠습니다 장고 기본 앱 중 하나인 Admin 앱에서는 모델의
표시 이름을 지정하기 위해 모델 클래스의 Meta 설정에서 verbose_name과
verbose_name_plural 설정을 사용합니다.
VerboseName은 모델의 단수 형태 이름을 정의하며 지정하지 않을 경우 모델 이름이
소문자로 표시되고요.
VerboseNameFloral은 복수 형태의 이름을 설정하며 이 역시 지정하지 않을 경우
VerboseName에 알파벳 S를 추가한 형태로 사용됩니다.
예시에서는 한글로 이름을 지정했지만, 장고의 국제화 기능을 통해 문자열 번역을 제공할 수
있으며, 사용자 언어 설정에 맞춰 해당 언어로 표시할 수 있습니다.
현재 블로그 앱에 모델스파이의 포스트 모델이 있고요.
포스트 모델이 어드민에는 아직 등록이 되어 있지 않습니다.
포스트 모델을 어드민에 등록을 하시면은 어드민 페이지에서 이렇게 포스트 모델을 확인하실 수
있죠 여기에 보여지는 이름을 변경을 해보고자 합니다
해당 포스트 모델에서 메타 클래스가 있구요
여기에 verbose name 설정으로 posting이라고 저장을 하시구요
어드민 페이지에서 새로고침 하시면은 posting에 's'가 붙죠
그리고 verbose name plural 설정으로 posting 목록이라고 쓰시고
저장하시고 새로고침 하시면 포스팅 목록이라고 복수 형태의 이름이 보여지게 되고 안에
들어가면 이렇게 단수 형태의 이름을 확인을 하실 수 있게 됩니다
리뷰 모델 클래스의 Rating 별점 필드는 1 이상 5 이하의 정수값을 가집니다
입력 값의 범위를 제한하기 위해 모델 필드의 Validators 속성으로 최소값 유효성
검사 함수와 최대값 유효성 검사 함수를 지정하시면 파이썬 코드 레벨에서 유효성 검사 시에
값의 범위를 제한할 수 있습니다.
하지만 이는 데이터베이스에 직접 인서트 혹은 업데이트 쿼리를 수행할 때에는 값의 범위를
제한할 수 없습니다.
하지만 파이썬의 유연성을 활용해 복잡한 유효성 검사 로직을 쉽게 구현할 수 있으며,
자세하고 사용자 친화적인 에러 메시지를 제공할 수 있습니다.
Validators 유효성 검사에 대해서는 이후 장고 폼 파트에서 자세히 살펴보겠습니다.
데이터베이스에서는 제약 조건을 지정하여 데이터의 무결성을 보장받을 수 있습니다.
이를 위해 직접 SQL을 통해 제약 조건을 추가하지 않아도 모델의 Check
Constraints를 통해 데이터베이스 레벨의 제약 조건을 지정할 수 있습니다.
이렇게 지정한 제약 조건은 마이그레이션 시에 데이터베이스에 추가됩니다.
Check constraint 설정을 통해 데이터베이스에 체크 제약 조건이 추가되면,
데이터베이스에서 직접 SQL 코디로 레코드를 추가, 수정할 때에도 데이터베이스에 의해 제약
조건이 자동 체크되며, 파이썬 레벨에서도 제약 조건을 통해 유효성 검사를 수행할 수
있습니다. 하지만 이는 Validators 방식보다 표현력이 제한적이어서 단순한 값 체크에
유용하며 복잡한 로직을 구현하기 어렵습니다.
그리고 에러 메세지는 데이터베이스에서 정의한 에러 메세지로만 제공되기에 사용자와 친화적이지
않고 읽기 어려울 수 있습니다.
애플리케이션 단에서 장고 모델을 통해 유효성 검사 없이 저장을 시도하더라도 데이터베이스에
의해 제약 조건 체크가 이루어져 제약 조건을 위배하면 Integrity Error 오류를
발생시킵니다.
데이터베이스에 체크 제약 조건이 있더라도 애플리케이션 단에서 먼저 유효성 검사를 수행하게
되면 유저에게 보다 빠르게 피드백을 줄 수 있으며 데이터베이스로의 네트워크 트래픽과
데이터베이스 부하를 줄이고 SQL injection 등의 보완을 강화할 수 있습니다
애플리케이션 단에서 먼저 유효성 검사를 수행하고 밸리데이션 에러 예외가 없다면
데이터베이스에 저장을 시도하고요 유효성 검사에서는 데이터베이스에 등록된 체크 제약 조건을
사용하는 것이 아니라 장고 코드 레벨에서 모델의 체크 제약 조건에 지정된 Q 객체를
활용해서 SQL 코디를 생성하여 유효성 검사를 수행합니다
Blog 앱에 models.py 파일을 여신 후, 제일 하단에 ReviewModel
클래스를 추가하겠습니다.
메시지라는 이름의 TextField, Rating이란 이름의
SmallIntegerField가 되겠고요.
이 별점 필드는 1 이상 5 이하의 정수값을 가져야 합니다.
이를 위해서 할 수 있는 옵션은 Validators를 통해서 유효성 검사 함수를 여러 개
지정하실 수 있는데요.
최소값, 최대값, 유효성 검사 함수는 장고 기본에서 지원을 해줍니다.
minValueValidator 클래스를 활용하시고, 임포트하시고, 최소값을 지정해
주고요. maxValueValidator를 지정하시고, 임포트하시고, 최대값을 지정해
주시면 이 클래스의 인스턴스가 만들어지죠.
이 인스턴스는 호출 가능한 객체로 함수처럼 사용을 할 수 있습니다.
그러면 이 리뷰 모델 클래스에 대한 유효성 검사가 수행이 될 때에 1 이상 5 이하의
범위를 만족하는지 파이썬 코드 레벨에서 확인을 하실 수 있게 돼요
저장하시고 제가 유효성 검사만 수행할 것이기 때문에 데이터베이스로의 저장은 안 할 거예요
이렇게 장고 쉘을 구동하시고 그리고 리뷰 클래스, 모델 클래스의 인스턴스를 하나 만들어
주시고요 유효성 검사 수행을 위해서 review.fullclean을 호초해 주시면 이렇게
validation error가 뜨면서 제가 별점으로 6을 지정했잖아요
6은 이 범위에서 maxValueValidator에 의해서 이 조건에 유배가 되기 때문에
해당 값은 5 이하여야 된다라는 이런 에러 메세지가 보여지고 있습니다
리뷰 모델 클래스에 대한 데이터베이스 테이블 생성을 위해서요 이렇게 셀을 빠져나가시고
Make Migrations Blog 명령을 내려주시고 블로그 앱에 8번
Migration이 만들어집니다
migrate blog 명령을 통해서 리뷰 모델에 대한 데이터베이스 테이블을 생성을
해주겠습니다 여기 데이터베이스 탭에서요 새로 고치지 마시고 Blog에 Review라는
테이블이 보여지죠
New에서 Query Console 여신 다음에 여기에서 제가 Insert into
Blog에 Review라는 테이블에 메세지어 레이팅 컬럼에 대해서 값은 빈 문자열과 값
6을 지정해 보겠습니다
이 SQL을 실행해 보시면 이렇게 실행이 되고요 한 행이 들어갔다고 나오죠
그리고 테이블 열어보시면 6이라는 값이 들어 있습니다 값이 잘못 들어갔죠?
여기에서 알 수 있는 것처럼 모델 필드의 Validators는 파이썬 레벨에서 유효성 검사
시에만 수행이 될 뿐 데이터베이스 레벨에서는 영향을 끼치지 않는다는 거죠
일단 이 데이터는 삭제를 하겠습니다
delete 하시고 Submit을 해서 실제 반영을 하겠고요 이번에는 Validators를
사용하지 않고 Check Constraint, 제약 조건을 사용해 보겠습니다
일단은 방금 생성한 8번 마이그레이션을 취소할게요 0007을 내서 8번 마이그레이션을 롤백
하시고요 그리고 BlogMigrations에 0008 마이그레이션 파일을 삭제해 주세요
그리고 Validators 부분은 이렇게 주석을 하시고 클래스 메타에 Constraints
List에 체크 Constraints를 추가하겠고요
여기에 체크 단 이름으로 Queue 객체를 추가해 주겠습니다
Queue 객체를 Django DB Models에서 Queue를 임포트 하시고요 여기에서는
Rating field는 GTE1보다 크거나 같아야 된다
LTE5 이하여야 된다 라고 이렇게 추가를 해 주시고 그리고 check
constraint에서는 해당 제약사항에 대한 이름을 지정을 해 주셔야 됩니다
그 이름은 테이블명을 먼저 써 줄 것이고요
field명이 그리고 LTE, O라고 이렇게 유니크하게 지정을 해 줄게요
이렇게 하시고 나서 makemigrations Blog 명령을 내려보시면 새롭게 8번
Migration 파일이 생성이 되었고요
sqlmigrate Blog에 0008 명령을 내려보시면 블록 언더바 리뷰 테이블이
만들어지고 나서 블록 언더바 리뷰 테이블에 add constraint를 통해서 우리가
지정한 이름으로 이렇게 제약사항이 추가가 되고 있음을 확인을 하실 수 있습니다 그러면 장고
셀을 구동하셔서 앞서 했던 예시와 똑같이 이 제약사항이 유배되는 값을 넣었고요
review.fullclean을 호출해 주면은 유효성 검사가 수행이 됩니다
실행을 해 보시면은 자 이렇게 우리가 체크 컨스트레인트에 체크인자로 지정한 Q 객체가 있죠
레이팅 필드는 1 이상, 5 이하여야 된다
이 Q 객체를 그대로 활용해서 데이터베이스에서 우리가 입력한 값이 1 이상이고 그리고
우리가 입력한 값이 5 이하인지 데이터베이스에서 수행을 해서 유효성 검사를 수행하고 있고
이 수행 결과가 거짓이니까 이렇게 Validation Error가 발생하고 있습니다
이때 발생하는 오류 메세지는 데이터베이스 단에서 발생시키는 것이기 때문에 우리가 커스텀을
할 수는 없어요
자, 이제 장고 셀을 빠져나오시고요
마이그레이트 블로그 명령을 통해서 데이터베이스 테이블도 생성해주고 이 제약 조건도
데이터베이스 테이블에다가 추가를 해주겠습니다
우리가 앞서 Validators 단계에서 실행했던 인서트 쿼디가 있죠
오류 없이 수행이 되었었는데 이 쿼디를 그대로 다시 실행을 해보시면 실행이 되었는데 에러가
발생했죠 체크 제약사항을 위배했다 라고 나오고요 위배한 제약사항의 이름이 출력이 됩니다
이처럼 장고 모델단에 적용한 체크 제약사항이지만 데이터베이스 레벨에서도 동작함을
확인했습니다