슬라이드 하단에 안내된 링크를 통해 이 페이지를 확인하실 수 있습니다.
소스파일 ModelField.py 파일을 열어주시고요.
BooleanField를 상속받은 BooleanYNField 클래스를 선언합니다.
BooleanField지만 내부적으로 쿼리셋 처리 및 데이터베이스 저장은
CharacterField 타입으로 처리할 것이기에 GetInternalType 메서드를
재정의해서 CharacterField 문자열을 반환해 줍니다.
이어서 생성사에서 키워드 인자에 대한 디폴트 값으로서 maxLength1을 지정해
주겠습니다. 이어서 fromDbValue라는 메서드를 재정의할 텐데요.
총 3개의 인자를 봤습니다.
그 중 첫 번째 인자가 데이터베이스로부터 읽어온 해당 클럼의 값이고요.
두 번째 인자는 expression, 세 번째 인자는 데이터베이스 연결입니다.
첫 번째 인자의 이 value 값을 self.toPython 호출을 통해서 참 혹은 거짓
혹은 non 값으로 변환한 후에 반환을 해 주겠습니다
이 값은 대문자 y, 대문자 n 혹은 non일 수 있습니다
그래서 optional을 붙여 주겠고요 반환 값은 참 혹은 거짓인데 이 값도 non일 수
있기 때문에 optional을 붙여 주겠습니다
이어서 getPreferred value method를 재정의하겠습니다
이 method는 SQL query가 작성될 때 호출이 되는 거죠
기본적으로 참 혹은 거짓 값을 받아 가지고 대문자 y, 대문자 n 값으로 변환을 해 줄
텐데 QuerySet에서 좀 더 유연하게 대문자 y, 대문자 n 값도 우리가 받아서 처리해
줄 수 있도록 유니언을 통해서 문자도 받을 수 있고 참 거짓 값도 받을 수 있다고 이렇게
type 힌트를 주겠고요 반항 값은 non 값이 있을 수도 있기 때문에 옵션어를 통해서
type 힌트를 주겠습니다 부모의 getPreferredValue 메서드 호출에서 그 반항
값을 받는데요 내부 구현을 윈도우에서는 Ctrl, 맥에서는 Command 누르고 클릭해
보시면 내부에서 toPython 메서드를 호출하고 있죠
그리고 그 값이 non일 경우에는 non을 반환하고 있고, non이 아닐 경우에는
toPython method가 호출되고 있습니다.
즉, 이 값이 None일 수도 있다는 거죠.
그리고 참, 거짓일 것입니다.
이 값이 None이라면 None을 반환할 것이고요.
이 값이 None이 아니라면 Boolean 타입의 값으로서 참 혹은 거짓 값일 것입니다.
그래서 그 값이 참이라면 대문자 y를 반환할 거고요.
거짓이라면 대문자 n을 반환하려 합니다.
마지막 메서드로써 toPython 메서드를 재정의하겠습니다.
인자로는 대문자 y, 대문자 n, 혹은 참, 거짓 값을 union으로 문자류가 불리언을
지정해 주고요.
반환 값으로는 항상 참, 거짓 값을 반환해 줄 텐데, 반환 값도 None일 수 있기 때문에
optional을 붙여 주겠습니다.
그래서 현재 이 모델 필드가 사용이 되었을 때 null 허용 필드라면 인자로 받은 값이
empty values에 하나라도 속한다면 non을 반환할 것이고요 그
외에 super의 toPython에서 value 호출해 보시면 불리언 필드의
toPython이죠 여기 들어가 보시면 그 값이 참 거시실 때에 대한 처리 그 값이 대문자
y냐, 숫자 true냐, 1이냐
그리고 value가 f냐, false냐 문자 y냐 등에 대해서 값 변환 이렇게 이루어지고
있습니다 그러면 BooleanYNField는 대문자 y, 대문자 n에 대한 변환만 신경쓰고
나머지 값에 대한 변환은 그냥 부모에게 맡기는 거죠
Value 값이 대문자 y라면 저는 True를 리턴하고 Value 값이 대문자 n이라면
저는 거짓을 이렇게 리턴하겠습니다 대문자
y와 대문자 n, 대문자 y와 대문자 n이 소스 코드에 하드 코딩이 되어 있는데 이 값을
이렇게 클래스 변수도 빼시고요 대문자 y 대신에 self.trueValue,
self.falseValue 여기 y도 self.trueValue,
self.falseValue라고 하시면 이제 BooleanYNField에서 대문자 y,
대문자 n 대신에 소문자 y, 소문자 n 혹은 문자 1, 문자 0 원하는 대로 값을
변경하실 수 있죠
BooleanYNField 클래스에 상속받아서 하실 수 있고 혹은 이 클래스 변수 값만
변경해서도 처리를 하실 수 있게 됩니다
BooleanField 코드를 들어가 보시면 default error message 사전에
보시면 invalid와 invalid null로 분해서 인자의 값은 반드시 참 혹은 거짓
중에 하나여야만 한다는 error message가 있죠
그리고 nullable, invalid에서는 해당 값은 참 혹은 거짓 혹은 non이어야
된다는 메시지가 있는데 이 부분을 이렇게 사전을 재정의하겠습니다
복사해서 붙여 넣어 주시면요 기본 에러 메시지는 인자의 값은 참 혹은 거짓
값이어야 하며 대문자 Y, 대문자 N 문자열로 지원합니다
nullable에서도 해당 값은 non이거나 참 혹은 거짓 값이어야 하며 대문자 Y,
대문자 n 문자열도 지원합니다라는 에러 메시지를 만들었습니다
이렇게 디폴트 에러 메시지를 재정의했습니다
블로그 앱의 모델스파이 최하단에서 새로운 article 모델을 정의하고 Title 필드로서
CharField max-length 100을 지정하고
IsPublic.chField를 CharacterField로서 정의하고 max_length
1을 지정합니다
그리고 Choices 인자로 데이터베이스에는 대문자 y로 저장하는데, 보여진 label로는
예 라고 해 보겠고요.
그리고 대문자 n으로 저장하는데, 아니요 라고 해 보겠습니다.
디폴트 값은 대문자 n으로 지정을 해 볼 수 있을 것이고요.
isPublic yn이라는 필드는 우리가 앞서 정의한 BooleanYNField를 사용해
보겠습니다.
Default 값은 거짓을 지정하겠어요.
PythonManagePy MakeMigrations 블로그 명령으로 새로운 마이그레이션
파일 블로그 앱에 0007 마이그레이션 파일을 생성을 했습니다.
SQL Migrate 블로그에 0007 명령을 수행해 보시면, IsPublic.ch 필드에
대해서 var 캐릭터 1 타입으로 데이터베이스 컬럼이 생성되고, IsPublic.ym
필드도 var 캐릭터 1 타입으로 컬럼이 생성될 것임을 확인하실 수 있구요.
migrate blog 명령으로 데이터베이스에 적용도 해주겠습니다.
이제 장고 쉘을 구동해 주시고요 새로운 article 생성을 위해서 title 필드에는 빈
문자열, isPublic 필드에는 대문자 n, isPublic 필드에는 거짓
값을 지정해 보겠습니다 실행을 해 보시면 데이터베이스에 저장이 되었고
isPublic.chField와 isPublicYNField에 대해서 데이터베이스에 저장되는
값은 똑같이 대문자 n으로 저장이 되고 있죠
근데 파이썬 딴에서 우리가 사용하는 값은 isPublicYN은 참 거짓값이고
isPublicChField는 대문자 y, 대문자 n 값을 사용하게 됩니다
방금 생성한 article이 있고요.
isPublic.ch 값을 보시면 이렇게 대문자 n이죠.
이 값이 거짓의 의미로 사용이 되었는데 파이썬 코드 내에서 Boolean 판단을 해보시면
이렇게 대문자 y는 참 판정을 받습니다.
파이썬에서는 빈 문자 열만 거짓 판정을 받을 뿐 공백을 포함한 모든 글자는 참 판정을 받게
돼요. 그러면 isPublic.ch 필드에 대해서 참 거짓 판정을 위해서는 항상 이렇게
대문자 y와 비교를 하셔야 되는 거죠.
하지만 isPublicYN 값은 이 자체로 참 거짓 값이기 때문에 일관되게 참 거짓 연산을
하실 수 있게 됩니다.
isPublicYN 필드를 활용해서 아티클을 조회하실 때에도 참 혹은 거짓 값을 활용하시면
이렇게 SQL에서 거짓 값이 대문자 N으로 변환이 되어서 SELECT 쿼리가
동작을 함을 확인하실 수 있고요.
참거짓값이 아니라 대문자 y나 대문자 n 값을 지정하셔도 이렇게 동일하게 잘 동작함을
확인하실 수 있습니다
이렇게 참거짓값 혹은 대문자 y, 대문자 n 값으로 동작을 하게 되는 이유는
GetPreferredValue에서 내부적으로 to_python 메서드를 호출해서 값을
변환하고 toPython 메서드에서 문자열 혹은 불리언 값을 받아서 대문자 y, 대문자 n에
대해서도 값을 처리해주고 참 거짓에 대해서도 이 부모에서 값을 이렇게 처리를 해주고 있죠
우리가 이렇게 구현을 해줬기 때문에 두 개의 값에 대해서 지원을 해줄 수 있게 된 것입니다
isPublicYNField를 쓸 때 대문자 y, 대문자 n 외의 다른 값으로 만약 조회를
해 본다면 어떻게 될까요?
실행해 보시면 이와 같이 방금 제가 입력한 a라는 값은 참 혹은 거짓값도 아니고요 대문자
y, 대문자 N 문자열도 아니라고 이런 오류 메시지가 뜨고 있죠
이에 반해 IsPublic.ch 필드를 사용해 보시면 a 값으로도 이렇게 조이가 동작함을
확인하실 수 있습니다
우리가 허용하는 값 외에 다른 값이 사용되더라도 이렇게 오류가 발생하지 않고 코드가
동작하기에 버그가 발생할 가능성이 높아집니다 새로운 아티클 생성에서 isPublic
chField에 대해서 제가 만약 오타로 소문자 y를 입력했다면 실행해 보시면 오류 없이
소문자 y도 이렇게 저장이 됩니다
isPublicYnField에서 똑같이 제가 실수로 소문자 y를 입력했다면 실행해 보시면
이렇게 오류를 내어주죠
잘못 입력한 값에 대해서 오류를 발생시켜 주기에 실수를 빠르게 확인하고 고칠 수 있게
됩니다


이 설명은 Django에서 BooleanYNField라는 커스텀 모델 필드를 정의하여, 데이터베이스에서 참/거짓 값을 대문자 'Y'와 'N'으로 저장하고, 파이썬 코드에서는 불리언 값(True/False)을 사용하도록 구현하는 방법에 대해 설명합니다.

주요 구현 단계:
클래스 선언:

BooleanYNField는 Django의 기본 BooleanField를 상속받습니다.
데이터베이스에 저장할 때 CharacterField로 처리되므로, getInternalType 메서드를 재정의하여 CharacterField를 반환합니다.
생성자에서 max_length=1을 지정하여, 데이터베이스에서 1글자 크기의 필드로 저장되도록 설정합니다.
fromDbValue 메서드:

데이터베이스에서 값을 읽어올 때 호출됩니다.
value 값을 받아 toPython 메서드를 호출해 대문자 'Y' 또는 'N' 값을 True 또는 False로 변환합니다.
반환값은 참(True) 또는 거짓(False)일 수 있으며, None일 수도 있습니다.
getPreparedValue 메서드:

SQL 쿼리를 실행할 때 호출됩니다.
True/False 값을 받아 대문자 'Y'와 'N'으로 변환하여 데이터베이스에 저장하거나 쿼리에서 사용하도록 합니다.
반환값은 None일 수 있으므로 Optional을 사용하여 반환 타입을 지정합니다.
toPython 메서드:

입력 값으로 대문자 'Y'와 'N', 또는 불리언 값을 받을 수 있습니다.
True일 때 대문자 'Y'를, False일 때 대문자 'N'을 반환합니다.
None을 처리할 수 있도록 Optional 타입을 사용하고, 부모 클래스인 BooleanField의 toPython 메서드를 호출하여 나머지 값에 대한 변환을 처리합니다.
'Y'나 'N'이 아닌 값이 들어오면 에러를 발생시킵니다.
에러 메시지 재정의:

BooleanYNField에서 허용되는 값이 'Y'와 'N'으로 제한되므로, 잘못된 값에 대해 오류 메시지를 정의합니다.
잘못된 값이 입력되면, 해당 값은 참/거짓 또는 'Y'/'N'이 아니므로 오류를 발생시키고, 이를 사용자에게 알려줍니다.
모델 정의:

Article 모델에서 isPublic 필드를 정의할 때, BooleanYNField와 CharacterField를 사용하여 'Y'와 'N'을 저장하도록 설정합니다.
예시로 isPublic 필드를 BooleanYNField로 설정하고, choices를 이용해 'Y'와 'N' 값을 데이터베이스에 저장하면서, 필드의 기본값을 'N'으로 설정합니다.
실행 및 동작 확인:

새로운 Article 모델 인스턴스를 생성하고, isPublic 필드에 'N' 또는 False 값을 지정하여 저장합니다.
isPublic 필드에 저장된 값은 대문자 'N'이지만, 파이썬에서는 True/False와 같은 불리언 값을 사용합니다.
BooleanYNField는 'Y' 또는 'N'을 대소문자 구분 없이 처리하고, 소문자 'y'는 저장하지 않으며, 잘못된 값이 입력될 경우 오류를 발생시킵니다.
결과:
BooleanYNField는 데이터베이스에서 대문자 'Y'와 'N'을 사용하고, 파이썬 코드에서는 불리언 값을 사용합니다.
잘못된 입력이 들어오면 명확한 오류 메시지를 통해 사용자가 실수를 쉽게 확인할 수 있습니다.
이 커스텀 필드를 사용하면 데이터베이스의 호환성과 파이썬 코드에서의 일관성을 유지할 수 있습니다.