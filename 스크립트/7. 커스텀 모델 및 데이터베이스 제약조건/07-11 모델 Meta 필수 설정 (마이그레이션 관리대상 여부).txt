장고는 마이그레이션 기능을 통해 모델 클래스의 변화를 데이터베이스 스키마와 동기화하여
관리하기 쉽게 지원합니다.
모델의 마이그레이션 관리 여부는 메타 클래스의 Managed 옵션으로 결정됩니다.
기본 값은 참이며, 직접 데이터베이스 스키마를 관리하고자 할 때에는 거짓으로 설정합니다.
데이터베이스 관리자가 수동으로 데이터베이스 테이블 스키마를 관리하거나 데이터베이스에서
생성한 뷰를 모델로 활용할 때 유용합니다.
장고를 통해 데이터베이스 스키마를 관리하지 않는다는 것을 제외하고는 다른 모델 기능과
동일합니다. 다만, 장고 모델과 데이터베이스 스키마를 이중으로 관리해야 하기에 매우
번거롭습니다.
데이터베이스 스키마가 변경되면 그에 맞춰 장고 모델도 변경해줘야 합니다.
데이터베이스 스키마를 장고에서 관리하지 않을 경우 데이터베이스 스키마와 장고 모델을
수동으로 맞춰줘야 합니다.
데이터베이스 내역을 보고 수동으로 장고 모델 코드를 생성하고 맞춰주는 것은 매우
번거롭습니다.
장고에서는 InspectDB 명령을 통해 지정 데이터베이스의 모든 테이블에 대한 장고 모델
코드를 초안으로써 자동 생성해서 화면에 출력합니다.
include views 옵션을 추가하면 데이터베이스 뷰에 대해서도 모델 코드를 자동
생성해줍니다.
InspectDB 명령인자로 테이블명을 지정하면, 지정 테이블에 대한 장고 모델 코드만
초안으로써 자동으로 생성해서 화면에 출력합니다.
이 코드를 복사해서 장고 모델 코드로 활용합니다.
자동 생성된 코드에서 상단 주석을 한글로 번역해 봤습니다.
인스펙트 디비 명령을 통해 화면에 코드를 출력하면 코드 양이 많기에 스크롤해서 원하는
코드를 찾기 어렵습니다.
팁으로서 디라이렉션 명령으로 앞선 명령의 표준 출력을 지정 경로의 파일에 저장할 수
있습니다. 윈도우 명령 프롬프트와 파워쉘 그리고 맥 리눅스 쉘에서도 모두 지원합니다.
파일에 저장한 뒤에 에디터를 통해 코드를 열어 모델 코드를 복사하시면 편리합니다
이 파일은 임시 파일로만 보시고 절대 버전 관리에는 넣지 마세요
데이터베이스 테이블에는 컬럼 타입만 있을 뿐 도메인 로직을 온전히 담을 수 없기에 자동
생성된 모델 코드에 도메인 로직이 담겨져 있지 않습니다
자동 생성된 장고 모델 코드를 초안으로만 보시고요 수정해서 필요한 도메인 로직을 추가하고
수정하는 작업이 필요합니다
데이터베이스 뷰 테이블은 가상의 테이블이며 장고 모델을 통해 생성할 수 없고요.
데이터베이스에서 CreateView 쿼리로 생성합니다.
데이터베이스에서 뷰를 생성한 후에 Unmanaged 모델에 맵핑하실 수 있습니다.
뷰 테이블 예시로써, 테이블에서 일부 컬럼만 노출하는 뷰 테이블, 조건에 따른 데이터를
필터링한 뷰 테이블, 혹은 여러 테이블을 조인한 뷰 테이블, 혹은 집계 함수를 사용한 뷰
테이블 등이 있을 수 있습니다.
python manage.py inspectdb 명령을 활용해서 현재 받아보고 있는
데이터베이스에 대한 모든 테이블에 대해서 모델 코드를 자동으로 생성하실 수 있고요.
화면 출력을 파일에 저장하기 위해 redirection 명령을 통해
draft-models.py 파일에 저장합니다.
생성된 draft-models.py 파일을 에디터로 열어서 생성된 코드를 확인하실 수
있고요 inspectdb
명령은 Settings에 Databases 설정해서 디폴트로 바라보는 데이터베이스 내에
모든 데이터베이스 테이블에 대해서 모델 코드를 생성해 줬습니다
Blog_Review Database Table을 기반으로 Blog
Review Model 클래스도 자동 생성이 되었네요
우리가 작성한 Review Model 클래스와 비교해 보면 필드 정의만 동일하고
Time-stamped 모델 상속이나 Constraints Meta 설정은 빠져있음을
확인하실 수 있습니다
자동 생성된 장고 모델 코드는 초안으로만 보시고 필요한 도메인 로직을 추가, 수정하는
작업이 필요할 것입니다