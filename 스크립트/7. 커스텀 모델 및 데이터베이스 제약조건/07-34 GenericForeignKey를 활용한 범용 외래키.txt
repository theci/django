안녕하세요 이번 시간에는 Generic Foreign Key를 활용한 범용 외래키에 대해서 살펴보겠습니다
일반적으로 외래키 관계는 Model C의 Foreign Key 필드로 한 개 필드로 구현합니다 
Post Model과 Article Model에 댓글을 붙일 때 Post Model과 Article Model마다 댓글 모델을 따로 구현해서 붙이거나 하나의 댓글 모델로 구현하더라도 Post Model과 Article Model에 대한 외래키 필드를 각각 추가해야 하는 거죠
코멘트 모델에서 FORCE 모델과 ARTICLE 모델에 대한 외래키를 각각 추가했다면 데이터베이스에는 이렇게 저장될 것입니다.
댓글을 붙일 모델이 추가될 때마다 댓글 모델을 추가로 구현하거나 외래키 필드를 추가해야 하죠. 
장고는 Generic ForeignKey 필드를 통해 댓글 시스템과 같이 여러 모델과 관계를 맺어야 할 때 유연하게 관계를 맺을 수 있는 방법을 제공합니다.
GenericForeignKey는 대상 모델을 나타내는 컨텐트 타입 필드와 외래 키 값을 나타내는 Object ID 필드, 이렇게 두 개의 필드로 구성됩니다.
장고에서 모델이 추가되면 자동으로 django_content_type 테이블에도 모델이 기록되는데요. 
이 테이블에서 블로그 앱의 Post 모델에 대한 데이터는 ID 기본 키가 7이죠. 
그 아래에 blog_comment 테이블을 보시면 ContentTypeId 값이 7이고 ObjectId 값이 1인 댓글이 있는데요
이는 BlogAppPost 모델의 기본키가 1인 포스팅에 대한 댓글입니다
ContentTypeId 값이 8이고 ObjectId 값이 1인 댓글은 BlogAppArticle 모델의 기본키가 1인 아티클에 대한 댓글입니다
GenericForeignKey를 사용하면 댓글을 붙일 모델이 추가되더라도 추가로 댓글 모델을 구현하거나 외래 개필드를 추가할 필요가 없습니다
Models에 ForeignKey를 사용한 모델에서의 쿼리셋 코드이고요
GenericForeignKey를 사용한 모델에서의 쿼리셋 코드입니다 왼쪽에 Models에 ForeignKey에서의 쿼리셋 코드와 최대한 같은 코드로 사용할 수 있도록 모델 코드를 서로 맞췄습니다
하지만 부모 모델 쿼리셋에서 사용하는 Related Coding Name 설정 부분은 Generic Relation 필드 설계상 동일하게 맞출 수 없었습니다.
모델스의 Foreign Key에서는 자식 모델 측의 관계를 정의하므로 부모 모델에서 사용하는 Related Name 설정과 Related Coding Name 설정을 지원합니다. 
하지만 Generic Foreign Key에서는 부모 모델에 Generic Relation 필드를 직접 추가하기 때문에 이 필드가 Related Name 설정과 Related Coding Name 설정을 같이 수행합니다.
그래서 좌측의 First 모델의 Comment를 활용한 쿼리셋과, 우측의 First 모델의 Comment Underbar Set을 활용한 쿼리셋 코드가 다른 것입니다.
나머지 코드는 같습니다.
GenericForeignKey 필드를 가진 Comment 모델은 어떤 모델에 대해서든 데이터베이스 스키마 변경 없이 모델 외래키를 지정할 수 있습니다.
모델스의 Foreign Key와는 달리 데이터베이스에서의 외래키는 아니고요, 외래키를 흉내 낼 뿐입니다. 
본명 메리키를 붙인 모델에서는 쿼디셋 코드를 모델스의 Foreign Key처럼 쓸 수 있도록 Generic Relation 필드를 추가하시면 그 필드명을 Related Name, Related Query Name 설정처럼 사용하실 수 있습니다.
Generic Relation 필드를 사용한다고 해서 데이터베이스의 스키마가 변경되는 것은 아니고요. 
Generic Foreign Key를 보완해서 쿼디셋 편의성을 높여주는 것입니다. 
이렇게 GenericForeignKey를 사용하면 하나의 댓글 모델을 게시글, 아티클, 리뷰 모델처럼 다양한 모델과 데이터베이스 외래키를 연결하지 않고도 범용적으로 연결할 수 있다는 장점이 있습니다
하지만 GenericForeignKey는 일반적인 포링키에 비해 두 가지 단점이 있습니다
첫 번째로 데이터베이스 레벨에서 외래키 제약 조건을 설정할 수 없어 데이터베이스로부터 데이터 무결성을 보장받을 수 없고요 애플리케이션 레벨에서 추가적인 검증 로직을 구현해야 됩니다 
둘째로, GenericForeignKey의 데이터베이스 테이블 설계상 Join을 사용할 수 없고, Pre-patch-related의 방식처럼 추가 쿼리로 조회합니다.
모든 결정에는 Trade-off가 있고요.
범용 댓글 라이벌리처럼 범용성이 중요하다고 판단이 되실 때, GenericForeignKey를 사용해 주세요.
슬라이드 하단에 모델 코드가 있는 페이지 링크가 있습니다.
코멘트 모델은 블로그 앱과 핫트랙 앱 모두에 있으니, 새로운 웹로그 앱을 생성해서 모델을 활용해 보겠습니다.
새로운 장고 앱 웹로그를 생성하고 Settings 파일 내 Installed Apps List에 웹로그 이름을 추가합니다.
웹로그의 models.py 파일을 열고 모델 코드를 복사해서 붙여넣기 해주시고요.
makemigrations 웹로그 명령으로 마이그레이션 파일을 생성하시고, Migrate 웹로그 명령으로 마이그레이션 파일을 적용합니다.
장고 쉘을 통해 코드셋을 연습해보겠습니다.
PostModel, ArticleModel, CommentModel 다 웹로그의 모델이네요.
새로운 포스팅을 하나 생성하고요.
이 포스팅의 댓글 목록을 확인해 봅니다.
CommentUnderbarSet은 PostModel에 정의된 GenericRelation 필드명입니다.
Post1 포스팅의 댓글을 조회할 때, 웹로그 앱의 PostModel의 ContentTypeID는 50이고, Post1 포스팅의 기본키는 1로써 쿼리가 수행이 되네요. 
Post1 포스팅의 댓글을 생성합니다.
Comment_Underbar_Set은 Post 모델에 정의된 GenericRelation 필드명이었죠.
웹로그 앱에 Post 모델의 ContentTypeID인 50과 Post1 포스팅의 기본키인 1로써 인서트코리가 수행이 되네요.
웹로그 Comment 테이블을 조회하시면 이렇게 ContentTypeID와 ObjectID가 지정되어 댓글이 저장되어 있습니다.
Post1 포스팅의 댓글을 조회해보면 방금 등록된 댓글이 조회됩니다.
Post2 포스팅도 생성하고요 댓글도 여러 개 생성을 해 봅니다
GenericForeignKey가 적용된 코멘트 모델은 모든 모델에 대해서 댓글을 남길 수 있습니다 
해당 모델에 GenericRelation 필드가 없더라도 가능합니다
GenericRelation은 쿼리셋을 보다 쓰기 쉽도록 도와줄 뿐 서로 관계를 맺을 수 있습니다 
블로그 앱의 Post 모델에 대해서도 이렇게 댓글을 남길 수 있습니다
인서트될 때, 블로그 앱의 Post 모델의 컨텐트 타입 아이디인 10이 지정되어 있습니다.
장고 컨텐트 타입 테이블을 조회해 보시면, 블로그 앱의 퍼스트 모델의 아이디는 10이고, 웹블로그 앱의 퍼스트 모델의 아이디는 50이네요.
GenericForeignKey를 가진 웹 로그 앱의 코멘트 모델의 쿼리셋에서 퍼스트 모델에 대한 즉시 로딩을을 수행해 보겠습니다.
먼저 M++ 문제를 발생시켜 보고요.
정방향 참조 모델이니 모델스의 Foreign Key였다면 Select Related를 사용했을 것입니다.
사용해보면 Generic Foreign Key에서는 부모 모델 필드에 대해 Select Related를 지원하지 않습니다.
Prefetch Related를 쓰시면 이렇게 동작하고요.
그런데 추가 쿼리 1개가 아니라 관계를 맺은 모델의 개수만큼 추가 쿼리가 수행되네요.
웹로그 앱의 Post 모델과 블로그 앱의 Post 모델에 대해서 관계를 맺었으니 2개의 추가 쿼리가 수행되었습니다.
이렇게 관계를 맺은 여러 종류의 모델에 대해서 하나의 쿼리렛으로 한번에 조회를 할 수 있습니다.