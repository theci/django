이번에는 참거짓 불리언 값을 데이터베이스에 대문자 y 혹은 대문자 n으로 저장하는 BooleanYNField 모델 필드 예시입니다.
이 예시에서는 참거짓 값을 대문자 y, 대문자 n으로 저장하고 조회하는 커스텀 모델 필드를 구현하는 방법을 소개합니다.
오라클과 같이 참거짓 불리언 타입을 지원하지 않는 데이터베이스에서는 종종 대문자 y, 대문자 n으로 참거짓을 저장하고 쿼리하기도 합니다.
이러한 데이터베이스와 장고를 연동할 때 모델 필드를 어떻게 설계해야 할까요?
첫번째 방법으로 대문자 y, 대문자 n 문자 저장을 위해 모델스의의 Character 필드를 사용하고, Choices를 통해 대문자 y, 대문자 n 선택지를 제공하고, 디폴트 값으로 대문자 n을 하드 코딩합니다.
파이썬 코드 내에서 대문자 y와 대문자 y는 모두 참 판정을 받으므로 참 여부 검사를 위해 대문자 y와 같은지 매번 검사해야 하고요 참 거짓 연산이 번거롭습니다
그리고 choices를 통해 선택지를 제공하지만 문자열 필드이기에 유효성 검사를 사용하지 않고 저장할 경우 다른 문자가 저장될 가능성도 있습니다
소문자가 입력될 수도 있죠
대문자 y와 소문자 y는 엄연히 서로 다른 문자이므로 항상 대문자로 변환한 동등 비교가 필요할 수도 있습니다
모델스의 캐릭터 필드를 사용하는 방법은 직관적인 방법이지만 코드가 번거롭고 복잡해집니다
두 번째 방법으로 모델의 Boolean 필드를 커스텀한 모델 필드를 통해 데이터베이스의 값을 저장하고 조회할 때에만 대문자 Y, 대문자 n을 사용하는 방식입니다.
파이썬 딴에서는 참거짓 블리언 타입으로 처리하므로 일관된 참거짓 연산을 지원할 수 있습니다.
Article 모델을 새롭게 정리하고 모델의 CharacterField 타입의 IsPublic.ch 필드를 추가합니다.
그리고 BooleanField 타입의 IsPublicYNField로 추가합니다.
MakeMigrations 후에 생성되는 마이그레이션 파일을 SQL Migrate 명령으로 생성 쿼리를 확인해 보면, 두 필드가 같은 타입으로 지정됨을 확인하실 수 있습니다.
모델 인스턴스를 생성할 때에는 각각 대문자 n과 거짓 값을 지정합니다.
하지만 인서트 코드에서는 둘 다 대문자 n으로서 같은 문자로 저장될 것입니다
모델 인스턴스에서 isPublic 필드 값은 대문자 y 혹은 대문자 n입니다
파이썬에서 문자열에 대한 참거짓 판단은 빈 문자열만 거짓 판정이고 나머지 문자열들은 모두 참 판정을 받습니다
그러니 참여부 판단을 할 때에는 항상 대문자 y와 같은지 비교를 해야 하며 혹시나 소문자로 입력되지는 않았을까라는 의구심이 생기면 대문자로 변환하여 비교하는 코드로 작성하게 됩니다.
참 번거롭죠? 반면 IsPublicYNField 값은 데이터베이스에는 대문자 y, 대문자 n으로 저장되지만 파이썬 단에서는 일관되게 참거진 분리형 값입니다.
파이썬 딴에서 참거진 판단에 있어서 실수할 여지가 없습니다.
IsPublicYNField는 참, 거짓 값 외에도 대문자 y 혹은 대문자 n을 모델 field 값 지정과 쿼리셀에서 사용할 수 있도록 하겠습니다.
IsPublicYNField는 문자열로 값을 받기에 유효성 검사를 통하지 않고 이렇게 바로 저장하는 경우 오류 없이 그 값이 그대로 저장이 됩니다.
소문자 y는 저장되어서는 안 될 값입니다.
대문자 y와 서로 다른 문자니까요.
IsPublicYNModelField에서는 소문자 y는 허용하지 않은 문자라는 에러를 발생시켜 주네요.
실수할 여지가 없죠.
BooleanYNField 모델 필드는 모델스의 BooleanField와 동작은 같지만 데이터베이스에 저장하고 조회하는 값이 다릅니다.
모델의 BooleanField 클래스를 상속받아서 데이터베이스에 저장하고 조회되는 값만 변경해 보겠습니다.
데이터베이스에는 문자열로 저장할 것이기에 getInternalType 메서드를 재정의하여 캐릭터 필드 문자열을 반환하고, 데이터베이스의 한 글자 필드 타입을 위해 생성자에서 MaxLength=1 디폴트 인자도 지정합니다.
데이터베이스에 따라 다른 필드 타입을 지정하진 않기에 DBType 메서드는 재정의하지 않습니다. 
추가로 세 개의 메서드를 재정의했습니다.
첫 번째로 FromDbValue 메서드는 데이터베이스로부터 대문자 y, 대문자 n 값을 조회하고 참, 거짓 값으로 변환할 때 호출됩니다.
인자로 데이터베이스로부터 조회한 필드 값이 전달되며, 널일 경우 논 값으로 인자를 전달받게 됩니다.
ToPython 메서드를 통해 값 변환을 처리하겠습니다.
두 번째로 getPreparedValue 메서드는 입력된 값을 데이터베이스에 저장 혹은 쿼리할 형태로 변환하는 역할을 합니다.
모델 필드나 쿼리셋 조회 값으로 참, 거짓 값 외에 대문자 y, 대문자 n 값을 받더라도 항상 대문자 y, 대문자 n 값으로 변환해서 반환하도록 하겠습니다.
세 번째 마지막으로 toPython 메서드는 인자로 대문자 y, 대문자 n이나 참거짓값을 받을 수 있고 항상 참거짓값으로 값을 변환한 후에 반환토록 합니다.
대문자 y, 대문자 n에 대한 처리만 구현하고 나머지 값에 대한 변환은 부모인 BooleanField의 toPython 메서드에 맡기겠습니다.




이 내용은 데이터베이스에 참/거짓 불리언 값을 대문자 'Y' 또는 **대문자 'N'**으로 저장하고 조회하는 커스텀 모델 필드인 BooleanYNField를 정의하는 방법에 대해 설명합니다. 특히, 참/거짓 값을 대문자 'Y'와 'N'으로 저장하는 경우를 다룹니다.

주요 내용 정리:
문제의 배경:

대문자 'Y', 'N' 저장: 오라클 등 일부 데이터베이스에서는 참/거짓 값을 불리언 타입이 아닌 대문자 'Y'와 'N'으로 저장합니다. 이 경우 장고 모델에서 이를 처리하려면 커스텀 모델 필드가 필요합니다.
기존 방법: CharField를 사용하고 choices로 'Y', 'N' 값을 제공하지만, 파이썬 내에서 문자열을 비교하거나 변환하는 과정에서 불편함이 발생합니다. 특히, 대문자 'Y'와 소문자 'y'가 구분되어 코드에서 번거로운 처리가 필요합니다.
두 가지 방법:

첫 번째 방법:
CharField를 사용하고 choices로 'Y', 'N'을 설정하여 문자열로 저장하지만, 파이썬에서 참/거짓 판별을 할 때마다 매번 대소문자 변환을 해야 하며 실수할 여지가 있습니다.
이 방법은 직관적이지만 코드가 번거롭고, 문자열에 대한 유효성 검사가 부족합니다.
두 번째 방법 (커스텀 모델 필드 사용):
BooleanField를 상속한 BooleanYNField를 만들어 파이썬에서 참/거짓 값을 그대로 사용하면서, 데이터베이스에서는 대문자 'Y'와 'N'으로 저장합니다.
BooleanYNField는 파이썬에서는 불리언 값(True/False)을 그대로 처리하고, 데이터베이스에 저장될 때만 대문자 'Y' 또는 'N'으로 변환됩니다.
이 방법은 실수할 여지가 없고, 코드가 간결하며 일관된 참/거짓 판단을 지원합니다.
BooleanYNField 구현:

기반 클래스: BooleanField를 상속합니다.
getInternalType 메서드: 데이터베이스에 저장될 때 문자열(CharField)로 처리되므로, 이를 위해 getInternalType을 재정의하여 CharField를 반환합니다.
max_length=1: 대문자 'Y' 또는 'N'만 저장되므로 max_length를 1로 지정합니다.
fromDbValue 메서드: 데이터베이스에서 대문자 'Y'와 'N' 값을 불리언 값(True/False)으로 변환하는 메서드입니다.
toPython 메서드: 'Y'와 'N'을 불리언 값으로 변환하고, 그 외의 값에 대해서는 부모 클래스의 toPython 메서드를 호출하여 처리합니다.
getPreparedValue 메서드: 파이썬의 참/거짓 값을 데이터베이스에 저장할 수 있도록 대문자 'Y' 또는 'N'으로 변환하는 메서드입니다.
동작 예시:

모델 정의: 예시 모델에서 BooleanYNField를 사용하여 isPublicYN 필드를 정의하고, 참/거짓 값은 대문자 'Y' 또는 'N'으로 데이터베이스에 저장됩니다.
데이터 저장: 파이썬에서는 True와 False를 사용하지만, 데이터베이스에는 'Y'와 'N'으로 저장됩니다. 예를 들어, True는 'Y', False는 'N'으로 변환됩니다.
조회 및 비교: 모델에서 불리언 값을 조회할 때, True 또는 False로 바로 사용 가능하며, 대문자 'Y'와 'N'을 직접 비교할 필요가 없습니다.
유효성 검사:

BooleanYNField는 문자열로 값을 받지만, 'y'와 같은 잘못된 소문자 값은 허용하지 않으며, 이를 입력하면 오류를 발생시킵니다. 이로 인해 실수할 여지가 없고, 유효성 검사를 통해 잘못된 값은 자동으로 차단됩니다.
결론:
**BooleanYNField**는 파이썬에서는 일반적인 불리언 값을 사용하면서, 데이터베이스에서는 대문자 'Y'와 'N'으로 저장하는 커스텀 모델 필드입니다.
이 필드는 실수 없이 참/거짓 값을 처리할 수 있도록 돕고, 데이터베이스와의 호환성을 고려한 설계를 제공합니다.
BooleanYNField를 사용하면, 참/거짓 값의 저장 및 조회가 일관되며, 대소문자 문제나 유효성 검사를 신경 쓸 필요가 없어 코드가 깔끔해집니다.



