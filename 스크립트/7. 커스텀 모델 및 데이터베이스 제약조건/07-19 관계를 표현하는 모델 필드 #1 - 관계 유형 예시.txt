안녕하세요 이번 시간에는 관계를 표현하는 3가지 모델 필드에 대해서 살펴보겠습니다
데이터베이스의 테이블은 엑셀 스프레드 시트와 같이 2차원 구조를 가집니다
이 테이블은 격자와 같은 형태로 행과 열로 구성됩니다 열은 저장하려는 정보의 종류를
나타내며 행은 그 정보의 개별 사례를 나타냅니다
주문 테이블에는 주문자명, 주문내역, 결제금액이 포함되었고요 여기에 주문자 전화번호와 별점
데이터를 추가하고자 합니다
각 주문마다 전화번호가 다를 수 있지만 본 예시에서는 모든 주문에서 전화번호가 같다고
가정하겠습니다 한 개의 테이블에 주문자 전화번호를 추가했기 때문에 동일한 전화번호가 여러
번 테이블에 반복되어 저장되어 있습니다.
이와 같은 정보의 반복은 전화번호가 누락되거나 잘못 저장될 가능성을 내포합니다.
모든 전화번호를 정확하고 일관되게 저장하는 책임은 애플리케이션에 있으며, 애플리케이션
버그로 인해 데이터 무결성이 무너질 수도 있습니다.
그에 반해 별점은 각 주문에 따라 고객이 입력하는 정보이므로 각 행에 저장하는 것이
적절합니다 이런 데이터 중복 문제를 해결하기 위해 데이터베이스에서는 관계를 활용합니다 주문
테이블에는 주문 관련 데이터만 저장하고요 주문자에 대한 정보는 별도의 고객 테이블에
저장합니다 고객 테이블에서는 고객명을 각 고객을 구별하는 식별자로 사용했고요 주문
테이블에서는 이 식별자를 통해 고객 데이터를 조회합니다
다른 테이블의 식별자를 저장한 컬럼을 외래키 라고 부릅니다
이제 고객 테이블의 전화번호 등의 고객 정보를 중복 없이 저장하고 주문 테이블에서는
주문자명을 통해 필요한 고객 전화번호를 조회할 수 있습니다 관계를 통한 데이터 무결성은
데이터베이스에서 보장합니다 데이터베이스에서 관계 설정은 데이터를 더욱 효과적으로 저장하고
관리하는 데 큰 도움을 줍니다
특히 다음 두 가지 주요 이점을 제공합니다
그 첫 번째로 데이터 중복 최소화입니다
데이터베이스는 동일한 정보를 여러 군데에 반복해서 저장하는 것을 방지하기 위해 관계를
활용합니다 정보는 한 곳에만 저장되며 필요할 때에는 참조를 통해 다른 곳에서도 그 정보를
활용할 수 있습니다
두 번째로 데이터 무결성 보장입니다
이는 데이터베이스 내에 정보가 정확하고 일관되게 유지되는 것을 의미합니다
예를 들어, 고객 테이블에서 어떤 고객의 정보를 삭제하면 해당 고객의 모든 주문 정보도
자동으로 삭제될 수 있도록 설정할 수 있습니다
또한 주문이 등록되었다는 것은 해당 고객의 정보가 고객 테이블의 존재함을 의미합니다
데이터 중복을 제거하고 데이터 무결성을 유지하기 위해 데이터베이스를 설계하는 과정을 데이터
정규화라고 부릅니다
데이터베이스 관계에는 1대다, 1대1, N대다 세 가지 유형이 있습니다
1대다 관계에 대해서 살펴보겠습니다
1대다 관계는 1대N 관계로도 부릅니다
한 명의 고객이 여러 개의 주문을 할 수 있는 상황을 생각해 봅시다.
이 경우, 각각의 주문은 특정 고객에게만 속합니다.
이는 1대 N 관계로 설계할 수 있습니다.
주문 데이터에는 고객 정보를 참조하기 위한 고객 테이블의 기본 키를 저장합니다.
이 기본 키를 사용하여 고객 테이블에서 해당 고객의 데이터를 조회할 수 있습니다
이렇게 다른 테이블의 기본 키를 참조하는 필드를 외래키 라고 부릅니다
테이블의 컬럼명에 맞춰 모델을 정의한다면 이렇게 커스터머 모델과 오더 모델을 정의할 수
있습니다 테이블의 컬럼명과 모델의 필드명을 일치시켰기에 모델 필드명 인자로 DB
Underbar 컬럼을 지정하지 않아도 됩니다
코드를 리팩토링 해 보겠습니다
아이디 기본키는 장고 모델의 기본키와 같으므로 생략할 수 있겠고요 외래키 관계는 모델의
포링 키를 통해 정의할 수 있습니다
포링키 필드의 디폴트 데이터베이스 컬럼명은 외래키 필드명 언더바 아이디이므로, 외래키
필드명을 커스텀으로 지으면 컬럼명과 일치하기에 DB 언더바 컬럼 인자를 지정하실 필요가
없습니다 다른 데이터베이스 컬럼명을 사용할 경우에는 DB 언더바 컬럼 인자를 지정합니다
장고의 외래키 모델 필드를 활용하시면 데이터베이스 스키마 관계가 명확하게 표현되어
마이그레이션 시에 외래키 제약 조건이 자동으로 추가되고요 데이터 무결성 유지에 도움이
됩니다 그리고 외래키 모델 필드를 통해 관련 데이터들을 쉽게 조회하고 조작할 수 있습니다
뒤에서 모델의 forwarding key field에 대해서 자세히 살펴보겠습니다
이번에는 1 대 1 관계에 대해서 살펴보겠습니다
고객 테이블에는 고객의 정보를 담고 고객 주문 통계 테이블에는 해당 고객의 주문 통계
데이터를 담습니다
한 명의 고객은 하나의 통계 데이터를 가질 것이기에 이는 1대1 관계로 설계할 수 있습니다
두 테이블을 하나의 테이블로 설계할 수도 있겠지만 두 테이블로 나눈 이유는 첫 번째로 자주
변경되지 않는 고객 데이터와 자주 변경되는 통계 데이터를 분리해서 쿼리 성능을 최적화할
수도 있겠고요 데이터베이스 테이블마다 다른 접근 권한을 부여할 수도 있습니다
고객 테이블에는 더 높은 보안 등급을 요구할 수도 있는 거죠
데이터베이스 컬럼명에 맞춰 모델을 정의한다면 이렇게 CustomerModel과
CustomerStats 모델을 정의할 수 있습니다 테이블의 컬럼명과 모델의 필드명을
일치시켰기에 모델 필드명 인자로 DB-underbar 컬럼을 지정하지 않아도 됩니다
코드를 리팩토링 해 보겠습니다.
아이디 기본키는 장고 모델의 기본키와 같으므로 생략하고요.
1대1 외래키 관계는 Models의 1-to-1 필드를 통해 정의할 수 있습니다.
OneToOne 필드의 디폴트 데이터베이스 컬럼명은 OneToOne 필드 필드명 언더바
아이디이므로 모델 필드명을 커스텀으로 지으면 데이터베이스 컬럼명과 일치됩니다.
데이터베이스 컬럼명이 다를 경우 DB 언더바 컬럼 인자로 지정할 수 있습니다.
1-1 필드 모델 필드를 활용하면 1-1 관계를 명확하게 표현할 수 있구요 데이터 무결성
유지에 도움이 됩니다
뒤에서 Models의 1-1 필드에 대해서 자세히 살펴보겠습니다
다데다 관계에 대해서 살펴보겠습니다
이는 m-n 관계로도 부릅니다
한 명의 고객은 다수의 구매를 할 수 있으며 하나의 구매는 한 고객에 속하기에 1 대 n
관계로 설계할 수 있겠고요 하나의 상품은 다수의 구매에 포함될 수 있으며 하나의 구매는 한
상품에 속하기에 1 대 n 관계로 설계할 수 있습니다
그럼 한 명의 고객은 다수의 상품을 구매할 수 있으며 하나의 상품은 여러 고객으로부터
구매되어질 수 있습니다
그럼 이를 m-n 관계로 설계할 수 있는 거죠
데이터베이스에서 m-n 관계는 반드시 그 관계를 저장하는 관계 테이블이 필요합니다
이 예시에서는 구매테이블이 고객 테이블과 상품 테이블의 관계를 저장하는 역할을 합니다.
외래키 관계에 맞춰 모델을 정의한다면 Customer 모델, 오더 모델, 프로덕트 모델을 이렇게
정의할 수 있습니다.
커스터머 모델은 관련 프로덕트 모델을 조회하기 위해 항상 Order 모델을 거쳐야 하는데요
Customer 모델이나 Product 모델 측에 Many-to-Many 필드를 선언하면
이렇게 선언한 product_set 필드를 통해 특정 고객이 주문한 상품
목록을 손쉽게 조회할 수 있고 역으로 customer_set 필드를 통해
특정 상품을 구매한 고객 목록을 손쉽게 조회할 수 있습니다 뒤에서 Models의
Many-to-Many 필드에 대해서 자세히 살펴보겠습니다.




이 글에서는 Django에서 사용하는 세 가지 주요 관계 모델 필드인 1대다 (One-to-Many), 1대1 (One-to-One), 다대다 (Many-to-Many) 관계에 대해 설명하고 있습니다. 각 관계의 개념과 Django 모델에서 이를 어떻게 구현하는지에 대해 다룹니다. 핵심 내용은 다음과 같습니다:

1. 1대다 관계 (One-to-Many)
1대다 관계는 한 명의 고객이 여러 개의 주문을 할 수 있는 관계입니다.
예를 들어, 주문 테이블에서 고객의 기본 키를 외래키로 저장하여 고객과 주문을 연결합니다.
Django에서 ForeignKey 필드를 사용하여 외래키 관계를 설정합니다. 이를 통해 고객 테이블에서 고객 정보를 조회하고, 주문 테이블에서는 고객을 참조할 수 있습니다.
ForeignKey 필드는 데이터베이스에 외래키 제약 조건을 자동으로 추가하고, 데이터 무결성을 보장합니다.
2. 1대1 관계 (One-to-One)
1대1 관계는 한 명의 고객이 하나의 통계 데이터를 가지는 관계입니다.
예를 들어, 고객 테이블과 고객 통계 테이블이 있을 때, 각각의 고객은 하나의 통계 데이터만 가질 수 있습니다.
Django에서 OneToOneField를 사용하여 1대1 관계를 설정할 수 있습니다. 이 필드를 통해 두 테이블 간의 관계를 명확히 하고, 데이터 무결성을 유지할 수 있습니다.
데이터베이스에서는 두 테이블을 분리하여 성능 최적화와 보안 측면에서 유리할 수 있습니다.
3. 다대다 관계 (Many-to-Many)
다대다 관계는 한 명의 고객이 여러 개의 상품을 구매할 수 있고, 하나의 상품이 여러 명의 고객에 의해 구매되는 관계입니다.
이 관계는 중간 테이블(관계 테이블)을 사용하여 두 테이블 간의 관계를 저장합니다. 예를 들어, 고객과 상품 간의 관계는 Order 테이블을 통해 연결됩니다.
Django에서 ManyToManyField를 사용하여 다대다 관계를 정의할 수 있습니다. 이를 통해 고객이 구매한 상품 목록이나, 상품을 구매한 고객 목록을 쉽게 조회할 수 있습니다.
ManyToManyField를 사용하면 중간 테이블을 자동으로 처리하여 관계를 쉽게 관리할 수 있습니다.
데이터베이스 설계의 이점
데이터 중복 최소화: 데이터를 반복해서 저장하는 대신, 다른 테이블을 참조하여 중복을 제거합니다.
데이터 무결성 보장: 외래키나 1대1 관계를 통해 관련 데이터를 삭제할 때, 다른 관련 데이터도 함께 삭제하거나, 일관되게 유지할 수 있습니다.
Django 모델 필드 활용
각 관계에 대해 Django에서는 ForeignKey, OneToOneField, ManyToManyField를 사용하여 모델을 정의하고 관계를 설정합니다.
이 필드들은 데이터베이스 스키마를 자동으로 생성하며, 관계 설정을 명확하게 표현하고 데이터 무결성을 보장합니다.
이 과정을 통해 Django의 데이터베이스 모델에서 관계를 설정하고, 데이터 중복을 방지하며, 효율적인 데이터 관리가 가능합니다.