프로덕트 제품 모델이 있고, 오더, 주문 모델이 있습니다.
새 주문은 이용 가능한 제품에 한해서만 이뤄져야 할 것입니다.
기본 외래키 필드로는 제품의 이용 여부와는 상관없이 모든 제품과 외래키 관계를 맺을 수
있습니다. 이용할 수 있는 제품으로 한정해서 외래키 관계를 맺게 하려면,
limit_choices_to 설정을 활용합니다.
제품 모델에는 네임 필드와 이용 여부를 의미하는 isAvailable 불량 필드가
있습니다.
order 모델과는 1 대 n 의 관계죠.
limit_choices_to 인자로 isAvailable 참값을 가진 사전을 지정하시면
이제 이용할 수 있는 제품만으로 외래키 관계에 제한을 거실 수 있습니다.
이용할 수 없는 즉, isAvailable 값이 거짓인 제품을 주문 모델 인스턴스에
지정하면 유효성 검사 시에 유효성 검사 에러가 발생합니다.
그리고 이후, 장고 폼을 통한 HTML 셀렉트 박스 위젯에서는 isAvailable 값이
참인 제품만 셀렉트 박스에 보여질 것입니다.
유효성 검사를 수행하지 않고 save 메서드를 호출하면 저장은 됩니다.
이러한 제안은 장고 측에서 유효성 검사 시에만 수행될 뿐 데이터베이스에 제약 조건으로
추가된 것은 아닙니다.
limit choices to 인자로 간단한 코드에는 사전을 활용하시고요, 복잡한 코드에는
Q 객체를 사용하시면 편리합니다.
샵 앱에 Product 모델과 Order 모델 클래스를 추가합니다.
limit-choices-to 인자로 사전을 지정하실 수도 있고, 이렇게 Q 객체를
지정하실 수도 있습니다.
모델 변경 내역에 대해 마이그레이션 파일을 생성하시고, 데이터베이스에 적용도 해주세요.
이용할 수 없는 제품을 하나 생성하시고요, 새로운 주문 모델 인스턴스의 외래키로 지정도
해주세요. 풀클립 메서드를 호출해서 유효성 검사를 수행해 보시면 이용할 수 없는 제품이
지정되었기 때문에 유효성 검사 오류가 발생합니다
하지만 save 메서드를 호출해서 저장을 시도하면 데이터베이스에는 오류 없이 저장됩니다
limit-choices-to가 데이터베이스 제약 조건으로는 활용되지 않는다는 거죠
limit_choices_to는 유효성 검사 시에만 활용될 뿐 저장 시에도 사용되어지지
않습니다 이후 장고 폼에서는 항상 유효성 검사가 통과할 때만 저장을 시도할 것입니다.
사전 혹은 큐 객체 지정은 정적인 조건을 지정한 것이며 매 관계가 필요할 때마다 동적으로
조건을 생성하시려면 인자 없는 함수를 구현하시고 그 함수에서 사전이나 큐 객체를 반환토록
하고요. 그 함수를 limit_choices_to 인자로 지정합니다.
이벤트 모델과 티켓 모델은 1 대 n의 관계입니다.
새로운 티켓을 생성할 때 이벤트 날짜가 지난 이벤트에 대해서는 티켓을 생성할 수 없도록
하려 합니다.
limit_choices_to 인자로 사전이나 queue 객체를 직접 지정하면 티켓 모델
클래스가 처음 로드될 때의 날짜가 지정되고 서버가 재시작되지 않는 한 그 날짜는 바뀌지
않습니다. 새로운 함수 getCurrentDate 함수를 정리하고요.
이 함수는 인자가 없어야 하고, 호출하면 현재 날짜를 반환하도록 했습니다.
이 함수를 limit_choices_to 인자로 지정합니다.
그러면 limit_choices_to 인자 값이 필요할 때마다 지정된 함수를 호출해서 그 반환
값을 limitChoicesTo 인자로 활용합니다.
이 방법이 동적인 지정인 것이죠.
그런데 limit_choices_to 인자로 lambda 함수를 지정하면 make
migration 시에 value error가 발생합니다.
장고의 migration 기능은 모델 필드에 대해서 직렬화를 수행해서 히스토리를
관리하는데요.
lambda 함수는 이름이 없는 함수이기에 직렬화가 불가능합니다.
그래서 value error가 발생한 것이고요.
limit_choices_to 인자를 비롯한 모델 필드에 지정하는 모든 함수는 반드시 이름
있는 인자로 지정하셔야 합니다.
limit_choices_to 설정은 모델스의 foreign key뿐만 아니라
one-to-one 필드, many-to-many 필드에서도 동일하게 지원합니다.
샵의 모델스파이 파일에 이벤트 모델과 티켓 모델을 1대 n의 관계로 추가합니다.
limit_choices_to 인자로 람다 함수를 지정을 해 보겠습니다.
make-migrations 샵 명령을 내려보시면, 이렇게 value error가
발생합니다. 람다 함수는 직렬화를 할 수 없다고 하네요.
이름 있는 함수를 만드시고, 그 함수를 limit_choices_to 인자로 지정하시면,
make-migrations가 정상 동작합니다.
migrate 명령으로 데이터베이스에 적용해 주시고, 장고 셸을 열어 주세요.
과거 날짜에 이벤트 모델 인스턴스도 생성해 주고요 과거 날짜에 이벤트로 티켓 모델
인스턴스를 생성하고 풀 클립 메서드를 통해 유효성 검사를 수행해 봅니다
그런데 이벤트 날짜가 오늘보다 크거나 같은지 비교가 아니라 동등 비교를 하고 있네요.
getCurrentDate 함수에서 조건을 잘못 지정했습니다.
eventDate에 __gte를 추가하여 크거나 같은
쿼리로 수행되도록 변경해 주세요.
getCurrentDate 함수에 __gte 조건을 추가해
주고요. 새롭게 장고 셀을 열어 주세요.
과거의 이벤트 모델 인스턴스를 하나 생성하시고 과거 이벤트를 지정한 티켓 모델 인스턴스로
생성하시고요.
유효성 검사를 수행하시면 이렇게 유효성 검사에 실패하게 되고 유효성 검사에서 수행된 SQL
쿼리를 보시면 이렇게 이벤트 날짜가 오늘 날짜 이상인지를 검사하고 있음을 확인하실 수
있습니다.