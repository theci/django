ManyToManyField에서 관계 모델로 셀프를 지정하면 자기참조 모델이 됩니다.
친구관계와 팔로잉, 팔로워 관계를 예로 들 수 있습니다.
ManyToManyField 설정 중에 대칭관계를 의미하는 Symmetrical 설정이
있습니다. 다른 모델과의 관계에 사용하면 작동하지 않습니다.
친구관계는 양방향이며 대칭적으로 설계할 수 있습니다.
User A가 User B와 친구를 맺으면 자동으로 User B도 User A와 친구가
되는 거죠. 양방향 관계에서는 Symmetrical 설정을 참으로 지정합니다.
그러면 대칭 관계임을 인식하고 한 번의 관계 추가로 양쪽 모두에 대한 관계가 설정됩니다.
자기참조 모델에서는 Symmetrical 설정은 디폴트로 참이지만 명시적으로 설정했습니다.
시메트리컬 참 설정에서는 ManyToManyField가 relatedName 역할을 함으로
relatedName을 지정하더라도 무시되기에 지정하지 않았습니다.
대칭 관계 설정을 적용했기에 한 번의 관계 설정으로 두 개의 관계 레코드가 추가되어 서로
친구가 됩니다.
팔로잉 팔로워 관계는 단방향 관계이며 비대칭적으로 설계할 수 있습니다.
User A가 User B를 팔로잉한다고 해서 User B가 User A를 팔로잉하는 것은
아니죠. 자기참조 모델에서는 시메트리컬 설정은 디폴트로 참이기 때문에 시메트리컬 설정을
거짓으로 설정하여 비대칭 관계임을 지정합니다.
비대칭 관계에서는 relatedName을 지원합니다.
ManyToMany 모델 필드명이 follower__set이었으니 relatedName에서는
반대 개념으로 following__set을 지정합니다.
비대칭 관계이니 한 번의 관계 추가는 지정한 관계만 추가됩니다.
슬라이드 하단에 안내된 링크에서 소스 코드를 복사해서 Accounts 앱의 유저 모델에
적용합니다. 친구 관계와 팔로잉 관계는 양립할 수 있으니 같이 추가하겠습니다.
소스 파일을 저장하시고, 마이그레이션 파일을 생성하시고, 데이터베이스에 적용도 해주세요.
장고 쉘을 구동하시고, 각 관계의 관계 모델과 데이터베이스 테이블 명은 이렇게 확인하실 수
있습니다. 데이터베이스 탭을 새로 고침하시면 두 개의 관계 테이블을 확인하실 수 있고요.
쉣에서 UserModel 인스턴스를 2개 생성합니다.
User1은 현재 친구가 없고요.
User1의 친구로 User2를 추가하겠습니다.
그럼 인서트 쿼리가 2개 수행되고요.
User2의 친구로써 User1도 추가된 것입니다.
관계 테이블도 확인해보니 2개가 추가되었네요.
이어서 User1을 User2가 팔로잉하겠습니다.
인서트 쿼리가 1개 수행되었고요.
단방향으로 지정 관계만 추가되었습니다.
User2를 User1이 팔로잉하려면 추가로 관계를 추가해줘야 합니다.
관계 테이블도 확인해보니 1개의 레코드만 추가되었네요.