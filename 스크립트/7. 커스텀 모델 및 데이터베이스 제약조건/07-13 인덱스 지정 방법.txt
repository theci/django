안녕하세요. 이번 시간에는 인덱스와 유일성 제약 조건에 대해서 살펴보겠습니다.
두꺼운 책에서 원하는 내용을 찾기 위해 한 페이지씩 넘기는 것은 많은 시간과 노력이 필요합니다. 
반면, 색인 인덱스에서 키워드를 찾으면 원하는 정보를 빠르게 찾을 수 있습니다. 
이와 비슷하게 데이터베이스 인덱스도 책의 색인처럼 동작합니다
책에서 색인이 특정 주제나 단어를 빠르게 찾을 수 있도록 도와주는 것처럼 데이터베이스 인덱스는 특정 데이터를 신속하게 찾는 데 도움을 줍니다
인덱스를 사용하지 않으면 데이터베이스는 레코드를 순서대로 확인하며 데이터를 찾습니다
데이터의 양이 많아질수록 조회 시간도 길어지게 됩니다
그러나 잘 설계된 인덱스를 사용하면 원하는 데이터를 빠르게 찾을 수 있습니다
인덱스는 데이터베이스 테이블에서 검색에 필요한 데이터만 모아놓은 별도의 테이블로 볼 수있습니다 
인덱스를 효과적으로 생성하면 데이터 검색이나 쿼리 실행 시 효율적으로 데이터를 찾을 수 있으며 특히 데이터가 많을 때 검색 속도를 크게 향상시킵니다
그러나 데이터의 크기가 작으면 인덱스 사용보다 전체 테이블 스캔이 더 빠를 수 있어 이런 경우 인덱스가 오히려 성능을 저하시킬 수도 있습니다
또한 인덱스의 남용은 주의해야 합니다 불필요한 인덱스는 데이터베이스의 쓰기 작업 속도를 늦추고 추가 저장 공간을 요구하며 유지 관리 비용을 증가시킬 수 있습니다
그래서 인덱스는 사용 패턴을 고려하여 필요한 곳에만 적절히 사용하는 것이 중요합니다
데이터베이스의 종류에 따라 인덱스 전략이 다르기 때문에 특정 데이터베이스 엔진을 선택하여 인덱스와 실행 계획에 대해서 깊이 연구하시기를 추천드립니다 장고 웹 어플리케이션 성능 향상에 크게 기여할 것입니다.
모델 클래스의 모델 필드에 DB 인덱스 참 설정을 하면 인덱스에 대한 세부 설정은 할 수 없지만 단일 필드에 대한 인덱스를 간결하게 만들 수 있습니다.
모델의 slug 필드는 DB 인덱스 인자가 default로 지정됩니다.
마이그레이션 과정을 통해 데이터베이스 테이블에 인덱스를 추가할 수 있습니다.
마이그레이션 기능을 사용하지 않을 경우, 직접 데이터베이스에 접속해서 SQL 코드를
인덱스를 생성해 주셔야 합니다.
같은 DB 인덱스 참 설정이더라도 데이터베이스 종류에 따라 생성되는 코디가 다릅니다.
PostgreSQL 데이터베이스에서는 문자열 필드의 경우 like, ilike 검색 코드
성능 향상이 되도록 인덱스가 자동 추가됩니다.
makemigrations 명령 후에 sql migrate 명령으로 인덱스 생성 코디를 꼭
확인해 주세요.
개발과 실서비스에서의 데이터베이스 종류가 다르다면 실서비스 데이터베이스의 인덱스 생성
코디도 같이 확인하시길 권장드립니다.
다수 필드에 대한 복합 인덱스를 생성하는 방법으로 메타에 인덱스 Together 설정이 있습니다.
복합 인덱스는 다수 필드에 대한 조회를 한 번에 수행할 때 유용합니다.
하지만 이 방법은 장고 4.2부터 Deplicated 되었기에 다음에 소개할 Meta의
Indexes 설정을 사용해 주세요.
Meta의 Indexes 설정을 통해 단일 혹은 복합 필드에 대해서 다양한 옵션으로 인덱스를
정의할 수 있습니다.
기본 인덱스 유형으로 B-Tree가 사용되며, 이외에도 데이터베이스에 따라 GIN 인덱스
등의 다양한 인덱스 유형을 지원합니다.
단일 필드 인덱스를 정의할 수 있으며 기본은 오름차순 인덱스이며 필드명 앞에 마이너스를
붙여 내림차순 인덱스로도 정의할 수 있습니다.
단일 필드 조회가 자주 사용되는 경우에 유용합니다.
복합 필드 인덱스를 정의할 수도 있습니다.
여러 컬럼에 걸쳐 있는 조건을 포함하는 쿼리에 유용합니다.
복합 필드 인덱스는 컬럼 순서에 민감하거든요
그래서 인덱스 순서에 맞게 조회 조건을 지정해야 합니다 조건
인자를 통해서 조건부 인덱스를 생성할 수도 있습니다
조건부 인덱스를 사용하여 인덱스 크기를 줄이고 관리 비용을 감소시키며 특정 조건에 맞는
쿼리의 성능을 향상시킬 수 있습니다
Q 조건에서 Status 필드 값으로 Status 클래스를 사용하지 않고 문자열 p 값을
직접 지정한 이유는, Post Class 선언이 끝나기 전에는 Post Class 내
Status Class를 참조할 수 없기 때문입니다.
Status Class를 Post Class 밖으로 빼면, Q 조건에서 Status
Class를 사용할 수 있습니다.
조건부 인덱스에서는 네임인자로 인덱스의 이름을 필히 지정해야만 합니다.
이 이름은 데이터베이스 내에서 유일해야 합니다.
그리고 특정 데이터베이스 함수를 적용한 결과에 대한 인덱스도 정의할 수 있습니다.
지원하는 데이터베이스 함수 목록은 슬라이드 하단 링크의 소스코드를 통해 확인하실 수
있으며, 장고 기본에서 지원하지 않는 데이터베이스 함수도 등록해서 커스텀이나 인덱스 생성에
사용할 수 있습니다.