URL 문자열을 MD5 해싱하기 전에 쿼리 파라메타를 먼저 정렬하고 나서 MD5 해싱을
하면 이처럼 쿼리 파라메타 순서가 달라도 일관된 MD5 해싱 값을 얻으실 수 있습니다.
이를 Django 미들웨어에 적용하면 이렇게 구현해 보실 수 있고요.
미들웨어 단에서 쿼리 파라메타 문자열을 미리 정렬을 하기 때문에 같은 파라메타인데 순서가
바뀐 경우에도 동일한 캐시키가 생성됩니다.
코어의 middleware.py 경로의 middleware 코드를 복사합니다
프로젝트 세팅스의 middlewares 설정에 middleware를 등록하고요 현재 페이지
주소에서 캐시키의 md5 문자열을 먼저 확인하시고요
쿼리 파라메타 순서를 변경하시어 페이지를 다시 요청해 보시면 현재 요청 주소에 대한 캐시가
있습니다 캐시키의 md5 문자열을 확인해 보시면 쿼리 파라메타 순서를 변경하기 전에
문자열과 동일함을 확인하실 수 있습니다
이제 같은 코디 파라메타의 요청에서 순서가 바뀌어도 Django 내에서는 동일한
Cache를 활용하게 됩니다.
Cache Control Private 응답 헤더는 해당 응답이 브라우저와 같은 개인
Cache에는 저장될 수 있지만, 여러 사용자가 공유하는 Cache에는 저장되지 않도록
요청하는 헤더입니다.
Django 뷰에서는 Cache Control 장식자의 Private 참 설정으로 해당
응답 헤더를 설정하실 수 있습니다.
그럼 장고의 캐시 미들웨어에서는 캐싱을 수행하지 않고요.
이 응답 헤더를 확인한 프로키 서버나 CDN에서도 캐싱을 수행하지 않습니다.
캐시 페이지 장식자 호출에 이어 캐시 컨트롤 프라이빗 장식자를 적용하면 캐싱을 하지 않으니
위 캐시 페이지 장식자는 의미가 없어지죠.
뷰 함수 내에서 로직에 따라 캐시 컨트롤 프라이빗 응답 헤더 설정을 선택적으로 하시려면
패치 캐시 컨트롤 함수를 활용해 주세요.
현재 페이지를 새로고침하여 캐싱되도록 합니다.
인덱스 뷰 함수에 캐시 컨트롤 프라이빗 참 장식자를 적용하시면 이제 캐싱 적용 없이 매번
인덱스 뷰 함수가 호출되고 데이터베이스 조회가 됨을 확인하실 수 있습니다.
응답 헤더에도 보시면 캐시 컨트롤 프라이빗 헤더가 있습니다.
캐시 컨트롤 장식자를 사용하지 않고요.
뷰 함수 내에서 패티 캐시 컨트롤 함수를 호출해서 캐싱 여부를 선택적으로 변경하겠습니다.
이렇게 호출하면 매번 캐싱하지도 않고 검색어가 없을 때에는 캐싱을 수행하고 검색어가 있을
때에는 캐싱을 수행하지 않도록 해보실 수 있습니다.
대개 검색어가 있는 페이지는 변화가 많고 일시적이기 때문에 캐싱하지 않는 경우가 많습니다.
검색어가 없을 때에는 이렇게 캐싱이 동작하지만 검색어가 있을 경우에는 이렇게 동일 요청을
여러 번 하더라도 캐싱 없이 동작합니다.
Cache는 Key Value Storage 성격이기 때문에 지정된 키의 값을 설정하고
조회하는 기능만을 제공하고요.
Cache 백엔드에 저장된 키 목록을 조회하는 기능은 일반적으로 제공하지 않습니다.
그래서 Django Cache API에서도 키 목록을 조회하는 기능이나 특정 패턴에 키들을
삭제하는 기능을 제공하지 않는 것이고요
그런데 Redis 백엔드를 사용하고 Django Redis 라이브러리를 사용하신다면 키
목록을 조회하고 패턴을 사용하여 여러 키를 한 번에 삭제할 수 있어 편리합니다
Cache Page 장식자에서 생성하는 Cache Key에서는 URL 문자열을 MD5
해싱하기 때문에 Cache Key 문자열만으로 어떤 뷰의 Cache인지 구별할 수
없습니다. 그래서 Django Redis를 쓰더라도 특정 뷰의 모든 Cache를 일괄
삭제할 수 없어요.
Cache Page 장식자의 Key Prefix 인자를 활용합니다.
키 프리픽스 인자는 캐시 키에 그대로 사용되어지므로 뷰 함수마다 유니크한 키 프리픽스를
지정하시면 특정 뷰와 관련된 캐시를 쉽게 일괄 조회하거나 삭제하실 수 있습니다.
캐시 템플릿 태그의 두 번째 인자인 fragmentName 인자는 캐시 페이지 장식자의 키
프리픽스와 비슷한 역할이고요.
MD5 해싱 없이 지정 문자열 그대로 캐싱 키에 사용됩니다.
그래서 Fragment Name 인자를 통해 관련 캐시를 일괄 조회, 일괄 삭제하실 수
있습니다.
Posting 목록 템플릿에서 페이지 단위로 캐싱을 하고자 하실 경우 이렇게 캐싱을 하실
수 있습니다.
템플릿 캐시 삭제를 도와주는 Delete Template Cache 함수를 하나 만들어
봤습니다. 캐시 템플릿 태그의 두 번째 인자를 Fragment Name 인자로 지정하고요.
세 번째 인자부터 지정되는 값들을 Very On List 인자로 지정합니다.
캐시 기본 API에서는 캐시 키를 일일이 지정하여 삭제해야 하지만 Django Redis
라이브러리의 캐시 백엔드를 사용하실 경우 Clear 참 인자 지정을 통해 Delete
Pattern 메서드를 사용하시어 지정 Fragment Name에 속한 모든 템플릿 캐시들
일괄 삭제하실 수 있습니다.
하지만 많은 서비스에서 모든 페이지를 캐싱하진 않습니다.
많은 유저들이 1페이지에서 3페이지 정도밖에 보질 않으니까요.
1페이지부터 3페이지까지만 캐싱하고 4페이지부터는 캐싱하지 않는 거죠.
그럼 캐시 삭제 시에도 블로그의 포스트 리스트에 모든 캐시를 삭제하는 기능 없이도 아래의
1페이지부터 3페이지 삭제 코드만으로 충분합니다.
과한 최적화는 오히려 해롭습니다
복잡도가 낮은 애플리케이션을 설계하고 개선하세요
간단하고 명확한 코드는 유지 보수가 쉽고 오류 가능성이 낮습니다
복잡도를 줄이면 캐싱을 적용하지 않더라도 충분한 성능이 나올 수 있습니다
그리고 캐싱과 같은 최적화 기술을 더 효과적으로 적용할 수 있습니다
그리고 데이터베이스에 먼저 집중하세요
필요한 만큼만 데이터를 조회하고 적절한 인덱싱과 효율적인 쿼리 설계를 우선시하세요
데이터베이스를 무시하고 캐싱으로 성능 문제를 해결하려고 하면 장기적으로 비효율적입니다
그리고 캐싱은 신중하게 시작하세요
과도한 최적화는 문제를 일으킬 수 있습니다.
제때 캐싱이 무효화되지 않아서 오래된 데이터로 서비스되거나 다른 유저의 데이터가 노출될
수도 있습니다.
마지막으로 선택적으로 캐싱을 적용하세요.
모든 페이지에 캐싱을 적용하는 것은 비효율적입니다.
빈번한 조회가 있는 페이지에만 일부 캐싱을 적용하는 것이 좋습니다.
대부분의 유저는 처음 몇 페이지만을 주로 조회합니다.
그렇기에 뒷페이지는 캐싱하지 않고 데이터베이스에서 직접 조회하는 것이 효율적일 수
있습니다. 캐싱은 유용하지만 복잡도가 낮아지도록 애플리케이션을 먼저 설계하고 데이터베이스
설계와 쿼리 최적화가 먼저입니다.
이를 기반으로 캐싱을 적용하면 보다 효율적인 시스템을 만들 수 있습니다.

이번에는 Django에서의 캐시 처리와 관련된 고급 설정과 최적화 기법을 다루었습니다. 주요 내용은 다음과 같습니다:

1. 쿼리 파라메타 정렬 후 MD5 해싱:
URL의 쿼리 파라메타 순서가 달라져도 동일한 캐시 키를 사용하려면, 미들웨어에서 쿼리 파라메타를 먼저 정렬한 후 MD5 해싱을 하면 됩니다. 이를 통해 순서 변경에 관계없이 일관된 캐시 키를 생성할 수 있습니다.
2. 캐시 컨트롤 - Private 응답 헤더:
Cache-Control: Private 헤더는 응답이 개인 브라우저 캐시에만 저장되도록 하며, **공유 캐시(예: CDN, 프록시 서버)**에는 저장되지 않도록 요청합니다.
Django에서는 Cache-Control 헤더를 @cache_page 장식자와 함께 사용하여 캐시를 제어할 수 있습니다.
3. Django 캐시 관리:
Django Cache API는 키-값 저장소로 작동하며, 키 목록 조회나 특정 패턴에 맞는 키 삭제 기능은 제공하지 않지만, Redis 백엔드를 사용하면 이를 처리할 수 있습니다. Django Redis 라이브러리를 통해 키 목록 조회와 패턴을 통한 키 삭제가 가능합니다.
4. Cache Page 장식자와 키 프리픽스:
Cache Page 장식자가 생성하는 캐시 키는 URL을 MD5 해싱한 값으로, 이 키만으로는 특정 뷰의 캐시를 구분할 수 없습니다. 이를 해결하기 위해 Key Prefix를 사용하면 특정 뷰에 대해 유니크한 캐시 키를 지정할 수 있습니다.
Fragment Name 인자를 통해 템플릿 캐시를 관리하고, Django Redis를 사용하면 Delete Template Cache 함수로 템플릿 캐시를 일괄 삭제할 수 있습니다.
5. 캐시 최적화 및 삭제:
예를 들어 블로그 포스트 목록에서 1페이지부터 3페이지까지만 캐싱하고, 4페이지부터는 캐싱하지 않는 방식으로 효율적인 캐시 삭제가 가능합니다. 과도한 최적화는 피하고, 캐싱을 선택적으로 적용하는 것이 중요합니다.
6. 효율적인 시스템 설계:
복잡도가 낮은 애플리케이션을 설계하고 쿼리 최적화와 인덱싱을 먼저 고려하는 것이 중요합니다. 캐싱을 남용하면 비효율적일 수 있기 때문에, 캐시 무효화와 데이터 일관성에 유의해야 합니다.
필요한 데이터만 조회하고 캐싱을 선택적으로 적용하는 것이 좋습니다. 대부분의 사용자는 첫 몇 페이지만 자주 조회하므로, 그 외의 페이지는 캐싱하지 않고 데이터베이스에서 직접 조회하는 것이 더 효율적일 수 있습니다.
결론:
캐싱을 신중하게 적용하고, 복잡도를 낮추어 효율적인 시스템을 만들기 위해서는 데이터베이스 설계와 쿼리 최적화가 우선입니다. 그 후에 캐싱을 적용하면 더 나은 성능과 안정성을 제공할 수 있습니다.



