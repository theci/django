우편번호 모델인 집코드 모델을 만들어 볼 텐데요.
모델에 대한 데이터베이스 생성 후에 기본 데이터를 채워 넣는 데이터 마이그레이션 예시를 실습해 보겠습니다.
데이터 마이그레이션 실습에 앞서 우편번호 CSV 데이터를 읽어서 파이썬 객체로 출력하는 예시를 먼저 실습해 볼게요.
우편번호 CSV 데이터는 우체국 사이트에 우편번호 내려받기 메뉴의 지역별 주소 DB 데이터를 다운 받으실 수 있습니다.
데이터를 다운받으시면 압축 파일로 100MB가 조금 넘고요.
압축을 해제하면 1GB가 넘는 용량이 됩니다.
GitHub 저장소에 업로드가 안 될 정도로 파일들이 너무 큽니다.
제가 샘플로 서울시 데이터만 5,000줄 샘플로 따로 뽑아서 GitHub에 올려뒀습니다.
이 파일로 예시를 수행해 보겠습니다.
메인 함수에서는 지정 샘플 URL로부터 파일을 다운받아서 CSV 패스 경로에 폴더를 생성하고 저장합니다.
getCodeEndName FROM CSV 함수에 CSV 경로를 넘겨 사전 포맷으로 한 행식 읽어서 처리합니다.
이 함수에서는 파이썬 제너레이터 문법으로 처리했기에 CSV 파일 전체를 모두 메모리에 올려 처리하지 않고 한 행씩 읽어서 반환합니다.
그래서 메모리 효율적이고요.
next 함수 호출을 할 때마다 한 줄씩 읽어서 튜플로 반환된 값을 출력하고 있습니다.
예시 실행에서는 파일의 첫 번째 줄인 컬럼명 행을 포함해서 딱 네 줄만 읽고 프로그램이 종료되었습니다.
슬라이드 하단에 공유해드린 링크를 통해서 이 페이지를 확인하실 수 있습니다
이 소스 코드를 복사하셔가지고요 프로젝트 루트에 manage.py가 있는 그 경로에다가 zipcode-sample-download.py라는 파일명으로 소스 파일을 생성을 해줍니다
붙여놓고 저장하시고요
코드를 실행하면 메인 함수가 실행이 될 때 이 주소에 이 CSV 5000줄의 파일을 다운을 받아서 CSV 패스 경로에 저장을 하는데 이 경로에 파일을 생성하려면 이 부모 디렉토리가
항상 존재해야 됩니다
그래서 파일 다운로드 전에 CSV 패스의 부모 디렉토리 경로에 대해서 폴더를 재기적으로 다 만들어줍니다
디액토리가 있어도 오류가 나지 않도록 Exists OK라는 인자를 지정하시면 그 파일을 저장할 폴더까지 생성을 하고 나서 파일을 다운받고 
그리고 함수 호출에서 CSV 패스를 넘겨주고 이 함수에서 yield를 사용했기 때문에 이 함수의 반환값은 Generator가 됩니다 
이 generator로부터 값을 하나씩 가져오기 위해서 next, next, next 해서 한 줄씩 가져와도 되겠고요 이 generator에 대해서 for 반복문을 수행하셔도 됩니다
for, row, in, generator, print, row 하시면은 처음에 세 개
가져왔죠 그 다음 네 개째부터 이 for 반복문을 통해 마지막 값을 가져올 때까지 반복문을 수행을 하게 됩니다
getCodeAndNameFromCSV라는 함수는 CSV 경로를 받아가지고요 파일을 읽기 텍스트 모드를 여는데, 
UTF-8 시그니처 인코딩을 지정했습니다 파일을 열고, CSV에서 사전 포맷으로 처리하기 위해서 DictReader를 썼고요 이 CSV 포맷의 각 구분자는 콤마가
아니라 파이프 연산자가 들어 있습니다
구분자도 옵션으로 이렇게 지정을 해주시고 이 CSV 리더를 순위를 두시면 한 행식, 사전 포맷으로 값을 가져오게 됩니다.
우편번호 컬럼이 있죠?
시도, 시군구, 그리고 도로명 그 이외에 참조하실 컬럼명을 키로써 지정해서 참조를 하실 수 있고요.
yield할 때 code와 name을 yield했기 때문에 여기 next의 반환값도 tuple로써 code와 name이 됩니다.
커뮤너를 여시고 여기에서 파이썬 띄우고 zip code 이렇게 실행을 하셔도 돼요.
혹은 파이참에서 if name main 옆에 실행 버튼이 있는데 이걸 클릭하셔서 만약 디버깅을 하시려면 여기 debug를 선택하시면 되겠고요.
그냥 실행하시려면 run을 선택하시면 이렇게 한 번에 실행이 됩니다.