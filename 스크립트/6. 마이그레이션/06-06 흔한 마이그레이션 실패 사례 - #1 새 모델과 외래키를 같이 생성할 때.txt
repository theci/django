안녕하세요 이번 시간에는 흔한 마이그레이션 실패 사례 2개를 소개하고 해결 방법에 대해서도 살펴보겠습니다
첫 번째 사례로 새로운 모델과 모델에 의존하는 외래키를 같이 생성할 때 외래키의 디폴트 값으로 지정한 레코드가 없어서 외래키 제약사항 위배로 인해 마이그레이션이 실패하는 케이스입니다 
기존에 포스트 모델이 있고 마이그레이션이 모두 되어 있는 상황입니다
이후에 카테고리 모델을 추가하고 포스트 모델의 카테고리 모델에 대한 외래키 field를 추가합니다 
그리고 makeMigrations 명령을 통해 마이그레이션을 생성하고요 이때 외래키 필드에는 일회성 디폴트 값으로 1을 지정했습니다
python manage.py migrate 블록 명령으로 마이그레이션을 수행해 보면 카테고리에는 기본 키 1을 가지는 레코드가 없기 때문에 외래 키 제약 사항에 위배가 되어 컬럼 추가 시에 데이터베이스 에러가 발생되어 마이그레이션에 실패하게 됩니다.
정말 흔히 겪는 마이그레이션 실패 사례입니다.
이를 해결하려면 카테고리 테이블을 생성하는 operation과 카테고리 외래 키를 추가하는 operation 사이에 기본 키 1을 가지는 카테고리 레코드를 추가하는 operation이 하나 더 있어야 합니다.
소스코드 블로그의 모델 스파이에다가 새로운 모델 카테고리를 추가하고요 포스트 모델의 non-null 필드로서 카테고리 외래키 필드를 추가합니다
make migrations 블로그 명령으로 새로운 마이그레이션 파일을 생성해 주고요
포스트 모델의 새로운 non-null 필드인 카테고리를 추가한 거죠
일회성 디폴트 값을 지정하기 위해서 1을 지정하고요 외래 키니까 이 카테고리 모델에 대한 기본 키 값을 여기 지정해 주는 겁니다
그래서 1 이상의 값이 지정되어야 되고 1을 입력하겠습니다
그리고 마이그레이션 파일이 생성이 되었고요 생성된 마이그레이션 파일을 보시면 이 operations에서 새로운 카테고리 모델을 만드는 거죠
즉, 새로운 테이블을 만드는 거고요
이어서 Post 모델에서 카테고리 외래키 필드를 추가하는데 기존의 Post 데이터로서 여러 레코드가 있을 때 카테고리 외래키 필드에 대해서 모두 1이라는 값을 채워주는 겁니다
그러면 카테고리 테이블을 생성하자마자 그에 대한 외래키 필드를 추가하는데 기본 키 1을 가진 카테고리 데이터는 없을 겁니다
그래서 migrate-blog 명령을 내려보시면 이렇게 마이그레이션을 실패합니다 PostgreSQL SQL에서의 데이터베이스 에러 메세지는 이렇게 출력이 됩니다
해결 방안으로써 카테고리 테이블 생성 후에 기본 키 1 레코드를 생성하는 run python operation을 추가하겠습니다
역방향 수행에서는 수행할 작업이 없기에 no operation 함수를 지정합니다 
함수 호출 시에 기본 키가 1인 레코드를 조회하고 없으면 기본 키가 1인 레코드를 생성합니다
그리고 migrate 명령을 수행하면 migration이 정상 동작합니다.
python-manage-by-show-migrations-blog 명령을 내려보시면 현재 3번 migration은 미적용 상황입니다.
카테고리 테이블이 생성한 operation과 외래키를 추가하는 operation 사이에 run-python operation을 추가하겠고요.
run-python 시에 create-initial-category라는 함수를 실행하고요.
그리고 역방향 실행 시에는 수행할 함수가 없기에 no-operation 함수를 지정하겠습니다.
함수 구현에서 apps.getModel을 통해 블로그 앱의 카테고리 모델 클래스를 이렇게 가져오겠고요 
pk가 1인 카테고리가 있는지 검사를 하고 없다면 category.object.create를 통해서 pk가 1인 카테고리를 생성하도록 하겠습니다 
그리고 나서 migrate 블로그 명령을 내려보시면 이렇게 마이그레이션이 잘 수행이 되었고요
데이터베이스에서 새로 고침을 하시고요 생성된 Blog Category 테이블 내역을 보시면 PK가 1인 레코드를 확인하실 수 있습니다


---

1.
이번 시간에 다룬 마이그레이션 실패 사례와 해결 방법은 다음과 같습니다.

사례 1: 외래키 추가 시 기본 키 값이 없는 경우
문제 상황: 새로운 모델인 Category를 추가하고, Post 모델에 Category 모델에 대한 외래키를 추가하는 마이그레이션을 진행하면서, Category 모델의 기본 키 값(예: 1)이 존재하지 않아 외래키 제약조건을 위반하게 되어 마이그레이션이 실패하는 문제입니다.

기존에 Post 모델이 있고 마이그레이션이 완료된 상태에서, Category 모델을 추가하고 Post 모델에 Category 외래키를 추가합니다.
make migrations 명령으로 마이그레이션 파일을 생성하고, 외래키 필드에 기본 값으로 1을 지정합니다.
migrate 명령을 실행하면, Category 모델에 기본 키가 1인 레코드가 없기 때문에 외래키 제약조건 위반으로 인해 마이그레이션이 실패합니다.
해결 방법:
Category 모델을 생성하는 마이그레이션과, Post 모델에 외래키를 추가하는 마이그레이션 사이에 Category 모델에 기본 키 1을 가지는 레코드를 추가하는 작업이 필요합니다.

Post 모델에 Category 외래키 필드를 추가하고, make migrations 명령을 사용하여 마이그레이션 파일을 생성합니다.
마이그레이션 파일에서 Category 모델을 생성하는 작업 뒤에, Post 모델에서 Category 외래키를 추가하는 작업이 포함됩니다.
외래키 추가 작업을 수행하기 전에 기본 키가 1인 레코드가 존재하지 않으면 추가하는 작업을 삽입합니다.
실행 방법:

runPython operation을 사용하여, Category 모델에서 기본 키가 1인 레코드가 존재하는지 확인하고 없으면 새로 생성하는 코드를 추가합니다.
python
코드 복사
def create_initial_category(apps, schema_editor):
    Category = apps.get_model('blog', 'Category')
    if not Category.objects.filter(pk=1).exists():
        Category.objects.create(id=1, name="Default Category")
runPython을 통해 create_initial_category 함수를 실행하고, 역방향 실행 시에는 no_operation 함수를 사용합니다.

migrate 명령을 실행하면 마이그레이션이 정상적으로 수행되고, Category 테이블에 기본 키 1인 레코드가 생성됩니다.
요약:
새로운 모델과 외래키를 추가할 때, 외래키 필드에 기본 값으로 지정된 레코드가 데이터베이스에 존재하지 않으면 마이그레이션이 실패할 수 있습니다. 이를 해결하려면 runPython을 사용하여, 외래키를 추가하는 작업 전에 필요한 기본 값 레코드를 생성하는 추가 작업을 해야 합니다.


