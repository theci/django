두 번째 해결책으로 Slug 필드를 유니크 필드로 운영하더라도 먼저 Not Unique,
유일하지 않은 필드로 먼저 컬럼을 추가하고 기존 레코드의 Slug 값을 유일하도록 값을
구성한 뒤에 Slug 필드에 유니크 제약사항을 추가하는 방법입니다.
PostModel의 Slugify 함수에서 Slug 값이 어느 정도의 유일성이 보장되도록
생성된 UUID 문자열에서 8글자만 추가합니다.
생성되는 UUID는 총 32글자입니다.
32글자를 다 쓰셔도 되고, 저는 8글자만 써도 충분한 유일성이 보장될 듯 해서 8글자만
썼습니다.
Notion 서비스의 경우, 페이지 제목 뒤에 32 글자 UUID를 추가합니다.
그리고 Slug 필드에 대한 유니크 제약사항을 추가합니다.
Model 필드에 unique=True 인자를 붙여 유니크 제약사항을 추가하는 것보다,
Unique Constraints를 활용하면 다양한 옵션으로 유니크 제약사항을 적용하실 수
있습니다.
make-migrations 명령으로 마이그레이션 파일을 추가한 후에 해당 마이그레이션
파일을 수정합니다
유니크 제약사항이 적용되기 전에 run-python operation을 통해 슬러그 값이
유일하도록 각 레코드의 슬러그 값들을 일괄 업데이트합니다
그럼 migrate 명령이 잘 동작하고요 하지만
기존 테이블에 유니크 필드를 추가하고 중복 없이 값을 채워 넣는 것은 비용이 많이 드는
작업임을 기억해 주세요
slug 값은 유일하기에 PostDetailView에서도 slug 값을 통한 조회가
가능해집니다 블로그 앱의 Post 모델의 slugify 함수에다가 uid를 뒤에
추가합니다 그리고 Post 모델의 classMeta 속성으로 여러가지 제약사항을 추가할 수
있는데 Unique Constraints를 통해서 slug 필드에 대한 제약사항을
추가하고요 이름도 지정을 해줍니다
python manage.py make-migrations-blog 명령을 통해서 새로운
migration 파일을 생성을 해주고요 5번 migration 파일을 열어보시면 이렇게
포스트 모델에 slug 필드에 대한 유니크 제약 사항이 추가되는 operation 하나만
있음을 확인하실 수 있습니다
유니크 제약 사항이 추가되기 전에 run-python-operation을 추가하겠고요
update_unique_slug_if_empty라는 함수를 추가해 주겠습니다
필요한 import를 해주시고요
이 함수를 run-python의 첫 번째 인자, 두 번째 인자는 no-flation을
지정해 주겠습니다.
python-main.py show-migrations-blog 명령에서 5번
마이그레이션이 현재 미적용이고요.
migrate-blog 명령을 통해서 5번 마이그레이션이 적용이 되었고요.
유니크 제약사항도 추가가 되었습니다.
PostDetailView에서는 슬러그만 받도록 구성을 해 볼 수도 있겠습니다.
이렇게 슬러그만 받도록 구성을 하고, 블로그의 urls.py에서도 이렇게 슬러그만 받도록
구성을 해봤습니다.


이번 해결책은 Slug 필드를 유니크 필드로 운영하되, 먼저 비유니크 필드로 추가하고, 기존 레코드의 슬러그 값을 유일하도록 수정한 후에 유니크 제약조건을 추가하는 방법입니다. 이 방법은 유니크 제약조건을 추가할 때 발생할 수 있는 중복 오류를 피할 수 있으며, 마이그레이션을 안전하게 적용할 수 있습니다. 아래는 이 해결책을 적용하는 과정입니다.

문제 해결 과정
1. 비유니크 필드로 Slug 추가
Slug 필드 추가:
Post 모델에 slug 필드를 유니크 제약 없이 추가합니다. 처음에는 slug 필드를 비유니크 필드로 추가하여 기존 데이터에 대해 중복되는 값을 허용합니다.

UUID 생성:
slugify 함수에서 UUID를 이용해 고유한 슬러그 값을 생성합니다. UUID는 총 32글자이지만, 8글자만 사용하여 유일성을 보장하도록 합니다. 
예시로, Notion 서비스에서는 제목 뒤에 32글자 UUID를 붙이는 방식을 사용합니다.
UUID에서 8글자를 사용해 슬러그 값을 생성하면 충분한 유일성이 보장됩니다.

2. 유니크 제약조건 추가 전 데이터 수정
슬러그 값 일괄 업데이트:
slug 필드에 유니크 제약조건을 추가하기 전에, 기존 레코드의 slug 값을 유일하도록 업데이트합니다.
RunPython operation을 사용하여 마이그레이션 중 기존 레코드에 대해 slug 값을 업데이트합니다.

RunPython operation 사용:
마이그레이션 파일을 수정하여 slug 값을 유일하게 만드는 함수 (update_unique_slug_if_empty)를 추가합니다.
이 함수는 기존 데이터베이스의 slug 값을 확인하고, 빈 값이거나 중복된 값이 있다면 유니크한 값으로 채워주는 작업을 수행합니다.

3. 유니크 제약조건 추가
유니크 제약조건 적용:
Post 모델의 slug 필드에 **unique=True**를 설정하는 대신, **UniqueConstraints**를 사용하여 유니크 제약을 추가합니다. 
이를 통해 다양한 옵션으로 유니크 제약을 적용할 수 있습니다.

UniqueConstraints 사용:
Post 모델의 class Meta에서 **UniqueConstraints**를 사용하여 slug 필드에 유니크 제약조건을 추가하고, 이름을 지정할 수 있습니다.

4. 마이그레이션 파일 생성 및 수정
마이그레이션 파일 생성:
python manage.py make-migrations blog 명령을 통해 마이그레이션 파일을 생성합니다.
생성된 마이그레이션 파일을 열어보면, slug 필드에 대한 유니크 제약 조건이 추가된 작업이 포함되어 있습니다.

RunPython operation 추가:
유니크 제약조건을 추가하는 이전에, slug 값을 유일하게 만드는 함수 (update_unique_slug_if_empty)를 RunPython operation으로 실행하여 기존 데이터를 처리합니다.
RunPython의 첫 번째 인자로 해당 함수를 지정하고, 두 번째 인자로 no-op을 사용하여 기본값을 설정합니다.

5. 마이그레이션 적용 및 최종 결과
마이그레이션 적용:
python manage.py migrate blog 명령을 실행하여 마이그레이션을 적용합니다. 
이를 통해 slug 필드에 유니크 제약조건이 추가되고, 기존 레코드의 slug 값이 유일하게 수정됩니다.
PostDetailView에서 slug 값으로 조회:

마이그레이션이 완료된 후, **PostDetailView**에서는 slug 값만을 이용하여 게시글을 조회할 수 있습니다.
urls.py에서 slug 값만을 이용해 URL 패턴을 설정하고, 슬러그를 기반으로 게시글을 조회합니다.


요약
기존 문제: slug 필드에 유니크 제약조건을 추가할 때, 기존 데이터에 중복 값이 있을 경우 마이그레이션이 실패하는 문제.

해결 방법:
비유니크 필드로 슬러그 필드 추가: 처음에는 유니크 제약 없이 slug 필드를 추가하고, UUID 기반의 유일한 값을 생성하여 기존 데이터를 업데이트합니다.
RunPython operation 사용: slug 값을 유일하도록 업데이트하는 커스텀 함수 (update_unique_slug_if_empty)를 추가하여 기존 데이터를 처리합니다.
유니크 제약조건 추가: UniqueConstraints를 사용하여 slug 필드에 유니크 제약을 추가하고, 이를 마이그레이션에 적용합니다.
PostDetailView에서 slug 값으로 조회: 마이그레이션이 완료된 후, slug만을 이용해 게시글을 조회할 수 있게 됩니다.
결과: 기존 데이터에 중복 값이 있더라도 유니크 제약을 안전하게 추가할 수 있으며, slug 값을 기반으로 게시글을 조회하는 기능을 구현할 수 있습니다.



