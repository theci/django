앞선 마이그레이션 실습에서는 마이그레이션에 지정된 외래키의 데이터가 데이터베이스에 필히 존재해야 합니다.
그렇지 않으면 마이그레이션에 실패하게 되죠.
새로운 데이터베이스에 장고 서비스를 배포하려고 할 때 유저 데이터가 하나도 없을 수 있죠.
그때 마이그레이션을 유저 테이블 생성까지만 수행하고, 유저 데이터를 수동으로 생성한 후에 마이그레이션을 이어서 실행하는 것은 매우 번거로운 일입니다.
그러니 마이구에이션 단계에서 run_python_operation을 통해 해당 외래키의 데이터를 자동 생성해 주도록 해보겠습니다.
블로그 앱의 0002 마이그레이션의 operations 리스트에서 addField 전에 runPython이 수행되도록 위에 위치시킵니다.
runPython 오프레이션이 정방향 수행될 때에는 지정 함수가 수행되도록 하고, 역방향 수행될 때에는 수행할 함수가 없으니 noop 함수를 지정하겠습니다.
noop 함수는 내용이 없는 빈 함수입니다.
createUserIf 함수에서는 user 모델 클래스를 임포트하고 기본 키가 1인 user 레코드의 존재 유무를 확인하여 없다면 랜덤 유저명으로 기본 키가 1인 유저를 생성합니다.
createUser 함수는 user 모델의 모델 매니저인 user 매니저 클래스에서 제공하는 메서드입니다.
지정 인자의 유저 모델 인스턴스를 저장하는데 이때 암호는 암호와이어 데이터베이스에 저장해줍니다. 
암호를 non으로 지정하면 로그인이 불가능한 암호로 데이터베이스에 저장하고요.
자동 생성된 유저 계정이니 로그인을 허용해서는 안 되겠죠.
이후에 로그인이 가능한 암호로 설정하려면 기본 키가 1인 유저 모델 인스턴스를 조회하여 setPassword 함수로 암호를 암호와이어 저장한 후에 save() 메서드을 통해 저장하시면 됩니다.
유저 모델의 이즈 액티브 속성도 거짓으로 지정하여 비활성화 계정으로 지정합니다.
장고 로그인 시스템에서는 이즈 액티브 값이 거짓이라면 로그인을 허용하지 않습니다.
현재 블로그 앱의 마이그레이션은 2번까지 적용이 된 상황입니다.
2번을 롤백하도록 하겠습니다.
롤백을 했고요.
2번은 미적용 상황이죠.
이제 블로그 앱에 0002 마이그레이션 파일을 열어주시고요
Add Field에서는 인자로 1으로 지정하겠습니다
Operations List에서 Migrations.runPython이라는 오퍼레이션을 추가해 줄 텐데 함수명은 createUser_if_empty이라고 쓰고요
두 번째 인자는 noOperation 함수를 지정했습니다 함수를 구현해보죠
먼저 User 모델 class를 임포트해야 되겠고요 apps.getModel, settings.AUTH_USER_MODEL userModel 클래스가 있습니다
Object의 필터 pk가 1인 레코드가 있는지 검사하고요 이 값이 거짓이라면 없다는 거죠
그러면 user.object.createUser라는 이 함수를 통해서 생성을 할 것입니다
userName과 그리고 암호는 로그인 불가능한 암호 non_password 그리고 easyActive는 거짓, pk는 1로 하겠습니다
그러면 이제 userName만 있으면 되죠
여기에 auto-plus getRandomString이라는 함수를 쓸 텐데 생성할 랜덤 문자열은 총 10자 allowCharacters 인자로 String에 askItLetters, askIt 문자열 중에 10글자 뽑아서 랜덤 문자열 만들어주고 앞에 auto를 붙였습니다
그리고 userName을 썼죠
createUser 함수에서 생성된 user를 반환할 것이고요 여기에 user.pk 값을 이렇게 찍어주도록 하겠습니다
파이썬 매니지파이 마이그레이트 블로그 명령으로 2번 마이그레이션을 수행을 해 볼게요 오류가 발생했네요
eject에 오타가 있었습니다 명령을 다시 수행을 해보면 2번 마이그레이션이 동작했고요 
이렇게 PK가 1인 유저 인스턴스로 생성이 되었고요
해당 데이터베이스 테이블을 열어보시면 이렇게 PK가 1인 데이터로 생성이 되었고요 암호 필드 앞에 느낌표가 붙었죠
느낌표가 붙으면 로그인이 불가능한 암호가 되겠습니다
그리고 유저 네임도 이렇게 랜덤 유저명으로 생성이 되었고요
이제 액티브 필드도 이렇게 거짓으로 저장이 잘 되었음을 확인하실 수 있습니다
모든 데이터베이스 테이블에는 각 행의 식별자인 기본키가 필요합니다.
장고 모델에서는 default 기본키로써, id 이름의 BigAutoField를 사용합니다. 
다른 필드를 기본키로 지정하고 싶으시다면, 그 필드에 primary 키 인자 인자를 지정하시고, 마이그레이션을 수행해 주시면 됩니다.
집코드 모델에서 장고 기본의 기본키를 사용하는 것과, 우편번호 필드를 기본키로 사용하는 것에 대해서 간략히 비교해 보겠습니다.
우편번호를 기본키로 사용하는 것은 데이터베이스에 직접 접속해서 코디를 작성하는 경우가 많을 때 유리할 수 있습니다.
우편번호 코드를 기본키로 사용하면 데이터의 실제 의미가 직접 연결되어 있어 SQL만 봐도 데이터를 이해하기 쉽습니다.
그리고 다른 시스템과 데이터베이스를 공유할 경우 더 효율적일 수 있습니다
SQL Query를 직접 작성할 시에도 보다 직관적으로 Query를 작성할 수 있고요
레거시 데이터베이스에 장고 시스템을 연동할 때 이 방법이 유용할 수 있습니다
이에 반해 장고 기본의 기본 키를 사용하는 경우 장고 모델 위주로 사용할 때 유리합니다.
ID 필드로 각 모델 간의 관계가 맺어져 있기에 우편번호 코드가 변경되거나 삭제될 경우에도 다른 테이블 간의 관계가 덜 복잡하고 우편번호 변경이 쉽습니다.
우편번호 코드를 기본 키로 사용하면 코드가 변경될 때마다 관계를 맺고 있는 모든 테이블을 업데이트해야 합니다.
우편번호 값은 거의 변하지 않겠지만 다른 외래 키 필드에서는 자주 변경되는 값일 수 있습니다. 
모든 모델의 기본 키가 동일하므로 모델이 단순해지고 장고의 기본 동작과 호환이 잘 됩니다. 
우편번호 값이 기본 키가 아니기에 우편번호 값이 테이블 내에서 유일하지 않아도 되기에 변경이 더 자유롭습니다.
새로운 데이터베이스에서 장고 시스템을 운영할 때 유용합니다 각 방법의 장단점을 고려하여 프로젝트의 요구사항과 장기적인 유지 보수성을 고려해 결정해주세요
마이그레이션 파일 생성에 대한 협업 팁입니다
팀 내에서 같은 모델 변경 내역에 대해 팀원 각자가 모델을 만들고 각자가 마이그레이션 파일을 생성하고 코드 저장소에 푸시하지 마세요.
하나의 데이터베이스 변경 내역에 대해서는 하나의 마이그레이션 파일만 존재해야 합니다.
데이터베이스 설계는 가치화되 마이그레이션 파일 생성은 한 명이 전담하거나 혹은 돌아가며 생성하기를 추천합니다.
모델 코드 작성 및 마이그레이션 파일 생성을 하나의 이슈로 처리해도 좋겠죠.
전담한 1인이 모델 파일과 마이그레이션 파일을 생성하고 코드 저장소에 푸시하면 다른 팀원은 그 파일을 받아서 마이그레트 명령으로 마이그레이션을 적용하기만 하면 됩니다.






이 내용은 Django에서 마이그레이션을 관리하고, 새로운 데이터베이스 환경에서 유저 데이터를 자동으로 생성하는 방법을 다루고 있습니다. 또한, 기본 키와 마이그레이션 협업에 관한 내용을 포함하고 있습니다. 주요 내용을 정리하면 다음과 같습니다.

1. 외래 키 필드 추가 시 자동 데이터 생성
문제 상황: 새로운 데이터베이스에 Django 서비스를 배포할 때, 유저 데이터가 없으면 외래 키로 연결된 필드의 마이그레이션이 실패할 수 있습니다. 예를 들어, ForeignKey 필드가 User 모델을 참조하고 있을 경우, User 테이블에 기본 키가 1인 유저가 존재해야 합니다.
이를 해결하기 위해, 마이그레이션 파일에서 runPython을 사용하여 외래 키 필드에 필요한 데이터를 자동으로 생성하도록 할 수 있습니다.
실습 내용:
runPython 명령을 사용하여, 마이그레이션 실행 중에 기본 키가 1인 유저를 자동으로 생성하도록 합니다.
createUserIf 함수: 이 함수는 User 모델의 기본 키가 1인 레코드가 없는 경우, 랜덤 유저명을 가진 유저를 생성합니다.
noop 함수: runPython의 역방향 실행 시 아무 작업도 하지 않도록 설정하기 위해 사용됩니다.
생성된 유저는 로그인이 불가능한 상태로 password 필드에 비밀번호를 설정하고, is_active를 False로 설정하여 비활성화 계정으로 처리합니다.
마이그레이션 처리 과정:
마이그레이션 파일 수정: 0002 마이그레이션에서 runPython을 사용하여 유저 데이터를 자동으로 생성하는 작업을 추가합니다.
createUserIf 함수:
기본 키가 1인 유저가 없다면 랜덤 유저명으로 유저를 생성합니다.
유저 생성 시 password는 로그인 불가능한 값으로 설정하며, is_active는 False로 지정하여 계정을 비활성화 상태로 만듭니다.
마이그레이션 실행: python manage.py migrate 명령으로 마이그레이션을 실행하여 유저 데이터를 자동으로 생성하고, 마이그레이션을 완료합니다.
2. 기본 키 선택: Django 기본 키 vs. 사용자 정의 키
기본 키: Django 모델에서는 기본적으로 id라는 이름의 BigAutoField를 기본 키로 사용합니다. 하지만, 다른 필드를 기본 키로 지정할 수도 있습니다.
우편번호를 기본 키로 사용하는 경우:
장점: SQL 쿼리에서 직관적이고, 다른 시스템과 데이터베이스를 공유할 때 유리합니다. 우편번호는 변경되지 않기 때문에 데이터베이스를 더 효율적으로 관리할 수 있습니다.
단점: 우편번호가 변경될 경우, 이를 참조하는 다른 테이블들도 모두 수정해야 하며, 외래 키 관계가 복잡해집니다. 또한, 우편번호가 변경되면 모든 관련 데이터가 영향을 받을 수 있습니다.
Django 기본 키 (id)를 사용하는 경우:
장점: ID 필드를 기준으로 테이블 간 관계가 설정되어 있어 모델 간 관계가 간단합니다. ID가 변경되지 않으므로 외래 키 관계가 복잡해지지 않으며, Django의 기본 동작과 잘 호환됩니다.
단점: 우편번호와 같은 의미 있는 필드를 기본 키로 사용하지 못하는 단점이 있지만, 대부분의 경우에는 문제가 되지 않습니다.
결론: 기본적으로 Django는 id 필드를 기본 키로 사용합니다. 하지만 외부 시스템과의 연동이 중요한 경우, 의미 있는 다른 필드를 기본 키로 사용할 수 있습니다. 프로젝트의 요구 사항에 맞게 결정해야 합니다.

3. 마이그레이션 파일 협업 팁
마이그레이션 파일의 생성과 관리: 팀 프로젝트에서 각 팀원이 별도로 마이그레이션 파일을 생성하면 충돌이 발생할 수 있습니다. 따라서, 하나의 모델 변경에 대해서는 하나의 마이그레이션 파일만 생성해야 합니다.
협업 시 마이그레이션 관리 방법:
팀 내에서 모델 코드 변경과 마이그레이션 파일 생성을 한 명이 전담하거나, 돌아가며 작업합니다.
모델 코드 작성 및 마이그레이션 파일 생성은 하나의 이슈로 처리하여, 마이그레이션 파일을 푸시한 후 다른 팀원들은 해당 파일을 받아서 migrate 명령으로 적용합니다.
마이그레이션 충돌을 피하고 협업을 원활하게 하기 위해, 마이그레이션 파일을 하나의 작업 단위로 묶어서 관리합니다.
요약
마이그레이션에서 자동 데이터 생성: runPython을 사용하여 외래 키 필드의 데이터를 자동으로 생성하고, 마이그레이션 실패를 방지할 수 있습니다. 이 방법은 유저 데이터가 없는 새로운 데이터베이스 환경에서 유용합니다.
기본 키 선택: Django에서는 기본적으로 id 필드를 기본 키로 사용하지만, 우편번호와 같은 다른 필드를 기본 키로 사용할 수도 있습니다. 이 선택은 프로젝트의 요구 사항에 따라 결정해야 합니다.
마이그레이션 협업: 팀에서 마이그레이션 파일을 효율적으로 관리하려면, 한 명이 마이그레이션 파일을 전담하거나, 하나의 이슈로 처리하여 충돌을 방지하는 것이 좋습니다
이 내용은 Django에서 마이그레이션을 관리하고, 새로운 데이터베이스 환경에서 유저 데이터를 자동으로 생성하는 방법을 다루고 있습니다. 또한, 기본 키와 마이그레이션 협업에 관한 내용을 포함하고 있습니다. 주요 내용을 정리하면 다음과 같습니다.

1. 외래 키 필드 추가 시 자동 데이터 생성
문제 상황: 새로운 데이터베이스에 Django 서비스를 배포할 때, 유저 데이터가 없으면 외래 키로 연결된 필드의 마이그레이션이 실패할 수 있습니다. 예를 들어, ForeignKey 필드가 User 모델을 참조하고 있을 경우, User 테이블에 기본 키가 1인 유저가 존재해야 합니다.
이를 해결하기 위해, 마이그레이션 파일에서 runPython을 사용하여 외래 키 필드에 필요한 데이터를 자동으로 생성하도록 할 수 있습니다.
실습 내용:
runPython 명령을 사용하여, 마이그레이션 실행 중에 기본 키가 1인 유저를 자동으로 생성하도록 합니다.
createUserIf 함수: 이 함수는 User 모델의 기본 키가 1인 레코드가 없는 경우, 랜덤 유저명을 가진 유저를 생성합니다.
noop 함수: runPython의 역방향 실행 시 아무 작업도 하지 않도록 설정하기 위해 사용됩니다.
생성된 유저는 로그인이 불가능한 상태로 password 필드에 비밀번호를 설정하고, is_active를 False로 설정하여 비활성화 계정으로 처리합니다.
마이그레이션 처리 과정:
마이그레이션 파일 수정: 0002 마이그레이션에서 runPython을 사용하여 유저 데이터를 자동으로 생성하는 작업을 추가합니다.
createUserIf 함수:
기본 키가 1인 유저가 없다면 랜덤 유저명으로 유저를 생성합니다.
유저 생성 시 password는 로그인 불가능한 값으로 설정하며, is_active는 False로 지정하여 계정을 비활성화 상태로 만듭니다.
마이그레이션 실행: python manage.py migrate 명령으로 마이그레이션을 실행하여 유저 데이터를 자동으로 생성하고, 마이그레이션을 완료합니다.
2. 기본 키 선택: Django 기본 키 vs. 사용자 정의 키
기본 키: Django 모델에서는 기본적으로 id라는 이름의 BigAutoField를 기본 키로 사용합니다. 하지만, 다른 필드를 기본 키로 지정할 수도 있습니다.
우편번호를 기본 키로 사용하는 경우:
장점: SQL 쿼리에서 직관적이고, 다른 시스템과 데이터베이스를 공유할 때 유리합니다. 우편번호는 변경되지 않기 때문에 데이터베이스를 더 효율적으로 관리할 수 있습니다.
단점: 우편번호가 변경될 경우, 이를 참조하는 다른 테이블들도 모두 수정해야 하며, 외래 키 관계가 복잡해집니다. 또한, 우편번호가 변경되면 모든 관련 데이터가 영향을 받을 수 있습니다.
Django 기본 키 (id)를 사용하는 경우:
장점: ID 필드를 기준으로 테이블 간 관계가 설정되어 있어 모델 간 관계가 간단합니다. ID가 변경되지 않으므로 외래 키 관계가 복잡해지지 않으며, Django의 기본 동작과 잘 호환됩니다.
단점: 우편번호와 같은 의미 있는 필드를 기본 키로 사용하지 못하는 단점이 있지만, 대부분의 경우에는 문제가 되지 않습니다.
결론: 기본적으로 Django는 id 필드를 기본 키로 사용합니다. 하지만 외부 시스템과의 연동이 중요한 경우, 의미 있는 다른 필드를 기본 키로 사용할 수 있습니다. 프로젝트의 요구 사항에 맞게 결정해야 합니다.

3. 마이그레이션 파일 협업 팁
마이그레이션 파일의 생성과 관리: 팀 프로젝트에서 각 팀원이 별도로 마이그레이션 파일을 생성하면 충돌이 발생할 수 있습니다. 따라서, 하나의 모델 변경에 대해서는 하나의 마이그레이션 파일만 생성해야 합니다.
협업 시 마이그레이션 관리 방법:
팀 내에서 모델 코드 변경과 마이그레이션 파일 생성을 한 명이 전담하거나, 돌아가며 작업합니다.
모델 코드 작성 및 마이그레이션 파일 생성은 하나의 이슈로 처리하여, 마이그레이션 파일을 푸시한 후 다른 팀원들은 해당 파일을 받아서 migrate 명령으로 적용합니다.
마이그레이션 충돌을 피하고 협업을 원활하게 하기 위해, 마이그레이션 파일을 하나의 작업 단위로 묶어서 관리합니다.
요약
마이그레이션에서 자동 데이터 생성: runPython을 사용하여 외래 키 필드의 데이터를 자동으로 생성하고, 마이그레이션 실패를 방지할 수 있습니다. 이 방법은 유저 데이터가 없는 새로운 데이터베이스 환경에서 유용합니다.
기본 키 선택: Django에서는 기본적으로 id 필드를 기본 키로 사용하지만, 우편번호와 같은 다른 필드를 기본 키로 사용할 수도 있습니다. 이 선택은 프로젝트의 요구 사항에 따라 결정해야 합니다.
마이그레이션 협업: 팀에서 마이그레이션 파일을 효율적으로 관리하려면, 한 명이 마이그레이션 파일을 전담하거나, 하나의 이슈로 처리하여 충돌을 방지하는 것이 좋습니다