이번에는 회원가입에 대해서 살펴보겠습니다.
회원가입은 지정 유저명과 암호의 유저 모델 레코드를 생성하는 것입니다.
HTML 폼으로부터 유저명과 암호와 암호 확인용으로 하나 더 전달받고요.
그럼 총 3개의 필드를 입력받는 거죠.
지정 유저명에 유저가 있는지 확인하고, 두 암호의 일치 여부도 확인하고, 암호에 대한
유효성 검사도 확인합니다.
settings에 Auth, Password Validators 설정에 암호에 대한 유효성
검사로 4개의 유효성 검사가 기본 등록되어 있고요 각 유효성 검사에 대해 Options
인자로 옵션을 커스터마이징 할 수 있습니다 암호에 대한 커스텀 유효성 검사를 추가하실 수도
있습니다 암호에 대한 첫 번째 유효성 검사는 유저 모델의 지정 필드 값과의 문자열 유사도를
검사합니다.
디폴트로 유저 네임 필드, 퍼스트 네임 필드, last name 필드, 이메일 필드에 대해서
0.7, 즉 70% 이상의 유사도를 가지면 암호를 거부합니다.
두 번째 유효성 검사는 지정 길이 미만이면 거부하고요.
디폴트 길이는 8입니다.
세 번째 유효성 검사는 블랙리스트에 등록된 암호인지 여부를 검사하고요.
디폴트로 auth 앱 내에 commonpassword.txt 파일을 사용하며
qwer1234, secret1과 같은 암호가 2만 개 등록되어 있습니다.
파일은 gzip 압축 파일이나 plain text 파일만을 지원합니다.
네 번째 유효성 검사는 숫자로만 구성된 암호는 거부하고요.
커스텀 옵션은 존재하지 않습니다.
모든 유효성 검사를 수행하고 모든 오류 내역을 validation error 예외로
발생시키고요 모두 통과하면 암호를 해싱하여 패스워드 필드에 저장하고 save 메서드를
호출하여 데이터베이스에 저장합니다 암호를 저장할 때는 절대 패스워드 필드에 암호를 평문으로
직접 저장해서는 안 되고요 필히 setPassword 메서드를 통해 해싱한 후에
데이터베이스에 저장하셔야만 합니다 장고셀을 구동해서 인증 암호 유효성 검사를 직접 수행해
보겠습니다. 1, 2, 3, 4 암호로 수행해 보면 총 2개의 유효성 검사 에러가
뜨는데요. 첫 번째는 입력된 암호의 길이에 대해서 최소 8글자가 되어야 한다는
메시지이고요. 두 번째는 1, 2, 3, 4 비밀번호가 너무 일상적인 암호라는
메시지입니다.
수행된 암호 유효성 검사는 Settings에 Auth Password Validators
설정에 지정되어 있습니다
방금 전 에러 메시지는 이 중에 Minimum Length Validator를 통해서
발생되었고요 두 번째는 Common Password Validator를 통해서
발생되었습니다 첫 번째, UserAttributeSimilarity 클래스 구현을
보시면요. 생성자로 2개의 인자를 받고 모두 Default 인자가 지정되어 있습니다.
UserAttribute 인자로는 4개의 필드명이 지정되어 있고요.
MaxSimilarity 인자로는 0.7이 지정되어 있습니다.
입력된 암호가 이 4개의 필드 값과 최소 70%의 유사로를 가지면 암호를 거부하는 유효성
검사 클래스입니다.
Options 설정으로 생성자 값을 Custom 지정하실 수 있습니다.
이렇게 MaxSimularity 인자를 0.5로 지정하시면, 최소 50%의 유사로를 가지면
암호를 거부합니다.
두 번째, MinimumLengthValidator 클래스 구현을 보시면요.
생성자로 MinLength 인자를 받고요.
Default 값은 8입니다.
입력된 암호가 8글자 미만이라면 암호를 거부하는 유효성 검사 클래스입니다.
Options 설정으로 이렇게 최소 10글자 이상의 암호를 입력 받겠다고 설정을 하실 수
있습니다. 세 번째 Common Password Validator 클래스 구현을 보시면요.
생성자로 PasswordList 패스 인자가 있고요.
디폴트로 Auth 앱 내에 common_password.txt.gzip 파일의 경로를 전달
받습니다. gzip 확장자의 파일은 gzip 압축 파일인데요.
gzip으로 먼저 압축 해제를 시도해 보고, 압축 해제에 실패하면 Plain Text로
파일을 엽니다.
파일 내용에서 한 주씩 읽어서 좌우 공백을 제거하고, 중복 제거를 위해 집합 자료 구조로
변환하여 패스워드 인스턴스 변수로 저장해 둡니다.
암호에 대한 유효성 검사를 수행할 때마다 이 암호 파일을 로딩하지 않느냐라고 걱정하실 수도
있는데요. 각 유효성 검사 클래스의 인스턴스는 메모리에 캐싱되어 재사용되기 때문에 이
생성자 함수는 각 Python 프로세스마다 한 번씩만 호출됩니다.
Common Passwords txt.gc 파일은 시스템에 Gunzip 유틸리티가 설치되어
있으시면 명령줄에서 이렇게 손쉽게 압축을 해제하실 수 있습니다.
혹은 반디집과 같은 압축 유틸리티로 압축을 풀어 보실 수도 있습니다.
건집 유틸리티 사용 시에는 원본 gzip 파일을 삭제하니 gzip 파일을 복사한 후에 건집
명령을 수행해 주세요.
저처럼 바로 실행하시면 안 됩니다.
파일 내용은 에디터로 열어보셔도 되고 맥이나 리눅스에서는 헤드 명령으로 첫 10줄을 출력해
보실 수 있고 파워쉘에서는 Get-Content 명령에서 헤드 옵션을 지정하여 지정 라인 수만큼의
라인을 출력해 보실 수 있습니다.
파일의 총 라인 수는 맥이나 리눅스에서는 wc -l 명령으로 출력해 보실 수 있고요.
파워쉘에서는 Get-Content 명령과 Measure-Object 명령을 조합해서 출력해 보실 수
있습니다. 총 2만 개의 암호가 등록이 되어 있네요.
암호 매칭 시에는 소문자로 변환을 해서 흔한 암호 집합에 있는지 검사토록 구현되어
있습니다. 네 번째, Numeric Password Validator 클래스 구현을
보시면요. 생성자 인자가 없으니 커스텀을 지원하지 않겠고요.
입력된 암호가 숫자로만 구성되어 있다면 암호를 거부합니다.
인증 암호 유효성 검사 클래스에 커스텀 옵션을 지정해 보겠습니다.
유저 속성 유사도 유효성 검사에는 유사도 50%를 지정했고요.
최소 길이 유효성 검사에는 최소 10글자를 지정했습니다.
정적 셀을 다시 구동하시고요.
1234 암호로 유효성 검사를 해 보시면 이렇게 최소 10글자로 입력해 달라는 오류
메시지가 뜨고요.
유저 속성 유사도 유효성 검사를 수행해 보려면 validate_password 함수에 user
instance 지정이 필요하거든요.
유저 인스턴스를 하나 생성하시고 유저 네임을 보니 랜덤 유저라는 유저 네임을 가지고 있네요
암호를 유저 네임과 비슷하게 지정하고 유저 인자로 같이 넘겨서 암호를 검증해 보시면
비밀번호가 사용자 이름과 너무 유사합니다 라는 에러 메시지를 확인하실 수 있습니다



Django 회원가입 및 암호 유효성 검사

1. 회원가입 처리

회원가입은 사용자가 입력한 유저명, 암호, 그리고 암호 확인 필드를 통해 유저 모델 레코드를 생성합니다.
입력된 유저명이 이미 존재하는지 확인하고, 두 암호가 일치하는지 검증합니다.
암호에 대한 다양한 유효성 검사가 적용됩니다.

2. 암호 유효성 검사

Django의 기본 설정에서 Auth Password Validators를 사용하여 암호에 대한 유효성 검사를 자동으로 수행합니다. 기본적으로 4개의 유효성 검사가 등록되어 있습니다:
UserAttributeSimilarityValidator: 암호가 유저명, 이메일, 이름 등과 유사하면 거부합니다. (기본 유사도 70%)
MinimumLengthValidator: 암호의 길이가 최소 8자 이상이어야 합니다.
CommonPasswordValidator: 암호가 흔한 비밀번호 목록에 포함되어 있으면 거부합니다. (기본 목록은 common_password.txt 파일)
NumericPasswordValidator: 숫자로만 구성된 암호는 거부합니다.

3. 커스텀 유효성 검사

각 유효성 검사 클래스는 Options 인자를 통해 커스터마이징 할 수 있습니다:
UserAttributeSimilarityValidator: 유사도 기준을 변경할 수 있으며, 예를 들어 50% 이상의 유사도로 설정 가능.
MinimumLengthValidator: 최소 암호 길이를 변경할 수 있습니다.
CommonPasswordValidator: 기본으로 제공되는 common_password.txt.gzip 파일을 커스터마이즈할 수 있습니다. 이 파일은 2만 개의 흔한 비밀번호를 포함하고 있습니다.

4. 암호 해싱 및 저장

암호는 반드시 평문으로 저장하지 말고, setPassword 메서드를 사용하여 해싱 후 데이터베이스에 저장해야 합니다.

5. 실제 암호 유효성 검사 예시

예를 들어, 1234, 1q2w3e4r와 같은 암호는 유효성 검사를 통과하지 못합니다:
1234는 최소 길이가 부족하고, 흔한 암호로 간주되어 거부됩니다.
1q2w3e4r는 유저 속성과 유사도가 높아서 거부됩니다.

6. 유효성 검사 클래스 구현

UserAttributeSimilarityValidator:
유저의 유저명, 이메일, 이름과 암호의 유사도를 비교하고, 설정된 유사도 이상이면 암호를 거부합니다. 기본 유사도는 70%로 설정되어 있습니다.
MinimumLengthValidator:
암호의 최소 길이를 설정합니다. 기본값은 8자 이상으로 설정되어 있습니다.
CommonPasswordValidator:
common_password.txt 파일에 있는 흔한 암호 목록과 비교하여, 해당 목록에 포함되면 암호를 거부합니다.
NumericPasswordValidator:
암호가 숫자로만 이루어진 경우 거부합니다.

7. 파일 관리 및 압축

common_password.txt는 gzip 형식으로 제공되며, gzip 또는 텍스트 파일을 사용할 수 있습니다. 압축을 풀 때는 gunzip 명령어나 다른 유틸리티를 사용합니다.

8. 유효성 검사와 오류 메시지

암호가 유효성 검사에 실패하면 각 검사마다 오류 메시지가 출력됩니다. 예를 들어:
"암호가 유저명과 유사해서 거부되었습니다."
"암호 길이가 너무 짧습니다."
"이 암호는 너무 흔한 암호입니다."

9. 유저 인스턴스와 검증
유저 인스턴스를 생성하고 그 인스턴스를 사용하여 암호 검증을 수행할 수 있습니다. 유저명과 비슷한 암호를 지정하면 유사성 검사를 통해 "사용자 이름과 너무 유사한 암호입니다"라는 오류 메시지를 받을 수 있습니다.

이 과정은 Django에서 회원가입 및 암호 유효성 검사를 자동화하고 강화하는 방법을 다룹니다. 이를 통해 보안적인 측면에서 안전한 암호 관리를 할 수 있습니다.