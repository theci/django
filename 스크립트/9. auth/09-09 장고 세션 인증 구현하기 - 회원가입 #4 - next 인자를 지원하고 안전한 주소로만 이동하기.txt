로그인 구현에서 Next 인자를 지원해서 로그인에 성공하면 Next 인자의 지정된 주소로
이동하고, Next 인자가 없다면 디폴트 주소로 이동을 했습니다.
회원가입 뷰에서도 Next 인자를 지원해 보겠습니다.
Sign Up 함수 기반 뷰부터 적용해 보겠고요.
Get Data에서 Next 인자가 있으면 가져오고, 없으면 None을 반환할 테고요.
빈 문자열이거나 None이라면 Settings에 Login New Direct URL 값을
Next URL 변수에 저장합니다.
1순위로 포스트 데이터에서도 Next 인자를 가져오도록 해볼게요
그리고 Next URL 값으로 페이지 이동을 합니다
이제 회원가입 요청 주소에 Next 인자로 지정된 주소가 있다면 회원가입 후에 그 주소로
이동을 합니다
이번에는 클래스 기반 뷰로 구현해 보겠습니다
폼 처리 후에 이동할 주소니까 getSuccessURL 메서드를 재정의하여 이동할 주소
문자열을 반환합니다 포스트 데이터와 get 데이터에 next 인자가 있으면 그 값을
반환하여 페이지 이동도록 하고 없다면 사인업 뷰의 설정대로 페이지 이동을 하도록 합니다
그럼 next 인자가 있을 경우 지정된 주소도 회원가입 후에 이동을 합니다
앞서 Next 인자를 통한 페이지 이동에서 Next 인자는 외부로부터 전달받는 값이기에
값의 검증이 필요합니다.
현재는 값 검증이 없기에 Open Redirection 취약점을 가지고 있습니다.
이 취약점은 악의적인 목적을 가진 공격자가 유저에게 회용 가입 페이지로 안내한 후에 악성
코드가 있는 페이지로 강제 이동시켜 이후에 공격을 성공시키기 위한 발판으로 사용할 수
있습니다 이처럼 Next 인자로 다른 웹페이지 주소를 지정하면 회원가입 후에 지정된 주소로
이동을 합니다 이에 대한 대응은 Django 기본에서
url-has-allowed-host-and-scheme 함수를 통해 제공해 주고 있고요
Auth 앱의 redirect-url-mixing 클래스에서도 활용하고 있습니다
URL 인자로 허용 여부를 판단할 URL 주소 문자를 지정하고요.
ALLOWED HOST 인자로 허용할 호스트 목록을 집합 타입으로 지정하고요.
REQUIRED HTTPS 인자로 HTTPS 필수 여부를 지정합니다.
거짓을 반환하면 안전하지 않는 주소이니 해당 URL 주소 문자열로 이동하지 않도록 그
주소를 사용하지 않습니다.
Sign-up 함수 기반 뷰에 먼저 적용해 보겠습니다.
PostData와 GetData에서 이동할 주소 문자열을 뽑고요.
url_has_allowed_host_and_scheme 함수를 호출하여 URL 문자열에
안전성을 검사합니다.
url 인자로 next url 값을 지정하고 allowed host 인자로는 현재 서비스의
호스트명을 포함시켜 주고요 required_https 인자로 현재 서비스가 https로
서비스되고 있다면 참으로 지정해 줍니다
반환 값이 거짓이면 이 URL은 안전하지 않으니 사용되지 않도록 빈 문자열로 변경해
줍니다. Next URL에서 Settings에 Login redirect URL 적용은
빼서 Next URL 값이 비었거나 Non이라면 Login redirect URL 주소로
이동하도록 적용합니다.
그러면 악의적인 목적의 주소가 Next 인자로 지정되더라도 회원가입 뷰에서는 그 주소로
이동하지 않습니다.
Sign-up 뷰, 클래스 기반 뷰에도 적용해 보겠습니다.
PostData와 GetData에서 뽑아낸 이동할 주소 문자열에 대해서
url_has_allowed_post_and_scheme 함수를 통해 안정성을 검사합니다.
이 URL이 안전할 때에만 Next URL 주소로 이동하도록 합니다.
악의적인 목적의 주소가 Next 인자로 지정되어 있더라도 앞선 Sign Up 함수 기반 뷰와
동일하게 그 주소로 이동하지 않습니다.