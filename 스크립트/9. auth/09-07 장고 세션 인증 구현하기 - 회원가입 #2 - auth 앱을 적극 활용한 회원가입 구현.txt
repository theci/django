auth 앱에서는 회원 가입을 위한 유저 모델에 대한 모델 폼인 User Creation Form Class를 지원합니다.
User Creation Form Model Form Class는 유저 네임 필드에 대해서만 유저 모델 클래스로부터 폼 필드 구성을 가져오고요.
암호 필드는 유저로부터 입력받은 대로 저장하지 않고 해싱해서 저장할 것이니 메타 필드 속성에는 지정하지 않았습니다.
암호 확인 목적으로 암호를 두 번 입력받고요.
폼필드에서 스트립 거짓 설정을 하여 암호 문자열에 시작과 끝에 공백이 있더라도 자동 제거하지 않습니다.
패스워드2 필드에 대한 유효성 검사 함수인 clean__password2 메서드에서는 두 비밀번호 암호의 일치 여부를 검사하고요. __post__clean 메서드는 폼 클래스에서
fullclean 메서드에 의해서 자동 호출되는데요.
세팅스의 AuthPasswordValidators 설정 내역대로 암호에 대한 유효성 검사를 수행하고, 유효성 검사 에러는 패스워드2 필드에 대한 오류로 남깁니다.
모든 유효성 검사를 통과하고 나면 저장 시에 SetPassword 함수를 통해 암호를 해싱하여 패스워드 필드에 지정하고 데이터베이스에 저장합니다.
User, Creation, Form, Model, Form 클래스의 회원가입과 관련된 모든 구현이 완성되어 있습니다.
회원가입 뷰에서는 폼 클래스를 처리하는 일반적인 패턴으로 구현하시면 되고요.
저장 후에 로그인 페이지로 이동이 필요할 텐데 이는 세팅스의 로그인 URL 설정을 사용하시면 됩니다.
디폴트로 Account의 로그인 문자열이 지정되어 있습니다.
클래스 기반 뷰로 구현하신다면 이와 같이 Create 뷰를 활용하시면 됩니다.
Auth 앱의 UserCreationForm 모델 폼을 활용해서 회원가입을 지원하는 SignUp 뷰를 만들어 보겠습니다.
UserCreationForm 클래스 코드를 보시면 BaseUserCreationForm 클래스를 상속받았고요.
UserCreationForm에서는 UserName 필드에 대한 유효성 검사 함수가 하나 더 추가되어 있네요.
BaseUserCreationForm 클래스는 모델 폼이고요.
User 클래스로부터 UserName 모델 필드에 대한 폼필드 구성만 가져오고요.
Password1 폼필드와 Password2 폼필드가 추가되어 있습니다.
에러 메시지는 입력된 두 개의 암호가 틀렸을 때에 보여질 PasswordMismatch 에러 메시지가 등록되어 있네요.
모델 폼에서는 메타의 필드 클래시즈 속성으로 폼필드를 변경할 수 있는데요.
UsernameField에 대해서 UsernameField 폼필드로 변경을 했습니다.
UsernameField 폼필드는 CharacterField 폼필드를 상속받았고요.
값 변환 시에 NFKC 정규화를 거쳐 한 글자인 2분의 1 문자처럼 여러 개의 문자가 결합된 형태의 문자를 세 글자인 1 슬러시 2와 같은 같은 표준 형태로 변환하여 시각적으로
비슷하게 보이는 문자를 일관된 문자로 변환합니다.
다른 예로서 liter를 의미하는 liter 문자는 알파벳 L과 매우 유사해 보이지만 서로 다른 문자입니다.
liter 문자는 NFC 정규화 과정에서 소문자 L로 변환됩니다.
liter 문자가 포함된 lucky 문자열은 알파벳으로 구성된 lucky 문자열로 변환하여 비슷해 보이는 유저명이 존재하지 않도록 합니다.
맥스 랭스를 초과하는 문자열에 대해 정교화 과정을 진행하지 않는 이유는 이미 최대 길이에 대한 유효성 검사를 통과하지 못하기 때문입니다.
Base User Creation Form 클래스에서 패스워드2 폼필드에 대한 유효성 검사에서는 패스워드1 필드 값과 패스워드2 필드 값이 모두 있을 때 이 값들이 다르면
패스워드 미스매치 에러 메시지가 담긴 ValidationError 예외를 발생시키고요.
암호 포맷에 대한 유효성 검사는 클린_언더바_패스워드_2 메서드가 아니라 언더바 포스트 클린 메서드에서 수행합니다
왜냐하면 인증 암호 유효성 검사 중에 UserAttributeSimilarity 클래스가 있었죠 이는 유저 인스턴스에서 지정 필드 값과 유사한 암호가 있는지를 검사해 주는데요
이를 위해 Validate 패스워드 함수의 두 번째 인자로 UserName, LastName, FirstName, Email 등의 각 유저 필드들이 적용된 유저 인스턴스가 필요하거든요
underbar_post_click 메서드에서 부모의 underbar_post_click 메서드를 호출하고 나서는 self.instance에 관련 필드들이 모두 적용되어 있는 상태입니다.
validate 패스워드에서 유효성 검사 에러가 발생하면 패스워드2 필드에 대한 유효성 검사 에러로 추가합니다.
save 메서드 호출 시에 set_password 메서드를 호출하여 암호를 해싱하여 패스워드 필드에 반영하고 데이터베이스에 저장합니다.
User 모델의 username 모델 필드에는 유니크 참 설정이 되어 있어서 데이터베이스 레벨에서 유일성을 보장하지만 대소문자를 구별하거든요.
UserCreationForm 클래스에서는 UserName 폼 필드에 대한 유효성 검사 함수를 추가해서 대소문자를 구별하지 않고 username에 대한 유일성을 검사하도록 했습니다.
유일성에 대한 유효성 검사 에러 메시지는 모델의 유니크 에러 메시지 메소드를 통해 얻어왔습니다.
조의 코디셋은 모델 폼의 메타에 지정된 모델 클래스를 통해 코디셋을 생성했습니다.
회원가입에 필요한 모든 구현은 UserCreationForm 폼 클래스를 통해서 구현이 되어 있고요.
SignUpView는 일반적인 모델 폼 클래스를 사용하는 패턴으로 구현합니다.
유효성 검사를 통과한 뒤에 form.Save 메서드를 호출하면 데이터베이스에 유저 레코드를 저장하고요. 
관련 유저 모델 인스턴스를 반환합니다.
회원가입을 했으니 로그인 페이지로 이동을 시켜야겠죠?
장고 기본 설정의 Settings의 Login Underbar URL 설정에는 Account의 로그인 주소가 지정되어 있기에 로그인 페이지로의 이동은 이 설정을 활용하시기를 추천드리고요 
혹은 이렇게 URL 리버스를 통해 로그인 주소를 직접 지정해 주실 수도 있습니다
템플릿은 Django 폼 인스턴스를 처리하는 일반적인 패턴으로 구현했습니다
URL 패턴도 등록해 주시고요 브라우저로 회원가입 페이지를 방문하시어 회원가입을 진행하시면 AttributeError 예외가 발생합니다
이 에러는 CustomUserModel 클래스를 구현하고 UserCreationForm 클래스를 통해 회원가입을 구현할 때 발생합니다
이 에러가 발생하는 이유는 UserCreationForm 모델 폼 클래스는 auth 앱의 사용자 모델에 대한 모델 폼으로 설정이 되어 있는데 우리는 CustomUserModel 클래스로써 Account 앱의 유저 모델을 사용하고 있죠
그러니 이제 Account 앱의 UserModel 클래스를 통해 코디셋을 생성해야 하는데 해결법은 간단합니다.
UserCreationForm 클래스를 상속받은 클래스를 만들고 메타의 모델 속성만 Accounts 앱의 UserModel 클래스로 변경해 주시면 됩니다.
이렇게 UserCreationForm 클래스를 상속받은 SignUpForm 클래스를 정의하고 메타의 모델 속성을 지정했습니다.
Django 개발 서버의 로그나 Django Shared 구동에 보시면 미설정 오류가 발생하여 명령이 실패하는데요.
오류 메시지를 보면 모델 폼인데 모델만 지정하고 fields 속성이나 exclude 속성을 지정하지 않았다고 합니다.
UserCreationForm 구현에서는 메타의 모델 속성, 필드 속성, 필드 클래시즈 속성이 지정되어 있죠.
우리가 Sign Up Form의 메타 모델 설정으로 모델 설정만 변경한 것이 아니라 메타 속성 자체를 덮어 쓰기 한 상황입니다.
그래서 사인업 폼에서는 부모 클래스에서 지정된 필드 속성과 필드 클래시즈 속성이 제거된 상황인 거예요 유저 크리에이션 폼에서는 필드 속성과 필드 클래시즈 속성을 복사하지 마시고요
메타 속성도 클래스니까 상속을 활용하실 수 있습니다
메타 클래스들, 유저 크리에이션 폼의 메타 클래스들 상속을 받아주시고요
그 후에 모델 설정을 하시면 모델 설정만 변경되어 적용됩니다 장고 셸을 구동해 보시면 오디오 없이 쉘이 구동되고요 
사인업 폼, 모델 폼의 메타에서 모델 속성을 보시면Accounts 앱에 User 모델로 잘 지정되어 있음을 확인하실 수 있습니다 SignUp
뷰에서 폼 클래스를 SignUpForm으로 변경해 줍니다