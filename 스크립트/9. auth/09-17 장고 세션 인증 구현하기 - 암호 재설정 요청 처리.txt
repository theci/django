이번 시간에는 암호 재설정 링크를 확인하는 기능을 만들어 보겠습니다.
이제 유저가 암호 재설정 링크를 타고 들어왔을 때 해당 요청을 처리하는 방법을
살펴보겠습니다.
암호 재설정 링크로부터 뷰 인자로 유저 기본키에 Base64 인코딩 문자열인 UIDB64
값과 토큰 문자열을 전달받을 겁니다.
유저 기본키에 Base64 인코딩 문자엘을 다시 기본키 값으로 디코딩해서 관련 유저
레코드를 줘야 합니다
암호 재설정 링크 생성에 사용한 토큰 제너레이터를 동일한 옵션으로 여기에서도 사용해야
동일한 방법으로 해식 문자엘을 생성하겠죠
체크토큰 메서드를 호출하여 토큰의 유효성을 검증합니다 암호 재설정 링크 생성 이후에 해당
유저가 암호를 변경했거나 로그인했거나 이메일 주소를 변경했다면 이 암호 재설정 링크는
유효하지 않고요 체크토큰 메서드는 거짓을 반환합니다
체크토큰 메서드에서 참을 반환할 경우 유저로부터 변경할 암호를 입력받은 후에 암호의 유효성
검사를 수행하고 setPathsWord 메서드를 통해 유저의 암호를 변경합니다 암호
재설정을 요청해서 유효한 암호 재설정 링크를 하나 준비해주세요.
새로운 장고 셀을 여시고 준비된 코드에서 상단 임포트 코드를 복사합니다.
URL에서 User ID, Base64 인코딩 값을 UIDB64 변수에 저장하고요.
토큰 값도 저장해주세요.
UIDB64 값을 Base64 디코딩 해보면 이렇게 유저 기본 키가 디코딩 됩니다.
이 유저 기본키도 유저 레코드를 조회해서 유저 변수에 저장하고요.
토큰 값과 유저 값이 있으니 토큰 제너레이터의 체크 토큰 메서드를 통해 토큰의 유효성을
검사할 수 있습니다.
토큰의 만료 시간이 지났거나 유저가 로그인을 했거나 아무나 이메일 주소를 변경했다면 거짓을
리턴합니다. 유저가 암호 재설정을 한 후에도 암호가 변경된 상황이니 이 재설정 요청 유효할
재사용은 불가능합니다.
토큰이 유효하다면 암호 포맷에 대한 유효성 검사를 수행하고요.
유효성 검사에 통과하면 setPassword 메서드를 통해 패싱된 암호를 패스워드 필드에
저장하고 데이터베이스에도 저장합니다.
암호 재설정 확인 뷰를 핵심만 빠르게 구현해 보겠습니다.
암호 재설정 링크로 들어오면 패스워드 리셋 컨펌 뷰가 호출되면서 암호 인자로 유저 아이디
베이스 64 문자열과 토큰 문자열이 전달됩니다.
유저 아이디 베이스 64 문자열을 디코딩해서 유저의 기본 키 값을 얻어내고 유저 레코드를
줘야 합니다. 유저 모델 인스턴스도 있고 토큰 문자열도 있으니 암호 재설정 링크 생성 시에
사용했던 토큰 생성기를 사용해서 토큰의 유효성을 검증합니다
링크가 변조되었거나 만료시간이 지났거나 이 유저가 암호나 이메일을 변경했거나 로그인을
했다면 토큰 검증에 실패하고요 비밀번호 입력 없이 오디오 응답을 합니다
토큰 검증에 성공하면 setPathsWord 폼을 통해서 새롭게 설정할 비밀번호를 두 번
입력받고요. 암호값 패턴에 대한 유효성 검사를 수행하고 나서 적합하다면 form.save
메서드를 호출하여 변경된 암호를 데이터베이스에 저장합니다.
OAuth 앱의 패스워드 리셋 컨펌 뷰 클래스 기반 뷰에서는 포스트 리셋 로그인 옵션을 지원해
주는데요. 이 설정이 켜져 있다면 암호 변경 후에 자동 로그인을 수행합니다.
비밀번호 재설정 페이지에 접속해 주세요.
현재 패스워드 리셋 컨펌 뷰는 내부 구현 없이 텍스트만 응답하고 있습니다.
뷰 함수의 인자로 UIDB64 값과 토큰 값이 전달됩니다.
UIDB64 값을 Base64 디코딩해서 UserPK 값으로 변환하고요.
UserRecord 조회하고요.
변경할 암호를 입력받기 전에 토큰에 대한 유효성 검사를 수행합니다.
폼 템플릿으로 레지스트레이션의 password-reset-confirm.html 템플릿을
사용할 텐데요. 이 템플릿에서는 valid link 값으로 요청 토큰의 유효성 여부를
알립니다. 토큰이 유효하다면 암호 입력 폼을 노출하고요.
유효하지 않다면 비밀번호 초기화 실패 메시지를 노출합니다.
토큰이 유효할 경우 set-password 폼을 통해 두 번의 암호를 입력받고 암호에 대한
유효성 검증 후에 데이터베이스에 저장합니다.
setPasswordForm 폼 클래스는 모델 폼이 아닌 폼 클래스를 상속받고요.
암호 확인을 위해 암호를 두 번 입력받고요.
유효성 검사에서는 입력된 두 개의 암호가 있고 서로 일치하는지 검사합니다.
그리고 암호 포맷에 대한 검사도 수행하죠.
유효성 검사에 통과하면 setPathsWord 메서드를 통해 암호를 해싱하고 나서
데이터베이스에 저장합니다.
나머지 뷰 구현은 Django 폼을 처리하는 일반적인 뷰 패턴입니다.
암호 변경 후에 자동 로그인을 지원하려면 Auth 앱에 로그인 함수를 호출하여 로그인
세션을 생성합니다.
자동 로그인 수행 여부는 PostResetLogin 플래그를 통해서 결정하겠습니다.
이 플래그는 이후 패스워드 리셋 컨펌 뷰, 클래스 기반 뷰에서 지원하는 속성입니다.
이 플래그를 참으로 설정하신 후에 비밀번호를 재설정해 보시면요.
입력한 대로 암호가 변경되고 자동 로그인까지 수행됩니다.
사용자가 이메일 링크를 클릭하고 나서 주소가 노출되거나, 브라우저의 히스토리에 남는다면
누군가가 재설정 링크를 재사용해서 비밀번호를 변경할 수 있습니다.
Auth 앱의 패스워드 리셋 컨펌 뷰 구현에서는 암호 재설정 페이지에 접속하면 토큰을
세션에 저장하고 토큰이 제거된 URL로 이동시켜 암호 재설정 URL 노출을 최소화합니다.
암호 재설정 URL 노출을 최소화하는 구현을 패스워드 리셋 컨펌 함수 기반 뷰에 적용해
보겠습니다. 암호 재설정 링크를 처음 방문한 경우에는 토큰의 유효성 검사를 검사하고
유효하다면 세션에 토큰을 저장하고 요청 URL에서 토큰 문자열을 set-password로
변경하고 변경된 주소로 페이지 이동을 시킵니다
그럼 다시 패스워드 리셋 컨펌 뷰가 호출이 되겠죠
세션에 저장된 토큰을 다시 꺼내어 토큰에 대한 유효성 검사를 다시 수행하고 암호 재설정을
하고 나서 세션에서 해당 토큰을 삭제합니다 암호 재설정을 요청해서 유효한 암호 재설정
링크를 하나 준비해 주세요.
토큰 값을 확인하여 암호 재설정 링크의 첫 방문 여부를 확인합니다.
첫 방문일 때에는 세션에 토큰을 저장하고 페이지를 이동시킬 것이고요.
세션에 토큰이 저장되어 있는 상황에서는 세션에서 토큰 값을 꺼내어 기존 암호 재설정 과정을
수행할 것입니다.
암호 재설정 링크 첫 방문에서는 토큰의 유효성을 검사하고요.
토큰이 유효하지 않다면 템플릿에 Valid Link 거짓값을 넘겨 오류 메시지로
응답합니다. 토큰이 유효한 경우에는 이미 키로 세션에 토큰을 저장하고요.
URL에서 토큰을 제거하고, 뷰 호출 시에 토큰의 Set Password 문자열이 담기도록
URL을 생성해서 해당 URL로 페이지 이동시킵니다.
그럼 패스워드 리셋 컨펌 뷰가 다시 호출이 될 테고요.
토큰에는 새 패스워드 문자열이 저장되어 있겠죠.
세션에서 토큰 값을 꺼내고요.
기존 암호 재설정 과정을 그대로 수행합니다.
그리고 암호 변경 후에 세션에서 토큰도 삭제합니다.
그럼 구현 끝이고요.
페이지 이동을 확인해 봅시다.
암호 재설정 페이지로 접속해 보시면 주소의 토큰 부분이 새 패스워드로 자동 변경되었죠.
세션에 토큰이 저장되고 페이지 이동한 겁니다.
앞서 구현한 패스워드 리셋 컨펌 뷰를 이렇게 오셉의 패스워드 리셋 컨펌 뷰 클래스 기반
뷰를 통해 구현해 봅니다
패스워드 리셋 로그인 설정은 디폴트로 거짓이고요 참으로 설정하면 암호 재설정 후에 자동으로
로그인 처리됩니다
서세스 URL 디폴트 설정으로 암호 재설정 완료 페이지로 이동을 하는데요 이렇게
로그인 페이지로 전환토록 하고 성공 메시지를 남기도록 해 볼 수 있겠습니다
폼밸리드 메서드에서는 변경된 암호를 데이터베이스에 저장하고 세션에서 토큰을 삭제하고 포스트
리셀 로그인 설정이 참이라면 자동 로그인 처리하고 서세스 URL로의 페이지 이동 응답을
생성합니다. 패스워드 재설정을 요청해서 유효한 패스워드 재설정 링크를 하나 준비해 주세요.
패스워드 리셀 컨펌 뷰 코드는 주석 처리해 주시고 패스워드 리셀 컨펌 뷰 클래스 기반 뷰로
대체해 보겠습니다.
별도 커스텀 없이도 암호 재설정 페이지가 동작하고요.
주소의 토큰 부분도 Set Password로 변경되어 있습니다.
Password Reset Confirm 뷰에는 다양한 옵션들이 제공되고 있고요.
Form Class 속성으로 Set Password Form, Form Class가
지정되어 있고, 자동 로그인 여부인 Post Reset Login 설정은 디폴트
거짓이고요. 성공 URL 설정에는 Password Reset Conflict이 디폴트로
지정되어 있네요.
이 패턴명은 우리 프로젝트에서는 없는 URL 패턴명이니 이 Success URL 설정을
그대로 사용하면 URL 리버스 에러가 발생할 것입니다.
디폴트 템플릿은 registration의
passwordresetconfirm.html입니다. 디폴트 토큰 제너레이터도 디폴트 토큰
제너레이터이죠.
암호 재설정 후에 로그인 페이지로 이동을 시키고 암호 재설정 성공 메시지를 출력하실 수도
있고요. 혹은 암호 재설정 후에 자동 로그인이 되도록 포스트 리셋 로그인 설정을 참으로
지정하시고 이제 자동 로그인이 될 테니 성공 URL에는 로그인 후에 이동하는 세팅스의
로그인 리더렉트 URL 주소로 지정하실 수도 있겠습니다.
이제 암호 변경하시면 암호 변경이 되고 자동 로그인이 되고요.
그 후 프로필 페이지도 자동 이동까지 했죠.
현재 프로필 응답에는 장고 메세지를 노출하고 있진 않는데요.
메세지 노출이 되는 페이지에 방문하시면 이렇게 암호 재설정 성공 메세지를 확인하실 수
있습니다.