이번 시간에는 암호 변경을 구현해 보겠습니다.
암호 변경 절차를 간략히 살펴보겠습니다.
유저로부터 기존 암호를 입력 받고요.
변경할 암호를 암호 확인용으로 두 번 입력 받습니다.
유저 모델의 체크 패스워드 메서드를 통해 입력받은 암호가 데이터베이스에 저장되어 있는
암호와 일치하는지 먼저 검사하고요.
두 암호의 일치 여부를 확인한 뒤에 새 암호에 대한 유효성 검사를 수행합니다.
모든 유효성 검사가 끝나면 새 비밀번호 메서드를 통해 새 암호를 해싱하여 비밀번호 필드에
지정하고요.
데이터베이스에 저장합니다.
암호가 변경되었으니 세션에 저장된 인증 해시 값을 갱신합니다 암호가 변경되면 이 사용자의
인증 해시값도 변경되어 기존 세션에 저장된 인증 해시값과 새로운 인증 해시값이 일치하지
않게 됩니다 그러면 이 유저의 모든 세션들이 무효화되어 로그인 상태가 풀리게 됩니다
현재 암호를 변경하는 세션까지도 로그인 상태가 풀립니다
암호를 변경하는 세션은 무효화되지 않고 유지시키기 위해 암호를 변경하는 즉시 세션에 저장된
해시값을 갱신하도록 하겠습니다.
이 유저의 다른 세션들은 무효화되어 로그인 상태가 풀립니다.
앞서 살펴본 절차를 직접 구현해보겠습니다.
OAuth 앱에서는 패스워드 체인지 폼과 패스워드 체인지 뷰를 통해서 암호 변경을
지원하는데요. 핵심 기능만 뽑아서 직접 구현해보며 암호 변경에 대한 이해도를
높여보겠습니다.
패스워드 체인지 폼 클래스에서는 유저로부터 기존 암호, 그리고 새 암호를 2번 입력 받을
테니 패스워드 체인지 폼 클래스에는 캐릭터 필드와 폼 필드를 3개 추가합니다.
암호를 입력 받을 때에는 인풋 타입 패스워드 요소를 쓰시면 입력 받는 암호가 화면에
노출되지 않고 별이나 점으로 표시되는데요.
이는 패스워드 인풋 위젯입니다
캐릭터 필드 폼필드는 입력 값에서 자동으로 좌우 공백을 제거하는데요 입력 요소에서 입력
받은 그대로 입력 받기 위해 스트립 거짓 설정도 적용합니다 폼클래스 생성자에서는 포스트
데이터와 파일드 데이터를 인자로 받는데요 데이터베이스에 저장된 유저의 암호를 비교하려면
유저 모델 인스턴스가 필요하니까 유저 모델 인스턴스를 생성자 인자로 추가로 받고요 기존
암호에 대한 유효성 검사 함수에서 유저의 암호가 다르면 유효성 검사 에러를 발생시키고, 새
암호에 대한 유효성 검사 함수에서 두 암호가 같은지도 비교하고, 세팅스의
Auth.Validators 내역대로 암호 포맷에 대한 유효성 검사를 수행합니다.
save 메소드 호출 시에 UserModel 인스턴스의 패스워드 필드에 반영하고
Commit 인자에 따라 SaveMethod를 호출합니다.
패스워드 체인지 뷰에서는 Form 인스턴스 생성 시에 User 인자를 추가로 지정하고요.
UserModel 인스턴스에 변경된 암호를 반영하고 나서
UpdateSessionAuthHash 함수를 호출하여 세션에 저장된 인증 해시값을
갱신합니다. 암호 변경 폼과 뷰를 차근차근 구현해 보겠습니다.
일반 폼으로 패스워드 체인지 폼 클래스를 선언합니다.
암호 확인 용으로 폼필드를 하나 추가하고요.
새 암호는 일치 여부 확인을 위해 두 번 입력 받겠습니다.
암호 변경은 로그인 상황에서만 허용하겠기에 로그인 required 장식자도 붙여줍니다.
템플릿은 Admin 앱 내에
registration-password-change-form.html 템플릿을 사용하실
수도 있습니다.
간단한 폼 렌더링 확인을 위해 폼 인스턴스를 생성하고 템플릿에 전달해 줍니다.
URL 패턴에도 뷰를 등록해 줄게요.
이제 Accounts의 Password Change 페이지에 접속해 보시면 이렇게 암호
변경 폼이 뜹니다.
RegistrationPasswordChangeForm.html 템플릿은 어드민 스타일로
스타일링만 되어 있을 뿐이고요.
특별한 기능이 있는 것은 아닙니다.
전형적인 폼 템플릿으로 변경해 볼게요.
암호를 입력해 보면 글자를 입력한 대로 글자가 다 노출이 되네요.
위젯을 비밀번호 입력으로 변경해 주겠고요.
Strip 거짓 설정도 추가해서 입력 암호의 앞뒤 공백 제거도 수행되지 않도록 해줍니다.
유저의 기존 암호 확인을 구현하기 위해 CleanOldPassword 메서드를 구현해
줍니다. 그러려면 현재 요청 유저의 유저 인스턴스가 필요하죠.
생성자를 통해 추가 인자로 전달받도록 하겠습니다.
전달받은 유저 인스턴스를 유저 멤버 변수로 저장하고요.
체크 패스워드 메서드를 통해 암호가 같은지 비교를 해보고, 다르다면 기존 암호와 일치하지
않습니다라는 밸리데이션 예외를 발생시킵니다.
뷰에서 폼 인스턴스 생성 시에 현재 요청의 유저 인스턴스를 넘겨주고요.
get 요청과 post 요청을 분기해서 form을 처리하는 전형적인 뷰 구현을 해줍니다.
비밀번호 변경 폼, 폼 클래스는 모델 폼이 아니니까 세이브 메서드가 없어요.
모델 폼과 동일한 인자로 세이브 메서드를 구현해 줍니다.
아직 새로운 암호들에 대한 일치 여부는 검사를 안 했지만 암호가 일치하고 암호 포맷도
적합하다고 치고요.
새 암호를 가져와서 해싱된 값을 패스워드 필드에 반영하고 커밋 인자에 따라 저장하고
반환합니다. 이제 새 암호에 대한 유효성 검사를 구현해 보겠습니다
두 암호 값을 가져와서 두 암호 값이 있고 두 암호 값이 다르면 새로운 두 암호가 일치하지
않습니다 라는 Validation Error 예외를 발생시키고요 이제 암호 포맷을 검증을
해야 할 텐데, 검증할 암호와 관련 유저 모델 인스턴스까지 이렇게 있죠?
validate 패스워드 함수를 호출하여 암호 포맷에 대한 유효성 검사를 수행해 줍니다.
그럼 비밀번호 변경 폼, 폼 클래스 구현이 완벽하게 끝났습니다.
뷰에서는 변경된 암호를 저장하고 나서 이어서 즉시 updateSessionAuthHash
함수를 호출해야만 바뀐 암호에 맞춰 현재 세션의 인증 해시값이 변경되어 현재 세션이
무효화되지 않고 유지됩니다.
updateSessionAuthHash 함수를 호출하지 않고 암호를 변경해 볼게요.
그러면 이렇게 암호 변경 후에 프로필 페이지로 이동했지만 세션이 무효화되어 로그인이
풀려버렸습니다
업데이트 세션 auth hash 함수 호출을 적용해 주시고 나서 다시 암호 변경을 해
보시면요 암호 변경 후에도 세션이 무효화되지 않고 유지됨을 확인하실 수 있습니다.
이 유저의 다른 세션들은 모두 무효화되어 재로그인이 필요합니다.
이번에는 Auth 앱의 패스워드 체인지 폼과 패스워드 체인지 뷰를 적극 활용해서 암호
변경을 구현해보겠습니다.
기본 구현만으로 충분히 잘 동작하는데요.
암호 변경 후에 이동할 주소를 Success URL의 속성으로 지정해 주고요.
암호 변경 메시지를 남겨주기 위해 폰밸리드 메서드를 재정의하여 메시지를 추가합니다.
Auth 앱의 패스워드 체인지 폰과 패스워드 체인지 뷰를 적극 활용하여 암호 변경 기능을
구현해 보겠습니다.
소스코드 상단에 먼저 두 클래스를 임포트해 주겠고요 우리가 구현한 패스워드 체인지 폼
클래스와 이름이 같으니 우리가 구현한 폼 클래스는 주석 처리해 주겠습니다
Auth 앱에 패스워드 체인지 폼 클래스의 이름을 장고 패스워드 체인지 폼 이름으로
임포트해 주셔도 좋습니다
현재 패스워드 체인지 폼은 Auth 앱의 폼 클래스이죠 구현을 보시면
SetPasswordForm 클래스를 상속받았네요
SetPasswordForm 클래스는 폼 클래스를 상속받았고요 뒤에서 암호 재설정을
처리하는 폼 클래스로도 사용됩니다
새 암호를 입력받을 newPath1, newPath2 폰필드가 정의되어 있고요.
새 암호의 일치 여부 및 암호 포맷을 검사하는 유효성 검사가 등록되어 있고, save
메서드를 통해 변경된 암호를 저장하는 기능도 구현되어 있습니다.
패스워드 체인지 폼 클래스는 기존 암호를 입력받는 폼필드가 추가되어 있고요.
기존 암호가 유저의 암호와 일치하는지 검사하는 유효성 검사 함수가 구현되어 있습니다.
이 패스워드 체인지 폼 클래스를 우리가 구현한 패스워드 체인지 뷰에 적용하셔도 잘
동작합니다.
패스워드 체인지 뷰 코드를 주석 처리하시고 패스워드 체인지 뷰 클래스를 활용해 보겠습니다.
PasswordChangeView 클래스 구현을 보시면 Form 클래스 기본 설정으로
PasswordChangeForm, Form 클래스가 지정되어 있네요.
기본 설정 그대로 쓰시면 되겠고요.
Success URL 기본 설정으로 암호 변경 완료 페이지가 등록되어 있는데요.
이 페이지는 OAuth 앱 내에 구현되어 있지만 우리 프로젝트의 URL 패턴에는 등록을 안
했어요. 그래서 기본 설정 그대로 두시면 URL 리버스에 실패합니다.
암호 변경 후에 프로필 페이지로 이동하도록 설정해 주겠습니다.
템플릿 네임 기본 설정은 Admin 앱 내에 템플릿이 지정되어 있는데요.
우리가 만든 템플릿으로 변경해 주겠습니다.
암호 변경 페이지를 방문하시어 암호 변경해 보시면 암호 변경 후에 프로필 페이지로 잘
이동하고요. 세션이 무효화되지 않고 잘 유지됨을 확인하실 수 있습니다.
폰벨리드 메서드 내에서 인증 세션을 새롭게 생성해 주고 있습니다.