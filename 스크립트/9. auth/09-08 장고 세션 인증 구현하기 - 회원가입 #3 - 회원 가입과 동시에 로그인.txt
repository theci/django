회원가입과 로그인은 별도 페이지를 통해서 구현하는데요.
회원가입과 동시에 로그인을 하려면 어떻게 해야 할까요?
Auth 앱의 로그인 뷰 구현을 보시면, 유저명 암호에 대한 유효성 검사에 성공하면,
Auth 앱의 로그인 함수를 호출하여 인증 세션을 생성하고 있습니다.
회원가입이 완료된 후에는 유저명 암호에 대한 유효성 검사는 필요 없을 테고요
바로 Auth 앱의 로그인 함수를 호출하여 인증 세션을 생성하시면 됩니다
첫 번째 인자로 리퀘스트 요청 객체를 전달하고요 두 번째 인자로 인증 세션을 생성할 유저
모델 인스턴스를 지정하시면 됩니다
Auth 앱의 로그인 뷰에서는 Auth 앱의 로그인 함수를 통해 로그인 처리를 하고 성공 URL로
이동합니다. 사인업 뷰에서도 유저 레코드를 생성한 뒤에 로그인 페이지로 이동을 시키지 않고
Auth 앱의 로그인 함수를 호출하여 회원가입과 동시에 자동 로그인 처리를 하실 수 있습니다.
form.save 메서드를 호출하여 생성된 유저 레코드의 유저 인스턴스를 반환 받고요.
Auth 앱의 로그인 함수의 두 번째 인자로 해당 유저 인스턴스를 넘겨주면 로그인 처리
완료입니다.
로그인을 했으니 로그인 페이지로 이동을 시킬 필요는 없겠죠?
settings에 로그인 redirect URL 주소로 이동하도록 해줍니다.
이제 새로운 유저명으로 회원가입을 해보시면 회원가입과 동시에 자동으로 로그인 처리가 되고
포필 페이지로 자동 이동됩니다.
이번에는 클래스 기반 퓨로 회원가입을 구현해 보겠습니다.
회원가입은 새로운 유저 모델 레코드를 생성하는 것이죠.
그러니 CreateView 클래스를 활용하실 수 있겠습니다.
폼클래스 속성으로 SignUpForm 폼클래스를 지정하고 템플릿 네임 속성으로 템플릿
경로를 지정하고요.
Success URL 속성으로 회원 가입 후에 이동할 주소를 지정합니다.
그리고 자동 로그인 처리를 위해 폼밸리드 메서드를 재정의하고요.
부모의 폼밸리드 메서드를 호출하면 새로운 유저 레코드를 생성하고, 오브젝트 멤버 변수로
유저 인스턴스를 저장하죠.
그리고 성공 URL로 이동하는 HTTP 리스펀스 응답 객체를 반환합니다.
부모의 FormValid 메서드 구현에서 Object 멤버 변수로 User 인스턴스를
저장했지만 모델 폼의 Save 메서드에서 Instance 멤버 변수로 먼저 User
인스턴스를 저장하거든요.
그러니 Object 멤버 변수와 Instance 멤버 변수는 같은 User 인스턴스를
가리키고 있습니다.
Auth 앱에 로그인 함수 호출 시에 첫 번째 인자로 리퀘스트 객체를 지정하고 두 번째
인자로 방금 생성한 사용자 인스턴스를 지정합니다.
사인업 함수를 생성해 주고요.
회원가입 동작을 확인해 보시면 회원가입 후에 로그인까지 잘 처리가 됩니다.