암호 재설정을 요청하는 뷰와 폼 클래스를 직접 구현해 보겠습니다.
패스워드 리셋 폼 클래스에서는 이메일 폼 필드 하나만 두고요.
이는 이메일 포맷에 대한 유효성 검사만 수행할 뿐 시스템에서 해당 이메일의 존재 유무를
확인하지는 않습니다.
입력받은 이메일이 시스템에는 없는 이메일이라면 재설정 이메일 발송을 못할 뿐 이메일 존재
유무를 알려주진 않을 겁니다.
왜냐하면 시스템이 이메일 주소의 존재 유무에 대한 정보를 제공한다면 악의적인 사용자가 이
기능을 이용해 대량의 이메일 주소를 검증하고 어떤 이메일 주소가 시스템에 등록되어 있는지를
파악할 수 있기 때문입니다.
이는 사용자의 개인정보 보호에 심각한 위협이 될 수 있습니다.
이메일 주소를 입력받으면 유효성 검사를 통과할 테고요.
save method 호출 시에 입력받은 이메일 주소 유저에 대한 암호 재설정 링크를
생성하고 이메일을 발송합니다.
새로운 ARM 모드 입력받아 ARM 모드 변경하는 패스워드 리셋 컨펌 뷰는 뒤에서
구현하겠습니다 현재 패스워드 리셋 폼 구현에서는 실질적인 이메일은 발송하지 않고요 개발
서버 콘솔에 재설정 링크만 출력하도록 하겠습니다
패스워드 리셋 폼을 통해 이메일을 입력받아 이메일에 매칭되는 유저를 찾고요.
save 메서드 호출 시에 암호 재설정 링크를 생성하여 출력도록 해보겠습니다.
이메일 입력을 위해 이메일 필드, 폼 필드를 하나 추가합니다.
getUsers 메서드와 makeUIDB64&token 메서드는 앞서 실습을 했었으니
그대로 복사하겠고요.
입력된 이메일에 대한 유효성 검사는 이메일 포맷에 대한 검사만 수행하고요.
유저 데이터베이스 테이블에서의 이메일 존재 유무에 대해서는 체크하지 않습니다
데이터베이스에 없다면 이메일 발송을 할 수 없을 뿐인 거죠
암호 재설정 링크는 패스워드 리셋 컨펌 뷰를 통해서 구현하겠고요 UIDB64 인자와 토큰
인자를 받도록 뷰와 URL 패턴도 구성합니다
이 뷰는 인자만 구성하고 구현은 뒤에서 다루겠습니다
패스워드 리셋 폼 클래스를 복사해서 Accounts에 forms.py 파일에 추가해
주겠습니다 토큰 제너레이터는 django.contrib.auth.tokens에
DefaultTokenGenerator를 임포트해서 적용하겠습니다
이제 폼 구현은 끝났고요 패스워드 리셋 뷰는 폼을 처리하는 전형적인 뷰 패턴으로 구현합니다
URL 패턴에도 추가하고요.
암호 재설정을 수행하는 패스워드 리셋 컨펌 뷰도 일단 인자 구성만 구현해 줍니다.
재설정 링크 생성 시에 URL 리버스를 할 때 필요합니다.
Accounts의 패스워드 리셋 페이지를 방문하시면 이렇게 암호 재설정 요청 페이지가
뜨죠? 뷰 구현에서는 Post 구현이 없어서 아직 동작하진 않습니다.
Post 요청을 처리하는 뷰 구현을 해주고요.
패스워드 리셋 폼 클래스의 save 메서드 구현에서는 request 인자를 추가로 받죠.
request 요청 객체를 통해 재설정 링크 생성 시에 현 요청의 http 스킴과
호스트명을 알아내어 재설정 링크 문자열을 완성합니다.
암호 재설정 요청 성공 메시지도 추가해 주고요.
이 여러 줄의 문자열이 튜플 같아 보이지만 각 줄 끝에 콤마가 없어요.
하나의 긴 문자열을 여러 줄에 나눠 정의할 수 있는 파이썬 문법입니다.
다시 암호 재설정 요청 페이지로 이동을 시키겠습니다.
암호 재설정 요청 페이지에서 시스템에 없는 이메일 주소를 입력해 보면 성공 메시지에는
비밀번호 재설정 메일을 발송했다고는 하지만 실제 재설정 링크를 생성하진 않았습니다.
runserver 개발 서버 로그를 보시면 이렇게 암호 재설정 요청 페이지에서 포스트 방식으로 요청을
받았지만 암호 재설정 관련해서 출력되는 내용이 없죠.
이제 시스템에 있는 이메일 주소를 입력하시면 이렇게 암호 재설정 링크가 생성됨을 확인하실
수 있습니다. 해당 링크로 유저가 접속하면 각 문자열이 UIDB64 인자와 토큰 인자에
각각 담겨 패스워드 리셋 컨펌 뷰가 호출되어 암호 재설정 과정을 진행할 것입니다.