이번 시간에는 암호 재설정 요청을 구현해 보겠습니다 유저가 암호를 잃어버렸을 경우 암호 재설정 페이지를 통해 암호를 재설정할 수 있도록 합니다 
유저가 재설정을 요구하는 이메일 주소를 입력하면 만약 그 이메일 주소가 시스템에 등록되지 않은 이메일 주소라면 그냥 무시하고요 
시스템에 등록된 이메일 주소라면 그 메일 주소로 암호 재설정 링크를 발송합니다
그럼 유저는 그 이메일 서비스에 로그인해서 암호 재설정 이메일을 확인하겠죠.
이는 해당 이메일 서비스가 안전하다는 것을 믿는 겁니다.
해당 링크의 만료 시간 내에 유저가 그 링크로 접속하면 해당 링크 접속만으로 암호 재설정 권한이 있음을 인정받습니다.
암호 재설정 링크 발생 이후에 로그인을 하거나 암호나 이메일을 변경할 경우 해당 링크는 무효화되어 사용할 수 없게 됩니다.
그 이유는 이어서 설명하는 해싱된 문자열에 있습니다.
재설정 링크는 3개의 영역으로 구분됩니다.
첫 번째 영역은 암호 재설정을 요청한 유저의 기본키를 Base64 인코딩으로 인코딩한 문자열이고요.
Base64 디코딩만으로 손쉽게 유저의 기본키를 알 수 있습니다.
두 번째 영역은 암호 재설정을 생성한 시각을 2001년 1월 1일 0시 0분 0초로부터의 초시간을 36진수로 표현한 문자열입니다.
이 값으로 링크의 만료 시간 여부를 판단할 수 있습니다.
암호 재설정 링크의 만료 시간은 Settings의 Password Reset Timeout 설정을 따르며, 디폴트로 259,200초로서 3일입니다.
세 번째 영역인 해싱된 문자열에서는 유저의 기본 키를 비롯하여 암호 재설정 요청 시각 및 유저 암호, 마지막 로그인 시각, 이메일 주소 문자열을 모두 이어 해싱하여 문자열을 생성합니다. 
암호 재설정 링크의 구조는 파악하고 있는 악의적인 유저가 첫 번째 영역인 유저 기본키나 두 번째 영역인 암호 재설정 시각을 변경하더라도 해싱 문자열까지 변경된 값에 맞춰 재생성하는 것은 불가능합니다.
기본 해싱 알고리즘으로 SHA256이 사용되고요.
암호 재설정 뷰의 토큰 제너레이터 옵션을 변경하여 파이썬의 Hashlib 모듈에서 지원하는 다른 해싱 알고리즘으로 변경하실 수도 있습니다.
비밀키는 디폴트로 settings의 시크릿 키 설정이 사용되고요.
암호 재설정 뷰에서 토큰 제너레이터의 시크릿 속성을 변경하여 암호 재설정을 위한 비밀키를 변경하실 수도 있습니다.
암호 재설정 링크를 생성하는 핵심 로직을 살펴보겠습니다.
먼저 getUsers 함수는 인자의 이메일을 가지는 로그인 가능한 유저 중에서 암호 매칭이 가능한 암호를 가진 유저 목록을 반환합니다.
유저 모델의 setPassword 메서드에서는 암호 인자로 non을 지정하면 암호 매칭이 불가능한 암호로 패스워드 필드에 지정합니다.
로그인이 불가능한 암호는 구글 인증, 네이버 인증, Kakao 인증 등을 사용할 때 구글, 네이버, 카카오 등을 통해서만 인증을 수행하고 암호를 통한 인증을 막을 때 사용합니다.
makeuid64endToken 함수는 getUsers 함수를 활용하여 인자 이메일의 유저들을 찾은 후에 암호 재설정 링크에 사용되는 유저 기본 키에 대한 base64 인코딩 문자열과 토큰 제너레이터의 makeToken 메서드를 통해 토큰 문자열을 생성합니다.
Auth 앱의 Default Generator는 패스워드
ResetTokenGenerator 클래스의 인스턴스입니다.
MakeToken 메서드를 호출하면 내부에서 현재 시각의 타임스탬프를 생성하고 인자의 User 인스턴스에서 기본키, 패스워드 필드, LastLogin 필드, 이메일 필드, 문자열을 모두 더하고 
settings의 시크릿키, 비밀키를 사용하여 SHA-256 해싱 알고리즘으로 해싱 문자열을 생성합니다.
하이픈을 구분자로 해서 현재 타임스탬프의 36진수 문자열과 해식 문자열을 연결하여 토큰으로서 반환합니다.
이제 이 두 함수를 활용해 볼 텐데요.
암호 재설정을 요청하는 이메일 주소를 입력받았다고 가정해 보겠습니다.
그럼 make_uidb64_token 메서드를 통해 암호 재설정 링크 생성을 위한 uidb64 토큰 문자열을 생성하고요.
지정 이메일의 유저가 로그인 가능하며 암호 매칭이 가능한 암호를 가진 유저의 경우 그 이메일 주소로 암호 재설정 링크가 담긴 이메일을 발송합니다.
프로필 수정 기능에서 저는 이메일 주소를 me-pyhub.kr 주소로 입력해 뒀고요.
Django Shell을 통해 암호 재설정 링크 생성 코드를 실습해 보겠습니다.
슬라이드 하단에 안내된 링크 페이지에 실습 소스 코드가 있고요.
상단 import 코드와 getUsers 함수 코드는 복사해서 shell에서 실행해주겠습니다.
getUsers 함수에서는 yield가 사용되었기 때문에 getUsers는 generator 함수가 됩니다.
getUsers 함수를 호출하면 반환 값이 generator 객체가 되죠.
아직 함수가 수행되진 않았고요.
수행할 준비만 하고 있습니다.
next를 통해 값 하나를 생성해 봅니다.
미 골뱅이 fireboot.com 이메일 주소를 가지는 유저 인스턴스가 반환되었어요.
한 번 더 넥스트 해 보시면, 미 골뱅이 fireboot.com 이메일 주소를 가지는 유저가 이제 없기 때문에 Stop Iteration 예외가 발생합니다.
미@pyup.kr pyup.kr 이메일 주소를 가지는 유저 인스턴스를 유저 변수에 저장합니다.
urlsafe base64 인코드 함수를 통해 유저의 기본키를 base64 문자열로 변환을 하면 문자열 mg가 되네요.
이 mg 문자열을 base64 디코딩을 하면 다시 기본키인 2가 됩니다.
토큰 제너레이터는 Django에서 디폴트로 패스워드 리셋 토큰 제너레이터 클래스의 인스턴스가 지정되어 있습니다.
알고리즘 속성 값은 디폴트로 SHA256이고요.
비밀키는 디폴트로 settings에 시크릿키 설정을 따르고 있습니다.
다른 옵션에 토큰 제너레이터가 필요하시다면 패스워드 리셋 토큰 제너레이터 클래스를 상속받아 커스텀하실 수도 있고요.
토큰 제너레이터의 속성 값을 변경하실 수도 있습니다.
토큰 제너레이터의 makeToken 메서드를 유저 인스턴스를 인자로 호출하면 현재
타임스탬프와 유저의 기본 키, 패스워드, 라스트 로그인, 이메일 필드 값을 기반으로 해싱된 문자열을 하이픈을 구분자로 한 문자열이 이렇게 생성됩니다
타임스탬프는 초단위로 생성되거든요
호출할 때마다 이렇게 타임스탬프 값이 변경이 되죠
빠르게 1초에 몇 번 반복해서 토큰을 생성해 보시면 같은 타임스탬프 값을 가지게 되고 같은 유저 인스턴스에 같은 속성 값이니 같은 토큰 값이 생성됨을 확인하실 수 있습니다.
make_uidb64_token 함수를 복사해서 정의해 주겠고요.
암호 재설정 링크를 생성할 이메일 주소를 이메일 변수에 저장하시고 코드를 복사해서 수행해 주시면 이렇게 이메일 주소에 매칭되는 유저가 있다면 찾아서 재설정 링크를 생성하고
출력됩니다. 재설정 링크의 만료 시간은 디폴트로 72시간, 즉 3일입니다.
이메일에 매칭되는 유저가 없다면 이 반복문에서는 암호 재설정 링크 생성 없이 종료됩니다.




이번 시간에서는 암호 재설정 요청 기능을 구현하는 방법에 대해 설명합니다. 이 기능은 유저가 암호를 잃어버렸을 때 암호를 재설정할 수 있는 절차입니다.

암호 재설정 요청 절차
유저의 이메일 주소 입력: 유저가 암호를 재설정하고자 할 때, 이메일 주소를 입력합니다.

입력된 이메일 주소가 시스템에 등록되지 않으면 아무 일도 일어나지 않습니다.
등록된 이메일 주소라면 암호 재설정 링크가 해당 이메일로 발송됩니다.
이메일을 통한 암호 재설정 링크 발송: 유저는 이메일을 통해 암호 재설정 링크를 받습니다. 이 링크는 암호 재설정 권한을 부여하며, 해당 링크가 만료되기 전에 접속해야 합니다. 링크는 다음 3개의 주요 부분으로 구성됩니다:

유저 기본키: Base64로 인코딩된 유저의 기본키.
타임스탬프: 암호 재설정 요청 시각을 36진수로 표현한 문자열. 이 값은 링크의 만료 여부를 판단하는 데 사용됩니다.
해싱된 문자열: 유저의 기본키, 암호 재설정 요청 시각, 이메일 주소 등 여러 정보를 해싱한 값. 이 해싱 값은 SHA-256 알고리즘으로 생성되며, 악의적인 사용자가 링크의 값을 수정할 수 없도록 보호합니다.
링크 만료 및 보안: 암호 재설정 링크는 기본적으로 3일(259,200초) 동안 유효합니다. 만약 사용자가 암호를 변경하거나 로그인 시 해당 링크는 무효화됩니다.

핵심 로직
getUsers 함수:
입력받은 이메일에 해당하는 유저 목록을 반환합니다. 로그인 가능한 유저만 포함됩니다.

make_uidb64_token 함수:
이메일 주소를 기반으로 유저를 찾고, 유저의 기본키를 Base64로 인코딩하여 암호 재설정 링크에 사용되는 토큰을 생성합니다.
생성된 토큰은 타임스탬프와 함께 해싱된 값을 포함하고 있어, 악의적인 사용자가 변경할 수 없도록 보호합니다.

암호 재설정 링크 생성:
make_uidb64_token 함수를 활용하여 암호 재설정 링크를 생성하고, 해당 이메일로 링크를 발송합니다.
이메일에 매칭되는 유저가 존재하면 재설정 링크를 생성하고 출력됩니다.
이 링크는 만료 시간(기본 3일) 내에만 유효하며, 사용자가 암호를 재설정할 수 있게 합니다.

예시 코드
유저 이메일에 맞는 유저 인스턴스를 찾고, 해당 유저의 기본키를 Base64로 인코딩하여 암호 재설정 링크를 생성합니다.
make_uidb64_token 함수에서 이메일로 유저를 찾아 토큰을 생성하고 링크를 발송하는 부분을 구현합니다.


결론
이 기능은 유저가 암호를 잃어버렸을 때, 이메일을 통해 암호 재설정 링크를 안전하게 발송하고, 해당 링크가 유효한 기간 내에만 암호를 재설정할 수 있도록 하는 절차입니다. 
이 과정에서 중요한 점은 암호 재설정 링크의 보안을 보장하는 해싱 알고리즘(SHA-256)과 만료 시간을 설정하는 것입니다.