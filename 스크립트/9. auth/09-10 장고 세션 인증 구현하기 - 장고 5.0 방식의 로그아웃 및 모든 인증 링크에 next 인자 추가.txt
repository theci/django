Auth 앱의 로그아웃 뷰의 핵심 노직을 함수 기반 뷰로 구현해 보겠습니다.
로그아웃 뷰는 장고 4.2부터 포스트 요청만을 지원하고요.
포스트 외의 요청은 거부합니다.
웹 표준에 의하면 GET 요청은 서버에 어떠한 변경도 일으키지 않아야 합니다.
하지만 로그아웃과 같은 상태 변경 작업에서 GET 요청을 허용하게 되면 사용자가 악의적인 다른 링크를 클릭하는 것만으로도 로그아웃이 되는 부작용이 발생할 수 있습니다.
Post 요청은 사용자의 명시적인 동의를 통해서만 발생을 하죠.
실질적인 로그아웃 처리는 Auth 앱의 Logout 함수를 통해서 처리하는데요.
이 함수를 호출하면 사용자의 세션을 제거하고요.
현 Request 요청 객체의 유저 속성을 AnonymousUser 클래스의 인스턴스로 변경합니다.
로그아웃이 되면 Post 데이터와 Get 데이터에서 이동할 주소를 찾는데요.
이동할 주소가 없다면 registration.loggedout.html 템플릿 응답을 합니다 
이 템플릿 파일은 Admin 앱 내에 있습니다
그래서 이렇게 Admin Style로 보여지는데요
유저에게 Admin Style의 웹 페이지를 보여주는 건 좀 그렇잖아요
그러니 registration.loggedout.html 경로에 새로운 템플릿 파일을 생성하셔서 다른 템플릿으로 응답하시거나 템플릿 네임 설정을 변경하셔서 다른 템플릿 파일로
응답하시거나 혹은 next 인자를 지정하시면 최소한 템플릿 응답은 없고요.
포스트와 GetData에서 next 인자가 없을 경우 next 페이지에 지정한 주소로 이동을 합니다.
next 페이지 인자에 대해서는 자동으로 URL 리버스가 수행되니 따로 URL 리버스를 수행하실 필요는 없습니다.
Logout 함수 기반 뷰를 통해 Logout을 구현해 보겠습니다.
Logout 뷰가 호출되면 Auth 앱에 Logout 함수를 호출하겠고요.
로그아웃 함수 구현을 보시면 현재 세션을 제거, 플러시하고 요청 객체의 유저 속성을 모델 인스턴스가 아닌 AnonymousUser, Python 클래스의 인스턴스로 변경합니다.
이제 로그아웃 처리가 끝났으니 다른 주소도 이동을 해야겠죠.
1순위로 GetData에서 Next 인자의 주소가 있다면 이동하구요.
2순위도 Settings에 LogoutDirectURL 설정에 값이 있다면 이동을 할 텐데 default로 None이기 때문에 코드에는 쓰지 않았습니다.
3순위도 RegistrationLogout.html 템플릿을 통해 로그아웃 되었음을 응답으로 보여주겠습니다.
url.hasAllowed.post&scheme 함수를 호출하여 Next URL 주소가 안전한지 확인을 하고요.
안전할 때에만 해당 주소로 이동 응답을 합니다.
URL 패턴에도 추가해 주고요.
웹브라우저에서 Next 인자 없이 Accounts의 로그아웃 페이지에 방문하시면 로그아웃 처리가 되어 세션이 삭제되었고요.
이렇게 템플릿을 통한 응답을 받게 됩니다.
이 템플릿 파일은 어드민 앱 안에 있기에 어드민 스타일로 스타일링 되어 있습니다.
앞서 언급했다시피 로그아웃 링크는 태그를 사용하여 만드시면 GET 요청을 하므로 장고 5.0부터는 지원되지 않습니다.
폼태그를 활용해서 포스트 요청으로 전달되도록 구성해 주셔야 하고요.
버튼이지만 부트스트랩5 등의 CSS 프레임워크를 적용하시면 다른 링크와 손쉽게 스타일을 맞추실 수 있습니다.
이번에는 GET 요청을 하는 로그아웃 링크를 핫트랙 앱의 인덱스 페이지 상단에 추가해 보겠습니다. 
컨택트 항목을 계정 항목으로 변경하겠고요.
장고 템플릿에서는 컨텍스트 프로세서로 현재 요청 유저인 유저 인스턴스가 제공되니까 유저 인스턴스의 isAuthenticated 속성을 통해 현재 요청 유저의 인증 여부를 확인하실 수 있습니다
로그아웃 상황에서는 로그인 링크와 회원가입 링크를 보여주고요 로그인 상황에서는 프로필 링크와 로그아웃 링크를 보여주겠습니다
웹브라우저 새로 고침하시고 로그인을 하시면 프로필 페이지로 자동 이동을 합니다.
로그아웃을 하시면 Registration Logged Out HTML 템플릿을 통해 로그아웃 완료 응답을 받죠.
로그아웃 이후에는 이렇게 로그인 페이지와 같은 이미 페이지로 이동하도록 해보실 수도 있겠습니다. 
로그인 뷰에서는 Next 인자를 지원하니까 로그인 후에 현재 페이지로 이동하도록 요청 객체의 패스 속성을 통해 로그인 링크에 현재 페이지 주소를 지정해주겠습니다 
그럼 로그인 링크를 클릭해 보시면 이렇게 현재 페이지 주소가 자동으로 Next 인자로 지정되어 있죠
쇼핑몰에서 로그인 없이 구경하다가 물건 구매를 위해 로그인을 했을 때 로그인을 하고 나서 현재 페이지로 이동을 하는 것이 자연스러울 것입니다. 
로그인을 했는데 쇼핑몰 첫 페이지나 엉뚱한 페이지로 이동을 해버린다면 사용자는 원래 보던 페이지를 다시 찾아야 하는 번거로움을 겪게 됩니다.
이는 사용자 경험 측면에서 매우 중요한 부분입니다.
회원가입 링크와 로그업 링크에도 Next 인자로 현재 페이지 주소를 지정하겠습니다.
웹페이지 새로고침하시고 로그아웃하시면 현재 페이지로 이동함을 확인하실 수 있습니다.
Django 4.2부터 Auth 앱의 로그아웃 뷰, 클래스 기반 뷰에서는 GET 요청을 통한 로그아웃 요청을 지원하지 않으니 로그아웃 함수 기반 뷰에서도 GET 요청 지원은 빼고 포스트 요청만 지원하도록 해보겠습니다.
Auth 앱의 로그아웃 뷰에 적용되는 세 가지 장식자도 로그아웃 뷰에 적용해 주겠습니다.
이제 포스트 데이터에서 Next 인자를 가져오겠고요.
로그아웃 링크는 GET 요청을 보내니까 제거하고요.
HTML 폼을 통해 포스트 요청을 보내도록 합니다.
로그아웃 버튼은 기본 스타일이 이렇게 버튼으로 보여지고 있죠.
이를 텍스트 링크로 보여지도록 부트스트랩 5 스타일인 Button 클래스, Button
Link 클래스, Text White 클래스, Padding 0 클래스를 지정해
주겠습니다. 그럼 다른 텍스트 링크와 동일한 스타일로 보여집니다.
Next 인자로 현재 페이지 주소를 지정해 줄 텐데요.
HTML 폼태그 내에서 유저 입력 없이 지정된 값으로 포스트 데이터로 Next 인자를
전송하기 위해 Input Type Hidden 요소를 사용합니다.
물론 post 요청에서도 요청 주소에 쿼리 스트링을 담을 수는 있죠
그러니 form 태그의 action 속성 끝에 next 인자를 지정하셔도 됩니다
그럼 logout 뷰에서 getData에 대해서도 next 인자를 찾도록 보강해 주셔야
하고요 auth 앱의 logout 뷰, 클래스 기반 뷰에서는 post 데이터와 get
데이터 모두에서 next 인자를 찾습니다
그럼 로그인 후에 다시 로그아웃을 해 보시면 이렇게 포스트 방식으로 로그아웃 요청이
전달되고 로그아웃 처리가 잘 되었음을 확인하실 수 있습니다.
이제 OAuth 앱의 로그아웃 뷰, 클래스 기반 뷰를 통해 로그아웃 뷰를 구현해
보겠습니다. 로그아웃 함수는 주석 처리해 주시고요
로그아웃 뷰 클래스의 기본 설정을 그대로 쓰고요 로그아웃 후에 이동할 디폴트 주소를
next-page 속성으로 지정하셔도 되고요 세팅스의
로그아웃 redirect URL 설정으로 지정하셔도 됩니다
로그아웃 뷰 클래스의 소스 코드를 보시면요 GET 요청을 처리할 때 Django 4.2부터
GET 요청을 지원하지 않을 것이라는 경고 코드도 있고 포스트 요청을 받으면 auth 앱에
logout 함수를 호출하여 session을 제거하고 request 요청 객체의 유저
속성도 anonymous user python class의 인스턴스로 변경하죠
그리고 get-success-url 메서드 호출을 통해 이동 주소를 계산합니다
LogoutView 클래스는 LoginView 클래스와 마찬가지로 RedirectURL
Mixing 클래스를 상속받았으니 이동 주소 1순위로 PostData의 Next 인자,
2순위로 GetData의 Next 인자를 찾습니다.
두 인자에 값이 없다면 getDefaultRedirectUrl 메서드를 호출하여 이동할
주소를 찾고요. 이 메서드 내에서 3순위로 next 페이지 속성을 확인하고 4순위로
settings에 logout.redirecturl 설정을 확인합니다.
default로 none이었죠.
마지막 5순위로 request 요청 객체의 path 속성을 통해 query string을
제외한 현재 페이지 주소를 반환합니다.
리퀘스트의 getFullPass 메서드의 반환값은 쿼리 스트링을 포함한 페이지 주소를
반환해요 현재 로그아웃 요청 주소에 쿼리 스트링이 있는 경우에는 쿼리 스트링이 없는 주소로
이동을 시키고요 현재 로그아웃 요청 주소에 쿼리 스트링이 없는 경우에는 get 메서드를
호출하여 템플릿 이름 속성에 지정한 템플릿을 통한 응답을 하도록 구현이 되어 있습니다




로그아웃 뷰 구현에 대해 설명한 내용을 정리하겠습니다:

1. 로그아웃 뷰의 기본 동작 (POST 요청만 허용):

Django 4.2부터 로그아웃은 POST 요청만을 허용합니다. 이는 웹 표준에 맞춰 사용자가 악의적인 링크 클릭만으로 로그아웃되는 것을 방지하기 위함입니다.
GET 요청으로 로그아웃을 처리하는 것은 보안상 문제를 일으킬 수 있기 때문에, 이를 막기 위해 POST 요청만 처리하도록 설정됩니다.

2. 로그아웃 처리:

로그아웃 처리 함수는 auth.logout()을 사용하여 사용자의 세션을 제거하고, 요청 객체의 user 속성을 AnonymousUser로 변경합니다.

로그아웃 후 이동할 URL은 여러 우선순위에 따라 결정됩니다:
1순위: POST 데이터에서 next 인자를 가져와 이동
2순위: GET 데이터에서 next 인자를 찾아 이동
3순위: 설정된 기본 템플릿 registration/loggedout.html을 반환하거나 사용자 지정 템플릿을 사용

3. 로그아웃 후 템플릿과 리다이렉션:

기본적으로 로그아웃 후에는 registration/loggedout.html 템플릿이 응답으로 표시됩니다. 이 템플릿은 어드민 스타일이므로, 이를 사용자 정의 템플릿으로 변경하거나 next URL을 이용해 이동할 수도 있습니다.
URL이 안전한지 확인하기 위해 url.has_allowed_scheme()을 사용하여 next URL을 검증합니다.

4. 로그아웃 링크 처리:

로그아웃은 POST 요청으로 처리되어야 하므로, 기존의 GET 요청 링크 대신 <form> 태그를 사용해 POST 요청을 보내는 방식으로 구현해야 합니다.
<form> 태그에서 next 인자를 숨겨서 전송할 수 있도록 하며, 버튼을 부트스트랩 스타일로 꾸며 사용자 경험을 향상시킵니다.

5. Django 템플릿에서 로그인/로그아웃 링크 관리:

로그인 상태에 따라 템플릿에서 로그인/회원가입 링크 또는 프로필/로그아웃 링크를 표시합니다. isAuthenticated 속성으로 사용자의 인증 상태를 확인하고 적절한 링크를 표시합니다.
로그인 후 자동으로 현재 페이지로 리다이렉트되도록 구현할 수 있으며, 이는 next 인자를 통해 구현됩니다.

6. 로그아웃 뷰 클래스 기반 구현:

클래스 기반 뷰에서는 LogoutView를 활용하여 로그아웃 후 리다이렉션을 관리합니다.
로그아웃 후 리다이렉션은 1순위: POST 데이터에서 next 인자, 2순위: GET 데이터에서 next 인자, 3순위: 설정된 기본 리다이렉션 URL을 순차적으로 확인합니다.
클래스 기반 뷰는 RedirectURLMixin을 상속하여 리다이렉션 URL을 쉽게 처리할 수 있습니다.

7. 중요한 코드 흐름:

로그아웃을 위한 POST 요청을 처리하면 세션을 제거하고, next 인자나 기본 설정된 리다이렉션 URL로 이동합니다.
이때 템플릿에 next URL을 포함시켜, 로그인/회원가입 후에 사용자가 원래의 페이지로 돌아갈 수 있도록 도와줍니다.

요약:

로그아웃은 보안상의 이유로 POST 요청만을 통해 처리되며, 여러 가지 방법으로 이동할 주소를 결정합니다.
next 인자를 활용하여 사용자가 로그아웃 후 원래 있던 페이지로 돌아갈 수 있게 하며, 템플릿을 통해 로그인 상태에 따라 다른 링크를 표시합니다.
클래스 기반 뷰를 활용한 로그아웃 처리에서 RedirectURLMixin을 통해 리다이렉션을 자동화할 수 있습니다.