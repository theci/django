이번 시간에는 맥 개발 환경 설치입니다.
설치할 패키지는 OS 패키지 매니저인 Homebrew를 통해서 설치를 하겠습니다.
터미널은 편하신 터미널을 사용하시면 되는데요.
맥의 기본 터미널을 사용하셔도 되겠고, 혹은 iTerm2을 설치해서 사용하셔도 되겠습니다.
쉘은 맥의 기본 쉘인 ZShell을 사용하겠고요.
파이썬은 pyenv를 활용해서 설치를 하겠습니다.
pyenv는 파이썬 버전 관리 매니저이고요.
pyenv를 활용해서 여러 가지 배포판에 파이썬을 손쉽게 설치하고 관리할 수 있습니다.
Node.js에서는 nvm을 활용하겠습니다.
nvm은 Node.js 버전 관리 매니저이겠고요.
pyenv와 역할이 유사합니다.
통합 개발 환경은 PyCharm Professional를 사용하겠습니다.
유료 IDE이고요.
1개월 체험 계정을 지원하며 저는 수강생 분들에게 6개월 라이센스 쿠폰을 지원해 드리고 있습니다.
PyCharm은 Django 지원이 가장 우수하고요.
다양한 플러그인을 지원합니다.
그리고 Visual Studio Code가 있습니다.
VS Code는 무료 편집기이고요.
PyCharm에 비해서는 Python Django 지원이 조금 약하지만 그래도 아주 쓸만한
편집기가 되겠습니다.
본 강의에서는 PyCharm과 VS Code 모두에 대해서 세팅법을 가이드해 드리겠습니다.
먼저 패키지 매니저인 홈블루가 되겠고요 홈블루를 통해서 다양한 개발 소프트웨어를 명령행에서
손쉽게 설치하실 수 있습니다
홈블루는 브라우저에서 blue.sh 주소로 들어가시면 상단에서 설치 스크립트를 확인하실 수
있어요 터미널에서 명령을 붙여놓고 실행을 하시면 됩니다 앞에 있는 달러는 입력하지 마시고
뒤에 있는 부분만 입력을 하시면 되겠습니다
그러면 홈블루가 설치가 되겠고요 패키지 설치는 Item2, PyCharm, VS Code,
PyMVM을 홈블루를 통해서 설치를 할 텐데요
이 웹페이지는 슬라이드 하단의 링크에서 확인을 하실 수 있습니다
이 중에 설치하고자 하시는 애플리케이션만 명령을 복사해서 실행을 해 주시면 되겠습니다
그러면 이 명령을 한번 수행해 볼게요
아무것도 설치가 되어 있지 않은 맥이 준비가 되어 있습니다
이중에 홈블루는 앞선 명령을 통해서 설치는 되어 있겠고요 그래서 blue 명령을 통해서
홈블루 동작을 확인하실 수 있겠습니다
여기에서 저는 이 패키지를 다 설치하겠습니다.
그래서 복사해서 이렇게 붙여놓고 실행을 하겠습니다.
그러면 명령 한 번에 이 필요한 패키지가 한 방에 모두 설치가 됩니다.
현재 아이템 2가 설치가 되고 있네요.
그래서 모두 설치가 이루어질 때까지 잠시 기다려 보겠습니다..
현재 nvm까지 모두 설치가 끝났습니다.
여기에서 nvm이 설치될 때 뒤에 추가도 수행해야 될 작업들을 안내를 해주고 있죠.
nvm 폴더가 홈 밑에 .nvm 폴더가 없으면 생성을 해주고 그리고 shell 설정 파일에
여기에 있는 명령들을 추가를 해달라고 합니다.
그러면 여러분들이 ls-a, 틸드, 물결이죠?
하시면 nvm 폴더가 있을 수도 있고 없을 수도 있어요
없으시면 mkdir, 틸드.nvm으로 만들어 주시면 되겠고요 그 다음에 앞선 그 명령을 세
줄을 복사하셔가지고 현재 이 ZShell 파일에다가 붙여넣기를 합니다.
저는 방금 VI 편집기로 열었는데요.
생소하신 분도 계실텐데 이때는 우리가 VS Code로도 이렇게 편집기를 명령행에서 여실 수
있습니다.
VSCode가 뜨죠?
그래서 여기에서 붙여넣고 그리고 Command-S를 통해서 이렇게 저장을 하실 수
있습니다. 그러면 z.zshrc 파일이 이렇게 만들어졌고요.
꼭 저장하셔야 돼요.
그리고 쉣을 새로 열면은 이제 앞서 설정한 .zsh 설정이 로딩된 터미널을 이렇게
확인하실 수 있습니다.
그래서 nvm 버전을 보시면 nvm도 나오죠.
이제 Pyenv 설정을 진행해 보겠습니다 추가로 Pyenv 관련해서 이 세 줄의 설정도
넣어 주겠습니다
앞선 스크립트에서 여기 Pyenv 설정도 있죠
그래서 이 부분도 아까 VS Code 여셨으면 붙여 놓고요 저장하시면 여기는 Pyenv
설정이 될 것이고요 여기는 MVM 설정이 될 것입니다 저장하시고요
그리고 이제 터미널을 다시 여십니다.
여시면은 pyenv 버전, nvm 버전을 통해서 pyenv와 nvm이 동작하고 있음을
확인을 하실 수 있습니다.
이번에는 pyenv를 활용해서 파이썬을 설치를 진행해 보겠습니다.
pyenv 명령에서 install ==list 명령을 해보시면 설치 가능한 배포판의 종류가
나옵니다. 파이파이 파이썬도 있겠고요.
미니콘다도 있고, 아나콘다도 있습니다.
이 중에 숫자만으로 이루어진 목록이 파이썬 기본 배포판이 되겠습니다.
파이썬 3.11 버전 중에 최신 버전이 6버전이 될 것이고요.
3.12.0까지 현재 나와 있네요.
우리는 강의에서는 파이썬 3.12를 사용하겠습니다.
목록이 너무 길 때는 grep 명령을 통해서 필터링을 수행하실 수 있겠고요.
혹은 e grep을 통해서 정규표현식으로 지정을 하실 수도 있습니다.
그래서 시작에서 화이트 스페이스가 1회 이상 나오고 3.11 이렇게 하시면 3.11만
나오겠고요.
3.11 혹은 3.12를 보고 싶다고 하시면 이렇게 주시면 3.11과 3.12에 매칭되는
버전만 이렇게 확인을 하실 수 있어요.
그럼 이중에 저는 3.11.6 버전을 설치를 진행해 보겠습니다.
제가 이미 앞서서 한번 테스트로 pyenv를 파일이 좀 남아 있었나 봐요.
설치는 이제 파이썬을 받아서 빌드하는 과정이 들어가기 때문에 시간이 좀 걸려요.
그래서 커피 한잔하고 오시고 잠시 기다려 보겠습니다.
파이썬 3.11.6 버전 설치가 끝났고요 추가로 이제 3.12.0 버전을 설치를 해
보겠습니다 파이썬 3.12.0 버전을 설치 안 하셔도 돼요
본 강의에서는 3.11 버전을 사용할 테지만 파이썬 3.11을 설치하는 이유는 pyenv를
통해서 여러 버전의 파이썬을 설치할 수 있고 그리고 필요할 때 선택적으로 원하는 버전의
파이썬을 사용할 수 있음을 보여드리기 위해서 3.12.0 버전을 설치하는 것입니다.
설치가 끝날 때까지 잠시 기다려 보시죠.
파이썬 3.12 버전도 설치가 다 되었습니다.
pyenv versions 명령을 내려보시면 설치된 파이썬 명령을 확인하실 수 있겠고요.
아마도 여러분들은 여기 시스템에 별이 되어 있을 거예요.
저는 앞서 설치한 내역이 모두 제거가 되지 않아서 이렇게 뜨는 부분이 되겠고요.
그럼 파이썬 파이엔브이 글로벌 3.11.6 버전 하시면은 이제 기본 버전으로 파이썬
3.11.6 버전을 사용하겠다는 의미입니다.
이제 버전 하시면은 이렇게 글로벌 버전에 이렇게 표시가 되어 있을 거에요.
자 그러면 이제 파이썬 버전 하시면은 이제 글로벌 버전이 기본으로 출력이 됩니다.
새로운 프로젝트에서 글로벌 버전 말고 다른 버전을 사용하자 하신다면 글로벌을 바꾸실 게
아니에요. 그 프로젝트에서만 사용할 파이썬 버전을 따로 지정하는 명령이 있습니다.
그래서 만약에 new project라는 폴더가 있고 안으로 들어가서 pyenv
local이라는 명령을 씁니다.
그래서 파이썬 3.12.0이나 혹은 다른 버전, 원하시는 파이썬 배포판을 입력하십니다.
하시면 현재 이 폴더에 .python 버전 파일이 생기고요.
이 파일의 내용을 보시면 이렇게 버전만 명시가 되어 있죠.
그러면 이제 파이썬 명령을 내리실 때에 pyenv가 이 .python 버전을 읽어요.
읽어서 이제 그 버전의 pyenv를 실행을 해줍니다.
참 편리하죠?
그리고 다시 이 프로젝트, 이 폴더를 빠져나가시면 다시 파이썬 버전은 글로벌 버전입니다.
글로벌 버전은 기본 버전인 거고요.
프로젝트마다 여러분들이 사용하실 파이썬 인터프리터를 원하는 대로 지정을 하실 수 있게
됩니다 이번에는 파이썬 3.11 가상 환경 생성 연습을 한번 해보겠습니다
홈 폴더로 가서요 워크스페이스 폴더를 만들겠습니다
워크스페이스로 이동하겠습니다
그리고 저는 이제 프로젝트 경로로써 mydjango라는 폴더를 만들고 mydjango로
이동을 하겠구요 자 그럼 기본에 파이썬 글로벌 버전은 3.11.6 버전인데 이제 원하시는
다른 타이썬 버전이 있으면은 먼저 로컬 명령으로 원하시는 버전을 이렇게 배포판을 지정하시면
돼요. 파이썬 기본 말고도 아마쿤다나 원하시는 어떤 배포판이든지 다 사용하실 수 있습니다.
글로벌이랑 같으니까 의미는 없지만 그래도 프로젝트에서 3.11 버전 사용할 것이기에 일단
연습으로 이렇게 한번 지정을 해보겠습니다.
그러면 파이썬 버전 파일에 3.11.6 버전이 기록이 되어 있고 이제 로컬에 지정한
파이썬이 구동이 됩니다.
파이썬에서 venv라는 모듈을 활용해서 현재 경로에 vmv 이름의 가상
환경을 생성해 주겠습니다.
가상 환경이 생성이 되었고, 이제 소스, 빈 액티베이트 하시면 가상 환경이 활성화
되었겠고요 가상 환경 활성화 후에 위치 파이썬 하시면 이렇게 가상 환경 안에 가상 환경
경로에 있는 파이썬을 활용하고 있음을 확인하실 수 있죠
가상 환경이 정상적으로 활성화가 되어 있고 버전도 이렇게 우리가 지정한 버전이 잘 출력이
되고 있습니다
이번에는 nvm 설치 설정 부분인데요 앞서서 설정을 했었습니다
그래서 블루인스토어 nvm에서 제일 마지막 줄에 이렇게 가이드가 나왔었죠
그래서 폴더를 이렇게 만들어 주고 그래서 이 설정도 nvm 안에 넣어 줬습니다
설정을 했으니까 바로 다음으로 넘어가겠습니다
이번에는 nvm을 활용해서 노드를 설치해 보겠습니다.
nvm install --lts 명령을 내리시면 명령을 내리는 시간 기준으로 LTS 버전이
설치가 됩니다.
2023년 12월 기준으로는 20.9.0 버전이 설치가 이루어지네요.
그 전에 다운받은 내역이 있어서 빠르게 설치가 이루어졌네요.
설치를 하고 나서 lts, nvm-use-lts 명령을 내리시면 현재 셀에서 노드 버전을
lts 버전으로 지정을 하는 것이고요 다음에 nvm alias default node라고
하시면 최신 버전을 default 버전으로 지정을 합니다
자 이제 위치 노드라고 하시면은 노드 경로가 nvm 안에 있음을 확인하실 수 있고 노드
버전 하시면은 이렇게 20.9 버전이 출력이 되고 있구요
이제 NPM도 해보시면은 NPM도 경로가 20.9.0 버전으로 출력이 되고 NPM 버전도
확인해 보시면은 NPM 명령도 잘 구동이 되고 있습니다
뒤에서 Django Cache API 실습을 위해서 Redis 서버가 필요합니다.
슬라이드 하단에 Redis 공식 문서가 있겠고요.
공식 문서를 2023년 12월 기준으로 정리를 해봤습니다.
맥에서 레디스 서버 구동을 위해서는 첫 번째 옵션으로 도커를 활용해서 컨테이너로 구동하는
방식입니다. 도커를 활용하는 것은 개발용으로 아주 적극 추천을 드립니다.
두 번째는 Homebrew를 통해서 네이티브로 레디스를 맥에 설치하시는 방법도 있습니다.
옵션 1에 도커도 설치를 하시면 장점이 도커 명령으로 레디스 외에도 memcached나
데이터베이스 MySQL이나 PostgreSQL이나 MariaDB 등 원하시는 다양한 서버를
도커 명령 한 줄로 쉽게 실행하고 쉽게 삭제할 수 있으니까 도커 사용을 적극 추천드립니다.
도커 설치 공식 가이드는 슬라이드 안내를 해드렸고요.
이들 참고해서 설치를 해주시면 되겠고, 도커가 설치가 되어 있으시다면 여기 안내된 명령어
한 줄로 레디스 서버를 구동하실 수 있습니다.
docker run –d –d는 도커 컨테이너를 백그라운드에서 구동하기를 요청하는
것이겠고요.
restart always는 혹시나 죽어도 항상 재시작하라.
그리고 도커 컨테이너 이름은 Redis:7. 그리고 publish 옵션은 6379,
6379인데요.
Redis의 기본 포트가 6379입니다.
앞선 포트 번호는 현재 맥에서 6379 포트로 레디스 서버 요청을 받겠다는 부분이 되겠고요
맥에서 받아서 이제 뒤에 있는 6379는 도커 컨테이너가 레디스 컨테이너가 6379
포트에서 요청이 들어오기를 접속을 기다리고 있어요
그래서 맥의 6379에서 요청을 받아서 컨테이너의 6379로 이제 트래픽을 넘겨주는 그런
설정이 되겠습니다
도커 이미지는 레디스 이미지를 사용할 것이고, 콜론 7은 7은 태그라고 하는데요.
흔히 버전을 지정할 목적으로 씁니다.
그래서 레디스 이미지 버전 7을 사용하겠다 입니다.
우하단의 스샷을 보시면 도커 런 명령을 내리면 레디스 7 이미지가 현재 맥에 없기 때문에
다운을 받는 과정이 되겠고요.
그 전에 명령을 수행해서 이미지가 로컬에 있다면 full 즉 이미지를 받는 과정 없이 즉시
redis 컨테이너가 실행이 될 것입니다
이때 주의하실 것은 6379 포트로 현재 맥에서 구동 중인 서비스가 없어야 됩니다
중복해서 띄울 순 없어요
앞서서 6379 포트를 사용하는 서비스가 있다면 그 서비스를 끄고 죽이고 실행하시면
되겠고요 그 다음에 도코 PS명령으로 이제 구동 중인 컨테이너 목록을 확인하실 수
있습니다. 그래서 PS명령 내역을 보면, Redis 콜론 7 이미지를 사용하겠고, 52초
전에 컨테이너가 생성이 되었으며, 그리고 포트는 6379 포트로 요청이 들어오면, 6379
포트로 요청을 보낸다.
트래픽을 흘려보낸다 가 되겠고, 도커 컨테이너 이름은 Redis 7이다.
이렇게 확인을 하실 수 있습니다.