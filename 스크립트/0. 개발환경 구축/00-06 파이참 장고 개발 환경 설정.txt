자 이번 시간에는 파이참 장고 개발 환경 설정입니다
파이참에서 프로젝트를 먼저 열어볼 텐데요
현재 제 슬라이드의 스크린샷은 파이참 2023.2.5 버전인데 파이참 버전에 따라 UI가
다르더라도 기본 메뉴는 동일하니까 차근차근 확인해주세요
오픈 메뉴를 통해서 프로젝트 폴더를 열어줍니다.
실내를 체크해 주겠구요.
마이크로소프트 디펜더라는 윈도우의 기본 보안 프로그램이 있습니다.
여러 파일들을 실시간으로 감시해서 바이러스가 있는지 확인을 하는 프로그램인데요.
프로젝트 폴더 및 라이벌리 경로를 디펜더 체크 대상에서 제외 시켜주지 않으면 그 파일들을
계속 실시간으로 디펜더가 체크하기 때문에 id 성능이 느려집니다.
그래서 자동 버튼을 클릭해서 파이참에서 이 프로젝트 폴더를 제외토로 허용을 해주세요
그리고 한글 메뉴 활성화 알림이 뜨더라도 저는 설치하지 않기를 권장합니다
메뉴 이름이 영어가 아닌 한글로 뜨면 좀 직관적이긴 하지만 전 헷갈리더라구요
메뉴 검색도 영어가 아닌 한글로만 되어서 전 불편해서 로클라이징 플러그인을 설치하지
않습니다 그리고 하단에 보시면 라이브러리에 대한 인덱스 작업이 끝나기를 기다려줍니다.
이 인덱스 작업이 끝나야만 여러분들이 파이참에서 자동완성이나 그런 편의 기능들을 활용을
하실 수 있게 됩니다.
세팅스라는 메뉴는 파일 메뉴에 세팅스에 Python Interpreter 설정이 있는데요.
여기에서 Python Interpreter에서 현재 장고 프로젝트에서 바라보고 있는
가상환경 혹은 Python Interpreter를 설정하실 수 있습니다.
현재 폴더에 가상환경이 있기 때문에 대개는 자동으로 이렇게 인식을 해줘요.
그러면 그냥 그대로 진행을 해주시면 되겠구요.
근데 이제 혹시 이와 같이 No Interpreter 라고 나오시면은 수동으로 잡아줘야
됩니다. 오른쪽에 Add Interpreter 클릭하시고 Add Local
Interpreter 클릭하시면 이렇게 Virtual UMV, Conda, System
Interpreter 여러가지 가상 환경을 선택하실 수 있는데 Virtualenv
선택하시고 이미 가상 환경을 만들었기 때문에 Existing 메뉴를 통해서 가상 환경
경로를 이미 자동으로 잡히면 그대로 쓰시면 되고 안 잡혀 있으면은 이 버튼을 클릭해서
가상환경 폴더에 윈도우는 Scripts 폴더에 python.exe이고 맥이나 니눅스는 vmb
폴더에 빔 폴더에 python 이라는 파일입니다
그 파일까지 선택해서 ok 해주시면은 이와 같이 뜨고요 ok 하시면은 이렇게 가상환경이
선택이 됩니다
이렇게 가상 환경을 정확하게 지정해 주셔야만 우리가 파이참 내에서 정확하게 가상 환경에
설치된 라이벌리에 기준으로 원하는 패키지를 설치하실 수 있고 자동완성의 기능도 혜택을
받으실 수 있으며 파이참 터미널을 띄우실 때 해당 가상 환경으로 자동으로 활성화도 수행이
됩니다. PyCharm Professional은 장고를 지원해줍니다.
Community Edition에는 없는 메뉴인데요 Settings에서 Django를 검색하시면
Languages Framework라는 항목 밑에서 Django 메뉴가 있구요.
Django 프로젝트를 생성하시고 나서 PyCharm으로 여셨다면 대개 Enable
Django Support 즉, Django 지원이 자동으로 켜져 있습니다.
혹시 안 켜져 있으시면 수동으로 체크하시구요.
이 Django 프로젝트 루트와 Settings 프로젝트에 맞춰서 이 두가지도 입력하시고
OK 하시면은 Django 지원이 활성화가 됩니다.
장고 지원이 활성화가 되어야지만 장고 템플릿이나 장고에 특화된 기능들을 지원을 받을 수
있어요 Windows에서 중요한 항목인데요 Windows에서는 기본 인코딩이 CP949라는
Microsoft에서 EUC-KR을 확장한 인코딩입니다.
요즘에 대개 개발에서는 모든 인코딩을 UTF-8을 사용하죠.
그래서 두개의 인코딩이 맞지 않습니다.
세팅스에서 에디터 제너럴의 콘솔에 보시면은 디폴트 인코딩이 X-Windows 949인데
CP949라는 의미예요.
이 인코딩이 되어 있으면 파이참으로 개발 서버 구동하시면 이와 같은 에러가 뜹니다
콘솔의 디폴트 인코딩을 utf-8로 변경을 해주세요 하시고 이제 ok를 해주시면 파이참으로
장고 서버 구동할 때에 오류가 뜨지 않습니다
자 이제 파이참 메뉴로 개발 서버를 구동을 하는데요
개발 서버를 구동하면 vs코드와 마찬가지로 파이참 디버거를 여러분들이 사용을 하실 수
있어요 상단에 버그 모양, 벌레 모양의 아이콘을 클릭하시면 디버그 시작이구요 왼쪽에
클릭하시면 그냥 실행입니다 장고 아이콘이 있는 이 설정이 선택된 상황에서 디버깅을 누르시면
이렇게 장고 서버가 구동이 됩니다
만약 디버깅 버튼이 비활성화 상태고 이렇게 Current 파일로 보여지고 있으시다면
Enable Django Support 옵션이 처음부터 활성화가 안되신 분은 Django
서버 설정이 없어서 입니다.
그 때에는 하단에 이 메뉴들 통해서 장고 서버 설정을 추가하시면 되겠구요
이 메뉴들 클릭하시면 이 대박 상자가 뜹니다
이때 플러스를 누르시면은 어떤 설정을 추가하겠는지 선택지가 나오는데요 여기에서 장고 서버들
선택하시면 이 창이 나오구요 여기에서 나머지 옵션은 다 Default로 두시되 여기 이름만
Run Server로 바꾸시고 OK를 누르시면은 이 부분이 이렇게 바뀝니다
바뀌고 앞에 장고 아이콘도 나오죠
그러면 디버깅을 시작하실 때에는 이 Run Server 설정이 선택된 상태에서 디버깅
메뉴를 클릭해서 장고 서버를 시작하고 디버깅을 하실 수 있습니다 터미널을
PowerShell Core 7을 설치했었잖아요?
윈도우 기본에는 Windows PowerShell이 설치되어 있습니다.
Settings에서 Tools의 터미널에 가시면 Shell Path가 아마도 Windows
PowerShell로 선택이 되어 있을 거에요.
이 부분도 VSCode와 마찬가지로 pwsh.exe 즉 PowerShell 7
7이죠. 이걸로 선택하시고 OK 하시면 좌측 아이콘을 클릭하시면 터미널이 뜹니다
PowerShell 7이 뜨고요
Command Python Select Object Source 해보니까 이렇게 가상
환경에 있는 Python 을 출력해 주더라고요
이제 가상 환경이 액티베이트가 된 상황입니다
자 이제 db.sqlite3 데이터베이스를 여는 건데요 좌측에 있는 db.sqlite3
파일을 더블클릭을 하셔도 되겠고요 파이참에서 오른쪽에 있는 이 아이콘이 데이터베이스인데
PyCharm Professional은 SQLite 뿐만 아니라 MongoDB나 SQL Server나
BigQuery, MySQL, PostgreSQL 거의 모든 데이터베이스에 대한
클라이언트를 지원해 줍니다
아이콘을 클릭하시고 플러스를 누르시면 데이터베이스를 생성하겠다는 의미가 아닙니다
기존 DB와 새로운 연결을 하겠다는 의미구요 데이터 소스를 클릭하시면 여러가지 데이터 소스
중에 SQLite를 선택해서 DB.SQLite 파일을 선택하시고 오시는 방법도 있고
더블클릭해서 한 번에 오는 방법도 있습니다
아마 처음 여시면은 SQLite 드라이버가 없을 거에요.
없을 때는 다운로드라는 버튼이 있는데 클릭하면은 자동으로 다운로드가 이루어집니다.
다운로드 후에 연결 테스트 클릭하면은 연결이 확인되었음을 알려주고 OK 누르시면은 이와
같이 데이터베이스를 조회하실 수 있습니다 그러면 db.sqlite3 이 항목이 접혀 있을
때인데 펴면 메인의 테이블스 항목이 있는데 혹시 숫자가 없이 그냥 0 이라고 넣으신다면
테이블스 항목을 클릭하신 다음에 상단에 새로고침을 클릭하시면요 아마도 테이블 내역이 있을
겁니다 이건 다 django가 기본으로 생성해주는 데이터베이스 테이블이에요
이 중에 auth-user라는 테이블명을 더블 클릭하시면 테이블을 데이터비에서
조회합니다 이렇게 조회하실 수도 있고 혹은 여기 db.sqlite3 이 항목을 우클릭하신
다음에 뉴 메뉴에 쿼리 콘솔 메뉴를 여시면 이렇게 쿼리 콘솔 메뉴가 나옵니다
여기에서 뭐 셀렉트나 업데이트나 딜리트나 원하시는 코디를 입력하신 다음에 여기 있는 실행
버튼을 누르시면 해당 코디가 실행이 되고 셀렉트 코디인 경우에는 하단에 조회 레역이 나오게
됩니다 이제 블랙을 활용해서 소스 코드 자동 포매팅을 해볼 수 있겠는데요
블랙은 파이산 커뮤니티에서 정말 많이 사용되는 코드 포매터죠 블랙을 이전에는 파이참에서
기본으로 지원을 안 했는데 파이참 2023.2 버전부터 이렇게 빌트인으로 블랙 메뉴를
지원해 줍니다
이전에는 블랙 메뉴가 없었기 때문에 파이참의 파일 워처라는 메뉴를 통해서 블랙을 수동
등록했었어요 근데 이걸 쓰려면 우리가 터미널에서 블랙을 먼저 설치하시고요 설치하시고 나서
이 세팅을 여시면 체크가 해제가 되어있을텐데 코드 리포맷이라는 명령이 주어지면 블랙을
수행할 거냐고요 그리고 저장할 때마다 수행할 거냐인데 저는 둘 다 체크해 주겠습니다
체크하시고 OK 하시면 이제 Python 파일에 대해서 여러분들이 저장하실 때마다 혹은
코드를 리포메시하는 명령을 내릴 때마다 블랙이 자동으로 수행이 됩니다.
기존 소스코드는 블랙으로 포메팅이 안되어 있으니까 블랙 실행하고 점이라는 명령을 입력하시면요
현재 경로에서 재기적으로 블랙 포매팅을 수행합니다
파일들이 이렇게 리포맷이 이루어졌구요 소스코드가 변경된 거죠 포맷이 바뀐 것입니다
파이참에서 Git 커밋을 한번 해보겠습니다
파이참 메뉴에서 좌측에 있는 이 아이콘을 클릭하시면 이렇게 커밋이 뜨고요
changes는 이제 변경된 파일들 항목을 볼 수 있는데 여기 changes를 클릭하시면
변경된 파일들을 모두 커밋 하겠다고요
그리고 커밋 메세지 입력하시고 커밋을 하시면은 이 내역들을 킷에 커밋을 하게 됩니다