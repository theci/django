이번 시간에는 VS Code 장고 개발 환경 설정입니다.
VS Code 편집기는 공식 사이트에서 다운로드 설치하실 수도 있겠고요.
앞서 하셨던 것처럼 패키지 매니저를 통해서 설치를 하실 수 있습니다.
우리가 윈도우에서는 Winget을 통해서 설치했었고요.
맥에서는 Homebrew 명령으로 설치를 했었습니다.
VS Code 필수 확장 및 설정인데요
프로젝트에 .vscode라는 폴더를 만드신 다음에 settings.json이라는 설정을
미리 넣어 두실 수 있습니다
그리고 extensions.json으로 이 설정을 넣어 두시는데요 Python 파일에 대한
탭 설정이나 자동 포메터, Django 템플릿에 대해서 이런 포메터 설정,
JavaScript, CSS, JSON에 대한 설정도 다 넣어 줬고요 리액트를 개발하시면
프리티어라는 확장을 통해서 리액트 코드에 대한 자동 포매팅을 수행을 하는데 이 설정이
없으면 장고 템플릿 파일을 Prettier로 자동 포매팅이 되는 경우가 많습니다
장고 템플릿 문법도 안 맞고 오류가 발생하는 경우가 있어요 VS Code의 마지막 탭이
확장입니다 추천 패널이 있습니다
추천 패널을 통해서 클릭 클릭 클릭 클릭해서 추천 확장을 한 방에 설치하실 수 있어요
그래서 두 개 설정은 깁 버전 관리 대상에 넣어주시면 VS Code를 사용하는 다른
팀원들도 한 번에 같은 설정을 공유하고 필요한 확장도 한 방에 설치할 수 있기 때문에
편리하고요. 장고 개발 서버가 또 있고요.
프로젝트에서 경로를 잘 보고 생성하셔야 됩니다.
클릭을 잘못 하시다 보면 좀 엉뚱한 경로에 파일이 생성이 되기도 하는데요.
최상위에 만들 거라면 여기 빈 영역에서 우클릭하신 다음에 새 파일에서 .vscode,
settings.json과 최상위 밑에 .vscode가 만들어지고 여기에
extensions 생성이 되었습니다.
내역대로 붙여넣어 주시고요.
JSON은 이렇게 주석을 못 넣습니다.
주석 넣으면 문법 오류거든요.
VS Code에서는 주석을 넣을 수 있도록 배려를 해 놓은 것 같아요.
추천 항목이 뜨죠?
추천되는 확장들을 클릭을 통해서 설치하실 수 있습니다.
클릭, 클릭, 다 설치를 하겠습니다.
테마도 설치를 했거든요.
테마를 설치를 하게 되면은 어떤 테마를 쓸 것인지 선택하는 창이 나옵니다.
Material 아이콘 테마를 설치했기 때문에 이거를 선택을 해 주겠습니다.
그럼 해당 테마가 적용이 되겠고요.
이 아이콘들이 Material 테마 아이콘으로 바뀌어요.
그래서 저는 좀 더 보기 좋아서 설치했습니다.
VS Code에서 가상 환경을 활성화를 해 볼게요
명령 팔레트에서 Python Select Interpreter 이 메뉴는 파이썬 확장이
설치가 되어야만 나오는 거예요
이 명령을 통해서 활성화할 가상 환경 경로를 지정하시고요 VNV라는 폴더를 자동으로
인식해서 VS Code가 띄워 주거든요
파이썬 가상 환경을 선택하신 다음에 이제 터미널을 띄우시면은 대개는 이렇게 자동으로 설정이
잘 되면은 자동으로 가상 환경이 활성화가 됩니다.
근데 아래와 같이 보안 오류가 뜨시고 상단에 셀 종류를 보면은 파워셀이라고 찍혀있으면은
윈도우 기본 파워셀입니다.
파워셀 코어 7을 추가로 설치했잖아요.
pwsh라는 이름입니다.
현재 VS Code의 기본 터미널이 Windows 기본 파워쉘인 거고 VS Code에서
아래로 있는 메뉴를 클릭해서 Select Default Profile이라는 메뉴를
선택하시면 이런 창이 뜨는데 기본 터미널을 변경하실 수 있습니다
그래서 최신 파워쉘인 pwsh.exe를 선택하시고 쓰레기통 버튼을 눌러 이 창을 끄시고
다시 이 명령으로 터미널을 켜시면 이런 창이 뜨면 성공해요.
그러면 가상 환경이 자동으로 되게 활성화가 되는데 혹시 자동으로 가상 환경이 활성화가 되지
않는다면 VS Code에서 파이썬 파일을 클릭해서 하나 여신 다음에 터미널을 다시
실행하거나 파워 쉘이 뜨긴 했는데 가상 환경이 안 되면 수동으로 가상 환경을 활성화를
해주세요. 뷰 메뉴의 명령 팔레트에서 파이썬, 셀렉트 인터프리터 명령을 쓰시면은 venv
경로가 잡혀 있네요.
그렇죠? 그래서 이걸 선택을 해주시면 되겠고요.
파이썬을 아무거나 하나 열어보겠습니다.
이렇게 열어보시면 우 하단에서 이렇게 venv라는 경로가 잡혀 있죠.
그러면 이제 가상 환경이 잘 활성화된 거고 터미널은 이제 터미널, 자, Create New
Terminal이었죠. 이렇게 한번 띄워보시면 파워쉘이죠.
윈도우 기본 파워쉘이고 이런 식의 보안 오류가 뜬다는 거죠.
그러니까 이런 오류가 뜨시는 분들은 눌러서 Select Default Profile에서
pwsh.exe로 바꾸신 다음에 창을 끄고 다시 터미널을 여시면 그 다음부터는 이렇게 최신
파워쉘로 뜨고 가상 환경도 잘 활성화된 것을 확인을 하실 수 있습니다.
VS Code를 통해서 개발 서버를 띄우기 위해서 구동 파일을 생성하는 방법을
살펴보겠습니다 VSCode
Code를 통해서 개발 서버를 띄우시면 장점이 VS Code를 통해서 Django
애플리케이션을 디버깅 하실 수 있습니다
어떤 문제가 발생했을 때 파이썬 코드 내에 프린트만 넣어서 디버깅 하는 것보다는 디버거를
활용하시면 편해요.
VSCode에서도 디버그를 지원해주고 PyCharm에서도 디버그를 지원해줍니다.
VS Code 메뉴의 네 번째 탭이 Run & Debug라는 탭이 되겠고요.
클릭하시고 파란색 버튼을 클릭하시는 것이 아니라 Create Launch.json
파일이라는 메뉴를 선택하시면 이런 설정 파일을 한번 만들어 둡니다.
이 설정을 커스텀 하실 수도 있겠고요.
이 버튼을 클릭하면 VS Code가 현재 Python 프로젝트인 것을 알고 Python
관련된 추천 설정들을 띄워줍니다.
이중에 장고를 선택하시면 이렇게 딱 뜨는 것까지 한번 해보겠습니다.
네 번째에 Run & Debug라는 탭을 선택하시고 Create Launch JSON
File을 선택하시면 메뉴가 뜨죠?
여기에 장고를 선택하시면 이렇게 Launch.json이 나옵니다.
파일까지 딱 생성이 되었어요.
VS Code를 통해서 디버깅을 한번 해볼 텐데요.
디버깅을 위해서 간단한 뷰를 테스트 목적으로 한번 구현을 해보겠습니다.
마이 사이트의 urs.py에서 root라는 이름의 뷰를 하나 만들고요.
정답으로 Hello VS Code를 주겠습니다.
이 뷰는 테스트 목적으로 만든 뷰니까 확인하신 후에 제거를 해주세요.
VS Code 내에서 줄번호 옆에 클릭을 하실 수 있습니다.
줄번호 영역 왼쪽 영역을 클릭해서 중단점을 생성, 제거하실 수 있는데 한 번 클릭하면 빨간
점이 생기고 한 번 더 클릭하면 빨간 점이 제거됩니다.
줄 단위로 줄마다 설정하실 수 있어요.
중단점을 추가하시면 이 줄이 실행되기 직전에 실행이 멈춰 있습니다.
한번 해보겠습니다.
mysite의 urls에서 위에는 그냥 주석이니까 지워주겠고요.
from django에 http에 http response 그리고 root view고요.
return Hello VS Code라고 하겠습니다.
현재 어떤 루트라는 뷰가 호출이 되면요 이런 함수가 호출이 되면 hello VS Code라는
응답을 줄 텐데 이렇게 루트라고 줍니다
아무것도 없는 주소, 즉 최상위 주소로 요청이 들어오면 루트라는 함수를 호출해서 그 요청을
처리하겠다는 의미가 되겠고요 6번 줄 옆을 클릭할 수 있습니다 클릭하면 좀 더 진한
빨간색이 되었죠.
breakpoint, 즉 중단점이라고 출력이 되고 있습니다.
이제 디버깅을 수행을 해보겠습니다.
VS Code로 개발 서버를 구동하는 것이기에 앞서 우리가 다른 터미널에서 run 서버
명령으로 Django 개발 서버를 실행했었잖아요.
그 서버를 먼저 끄고, 그 다음에 run & debug 탭에서 이제 이 녹색 버튼을
클릭하시면 앞서 생성된 launch.json 내역으로 개발 서버가 구동이 됩니다.
그러면 VSCode의 상단에 이런 툴바가 뜨고요.
이 툴바는 디버그 메뉴가 되겠습니다.
이제 웹버저를 열고 Loculus 8000 주소로 접속하시면 이 요청을 처리하는 뷰가 현재
루트 뷰가 되겠고요.
요청을 처리하면서 중단점에 걸려서 요청이 딱 멈춰 있게 됩니다.
이렇게 한번 해볼게요.
앞서 터미널에서 수행되고 있는 서버는 Ctrl-C를 눌러서 꺼주시고요.
이 창도 이렇게 꺼주겠습니다.
런 앤 디버그 탭에서 실행을 누르시면 이렇게 디버깅이 시작이 되었죠.
스타트 디버깅 되고, launch.json 내역으로 서버가 구동이 됩니다.
서버 떴죠? 우리가 Loculus 8000 주소로 들어가 보시면 VS Code 가시면
이렇게 설정이 잡혀있죠?
이 함수가 수행되는 지점에 Request하는 변수 값은 이렇게 자동으로 뜹니다.
어떤 속성이 있는지 확인하실 수 있고, 워치는 원하시는 표현식을 넣으실 수 있어요.
그래서 Request다.
내역 보실 수 있고 수정해서 RequestMetaDoc 그러면 요청 헤더를 보실 수 있는데
헤더에서 사전식으로 http://useragent 라고 쓰시고 이렇게 엔터 치시면 현재
요청을 한 브라우저의 브라우저 종류를 알 수 있는 헤더가 UserAgent 거든요
이렇게 값을 확인을 하실 수 있게 되고요 혹은 어떤 값이 있으면 1 더하기 이런 식으로도
어떤 변수를 참조해서 계산 값을 실시간으로 확인을 하실 수 있습니다.
자 이제 디버깅이 끝났다면 이렇게 빙글빙글 도우고 있는 거죠.
아직 응답을 받지 못했기 때문에.
continue 누르시면 그 다음 중단점까지 이어서 실행이 되는 거고 다음 중단점이
없으니까 이렇게 응답을 바로 받고 이제 디버깅 과정이 끝난 상황이 되겠습니다.
그럼 이 줄은 이제 디버깅이 필요 없으니까 이렇게 중단점을 클릭해서 제거를 해 주겠습니다