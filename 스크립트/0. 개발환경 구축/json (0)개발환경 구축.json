안녕하세요 윈도우 개발 환경 설치입니다 윈도우에서는 os 패키지 관리자로서 winget과
scoop이 있습니다
winget은 윈도우 기본에서 지원하며 최근 winget을 지원하는 애플리케이션이
많아졌습니다
winget은 윈도우 10 이상 1709 업데이트부터 지원됩니다 winget을 통해 필요한
소프트웨어를 설치해 보겠습니다
윈도우 명형행 프로그램은 윈도우 기본에 설치된 명령 프롬프트와 윈도우 PowerShell 버전 5가
있으며 추가로 최신 윈도우 명형행 프로그램은 윈도우 스터미널과 파워셀 코어 버전 7을
설치하겠습니다.
손에 익숙한 명형행 프로그램이 있다면 어떤 명형행 프로그램을 쓰셔도 괜찮습니다.
통합 개발 환경은 PyCharm Professional을 사용하겠습니다.
유료 IDE로서 1개월 체험 계정을 지원하며 수강생 분들께는 6개월 무료 쿠폰도 제공해
드리고 있습니다.
PyCharm은 장고 지원이 가장 우수하며 다양한 플러그인이 지원됩니다.
Visual Studio Code는 널리 사용되는 무료 편집기이며 다양한 확장이
지원됩니다. 장고 개발에 있어서 파이참에 비해 기능은 부족하지만 훌륭한 편집기입니다.
파이참과 Visual Studio Code 모드에 대해서 개발 환경 설정 방법을 다뤄볼 것입니다.
윈도우에서 Winget을 활용해서 애플리케이션을 설치해 보겠습니다.
명령 프롬프트에서 실행해 주시고 이미 설치하신 패키지는 제거하고 진행해 주세요.
슬라이드 하단의 링크에서 설치 스크립트를 복사하실 수 있습니다.
필요하신 소프트웨어만 선택적으로 설치해 주시고 Winget을 사용하면 Winget
Upgrade 명령으로 업그레이드 가능한 패키지 목록을 보실 수 있으며 Winget
Upgrade All 명령으로 업그레이드 가능한 패키지를 한 번에 업그레이드 하실 수 있어
편리합니다.
Winget 인스톨 명령에서 Silent 옵션을 붙이시면 소프트웨어 설치 시에 설치 옵션을
묻는 창이 뜨지 않고 디폴트로 설치됩니다.
단, 설치 진행 여부를 묻는 UAC(사용자 계정 컨트롤) 사용자 계정 컨트롤 창은 뜹니다.
이는 무단 변경으로부터 윈도우를 보안하는 윈도우의 보안 기능이기에 끌 수 없습니다.
자, 윈도우에서 설치 스크립트 페이지를 열었구요.
이렇게 설치 스크립트가 있습니다.
설치 스크립트에서 저는 PowerShell, Windows Terminal,
PyCharm, Visual Studio Code, Python 3.11, 3.12,
Node.js 그리고 Git까지 이렇게 한번에 설치하겠는데 이 중에 필요하신 소프트웨어만
선택적으로 설치하시면 되겠구요
Python의 경우는 강의에서는 3.11 버전을 사용할 것입니다
현재 기준으로 Python 3.11은 거의 모든 장고 라이브러리가 다 지원하는데요
3.12는 아직 지원하지 않는 라이벌리가 있기 때문에 3.11을 기준으로 진행하겠으며
3.12를 설치하는 이유는 윈도우에서 여러 개의 Python을 설치하더라도 선택적으로
원하는 Python Interpreter를 실행할 수 있기에 그 실행하는 명령을 여기에서
보여드리기 위해 두 가지 버전을 설치하려 합니다.
이 명령을 저는 이렇게 복사를 해서 명령 프롬프트에서 붙여넣겠습니다.
자 이렇게 UAC 창이 떴구요
얘를 클릭해서 설치를 계속 이어서 진행하겠습니다
파워셋 설치가 끝났고 윈도우 터미널 설치가 진행되고 있습니다
윈도우즈 터미널 설치가 끝났고 파이참 프로페셔널 설치가 진행되고 있습니다
UAC 창이 떴고 얘를 클릭하겠습니다
파이참 설치가 끝났고 비주얼 스튜디오 코드 설치가 진행되고 있습니다.
비즈 스튜디오 코드 설치가 끝났고 Python 3.11 버전이 설치되고 있습니다.
Python 3.11 버전 설치가 끝났고 Python 3.12 버전 설치가 진행되고
있습니다. Python 3.12 버전 설치가 끝났고 Node.js LTS 버전이 설치되고
있습니다. 현재 Node.js LTS 버전은 20.9.0 버전이라고 하네요.
Node.js LTS 버전 설치가 끝났고 마지막으로 Git까지 설치를 설치를 진행해 주겠습니다.
자 Winget을 통해서 필요한 소프트웨어가 모두 설치되었습니다.
현재 명령 프롬프트 창은 끄시구요.
이렇게 끄시고 새로 열어주세요.
새로 열셔야 추가로 설치하신 소프트웨어에 대해서 환경 변수와 패스가 잡힙니다.
그래서 파이라는 명령은 윈도우에서만 지원되는 명령입니다.
파이 명령으로 리스트를 해보시면 이렇게 설치가 되어있는 타이선 인터페이터를 확인하실 수
있겠구요. 설치가 된 경로 같은 경우는 이렇게 입력하시면 설치된 경로까지 확인을 하실 수
있습니다. 자 그럼 제가 타이선 3.11 버전으로 실행하시려면 이렇게 3.11이라고
붙여주시면 되요.
그래서 파이썬 3.11이라고 하시면은 Python 3.11 버전으로 1.11 버전에 이
Python 인터페이터를 구동하시는 겁니다.
그래서 버전 하시면은 Python 3.11이고 3.12 버전 하시면 이렇게 3.12가 되죠
그래서 이 명령 자체를 Python 이라는 명령이라고 생각을 하시면 되겠습니다
그래서 이 명령은 윈도우에서 지원되 윈도우에서만 지원되는 명령이구요
이렇게 손쉽게 환경 변수와 패스를 신경쓰지 않고도 원하시는 Python 인터포이터를 실행하실
수 있습니다
Winget Search 명령이 있는데요.
여기에서 Python, Python 이라고 해보시면은 이제 Winget 에서 지원하는
파이썬 버전을 이렇게 살펴보실 수 있습니다.
그쵸? 그래서 원하시는 파이썬 버전을 설치하실 때는 여기 ID라는 항목 있죠?
그래서 ID 항목을 그대로 지정하셔서 Winget Install ID는 이 ID 하시면은
이제 설치가 진행을 합니다.
만약 winget install python 설치하실 때에 설치가 안될 수도 있어요
설치가 안되시는 분들은 아마도 이전에 python 설치하셨고 윈도우에 registry에
python 설치 기록이 완전히 제거가 되지 않아서 아마도 설치가 안되실 것입니다
그럴 때에는 registry 편집기 registry 편집기를 띄우셔가지고 여기에서 검색을
Ctrl F 하셔서 Python 3.11 뭐 3.10 설치 하셨던 버전 있죠
버전을 찾아서 이제 레지스트리 를 다 제거해 주시면 되요
그래서 다 제거해 주시면 제거 하시고 나서 이제 현재 뜨잖아요
뜨면 요 위에 항목들 그래서 제거 제거해서 좀 많습니다
저도 한번 해봤을 때 한 20개 넘게 나온 것 같아요
그래서 그걸 다 제거하시고 나서 윙긴 인스톨 다시 시도하시는 것입니다
자 이제 윈도우 터미널을 한번 실행을 해보겠습니다
그래서 윈도우 터미널을 이렇게 실행하시면요
현재 이렇게 실행이 되었죠
현재 세팅스 메뉴를 여는 안내도 나오는데 이 안내가 안 나오시더라도 여기 아래로 바라보는
부분을 클릭하시고 여기에 Settings가 있습니다.
여기면 Default Profile이라고 해서 기본 터미널 프로그램을 뭘로 쓸 것이냐인데
PowerShell이 있죠.
그래서 까만 아이콘의 PowerShell이 우리가 새롭게 설치한 PowerShell
Core 7의 PowerShell이고요.
여기 파란색 아이콘이 윈도우 기본에 설치된 PowerShell입니다.
개발하실 때는 윈도우 기본 파워쉘이 아니라 이 새롭게 설치한 파워쉘로 사용하시면 되요.
파이참도 그렇구요.
그래서 기본이 잘 되어 있으니까 이렇게 두고 세이브 하시면 되겠고.
이제 Python 3.11 가상 환경을 생성을 해보겠습니다.
일단은 cd 역슬러시 명령으로 c 드라이브의 최상위로 이동을 하겠구요.
저는 이제 워크스페이스라는 폴더를 만들어서 그 폴더로 이동을 해보겠습니다
마이장고라는 폴더를 하나 만들고 이 마이장고에서 여기에서 가상 환경을 만들 건데 저는
타이선 3.11 활용해서 가상 환경을 만들 것이고요
vmv 모듈을 활용해서 vmv라는 이름의 폴더에다가 가사 환경을 생성을 하겠습니다
그러면 python 3.11 python 으로 가사 환경이 만들어져 있고 가사 환경을
액티베이트를 해보죠
이렇게 액티베이트를 하시면은 가사 환경이 활성화 되었고 이제는 그냥 python 이라는
명령을 쓰시면 됩니다
왜냐하면 가사 환경이 이미 활성화 되어 있기 때문이죠
이제 get command python 이라는 명령을 실행하시는데 select object
source 라고 하시면은 이건 파워셀 명령이에요
그래서 현재 python 명령이 어떤 경로에 python을 실행하는지 확인하실 수 있습니다
그래서 가상 환경 활성화 여부를 확인할 수 있는 좋은 방법입니다
자 이렇게 Python 3.11 가상 환경을 생성을 했구요
강의를 진행하실 때는 저와 같은 버전으로 진행하시고 강의를 마치신 후에 최신 버전을 사용해
주셨으면 합니다 자 이제 윈도우에서 Redis 서버 구동에 대한 부분인데요 뒷부분에서 장고
캐시 API 실습을 할 때에 Redis 서버가 필요합니다
슬라이드 하단에 Redis 사이트에서 윈도우 레디스 공식 문서가 있어요
항상 공식 문서를 먼저 확인을 해주시면 좋구요
레디스는 공식적으로 윈도우 배포판을 지원하지 않습니다
그래서 니눅스를 써야 돼요
윈도우에서도 니눅스를 사용하는 첫번째 방법이 윈도우에서는 WSL Windows
Subsystem for Linux 라고 해서 윈도우에서 공식적으로 지원하는 니눅스가
있습니다 윈도우 안에서 니눅스 커너를 지원하는 건데요
그걸 쓰는 방법이 하나 있고 WSL 안에서 니눅스니까 Redis를 설치하시는 방법이 있고
그래서 SSL을 설치하는 방법은 마이크소프트의 설치 공식 가이드가 있으니까 그거를
확인하셔서 설치를 진행하시면 되겠습니다.
두번째 옵션은 도커인데 저는 이 방법을 추천드립니다.
도커를 활용해서 컨테이너로 레디스를 구동하는 방식이에요
도커 설치 공식 가이드가 있습니다
링크는 슬라이드에 안내해 드렸구요
이를 참고해서 설치를 하십니다
여러분들의 머신에 도커가 설치가 되어 있으시다면 명령 한 줄로 레디스 서버를 구동하실 수
있어요 그래서 슬라이더 하단에 설치 스샷도 있고요.
도커 런 명령으로 레디스 서버를 구동하시면 도커 ps라는 명령을 입력하시면 현재 레디스
서버가 구동 중이고 몇 초 전에 혹은 몇 분 전에 생성이 되어서 돌고 있고 포트는 6379
포트에서 구동 중임을 이렇게 확인을 하실 수 있습니다.