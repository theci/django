이번 시간에는 Django 프로젝트를 생성을 해보겠습니다.
Django는 Python 풀 스택 웹 프레임워크입니다.
2008년 버전 1.0을 시작으로 15년 동안 꾸준히 발전을 해왔구요.
빠른 개발과 깔끔하고 실용적인 디자인을 장려하고 있습니다 Django의 가장 핵심적인 부분인데요
웹 개발의 번거로움을 웹 프레임워크에서 상당 부분 처리하여 반복을 줄인 최소한의 코드로
서비스를 개발하도록 도와주는 그런 웹 프레임워크가 장고입니다
웹프레임워크를 쓰는 이유는 반복을 줄이기 위함이죠
Django는 특히나 다른 웹프레임워크보다 더 반복을 줄일 수 있는 다양한 기능을 제공해주고
있습니다 그래서 Django의 철학을 따르면 웹 프론트엔드에서의 반복적인 작업도 많이
줄이실 수 있어요
자, Python의 배터리 포함 철학을 따르기에 웹 개발에 필요한 주요 기능들이
Django에 이미 포함되어 있습니다
그래서 Django를 국내외의 수많은 회사에서 사용을 하고 있겠구요
장고 프로젝트 생성 및 개발 서버 구동입니다.
본 강의는 2023년 기준으로 LTS 버전인 4.2 기준으로 진행을 하겠습니다.
꼭 이 버전으로 강의를 진행해 주시고 이후에 뭐 5.0 등이 나오더라도 강의는 4점대로
진행하시고 강의 끝난 후에 버전을 올리시기를 적극 추천드립니다.
자 그러면 앞서서 생성한 MyDjango 폴더가 있는데요.
일단 Deactivate 명령으로 가사 환경을 빠져나오고 한 단계 올라가서
Workspace 폴더에서 이제 mydjango01 이라는 폴더를 만들고 01 이라는
폴더로 이동해서 현재의 경로에 django 프로젝트를 생성하겠습니다
저는 이제 윈도우에서 프로젝트를 생성하고 있는데요 윈도우는 파이명령 그리고 사용하실
버전이죠 파이리스트 명령을 내리시면 사용할 수 있는 Python 버전이 나오고 윈도우죠
3.11 하시면은 이제 윈도우에서 사용할 버전을 지정하시는 거고 맥이단 이눅스는 그 환경에
맞춰서 이제 파이썬 버전 하시고 파이엠 브 있으실 때는 파이엠 브이 로컬 사용하실 버전을
엔터 쳐서 생성하신 다음에 그 다음에 파이썬 버전 하시면은 원하시는 버전을 사용하실 수
있습니다 그쵸 python 3.11-nvmv vmv 명령으로 현재 폴더에 가상환경을 생성하겠습니다
이 부분이 python 명령이라고 보시면 되요
가상환경이 생성이 되었고 윈도우에서는 vmv-scripts-activate 명령을 주시면
가상환경이 활성화되고 맥이나 리눅스는 source-vmv-bin-activate 이렇게
하시면 됩니다
그래서 가상 환경 활성화 후에 이제 python 명령을 내주실 수 있죠
pip 명령도 있습니다
지금은 뭐 딱히 pip나 python 명령이 꼬일 일이 없는데 나중에 한 머신을 오래
쓰시다 보면 좀 패스가 꼬일 때도 있어요
그래서 저는 pip 명령 보다는 python -m pip 명령을 좀 쓰는 편입니다
이걸 쓰시면은 현재 Python 명령이 바라보는 인터프리터 혹은 가상 환경에 정확하게
Python 패키지가 설치가 되요
그래서 이렇게 설치를 하실 수 있고 장고는 틸드 물결는 4.2.0 이라고 하시면은
4.2 버전 중에 최신 버전이 설치가 됩니다
그래서 현재는 4.2.7 버전이 설치가 되고 있는데요
버전은 4.2 버전 대에서는 뒤에 있는 버그픽스 버전은 2.7 버전이 아니어도 상관없습니다
최신 버전 설치를 하시면 되겠구요
이제 django가 설치가 되었고 django 리미트 명령을 사용하실 수 있는데 이 부분도
python -m django 라는 명령을 사용하실 수 있어요
이 명령이 django-admin 명령이랑 같은 명령입니다.
start project mysite고 mysite라는 이름으로 프로젝트를 만드는데 .
마지막에 .을 꼭 넣어주세요 이렇게 넣어주시면
.이 현재 디렉토리를 의미합니다
현재 디렉토리에 project를 생성합니다
이렇게 보시면 현재 디렉토리에 manage.py가 생겼죠
점을 안 쓰시면 mysite 폴더가 생기고 그 밑에 mysite 폴더가 또 있고
manage.py가 생기는 거에요
한 단계 더 들어가는 거에요
끝에도 꼭 점을 넣어주세요
자 이렇게 하십니다
그러면 우리가 이제 개발 서버를 구동을 해보실 수 있어요
python manage.py runserver 라고 하시면은 개발 서버가 구동이 됩니다
여기 빨간색으로 이렇게 뜨는 부분은 아직 18개의 수행되지 않은 적용되지 않은
마이그레이션이 있다는 부분인데 이 부분은 이제 뒤에서 따로 수행을 해볼 것이구요
서버는 이 주소도 잘 떴습니다
이 주소도 이렇게 띄워봤구요
현재 페이지가 영문으로 나오죠
영문으로 나오는데 현재 이 서버는 잠깐 띄워두겠구요
띄워두겠고 자 스플릿 탭 기능을 통해서 이렇게 화면을 쪼갭니다
이것도 이제 윈도우 터미널의 기능인거에요
참 편리하죠
워크스페이스에 mysango01로 가서 venv에 scripts activate 이렇게 한번
활성화를 해 두실 수 있겠고 vscode를 현재 디렉토리 기준으로 열겠다고 하시면 이렇게
한번에 프로젝트 폴더를 이렇게 여실 수 있습니다.
됐죠? 처음으로 project를 vscode를 열었구요
workspace 폴더 신뢰하겠느냐 신뢰하겠다라고 해주겠습니다.
열시자마자 project 구조가 이렇게 동일해야 됩니다.
이렇게 동일 안하면은 프로젝트를 삭제했다가 다시 제 영상 보시고 다시 생성해서 차근차근
똑같이 구조를 만들어주세요
자 여기에 세팅 스파이를 여시면은 저 밑에 랭기지 코드란 부분이 있습니다
자 현재 웹이 영문으로 나오는데요
이 부분을 koqr 로 고치겠습니다
이렇게 고치시고 다시 가서 새로 고침 해보시면은 한글로 나오죠
이 부분이 이제 국제화 부분입니다
우리가 페이스북이나 혹은 여러 트위터나 혹은 여러 글로벌 서비스를 쓰면은 웹페이지 주소는
같은데 그 접속한 유저의 브라우저 언어 설정이나 OS 언어 설정에 따라서 한글 영어 언어가
맞춰서 나오잖아요
그런걸 이제 서버에서 지원해 줘야 되는데 그런 부분이 국제화 기능이고 이 랭기지 코드라는
설정은 디폴트 언어를 한글로 정한 부분이 되겠습니다 서버가 현재 8000 포트로
이렇게 구동 중인데 서버를 만약에 내가 장고 서버 여러개 띄워야 된다
Ctrl C 누르시면은 서버가 중단이 되겠구요
여기에서 Manage.py, Run Server 하실때 0.0.0.0에 포트를 9999
혹은 9000 이렇게 하시면은 지정하신 포트로 물어보는데 액세스 허용할 것이구요
자 지정하신 포트로 서버가 뜹니다
9000에 접속하실 때는 이 주소가 아니에요 0.0.0.0.0은 서버가 listen 즉
기다리는 주소인 거고 접속하실 때는 이 주소가 아니라 똑같이 localhost 혹은
127.0.0.1로 접근하시는 겁니다
그래서 9000 혹은 localhost가 될 수 있어요
되죠? localhost와 127.0.0.1은 완전히 같은 게 아니에요
그냥 같은 대상을 가리키는 거지 브라우저 입장에서는 로클로스트 주소와 127.0.0.1은
다른 주소입니다 서버가 같은 것 뿐이죠
자 기본 생성된 파일 디렉토리 목록인데요 우리가 이제 start project라는 명령으로
프로젝트를 만들었잖아요
그러면 그 기본 템플릿이 있어요
그 기본 템플릿은 django.conf의 projecttemplate 이라는 폴더에 있습니다
이 하단의 링크를 한번 눌러보시면은 이렇게 프로젝트 템플릿이 있고 TPL이 템플릿이라는
의미가 되겠습니다.
자 여기에 있는 구성으로 이렇게 생성을 해주는 거예요.
매니저 파일은 개발 시에 장고 진입점입니다.
장고에서는 진입점이 총 3개가 있어요.
매니저 파일과 hg.py와 wsgi.py가 있는데 개발 시에는 이 파일로부터 모든 장고
명령과 장고 서버가 시작이 되는 것이고 웹 서비스 실제 운영에서는 wsgi.py나
asgi.py 둘 중에 하나를 통해서 장고 웹 서비스가 구동이 됩니다
그래서 장고 채널스와 같이 웹소켓 지원이 들어간 장고 서버는 asgi.py로 구동이 되구요
채널스를 사용하지 않는 프로젝트는 WSGI로 서버가 구동이 돼요.
자, Settings 파일은 장고 기본 설정입니다.
Settings 파일을 열어보면은 실제 설정이 몇 개 없어요.
한번 가볼까요?
자, Settings 파일에 보시면은 총 라인 수가 124 라인밖에 없고 생각보다 설정이
몇 개 없습니다.
자 그런데 글로벌 세팅 파일 파일을 열어보시면은 설정이 좀 많습니다.
스콜 레드 보면 한 700개 아니죠
681행까지 있네요
이 많은 설정들이 장고 프로젝트의 기본 설정이 되겠습니다
자 그러면 우리 프로젝트의 세팅는 기본 설정이 있구요
그 설정들을 덮어 쓰는 설정들입니다
그래서 항상 기본 설정을 덮었을 때는 변수명이 똑같아야 됩니다
기본 설정의 변수명과 똑같은 이름으로 설정하셔야지만 덮어 쓰는 부분이 되겠구요
urls 파일은 요청을 처리하 url 패턴들을 리스트로 정의한 그런 파일이 되겠습니다
자 python manage.py 라는 명령을 우리가 주로 많이 수행을 하시게 될 텐데요
이 명령의 의미는 manage.py 라는 파일을 python 명령으로 실행을 하겠다는
의미가 되겠습니다
그러니 mani.py가 있는 디렉토리 경로에서 실행을 하셔야 돼요
다른 경로에서 그냥 기계적으로 우리가 c 디렉토리나 혹은 c의 유저스의 여러분들 유저
디렉토리나 그냥 바로 터미널 띄우자마자 기계적으로 python mani.py 명령을
실행하시는 분들이 있는데 그렇게 하시면 안 되고 항상 그 프로젝트 경로로 이동하신 다음에
그 경로에서 python manage.py 명령을 실행하셔야 되겠구요
만약 엉뚱한 경로에서 실행하시면은 이와 같이 no search file or
directory 라고 해서 현재 지정한 manage.py 명령을 파일을 못 찾았다
이런 오류가 발생하니까 이 오류가 발생하면 아 내가 경로를 잘못 찾았구나
그래서 경로를 확인해서 이동하셔서 수행하시면 되겠습니다
그리고 Python 명령은 Python Interpreter의 경로를 가리키며 수행하시는
Python Interpreter 혹은 가상 환경을 지정하는 절대 경로나 혹은 다른 이름이
될 수도 있어요
근데 개발할 때는 흔히 가상 환경을 활성화하면 대개는 Python이 됩니다
그리고 Python 명령은 그 프로젝트에서 사용하는 Python 가상 환경 혹은
인터프리터를 가리키고 있어야 돼요
자 그래서 현재 Python 명령이 이제 정확히 가상 환경을 혹은 내가 원하는 인터프리터를
가리키고 있는지 확인하려면 PowerShell 에서는 GetCommandPython 명령
그리고 Mac Linux 에서는 WhichPython 명령을 활용하시면은 경로 확인을 하실
수 있어요
꿀팁이에요 꼭 기억하시고 이건 중복이네요.
자, 프로젝트 초기화 작업 및 개발 서버 구동을 다시 해보겠습니다.
PowerShell에서는 GetCommandPythonSelectObjectSource
명령으로 Python극록 확인한다 했죠.
자, 한번 해볼까요?
소스 이렇게 하시면은 소스만 선택해서 보겠다
이렇게 하시면은 경로를 확인하실 수 있죠
자 매계단 이동수는 위치 python 하시면 되겠습니다
자 프로젝트 초기 작업인데요 python
manage.py migrate 명령을 수행하시면은 이와 같이 수행이 됩니다
이 명령은 Django 프로젝트에 미리 정의된 내역대로 데이터베이스 테이블을 자동으로
생성해 줍니다.
Django는 이미 기본에 구현되어 있는 기능들이 아주 많습니다.
사용자 인증 기능이나 Session 이나 여러가지 기능이 있는데 그 내역대로 데이터베이스
테이블을 생성해 주는 명령이 Migrate 에요.
Migrate 명령을 수행하고 Create Super User 명령으로 Super User
계정도 생성을 하고 나서 localhost:8000의 admin이라는 기능도 장고가 있습니다
그 주소로 접속하시면 우리가 아직 아무것도 구현하지 않았음에도 이런 로그인 페이지가 나오고
방금 생성한 이 명령에서 생성한 슈퍼 유저 계정으로 로그인을 하시면 되겠습니다
마이그레이트 명령을 수행 안했기 때문에 이 메시지가 뜨는 부분이 되겠구요
마이장고 공개되서 가사 환경이 활성화가 되어 있는 상황에서
python manage.py migrate 명령을 수행하시면 데이터베이스가 생성이 되는데 그
데이터베이스는 뭐냐면 여기 있는 db.sqlite3라는 파일이 되겠습니다
이 파일이에요 방금
생성이 된 파일이고 용량은 130kb 정도 되네요
그쵸 여기 생성이 되어 있습니다
그러면 만약에 서버를 다시 껐다가 서버를 다시 실행하니까 빨간색 경고가 없어졌죠.
migrate 명령을 수행해서 관련 데이터베이스 테이블을 다 생성했기 때문입니다.
자 이번에는 슈퍼 유저 계정을 생성해 보겠습니다
create to super user 라는 명령으로 실행하시면 사용자 명을 입력을 하시면
되겠구요 저는 myuser 라고 해볼게요
이메일 주소는 입력 안 하셔도 됩니다
옵션입니다 그냥
엔터 칠 것이구요
패스워드는 이미 입력하시면 되겠습니다 암호를 틀리게 해주면은 틀렸다고도 얘기하고요 암호를
QWER1234 처럼 간단하게 넣어주면은 너무 비밀번호가 일상적입니다
이런 부분도 암호 부분에 대한 암호에 대한 유효성 검사를 수행하는 로직이 장고 기본에 있고
암호를 검사하는 커스텀 룰로 여러분들이 추가하실 수 있어요
그래서 암호가 너무 일상적이지만 예스에서 이렇게 생성을 하실 수도 있습니다.
자 슈퍼 유저가 생성이 되었고요.
자 이제 8000번의 어드민 주소로 이동하시면 로그인 페이지가 뜨고 방금 생성하신
유저명으로 암호로 이렇게 로그인을 하실 수 있습니다.
됐죠? 자 여러분들은 여러분들이 직접 만드신 장고 서비스를 보고 계시는 겁니다.
이제 프로젝트에 .ignore 파일을 만들어 볼 텐데요 Git으로 버전 관리를 하신다면
.gitignore는 Git 버전 관리에 넣고 싶지 않은 파일들을 미리 정의를 해 두시는
겁니다 이렇게 vscode를 여신 다음에 빈 영역에 클릭하시고 파일하셔서
.gitignore입니다
점으로 시작하는 이유는 이것은 이제 리눅스의 파일명 컨벤션인데요 점으로 시작하는 파일
혹은 디젝토리는 숨김
파일 혹은 숨김 디젝토리의 의미가 되겠습니다
점 ID에는 파이참이나 JetBrains 계열의 툴들이 생성하는 설정 그런 폴더를 추가할 수도
있겠지만 저는 일단은 포함되지 않도록 무시하겠다 의미도 썼구요 가상 환경 폴더도 무시하고
데이터베이스도 꼭 무시합니다
무시를 해주셔야 되겠구요
절대 버전 관리에 넣지 않습니다
소스 파일만 넣는 거에요
그리고 Python 3에서 Python 소스 파일로부터 캐시 파일이 캐시 폴더가 생성이
되거든요 언더바 두 개입니다 앞뒤로 그래서 그 캐시 폴더도 꼭 무시하셔야 됩니다
그리고 Static Files라는 이제 최상위 경로에 프로젝트의 최상위 경로에 Static
Files가 폴더가 있으면 무시할 거고 Media Files 폴더도 무시하겠다 그리고
이거는 맥에서만 있는 건데 맥에서 생성되는 이런 파일이 있습니다
그래서 이런 파일들도 무시하겠다의 의미도 이렇게 지정을 했습니다
자 현재의 프로젝트를 git 커밋을 해보겠습니다
현재 말장구 공인은 git 저장소가 아니니까 git 입력 명령으로 이렇게 git 저장소
초기화를 해주겠구요
여러분들이 현재 머신에서 git을 처음 사용하신다면 git config --global
user.name 해서 여러분들의 git commit 이름을 지정을 해주세요 이렇게 지정을
해주시고 다음에 git config --global user.email 제 이메일 말고 여러분들의
이메일을 쓰셔야 돼요
그래야지만 git commit 하실 때 여러분들의 이메일로 기록이 되지
제 이메일을 똑같이 쓰시면 제 커밋으로 기록이 됩니다
그렇게 하면 안 되시고요
그 다음에 config get user.name 그리고 이메일 하시면 설정을
확인하실 수 있습니다
자 이제 git commit 을 해볼텐데요
git status 를 하시면 현재 아직 commit 되지 않은 내역들이 보여지죠
이렇게 보여지고 git add 점을 한번 해볼게요
점은 현재 디액터리고 이제 재기적으로 high 디액터리까지 추가가 됩니다
자 git status 해보시면 아직 commit 되지 않은 set 파일들이 있죠
데이터베이스 파일이나 혹은 타이 캐시 폴더 같은 것들이 없잖아요
있으면은 gitrm 명령으로 이제 제거해주는 거에요
이렇게 해주는 게 있고 지금은 다 정상적으로 들어가 있는 듯합니다 git
commit-m initial commit 하는 명령으로 이제 초기 커밋을 해주겠습니다
명령 명령을 내리시면 이렇게 제가 방금 컴퓨터 내용을 확인하실 수 있게 됩니다.
개발 브라우저는 Google Chrome을 쓰시기를 권장 드립니다.
여러가지 브라우저가 있죠.
Firefox나 요즘 Edge도 좋긴 하지만 아무래도 구글의 크롬 브라우저가 웹 개발은 주도하고
있으니까 웹서비스 개발 시에 웹블라우저는 가급적 구글 크롬을 쓰시는 것이 좋구요 그리고
운영체제의 기본 브라우저 설정도 구글 크롬으로 변경하시기를 권장드립니다
자 기본 블라우저 설정을 바꾸면 무엇이 좋냐면 이후 React 개발에서 개발 서버 구동시에
자동으로 기본 블라우저가 뜨는데 어차피 구글 쓸 거면 자동으로 구글 크롬이 뜨면 좋잖아요
그래서 기본을 바꾸시기를 권장드립니다