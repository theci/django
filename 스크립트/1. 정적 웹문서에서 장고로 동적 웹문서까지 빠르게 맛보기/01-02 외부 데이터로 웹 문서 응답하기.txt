앞선 코드에서는 데이터가 Python 코드에 포함이 되어 있었죠
그런데 Python 코드에 하드 코딩 된 데이터가 아니라 외부 데이터로 웹 문서를 만들어 보겠습니다 
더 많은 노래를 보여주고 싶어요
제가 멜론 탑100 차트를 크롤링해서 미리 제이손으로 파일을 생성을 해둔게 있습니다
그래서 이 주소를 통해서 제이손 파일을 읽으실 수 있겠구요
request라는 라이브러리를 통해서 get 요청을 하시면은 응답을 받아서 json 으로 변환을 하시면은 이렇게 Python 리스트로 받으실 수 있습니다
그래서 이 파일을 실행을 하시면은 이렇게 총 100곡 이구요
타입은 리스트고 이제 개별 항목은 사전이다
이 실행 결과죠
이렇게 확인하실 수 있고 song list를 출력하면 이렇게 Python 타입으로 잘 가공이 되었음을 확인하실 수 있습니다
현재 이 코드는 아래의 링크에서 확인을 하실 수 있어요 하실 수 있고 한번 수행해 보겠습니다 
링크로 가시면 이렇게 파일이 있습니다
그래서 이 코드를 복사하고요
자 소스코드에서 저는 여기에 main01.py라고 한번 이름을 주겠습니다
이 라이브러리가 필요하죠 필요하고요 
장고 개발 서버는 잠깐 끄고 pip install 혹은 python-n pip install requests 라고 하시면 이 requests 라이브러리가 설치가 됩니다
이제 python main01.py 라고 실행을 해보시면 이렇게 이 json 내역을 잘 받아와서 실행을 하고 있음을 확인을 하실 수 있어요
자 이번에는 인덱스 함수에서 멜론 데이터를 로딩을 해 보겠습니다
view 함수에서 이 코드를 입력해 볼 것이구요
외부 api 를 연동한다면 이렇게 해 볼 수 있습니다
자 여기 인덱스 함수가 있겠구요
현재 이 코드를 다 주석으로 처리하겠습니다
그리고 이제 request라는 request죠.
리퀘스트라는 라이벌리에서 이제 개담수를 호출해서요 그리고 주소는 여기에서 복사를 해오겠습니다.
복사해와서 json url이고요 빨간줄에서는 alt-enter를 입력해서
option-this-name 그리고 장고말고요 그냥 request로 선택을 해줍니다
그리고 응답을 받았죠
그리고 응답에서 raise_for_status 라고 해서 이렇게 입력을 했고 song list는 response의 json입니다
이렇게 하시면 이제 song list를 다 읽어와서 이 템플릿을 통해서 응답을 만들어 주는 거에요 
자 이렇게 저장을 하고 새로 고침을 해보시면은 이 데이터를 이렇게 받아와서 보여준 부분이 되겠구요 
이 response.raise_for_status는 응답이 정상응답이 아닐 때 예외를 발생시키겠다는 것이거든요.
그래서 만약에 이 주소를 제가 임의로 바꿔버렸습니다.
그럼 없는 주소예요.
그럼 새로고침 해보면은 이렇게 오류가 보여지게 되는데 이 부분을 흔히 우리가 웹에서 Internal Server Error라고 이야기하는 그런 상황이거든요.
그런 상황은 발생 안 하는 게 좋죠.
Internal Server Error는 서버에서 예기치 못한 오류가 발생했다는 거니까 
우리가 장고 뷰 내에서 호출할 때는 이렇게 처리하기보다 response에서 ok라는 게 있습니다. 
응답이 정상이냐를 판단해 주는 것이거든요.
판단은 상태 코드를 가지고 합니다.
그래서 정상이라면 이렇게 처리해주고 응답에 오류가 있다면 빈 리스트를 만들어주는 거죠
이렇게 해주시면은 이렇게 응답이 없는 상황이 만들어집니다
그리고 이제 112를 제거해주면은 이제 응답이 만들어지죠



이번에는 Python 코드에 하드코딩된 데이터 대신 외부 데이터를 활용해 웹 문서를 동적으로 생성하는 방법을 다뤘습니다. 주된 과정은 멜론 탑100 차트를 크롤링하여 데이터를 제이슨 파일로 가져오고, 이를 Django 뷰에서 사용하여 동적으로 노래 목록을 출력하는 방식입니다. 이 내용을 정리하면 다음과 같습니다:

1. 외부 데이터 활용하기 (JSON 데이터):
멜론 탑100 차트 데이터를 크롤링해서 JSON 파일로 저장합니다.
크롤링된 JSON 파일을 Python에서 읽어서 처리합니다. 이를 위해 requests 라이브러리로 외부 API에서 데이터를 GET 요청을 통해 받아옵니다.
requests.get(url)을 사용하여 JSON 데이터를 받아오고, 이를 response.json() 메서드로 Python 리스트 형태로 변환합니다.
2. Python 코드에서 외부 데이터 처리:
requests 라이브러리 설치:
bash
코드 복사
pip install requests
main01.py 파일을 작성하여 멜론 데이터를 가져오고, 이를 Python 리스트로 출력하는 방식으로 데이터가 잘 처리되고 있음을 확인합니다.
이때 반환된 JSON 데이터는 리스트 형태이며, 각 항목은 사전(dictionary) 형식입니다.
3. Django에서 외부 데이터 사용하기:
Django view 함수 내에서 외부 데이터를 로딩하여 웹 문서에 동적으로 표시할 수 있습니다.
requests 라이브러리를 이용해 외부 API를 호출하고, 받은 JSON 데이터를 song list 변수에 저장합니다.
예시 코드:

python
코드 복사
import requests

def index(request):
    url = "https://api.melon.com/songs"  # 실제 API 주소로 변경
    response = requests.get(url)
    response.raise_for_status()  # 정상 응답이 아닐 경우 예외 발생

    song_list = response.json()  # JSON 데이터를 Python 리스트로 변환
    return render(request, 'index.html', {'songs': song_list})
오류 처리:
API 요청이 실패하거나 응답이 비정상적인 경우를 처리하기 위해 response.raise_for_status()를 사용합니다. 이는 HTTP 상태 코드가 200이 아닐 경우 예외를 발생시킵니다.
만약 API가 비정상적인 응답을 한다면, response.ok를 사용하여 정상 응답인지 확인하고, 오류가 있으면 빈 리스트를 반환합니다.
4. 템플릿에서 외부 데이터 사용:
index.html 템플릿에서 노래 목록을 동적으로 출력하려면, 뷰 함수에서 전달한 song_list 데이터를 템플릿에서 반복문을 사용하여 표시합니다.
Django 템플릿에서 for 문을 사용하여 리스트를 순회하면서 노래 데이터를 출력할 수 있습니다.
5. 예외 처리:
외부 API 호출 시 예기치 못한 오류(예: 잘못된 URL)에 대비하여 오류를 처리하는 코드가 필요합니다.
예를 들어, 잘못된 URL로 요청을 보내면 "Internal Server Error"가 발생할 수 있으며, 이를 처리하지 않으면 사용자가 오류 화면을 보게 됩니다. 따라서, 오류가 발생할 경우 빈 리스트를 반환하여 빈 페이지가 보여지도록 할 수 있습니다.
6. 최종 결과:
멜론 API에서 데이터를 받아와서 Django를 통해 동적으로 웹 페이지를 생성하고, 그 데이터를 템플릿에서 표시하는 방식으로, 외부 데이터를 활용한 동적 웹 페이지가 생성되었습니다.
이 과정은 하드코딩된 데이터를 사용하는 대신, 실시간으로 외부 데이터를 불러와서 웹 페이지를 동적으로 생성하는 방법을 배운 것입니다.