이번 시간에는 정적 웹문서에서 동적 웹문서도 점점 진화해 나가는 과정을 한번 차근차근
살펴 보겠고요 동적 웹문서 부분은 이제 Django를 좀 살짝 끼얹어서 한번 살펴 보겠습니다
문서를 공유하고 잘 때는 워드나 파워포인트나 한글이나 그런 문서 파일을 만들어서 이렇게
공유를 하게 됩니다
근데 공유하려면 카톡으로 보낼 수도 있겠죠
혹은 이메일로 보낼 수도 있겠고 클라우드에 올려서 공유를 할 수도 있겠어요
이 워드 파일을 웹문서로 한번 만들어 보면은 웹브라우저만 있으면 볼 수 있잖아요
워드 프로그램들은 해당 프로그램이 있어야 되죠 웹문서로 만들어 보면 어떨까 워드에 보시면은
html 포맷으로 저장해주는 기능이 있어요
그래서 웹문서로 한번 만들어 봅니다
만들고 html을 열어보니까 정말 아주 복잡하고 라인수도 한 1100 라인이 넘어가죠
모든 문서를 HTML로 변환한 코드를 슬라이드 하단에 링크로 추가해 뒀는데요 한번 보시면
이렇게 깁니다 그쵸 엄청 길어요
자 이를 좀 간소화 시켜 봤습니다
이렇게 표현할 수 있겠구요
자 여기에 스타일을 한번 입혀보고 싶어요
그래서 CSS 를 추가합니다
a 태그는 원래는 밑줄이 나오거든요
기본 HTML은 밑줄을 없애고 body 태그에는 이제 뒤에 배경색도 넣고 body 태그에
가로 폭도 정해주고 margin 0 auto 라고 주면은 가운데 정렬이 됩니다
그리고 h1, p 에서 색깔로 지원해주고 span 태그의 DOC 클래스 네임에 대해서 색깔
지정해 줍니다. 이렇게 조금 이쁘게 나오죠.
근데 현재는 아직 정적인 문서의 성격입니다.
웹브라우저는 동적인 공간인데 아직 정적인 성격의 문서입니다.
자바스크립트를 넣어 봅니다.
토글리라는 버튼도 이렇게 넣어 보겠고요.
토글 버튼을 클릭을 하면 모든 p에 대해서 히든이라는 클래스 네임을 토글합니다
처음에는 히든 클래스를 추가했으니까 처음에는 안 보이는 상황인데 클릭을 하면 히든 클래스가
제거되었다가 다시 클릭하면 히든 클래스가 추가되는 거죠
히든 클래스는 디스플레이 논 디스플레이 논이면 화면에서 사라지는 거거든요
문서인데 조금 동적인 성격이 부여가 되었습니다 웹문서도 파일이잖아요?
그러면 이 파일도 공유하려면 카톡이나 이메일로 보내야 되는데 그냥 주소도 공유할 수는
없을까요? 주소만 공유하고 싶어요
이런 식으로 ip slash django.html 혹은 domain 주소 slash
jango.html 이렇게 하려면 무엇이 필요하냐면 서버 컴퓨터가 필요합니다
여러분들의 휴대폰이나 여러분들의 노트북도 서버가 될 수 있지만 서버 컴퓨터가 중요한 것은
외부 인터넷망에서 접속할 수 있는 네트워크가 있는 서버 컴퓨터가 있고 여기에 웹 서버
프로그램이 있으면 http 요청이 오면은 그 서버 프로그램이 이와 같은 HTML을
준비해뒀다가 혹은 동적으로 생성을 해도 돼요
웹브라우저에 이렇게 이쁘게 보여지는 것입니다
그래서 수동 HTML 편집이 아니라 프로그램이 HTML 문자열 문서를 자동으로 생성하도록
하고 싶어요 정적 웹서버 프로그램은 Nginx나 Apache나 Kestrel나 이런 웹서버
프로그램이 있습니다
이러한 웹서버는 정적인 즉 이미 생성되어 있는 HTML이나 이미지나 파일들을 서빙 즉
파일들을 찾아서 응답하는 데에 최적화되어 있습니다
그래서 이미 생성되어 있는 정적인 파일을 서빙하는 것들은 이 문서를 잘합니다
파일을 생성해두고 그런 파일들을 서빙하는 서비스는 Github 페이지나 넷플리파이나 버셀
같은 것들이 있어요
동적으로 응답을 생성하려면 웹서버 프로그램을 직접 구현하셔야 되겠고요 거의 모든 프로그래밍
언어로 구현하실 수 있습니다
http 요청이 오면 그때그때 html 문자를 동쪽으로 생성해서 응답하는 거예요
이때 서버 프로그램은 Python, JavaScript, Go, Java, C, PHP,
Ruby, Elixir, Rust, C++ 등 거의 모든 프로그래밍 언어로 다 하실 수
있습니다 우리는 Python으로 해보려는 거죠
Python에서는 4장 정적 웹 서버가 있습니다
그래서 Python만 설치되어 있으시면 Python-mhttp.server라는 이 명령을
주시면 8000번 포트로 정적인 서버가 뜨는 거예요 정적이라는 것은 이미 존재하는 파일들만
서빙하는 거고 현재 이 명령을 수행한 경로에 있는 파일들을 서빙합니다
경로에 index.html 파일명으로 이 HTML 있잖아요
localhost 8000 이라는 주소를 입력하시면 웹서버는 자동으로 index.html
파일을 읽어서 응답을 줍니다
이렇게 Python 4장 정적 웹 서버를 한번 활용을 해봤구요
장고로 웹문서 응답을 한번 해보겠습니다 장고 파이썬 웹 프레임워크 예시이겠구요
이 파일 하나가 전부입니다
장고도 플라스크처럼 파일 1개로 간단한 웹요청을 처리하실 수 있습니다
mydjango.py 이구요 하단의 링크에서 이 소스 코드를 복사하실 수 있습니다
앞서 실행했던 개발 서버는 꺼두시구요
우리가 mydjango01 이라는 폴더가 있었잖아요
한 단계 올라가서 mkdir mydjango02 라고 하나를 만들어 주겠구요
이 폴더 안으로 들어가신 다음에 가상 환경을 하나 만들겠습니다 윈도우는 이렇게 했죠
요런 식으로 해서 가상 환경을 만드시면 되고 저는 현재 Mac 환경입니다.
파이썬 가상 환경 로컬 3.11.6 으로 제가 사용할 파이썬 버전을 지정하고 해당 버전으로 가상
환경을 생성을 하겠습니다.
그럼 현재의 폴더를 파이참으로 열어주겠습니다.
파이참에서는 파이 메뉴의 오픈 메뉴를 통해서 여시면 되겠구요.
오픈으로 열겠습니다.
마이장고 공입 폴더를 열어주겠구요
새 윈도우를 열 거냐 기존 파이참에서 열 거냐인데 기존 파이참 윈도우에서 열겠습니다
vmv 가 있는 상황에서 제가 파이참을 열었기 때문에 이렇게 자동으로 파이썬 인터프리터를
파이참이 인식을 해줬네요
자 이제 루트에서 뉴 메뉴 통해서 제가 Django 프로젝트 생성 없이
mydjango.py 라는 파일을 생성해 주겠습니다
vmv 폴더 안에 만드는 게 아닙니다 바깥에 만드는 거에요
그럼 앞서 보여드린 코드를 이렇게 복사해서 붙여 놓습니다
이렇게 넣으시면 이렇게 생성이 되었죠
아 장고를 제가 설치를 안 했었나 보네요
그러면 가사 환경을 활성화 한 뒤에 Django를 설치를 해주겠습니다 Django 설치를 제가 빼먹었네요
인덱싱이 다시 이뤄지고 아 이제 사라졌습니다
이제 python mydjango.py라는 명령 그리고 run server라고 이렇게
지정하시면은 개발 서버가 뜹니다
자 클릭하시면 127.0.0.1에 8000이나 localhost로 접근하시면은 이렇게
hello.django.index라는 함수에서 이런 html 문자를 반환해줬죠.
django에서는 어떠한 http 요청을 받을 때마다 호출이 되어서 그 요청을 처리하고
응답을 생성, 반환하는 함수를 view라고 부릅니다.
이 HTML은 문자열이기 때문에 이렇게 정적인 상태일 수도 있겠고 우리가 이 부분에서
Python 코드를 통해서 동적으로 문자열을 만든 다음에 응답을 할 수도 있겠죠
자 HTML 예시가 있습니다
이와 같이 HTML을 구성하시면은 이런 스타일로 보여져요
테이블 태그로 곡명 가수 td 안에서 trd 각 여러 개 곡마다 반복이 되죠
td는 두번째 칸이죠
두번째 칸인데 음 이렇게 공명가수 공명가수 공명가수가 이렇게 반복되고 있고 하드코딩 된
형태가 되겠습니다
자 이 HTML도 앞서 공유 드린 이 gist 주소에서 index.HTML로 이렇게 공유를
해 드렸구요 자 Django 인덱스 함수에 한번 적용을 해 보겠습니다
http response라는 문자의 응답으로 한번 적용을 해 보는 거에요
이 부분에 코드를 치우고 이대로 붙여 넣게 합니다
Python 코드에 문자를 넣어서 붙여 넣었기 때문에 하나의 색깔로 보여지고 있죠.
장고 개발 서버로 자동 재시작이 되었습니다.
새로 고침하시면 이렇게 응답이 나왔죠.
자 이번에는 곡 목록 리스트를 Python 리스트로 관리하고 Python 코드로 이렇게
조합을 해서 HTML을 한번 만들어 보겠습니다.
공유해드린 이 기스트 페이지 하단에 보시면은 코드가 있어요.
인덱스에서 송리스트부터 파셜 html까지 복사해서 이 리턴 위에다가 붙여주시고요.
http 리스판스에서 전체를 복사해보죠.
리턴까지 복사해서 여기를 지우고 이렇게 붙여넣겠습니다.
이제 코드가 완성되었구요 다시
새로고침하셔도 똑같이 나오죠
이 중에 한 곡을 이렇게 빼고 주워가는 것은 윈도우는 컨트롤 슬롯이구요 맥은 커맨드
슬롯입니다
새로고침하시면 빠졌고 이렇게 다시 넣고 새로고침하시면은 다시 추가되었습니다
동적으로 이루어지고 있죠
자 이번에는 악뮤의 노래만 필터링 해서 보고 싶어요
여기 악뮤 노래가 총 3곡 있네요
제가 이 송 리스트를 순회 돌면서 tr 태그의 tr 아시템의 문자여를 조합했잖아요
그러면 포구몬이니까 여기에 if 조건문을 눌러서 송 작곡가 akmu 악뮤라고 추가하시면 이렇게
악뮤 노래만 필터링 하실 수 있습니다
그럼 여기에다가 제가 if 가수 == '악뮤' 이렇게 저장하시면은 악뮤만 필터링을 해서 보실 수
있습니다 템플릿 엔진을 활용을 해 볼 텐데요
자 이번에는 템플릿 엔진을 한번 활용을 해 보겠습니다
템플릿 엔진을 활용하시면 복잡한 문자애들 보다 수월하게 조합을 할 수 있어요
파이성 코드에서 직접 문자애를 조합하는 것은 한계가 있습니다
템플릿 엔진 사용을 위해서 Settings에서 Templates라는 설정으로 Django 템플릿
엔진을 이렇게 등록을 하겠구요.
Templates라는 폴더에서 템플릿 파일을 찾도록 설정해 줍니다.
이 설정에 맞춰서 HTML 파일은 Templates라는 폴더 밑에 index.html
경로에다가 저장을 할 것이구요.
이 index 함수에서 render라는 함수가 있습니다
이걸 활용하시면 지정경로의 템플릿을 활용하고 이 템플릿을 활용해서 렌더링 할 때에 필요한
데이터로 이렇게 정의하면은 짧은 코드로 손쉽게 템플릿 응답을 만들어 내실 수 있어요
filter라는 Python filter 함수를 활용해서 song list에서 song의
가수에 악뮤가 가수에 포함된 것만 필터링해서 템플릿을 통해서 렌더딩 토로 갑니다
코디만 변경하시면은 그때그때 멜론 리스트가 바뀐 곡 목록을 확인을 하실 수 있게 되는 거죠
마이장고03.py라는 파일로 준비를 해뒀습니다
이 중에 마이장고03.index.html 파일은 현재의 최상위 경로에서 템플릿스에
index.html 파일을 생성하시고 여기에다가 붙여넣기 해줍니다
파일경로 잘 보셔야 돼요
이제 요런 구성이 되겠구요
마이장고03도 파일 내용만 복사하셔가지고 말장구.py에다가 전체를 다 이렇게 바꿔주겠습니다
이렇게 바꿔주시면은 템플릿 설정이 들어가 있죠
자 새로고침 해보시면은 악뮤 노래만 보여지죠
보여지고 제가 악뮤 말고 제가 정 이라고만 써주겠습니다 정국 노래만 필터링이 되겠죠
가수 말고도 곡명으로 필터링 하시려면 여기에다가 오아 조건을 넣어보실 수 있겠죠
가수명이나 곡명의 둘 중에 하나 오아니까 포함된 경우에만 보여지는 거죠
여기에 만약에 러브라고 쓰시면 러브가 포함된 곡만 보여지게 됩니다