자 이번에는 검색을 지원을 해 보겠습니다 검색어 입력 폼을 먼저 만들어 볼 것입니다
html 내에서 폼 태그를 활용해서 검색어를 입력 받는 박스를 만들어 주겠습니다
그럼 이렇게 보여질 것이구요
스타일을 위해서 css 도 이렇게 입혀 볼게요
자 index.html 파일을 여시구요
멜론 리스트 밑에서 폼 태그를 먼저 만들고 입력된 값을 전송할 주소는 비워두겠습니다
주소를 비워두시면 현재 페이지가 보여지는 주소와 같은 주소로 요청을 보내게 됩니다
그리고 input에서 type은 text구요
서버로 전송될 때에 인자의 값은 Query 그리고 Placeholder는 검색어를 입력해주세요.
lock쓰시고 Auto Focus 옵션을 주시면 자동으로 포커스가 잡혀요.
새로 고치지 마시면 이렇게 보여지죠.
스타일링을 위해서 폼 태그를 쓰고 여기에서 마진 바텀은 10px 정도 지정을 하고 form의 input 태그에 대해서는 width는 100%를 지정해보겠습니다.
새로고침하시면 이렇게 css가 보여지고 있습니다.
그리고 추가로 autocomplete="off"라고 지정하시면 새로고침해보시면 이전에 입력된 검색어를 브라우저가 자동으로 보여주는데 그 기능을 끈 것이에요
그래서 폼태그에서 이 속성을 자주 활용하니까 기억해주세요
자 이번에는 서버에서 검색어를 입력받으면 그 검색어로 노래를 필터링해서 보여주도록 하겠습니다 
제가 악뮤라고 만약에 검색을 한다면 엔터를 쳐요
치면은 서버에서 응답은 아직 갔죠
왜냐면 서버에 인덱스 함수에서 아직 이 query는 악뮤 이 query는 여기에 인풋에 네임으로 주장한 이 query 이름을 따라서 서버로 이렇게 전송이 되는 겁니다
자 그러면 입력이 되면은 이 페이지가 새로 그려지는 거예요
새로 그려지면서 query는 악뮤를 인자를 붙여주죠
누가 붙였느냐 폼 태그가 자동으로 붙여준 겁니다
그럼 새롭게 페이지가 그려질 때에 그 인자는 request.args가 아니라 .get 이라고 이 대문자 속성이 있습니다
이 대문자 속성은 이 주소 뒤에 붙어 있는 값들을 우리가 Query String이라고 부르는데 그 Query String의 값을 가지고 있는 사전입니다
사전이고 그 사전에서 값을 하나 가지고 오는데 Query란 이름에 인자가 있으면 가져오고 없으면은 빗문자열 그리고 혹시 좌우 공백이 있으면 제거하겠습니다
보통 검색에서 공백은 의미가 없죠
좌우 공백은 이렇게 하시고 이 값을 query 즉 검색어입니다 
검색어가 있다면 이제 여기에서 필터링을 해줄 거에요
그래서 song_list 에서 우리가 필터라는 함수로 이렇게 검색을 해줄 수 있겠고 lambda 함수에서 song은 query가 in song 이전 했던 거죠
가수 이렇게 하시면은 첫번째 필터 python 의 필터 함수는 첫번째 인자로 필터링할 함수를 지정하고 두번째 인자로 필터링할 목록을 지정합니다
이렇게 하시면 필터링이 되요 자 저장하시고 새로고침을 한번 해볼게요
하시면은 악뮤만 나오죠
그리고 다시 검색어가 없다
지금 검색어에 값이 입력이 안되어 있는데 여기를 그냥 엔터를 치시면은 이렇게 다시 검색어가 없죠 
근데 검색어 부분도 만약에 검색이 되었을 때 채워주시려면 어떻게 해야 되냐면 이
검색어를 이 템플릿에다가 반영을 해주셔야 됩니다
그래서 song list 다음에 제가 qwerty라는 이름으로 qwerty라는 값을 이렇게 전달하겠다 이렇게 해주시면은 qwerty가 넘어가잖아요
그러면 이 input 태그 자체는 지금 새롭게 그려질때에 그려질때에 아무런 값이 없어요
페이지 소스 보기 한번 해보시면은 input 태그가 제가 쓴 대로 딱 들어있잖아요
근데 처음에 그려질때 어떤 값으로 채워지려면 value라는 속성으로 어떤 값을 채워주셔야 됩니다 
다시 새로고침 해보면 hello가 찍혀지죠
소스에도 보시면은 hello가 찍힙니다
그럼 이 위치에서 뭘 해줘야 되느냐
이 검색어를 이 위치에다가 위치 시켜주는 거예요
그럼 여기에서 중괄로 두 번 하시고 quad라고 씁니다
이 중괄로 두 개의 문법은 뒤에서 배우겠지만 장고 템플릿 문법이에요
그래서 이 변수의 값을 이 위치의 문자열로 찍어주는 겁니다
새로 고침해 보시면 악뮤라고 나오죠
그리고 여기도 새로 고침하시면은 악뮤라고 나옵니다
여기까지 해서 간단 검색을 구현을 해보았습니다



이번에는 검색 기능을 구현하는 방법을 설명했습니다. 주요 과정은 HTML 폼을 통해 검색어를 입력받고, 서버에서 해당 검색어로 데이터를 필터링한 후 결과를 다시 웹 페이지에 표시하는 방식입니다. 이 과정에서 사용된 주요 기술은 HTML, CSS, Django 뷰, 템플릿 문법입니다. 아래에 상세하게 정리해 보겠습니다.

1. 검색어 입력 폼 만들기 (HTML):
폼 태그를 사용하여 검색어를 입력받는 박스를 만듭니다.
폼 태그의 action 속성을 비워두면, 폼은 현재 페이지(같은 URL)로 요청을 보내게 됩니다.
input 태그를 사용하여 검색어를 입력받고, name="query"로 지정하여 이 값을 서버로 전송합니다.
Placeholder 속성으로 입력 예시를 제공하고, autofocus 속성으로 페이지 로딩 시 자동으로 포커스를 맞춥니다.
스타일링을 위해 CSS를 사용하여 폼의 **width를 100%**로 지정하고, 마진을 설정합니다.
autocomplete="off" 속성으로 브라우저의 자동 완성 기능을 끄고, 이전 검색어가 자동으로 입력되는 것을 방지합니다.
html
코드 복사
<form method="get">
    <input type="text" name="query" placeholder="검색어를 입력해주세요" autofocus autocomplete="off">
</form>
2. 서버에서 검색어 처리하기 (Django):
사용자가 검색어를 입력하고 엔터를 치면, 검색어는 query라는 이름으로 서버에 전송됩니다.
Django에서는 request.GET을 사용하여 URL에 포함된 쿼리 문자열에서 query 파라미터 값을 가져옵니다.
가져온 검색어가 있으면 해당 검색어로 song_list를 필터링합니다.
필터링은 Python의 filter() 함수와 lambda 함수를 사용하여, query가 곡명 또는 가수명에 포함된 항목들만 선택합니다.
python
코드 복사
query = request.GET.get('query', '').strip()  # 검색어 가져오기, 없으면 빈 문자열
if query:
    song_list = filter(lambda song: query.lower() in song['title'].lower() or query.lower() in song['artist'].lower(), song_list)
3. 검색어와 결과를 템플릿에 반영하기:
검색어가 있을 경우, 결과를 템플릿에 전달하여 동적으로 표시합니다.
템플릿에서 Django 템플릿 문법을 사용하여 검색어를 입력 폼의 value 속성에 반영합니다. 이를 통해, 사용자가 입력한 검색어가 페이지를 새로 고침해도 검색어 입력 박스에 다시 표시됩니다.
python
코드 복사
return render(request, 'index.html', {'songs': song_list, 'query': query})
템플릿에서 검색어 반영:

html
코드 복사
<input type="text" name="query" value="{{ query }}" placeholder="검색어를 입력해주세요" autofocus autocomplete="off">
4. 전체 흐름 요약:
사용자는 검색어를 입력 폼에 작성하고 제출합니다.
폼은 GET 요청을 통해 검색어를 서버로 전송합니다.
서버에서는 request.GET을 사용하여 검색어를 받아오고, song_list에서 해당 검색어를 포함한 항목만 필터링합니다.
필터링된 결과와 검색어를 템플릿에 전달하고, 템플릿에서 검색어를 value 속성에 반영하여 입력창에 표시합니다.
새로 고침 후에도 검색어가 그대로 남아있고, 결과가 필터링되어 웹 페이지에 출력됩니다.
5. 예시 코드 (Django):
views.py:

python
코드 복사
def index(request):
    song_list = get_songs()  # 노래 목록 가져오기
    query = request.GET.get('query', '').strip()  # 검색어 가져오기
    if query:
        song_list = filter(lambda song: query.lower() in song['title'].lower() or query.lower() in song['artist'].lower(), song_list)
    return render(request, 'index.html', {'songs': song_list, 'query': query})
index.html:

html
코드 복사
<form method="get">
    <input type="text" name="query" value="{{ query }}" placeholder="검색어를 입력해주세요" autofocus autocomplete="off">
</form>

<ul>
    {% for song in songs %}
        <li>{{ song.title }} - {{ song.artist }}</li>
    {% endfor %}
</ul>
6. 결과:
사용자가 검색어를 입력하고 제출하면, 서버에서 해당 검색어로 노래 목록을 필터링하여 검색 결과만 출력합니다.
검색어가 페이지에 자동으로 채워지며, 페이지 새로 고침 후에도 이전 검색어가 입력창에 남아있는 기능도 구현됩니다.
이 과정을 통해 검색 기능을 추가하여 사용자에게 더 직관적이고 실용적인 웹 페이지를 제공할 수 있습니다.